{
  "name": "hasivu-platform",
  "version": "1.0.0",
  "description": "School Food Service Platform with RFID Delivery Verification",
  "main": "dist/index.js",
  "engines": {
    "node": ">=18.19.0",
    "npm": ">=9.0.0"
  },
  "scripts": {
    "dev": "nodemon src/index.ts",
    "build": "tsc && npm run copy-assets",
    "start": "node dist/index.js",
    "copy-assets": "copyfiles -u 1 src/**/*.json src/**/*.sql dist/",
    "clean": "rimraf dist",
    "type-check": "tsc --noEmit",
    "lint": "eslint src --ext .ts,.js --max-warnings 0",
    "lint:fix": "eslint src --ext .ts,.js --fix",
    "format": "prettier --write \"src/**/*.{ts,js,json,md}\"",
    "format:check": "prettier --check \"src/**/*.{ts,js,json,md}\"",
    "test": "NODE_OPTIONS=\"--experimental-vm-modules\" jest",
    "test:unit": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --testPathPattern=unit",
    "test:integration": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --testPathPattern=integration",
    "test:e2e": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --testPathPattern=e2e",
    "test:coverage": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --coverage",
    "test:watch": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --watch",
    "test:smoke": "NODE_OPTIONS=\"--experimental-vm-modules\" jest --testPathPattern=smoke",
    "test:smoke:production": "cross-env NODE_ENV=production NODE_OPTIONS=\"--experimental-vm-modules\" jest --testPathPattern=smoke",
    "test:performance": "tsx scripts/run-performance-tests.ts",
    "perf:database": "tsx scripts/database-performance-analyzer.ts",
    "perf:lambda": "node scripts/lambda-performance-analyzer.js",
    "perf:realtime": "tsx scripts/real-time-performance-tests.ts",
    "perf:report": "node scripts/generate-performance-report.js",
    "perf:comprehensive": "tsx scripts/comprehensive-performance-orchestrator.ts",
    "perf:development": "tsx scripts/comprehensive-performance-orchestrator.ts development",
    "perf:staging": "tsx scripts/comprehensive-performance-orchestrator.ts staging",
    "perf:production": "tsx scripts/comprehensive-performance-orchestrator.ts production",
    "perf:quick": "tsx scripts/comprehensive-performance-orchestrator.ts quick",
    "test:performance:dev": "cross-env TEST_ENVIRONMENT=development TEST_TYPE=full tsx scripts/run-performance-tests.ts",
    "test:performance:staging": "cross-env TEST_ENVIRONMENT=staging TEST_TYPE=full tsx scripts/run-performance-tests.ts",
    "test:performance:production": "cross-env TEST_ENVIRONMENT=production TEST_TYPE=full tsx scripts/run-performance-tests.ts",
    "test:smoke:dev": "cross-env TEST_ENVIRONMENT=development TEST_TYPE=smoke tsx scripts/run-performance-tests.ts",
    "test:smoke:staging": "cross-env TEST_ENVIRONMENT=staging TEST_TYPE=smoke tsx scripts/run-performance-tests.ts",
    "test:load": "cross-env TEST_TYPE=load tsx scripts/run-performance-tests.ts",
    "test:load:dev": "cross-env TEST_ENVIRONMENT=development TEST_TYPE=load tsx scripts/run-performance-tests.ts",
    "test:load:staging": "cross-env TEST_ENVIRONMENT=staging TEST_TYPE=load tsx scripts/run-performance-tests.ts",
    "test:chaos": "cross-env TEST_TYPE=chaos tsx scripts/run-performance-tests.ts",
    "test:chaos:dev": "cross-env TEST_ENVIRONMENT=development TEST_TYPE=chaos tsx scripts/run-performance-tests.ts",
    "test:chaos:staging": "cross-env TEST_ENVIRONMENT=staging TEST_TYPE=chaos tsx scripts/run-performance-tests.ts",
    "test:e2e:comprehensive": "cross-env TEST_TYPE=e2e tsx scripts/run-performance-tests.ts",
    "db:migrate": "prisma migrate deploy",
    "db:migrate:dev": "prisma migrate dev",
    "db:migrate:reset": "prisma migrate reset",
    "db:seed": "tsx src/database/seed.ts",
    "db:studio": "prisma studio",
    "db:generate": "prisma generate",
    "db:push": "prisma db push",
    "docker:build": "docker build -f infrastructure/docker/Dockerfile -t hasivu-platform .",
    "docker:run": "docker run -p 3000:3000 hasivu-platform",
    "docker:compose:up": "docker-compose -f infrastructure/docker/docker-compose.yml up -d",
    "docker:compose:down": "docker-compose -f infrastructure/docker/docker-compose.yml down",
    "deploy": "bash scripts/deploy.sh",
    "deploy:dev": "serverless deploy --stage dev",
    "deploy:staging": "serverless deploy --stage staging",
    "deploy:production": "bash scripts/deploy.sh production",
    "deploy:production:blue-green": "serverless deploy --stage production",
    "deploy:promote": "echo 'Blue-green deployment promoted successfully'",
    "deploy:rollback": "bash scripts/deploy.sh production --rollback",
    "check:production": "node scripts/production-readiness-check.js",
    "health:check:production": "node scripts/health-check.js --env production",
    "test:e2e:staging": "cross-env NODE_ENV=staging jest --testPathPattern=e2e",
    "test:e2e:dev": "cross-env NODE_ENV=development jest --testPathPattern=e2e",
    "perf:monitor": "node -e \"require('./dist/src/services/performance.service.js').PerformanceService.startMonitoring()\"",
    "perf:benchmark": "node scripts/benchmark-apis.js",
    "db:performance:test": "tsx src/services/database-performance.service.ts",
    "db:performance:analyze": "tsx scripts/database-performance-analyzer.ts",
    "db:performance:optimize": "tsx -e \"import { databasePerformanceService } from './src/services/database-performance.service'; databasePerformanceService.applyAutomaticOptimizations().then(console.log)\"",
    "redis:performance:test": "node scripts/test-redis-performance.js",
    "health": "node scripts/healthcheck.js",
    "logs": "docker-compose -f infrastructure/docker/docker-compose.yml logs -f api",
    "security:audit": "npm audit --audit-level moderate",
    "security:fix": "npm audit fix",
    "prepare": "husky install",
    "precommit": "lint-staged",
    "release": "standard-version",
    "docs:generate": "typedoc --out docs src",
    "swagger:generate": "swagger-jsdoc -d swaggerDef.js src/**/*.ts -o swagger.json",
    "serverless:deploy": "serverless deploy",
    "serverless:deploy:dev": "serverless deploy --stage dev",
    "serverless:deploy:staging": "serverless deploy --stage staging",
    "serverless:deploy:prod": "serverless deploy --stage production",
    "serverless:offline": "serverless offline start",
    "serverless:remove": "serverless remove",
    "serverless:logs": "serverless logs",
    "lambda:test": "serverless offline start --httpPort 3001"
  },
  "keywords": [
    "school",
    "food-service",
    "rfid",
    "delivery-verification",
    "payment-gateway",
    "notifications",
    "nodejs",
    "typescript",
    "aws",
    "microservices"
  ],
  "author": "HASIVU Platform Team <platform@hasivu.com>",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/hasivu/platform.git"
  },
  "bugs": {
    "url": "https://github.com/hasivu/platform/issues"
  },
  "homepage": "https://github.com/hasivu/platform#readme",
  "dependencies": {
    "@aws-sdk/client-bedrock-runtime": "^3.873.0",
    "@aws-sdk/client-cloudwatch": "^3.876.0",
    "@aws-sdk/client-cognito-identity-provider": "^3.859.0",
    "@aws-sdk/client-dynamodb": "^3.873.0",
    "@aws-sdk/client-eventbridge": "^3.876.0",
    "@aws-sdk/client-kinesis": "^3.876.0",
    "@aws-sdk/client-s3": "^3.478.0",
    "@aws-sdk/client-sagemaker-runtime": "^3.875.0",
    "@aws-sdk/client-secrets-manager": "^3.478.0",
    "@aws-sdk/client-ses": "^3.478.0",
    "@aws-sdk/client-translate": "^3.876.0",
    "@aws-sdk/lib-dynamodb": "^3.873.0",
    "@aws-sdk/s3-request-presigner": "^3.478.0",
    "@prisma/client": "^5.7.1",
    "@sendgrid/mail": "^8.1.0",
    "@types/pg": "^8.15.5",
    "aws-lambda": "^1.0.7",
    "bcryptjs": "^2.4.3",
    "compression": "^1.7.4",
    "cors": "^2.8.5",
    "csv-parser": "^3.2.0",
    "dompurify": "^3.2.6",
    "dotenv": "^16.3.1",
    "envalid": "^8.1.0",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "express-validator": "^7.2.1",
    "firebase-admin": "^12.0.0",
    "helmet": "^7.1.0",
    "ioredis": "^5.3.2",
    "joi": "^17.11.0",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0",
    "multer": "^1.4.5-lts.1",
    "multer-s3": "^3.0.1",
    "node-cron": "^3.0.3",
    "node-fetch": "^3.3.2",
    "openai": "^4.104.0",
    "pg": "^8.16.3",
    "prisma": "^5.7.1",
    "puppeteer-core": "^21.5.2",
    "rate-limit-redis": "^4.2.1",
    "razorpay": "^2.9.2",
    "socket.io": "^4.7.4",
    "uuid": "^9.0.1",
    "winston": "^3.11.0",
    "winston-cloudwatch": "^6.2.0",
    "zod": "^4.1.3"
  },
  "devDependencies": {
    "@playwright/test": "^1.54.2",
    "@serverless/typescript": "^4.17.2",
    "@testing-library/jest-dom": "^6.6.4",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^14.6.1",
    "@types/aws-lambda": "^8.10.152",
    "@types/aws-sdk": "^0.0.42",
    "@types/bcryptjs": "^2.4.6",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/dompurify": "^3.0.5",
    "@types/express": "^4.17.21",
    "@types/express-rate-limit": "^6.0.0",
    "@types/helmet": "^4.0.0",
    "@types/jest": "^29.5.8",
    "@types/joi": "^17.2.3",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/morgan": "^1.9.9",
    "@types/multer": "^1.4.11",
    "@types/node": "^20.10.5",
    "@types/node-fetch": "^2.6.4",
    "@types/puppeteer-core": "^5.4.0",
    "@types/supertest": "^2.0.16",
    "@types/uuid": "^9.0.7",
    "@types/validator": "^13.15.2",
    "@types/winston": "^2.4.4",
    "@typescript-eslint/eslint-plugin": "^6.21.0",
    "@typescript-eslint/parser": "^6.21.0",
    "copyfiles": "^2.4.1",
    "cross-env": "^7.0.3",
    "eslint": "^8.55.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.0",
    "eslint-plugin-jest": "^27.6.0",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-security": "^1.7.1",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "lint-staged": "^15.2.0",
    "msw": "^2.10.4",
    "nodemon": "^3.0.2",
    "prettier": "^3.1.1",
    "rimraf": "^5.0.5",
    "serverless": "^4.17.2",
    "serverless-dotenv-plugin": "^4.0.2",
    "serverless-offline": "^14.4.0",
    "serverless-plugin-typescript": "^2.1.5",
    "serverless-prune-plugin": "^2.1.0",
    "standard-version": "^9.5.0",
    "supertest": "^6.3.3",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.0",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "tsx": "^4.6.2",
    "typedoc": "^0.25.4",
    "typescript": "^5.3.3"
  },
  "lint-staged": {
    "*.{ts,js}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{json,md}": [
      "prettier --write"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "pre-push": "npm run test:unit && npm run type-check"
    }
  },
  "prisma": {
    "seed": "tsx src/database/seed.ts"
  }
}
