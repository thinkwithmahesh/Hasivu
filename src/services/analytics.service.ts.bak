/**
 * HASIVU Platform - Analytics Service
 * Comprehensive analytics and reporting system with real-time metrics
 * Implements Epic 7: Advanced Features - Analytics and Business Intelligence
 * Generated by SuperClaude Wave 7: Epic 7 Implementation - COMPREHENSIVE
 */

// Re-export types for backward compatibility
export * from './analytics/types';

// Import service modules
import { MetricTrackingService } from './analytics/metric-tracking';
import { QueryExecutionService } from './analytics/query-execution';
import { DashboardGenerationService } from './analytics/dashboard-generation';
import { ReportGenerationService } from './analytics/report-generation';
import { CohortAnalysisService } from './analytics/cohort-analysis';
import { PredictiveAnalyticsService } from './analytics/predictive-analytics';
import { AnalyticsQuery, ServiceResponse, TimePeriod } from './analytics/types';

/**
 * Analytics service class - Main orchestrator
 */
export class AnalyticsService {
  /**
   * Initialize analytics service
   */
  public static async initialize(): Promise<void> {
    await MetricTrackingService.initialize();
  }

  /**
   * Track metric with dimensions and metadata
   */
  public static async trackMetric(
    name: string,
    value: number,
    dimensions: Record<string, string> = {},
    metadata?: Record<string, any>
  ): Promise<ServiceResponse<any>> {
    return MetricTrackingService.trackMetric(name, value, dimensions, metadata);
  }

  /**
   * Execute analytics query with aggregation
   */
  public static async executeQuery(query: AnalyticsQuery): Promise<ServiceResponse<any[]>> {
    return QueryExecutionService.executeQuery(query);
  }

  /**
   * Generate comprehensive dashboard data
   */
  public static async generateDashboard(
    dashboardId: string,
    userId: string,
    dateRange?: { start: Date; end: Date }
  ): Promise<ServiceResponse<any>> {
    return DashboardGenerationService.generateDashboard(dashboardId, userId, dateRange);
  }

  /**
   * Generate periodic reports (hourly, daily, weekly, monthly)
   */
  public static async generateReport(
    period: TimePeriod,
    reportType: 'summary' | 'detailed' | 'executive'
  ): Promise<ServiceResponse<any>> {
    return ReportGenerationService.generateReport(period, reportType);
  }

  /**
   * Generate cohort analysis for user retention
   */
  public static async generateCohortAnalysis(
    startDate: Date,
    endDate: Date
  ): Promise<ServiceResponse<any[]>> {
    return CohortAnalysisService.generateCohortAnalysis(startDate, endDate);
  }

  /**
   * Generate predictive analytics using historical data
   */
  public static async generatePredictiveAnalytics(): Promise<ServiceResponse<any>> {
    return PredictiveAnalyticsService.generatePredictiveAnalytics();
  }

  /**
   * Get real-time metrics for live dashboard
   */
  public static async getRealtimeMetrics(): Promise<Record<string, any>> {
    return MetricTrackingService.getRealtimeMetrics();
  }
}

// Export singleton instance
export const _analyticsService =  new AnalyticsService();