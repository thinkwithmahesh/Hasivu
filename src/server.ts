/**
 * HASIVU Platform - Server Entry Point
 * Main server startup file with environment validation
 * Generated by SuperClaude Final Integration
 */

import 'module-alias/register';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

import hasivu from './index';
import { config } from '@/config/environment';
import { logger, log } from '@/utils/logger';

/**
 * Validate environment variables before starting server
 */
function validateEnvironment(): void {
  const requiredEnvVars = [
    'NODE_ENV',
    'DATABASE_URL',
    'JWT_SECRET',
    'AWS_REGION'
  ];

  const missing = requiredEnvVars.filter(envVar => !process.env[envVar]);
  
  if (missing.length > 0) {
    logger.error('Missing required environment variables:', missing);
    process.exit(1);
  }

  // Validate environment-specific requirements
  if (config.server.nodeEnv === 'production') {
    const prodRequiredVars = ['AWS_ACCESS_KEY_ID', 'AWS_SECRET_ACCESS_KEY'];
    const missingProd = prodRequiredVars.filter(envVar => !process.env[envVar]);
    
    if (missingProd.length > 0) {
      logger.error('Missing required production environment variables:', missingProd);
      process.exit(1);
    }
  }

  logger.info('Environment validation completed successfully', {
    environment: config.server.nodeEnv,
    nodeVersion: process.version
  });
}

/**
 * Display startup banner
 */
function displayStartupBanner(): void {
  const banner = `
╔═══════════════════════════════════════════════════════════════╗
║                      HASIVU PLATFORM                         ║
║               School Food Service Platform                   ║
║                                                               ║
║    Environment: ${config.server.nodeEnv.toUpperCase().padEnd(8, ' ')}                                       ║
║    Port: ${config.server.port.toString().padEnd(4, ' ')}                                                   ║
║                                                               ║
║    Features:                                                  ║
║    ✅ RFID Delivery Verification                              ║
║    ✅ Real-time Order Tracking                                ║
║    ✅ Payment Gateway Integration                             ║
║    ✅ Multi-channel Notifications                             ║
║    ✅ WhatsApp Business Integration                           ║
║    ✅ Analytics & Reporting                                   ║
║    ✅ Socket.IO Real-time Updates                             ║
║                                                               ║
╚═══════════════════════════════════════════════════════════════╝
  `;

  console.log(banner);
  console.log(`🚀 Starting HASIVU Platform...`);
  console.log(`📍 Server will be available at: ${config.server.baseUrl}`);
  console.log(`🏥 Health Check: ${config.server.baseUrl}/api/v1/health`);
  console.log(`📚 API Documentation: ${config.server.baseUrl}/api/v1/docs`);
  console.log('');
}

/**
 * Main server startup function
 */
async function startServer(): Promise<void> {
  try {
    // Validate environment
    validateEnvironment();
    
    // Display startup banner
    displayStartupBanner();
    
    // Start the server
    const port = config.server.port || 3000;
    const host = config.server.host || 'localhost';
    
    hasivu.listen(port, host, () => {
      logger.info('🎉 HASIVU Platform started successfully', {
        environment: config.server.nodeEnv,
        port,
        host,
        processId: process.pid,
        nodeVersion: process.version,
        timestamp: new Date().toISOString()
      });
    });

  } catch (error) {
    logger.error('❌ Failed to start HASIVU Platform:', error);
    process.exit(1);
  }
}

/**
 * Handle uncaught exceptions and unhandled rejections
 */
process.on('uncaughtException', (error: Error) => {
  logger.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  logger.error('Unhandled Rejection at:', { promise, reason });
  process.exit(1);
});

// Graceful shutdown handling
process.on('SIGTERM', () => {
  logger.info('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  logger.info('SIGINT received, shutting down gracefully');
  process.exit(0);
});

// Start the server
if (require.main === module) {
  startServer();
}

export default hasivu;