/**
 * School access validation middleware for HASIVU Platform
 * Validates user access to school-specific resources and data
 */

import { Request, Response, NextFunction } from 'express';
import { logger } from '../services/logger.service';
import { DatabaseService } from '../services/database.service';

export interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    email: string;
    role: string;
    schoolId?: string;
    permissions?: string[];
  };
}

/**
 * Middleware to validate school access
 * Ensures users can only access data for schools they have permission to access
 */
export const validateSchoolAccess = async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  try {
    // Check if user is authenticated
    if (!req.user) {
      res.status(401).json({
        success: false,
        message: 'Authentication required',
        error: 'UNAUTHENTICATED'
      });
      return;
    }

    const userRole = req.user.role;
    const userSchoolId = req.user.schoolId || undefined;
    const requestedSchoolId = req.params.schoolId || req.query.schoolId || req.body.schoolId;

    // Super admin can access all schools
    if (userRole === 'super_admin') {
      logger.debug('School access granted for super admin', {
        userId: req.user.id,
        requestedSchoolId,
        path: req.path
      });
      return next();
    }

    // Admin can access all schools
    if (userRole === 'admin') {
      logger.debug('School access granted for admin', {
        userId: req.user.id,
        requestedSchoolId,
        path: req.path
      });
      return next();
    }

    // If no specific school requested, use user's school
    if (!requestedSchoolId) {
      if (!userSchoolId) {
        return res.status(400).json({
          success: false,
          message: 'School ID required for this operation',
          error: 'SCHOOL_ID_REQUIRED'
        });
      }

      // Set the school ID in the request for downstream processing
      req.params.schoolId = userSchoolId;
      req.query.schoolId = userSchoolId;
      req.body.schoolId = userSchoolId;

      return next();
    }

    // Validate that the requested school exists and user has access
    const hasAccess = await checkSchoolAccess(req.user.id, userRole, userSchoolId, requestedSchoolId);

    if (!hasAccess) {
      logger.warn('School access denied', {
        userId: req.user.id,
        userRole,
        userSchoolId,
        requestedSchoolId,
        path: req.path,
        method: req.method
      });

      res.status(403).json({
        success: false,
        message: 'Access denied to this school',
        error: 'SCHOOL_ACCESS_DENIED',
        requestedSchoolId,
        userSchoolId
      });
      return;
    }

    logger.debug('School access granted', {
      userId: req.user.id,
      userRole,
      requestedSchoolId,
      path: req.path
    });

    next();

  } catch (error: unknown) {
    logger.error('School access validation error', {
      error: (error instanceof Error ? error.message : String(error)),
      stack: (error instanceof Error ? error.stack : undefined),
      path: req.path,
      method: req.method,
      userId: req.user?.id
    });

    res.status(500).json({
      success: false,
      message: 'Internal server error during school access validation',
      error: 'MIDDLEWARE_ERROR'
    });
    return;
  }
};

/**
 * Check if user has access to a specific school
 */
async function checkSchoolAccess(
  userId: string,
  userRole: string,
  userSchoolId: string | undefined,
  requestedSchoolId: string
): Promise<boolean> {
  try {
    const db = DatabaseService.getInstance();

    // First verify the school exists
    const schoolQuery = 'SELECT id FROM schools WHERE id = ? AND is_active = true';
    const schoolResult = await db.query(schoolQuery, [requestedSchoolId]);

    if (schoolResult.length === 0) {
      return false; // School doesn't exist or is inactive
    }

    // Role-based access control
    switch (userRole) {
      case 'super_admin':
      case 'admin':
        return true; // Full access

      case 'school_admin':
      case 'staff':
      case 'teacher':
        // Can only access their own school
        return userSchoolId === requestedSchoolId;

      case 'parent':
        // Parents can access schools their children attend
        return await checkParentSchoolAccess(userId, requestedSchoolId);

      case 'student':
        // Students can only access their own school
        return userSchoolId === requestedSchoolId;

      default:
        return false;
    }

  } catch (error: unknown) {
    logger.error('Error checking school access', {
      userId,
      userRole,
      userSchoolId,
      requestedSchoolId,
      error: (error instanceof Error ? error.message : String(error))
    });
    return false;
  }
}

/**
 * Check if parent has access to a specific school through their children
 */
async function checkParentSchoolAccess(parentId: string, schoolId: string): Promise<boolean> {
  try {
    const db = DatabaseService.getInstance();

    // Check if parent has any children in the requested school
    const query = `
      SELECT COUNT(*) as count
      FROM users u
      JOIN parent_children pc ON u.id = pc.child_id
      WHERE pc.parent_id = ?
      AND u.school_id = ?
      AND u.role = 'student'
      AND u.is_active = true
    `;

    const result = await db.query(query, [parentId, schoolId]);
    return result[0].count > 0;

  } catch (error: unknown) {
    logger.error('Error checking parent school access', {
      parentId,
      schoolId,
      error: (error instanceof Error ? error.message : String(error))
    });
    return false;
  }
}

/**
 * Middleware to validate school ownership for operations that require school admin rights
 */
export const validateSchoolOwnership = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        message: 'Authentication required',
        error: 'UNAUTHENTICATED'
      });
      return;
    }

    const userRole = req.user.role;
    const userSchoolId = req.user.schoolId || undefined;
    const requestedSchoolId = req.params.schoolId || req.query.schoolId || req.body.schoolId;

    // Only school admins can perform ownership operations
    if (!['school_admin', 'admin', 'super_admin'].includes(userRole)) {
      res.status(403).json({
        success: false,
        message: 'School admin privileges required',
        error: 'INSUFFICIENT_PRIVILEGES'
      });
      return;
    }

    // School admins can only manage their own school
    if (userRole === 'school_admin' && userSchoolId !== requestedSchoolId) {
      res.status(403).json({
        success: false,
        message: 'Can only manage your own school',
        error: 'SCHOOL_OWNERSHIP_REQUIRED'
      });
      return;
    }

    next();

  } catch (error: unknown) {
    logger.error('School ownership validation error', {
      error: (error instanceof Error ? error.message : String(error)),
      stack: (error instanceof Error ? error.stack : undefined),
      path: req.path,
      method: req.method,
      userId: req.user?.id
    });

    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: 'MIDDLEWARE_ERROR'
    });
    return;
  }
};

/**
 * Middleware to validate cross-school access for analytics and reporting
 */
export const validateCrossSchoolAccess = async (req: AuthenticatedRequest, res: Response, next: NextFunction): Promise<void> => {
  try {
    if (!req.user) {
      res.status(401).json({
        success: false,
        message: 'Authentication required',
        error: 'UNAUTHENTICATED'
      });
      return;
    }

    const userRole = req.user.role;

    // Only admins and super admins can access cross-school data
    if (!['admin', 'super_admin'].includes(userRole)) {
      res.status(403).json({
        success: false,
        message: 'Cross-school access requires admin privileges',
        error: 'CROSS_SCHOOL_ACCESS_DENIED'
      });
      return;
    }

    next();

  } catch (error: unknown) {
    logger.error('Cross-school access validation error', {
      error: (error instanceof Error ? error.message : String(error)),
      stack: (error instanceof Error ? error.stack : undefined),
      path: req.path,
      method: req.method,
      userId: req.user?.id
    });

    res.status(500).json({
      success: false,
      message: 'Internal server error',
      error: 'MIDDLEWARE_ERROR'
    });
    return;
  }
};