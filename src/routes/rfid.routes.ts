/**
 * HASIVU Platform - RFID Routes
 * RFID card management and delivery verification endpoints
 * Phase 2.1: Extended RFID Features Implementation
 */

import { Router, Response } from 'express';
import { rfidService } from '@/services/rfid.service';
import { asyncHandler, createValidationError } from '@/middleware/error.middleware';
import { authMiddleware, AuthenticatedRequest } from '@/middleware/auth.middleware';

// Import extended RFID Lambda functions
import { bulkImportRfidCardsHandler } from '@/functions/rfid/bulk-import-cards';
import { getRfidCardHandler } from '@/functions/rfid/get-card';
import { manageReadersHandler } from '@/functions/rfid/manage-readers';
import { getRfidCardStatus, reportRfidIssue } from '@/functions/rfid/mobile-card-management';
import {
  getMobileTrackingHandler,
  updateTrackingStatusHandler,
} from '@/functions/rfid/mobile-tracking';
import {
  photoVerificationHandler,
  photoUploadRequestHandler,
  getPhotoVerificationHandler,
} from '@/functions/rfid/photo-verification';

const router = Router();

/**
 * Register RFID card
 * POST /rfid/cards
 */
router.post(
  '/cards',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const { cardNumber, studentId } = req.body;

    // Basic validation
    if (!studentId) {
      throw createValidationError('studentId is required');
    }

    // Fallback or autogenerated card number
    const generatedId = `RFID-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
    const finalCardNumber = cardNumber || generatedId;

    // Call RFID service to register
    const newCard = await rfidService.registerCard({
      cardNumber: finalCardNumber,
      studentId,
      schoolId: 'default-school-id', // TODO: Get from student or authenticated user context
      cardType: 'student' as const, // Default to student type
    });

    res.status(201).json({
      message: 'RFID card registered successfully',
      data: newCard,
    });
  })
);

/**
 * Deactivate RFID card
 * POST /rfid/cards/:id/deactivate
 */
router.post(
  '/cards/:id/deactivate',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const { id } = req.params;
    const { reason } = req.body;

    const result = await rfidService.deactivateCard(id);

    if (!result.success) {
      throw createValidationError(result.error?.message || 'Failed to deactivate card');
    }

    res.json({
      message: 'RFID card deactivated successfully',
      data: result.data,
    });
  })
);

/**
 * Bulk register RFID cards
 * POST /rfid/cards/bulk-register
 */
router.post(
  '/cards/bulk-register',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const { schoolId, cards } = req.body;

    if (!schoolId || !Array.isArray(cards)) {
      throw createValidationError('schoolId and cards array are required');
    }

    const result = await rfidService.bulkRegisterCards({ schoolId, cards });

    res.status(201).json({
      message: 'RFID cards bulk registered successfully',
      data: result.data,
    });
  })
);

/**
 * Get verification history
 * GET /rfid/verifications
 */
router.get(
  '/verifications',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const {
      cardNumber,
      studentId,
      schoolId,
      readerId,
      orderId,
      startDate,
      endDate,
      page = 1,
      limit = 20,
    } = req.query;

    const query: any = {
      page: Number(page),
      limit: Number(limit),
    };

    if (cardNumber) query.cardNumber = cardNumber as string;
    if (studentId) query.studentId = studentId as string;
    if (schoolId) query.schoolId = schoolId as string;
    if (readerId) query.readerId = readerId as string;
    if (orderId) query.orderId = orderId as string;
    if (startDate) query.startDate = new Date(startDate as string);
    if (endDate) query.endDate = new Date(endDate as string);

    const result = await rfidService.getVerificationHistory(query);

    if (!result.success) {
      throw createValidationError(result.error?.message || 'Failed to get verification history');
    }

    res.json({
      message: 'Verification history retrieved successfully',
      data: result.data,
    });
  })
);

/**
 * Get RFID analytics
 * GET /rfid/analytics
 */
router.get(
  '/analytics',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const { schoolId, startDate, endDate, groupBy } = req.query;

    const query: any = {};
    if (schoolId) query.schoolId = schoolId as string;
    if (startDate) query.startDate = new Date(startDate as string);
    if (endDate) query.endDate = new Date(endDate as string);
    if (groupBy) query.groupBy = groupBy as 'day' | 'week' | 'month';

    const result = await rfidService.getCardAnalytics(query);

    if (!result.success) {
      throw createValidationError(result.error?.message || 'Failed to get analytics');
    }

    res.json({
      message: 'RFID analytics retrieved successfully',
      data: result.data,
    });
  })
);

/**
 * Extended RFID Features - Phase 2.1
 * Additional endpoints for bulk operations, mobile integration, and advanced verification
 */

/**
 * Bulk Import RFID Cards
 * POST /rfid/cards/bulk-import
 */
router.post(
  '/cards/bulk-import',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    // Forward to Lambda function
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      pathParameters: {},
      queryStringParameters: req.query,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await bulkImportRfidCardsHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

/**
 * Get Single RFID Card Details
 * GET /rfid/cards/{cardNumber}
 */
router.get(
  '/cards/:cardNumber',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      pathParameters: { cardNumber: req.params.cardNumber },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await getRfidCardHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

/**
 * Manage RFID Readers (CRUD operations)
 * POST/PUT/GET/DELETE /rfid/readers
 */
router.post(
  '/readers',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      pathParameters: {},
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await manageReadersHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.put(
  '/readers/:readerId',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'PUT',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      pathParameters: { readerId: req.params.readerId },
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await manageReadersHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.get(
  '/readers',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      queryStringParameters: req.query,
      headers: (req as any).headers,
      pathParameters: {},
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await manageReadersHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.get(
  '/readers/:readerId',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      pathParameters: { readerId: req.params.readerId },
      queryStringParameters: req.query,
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await manageReadersHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.delete(
  '/readers/:readerId',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'DELETE',
      pathParameters: { readerId: req.params.readerId },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await manageReadersHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

/**
 * Mobile Card Management - Parent Access
 * GET /rfid/mobile/students/{studentId}/card
 * POST /rfid/mobile/issues
 */
router.get(
  '/mobile/students/:studentId/card',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      pathParameters: { studentId: req.params.studentId },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await getRfidCardStatus(event as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.post(
  '/mobile/issues',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await reportRfidIssue(event as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

/**
 * Mobile Real-time Tracking
 * GET /rfid/mobile/students/{studentId}/tracking
 * PUT /rfid/mobile/orders/{orderId}/tracking
 */
router.get(
  '/mobile/students/:studentId/tracking',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      pathParameters: { studentId: req.params.studentId },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await getMobileTrackingHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.put(
  '/mobile/orders/:orderId/tracking',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'PUT',
      body: JSON.stringify(req.body),
      pathParameters: { orderId: req.params.orderId },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await updateTrackingStatusHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

/**
 * Photo Verification for Delivery
 * POST /rfid/photo-verification
 * POST /rfid/photo-verification/upload-url
 * GET /rfid/photo-verification/{verificationId}
 */
router.post(
  '/photo-verification',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await photoVerificationHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.post(
  '/photo-verification/upload-url',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'POST',
      body: JSON.stringify(req.body),
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await photoUploadRequestHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

router.get(
  '/photo-verification/:verificationId',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const event = {
      httpMethod: 'GET',
      pathParameters: { verificationId: req.params.verificationId },
      headers: (req as any).headers,
      requestContext: {
        authorizer: {
          principalId: req.user?.id,
        },
      },
    };

    const result = await getPhotoVerificationHandler(event as any, {} as any);
    res.status(result.statusCode).json(JSON.parse(result.body));
  })
);

export { router as rfidRouter };
