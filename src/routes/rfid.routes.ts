/**
 * HASIVU Platform - RFID Routes
 * RFID card management and delivery verification endpoints
 */

import { Router, Request, Response } from 'express';
import { RFIDService } from '@/services/rfid.service';
import { logger } from '@/utils/logger';
import {
  asyncHandler,
  createValidationError,
  createNotFoundError,
} from '@/middleware/error.middleware';
import {
  authMiddleware,
  AuthenticatedRequest,
} from '@/middleware/auth.middleware';

const router = Router();

/**
 * Register RFID card
 * POST /rfid/cards
 */
router.post(
  '/cards',
  authMiddleware,
  asyncHandler(async (req: AuthenticatedRequest, res: Response) => {
    const { cardNumber, studentId } = req.body;

    // Basic validation
    if (!studentId) {
      throw createValidationError('studentId is required');
    }

    // Fallback or autogenerated card number
    const generatedId = `RFID-${Date.now()}-${Math.random()
      .toString(36)
      .substring(2, 9)}`;
    const finalCardNumber = cardNumber || generatedId;

    // Call RFID service to register  
    const newCard = await RFIDService.registerCard({
      cardNumber: finalCardNumber,
      studentId,
      schoolId: 'default-school-id', // TODO: Get from student or authenticated user context
      cardType: 'student' as const, // Default to student type
    });

    res.status(201).json({
      message: 'RFID card registered successfully',
      data: newCard,
    });
  })
);

export { router as rfidRouter };
