/**
 * HASIVU Platform - RFID Routes
 * RFID card management and delivery verification endpoints
 */

import { Router } from 'express';
import { RFIDService } from '@/services/rfid.service';
import {
  asyncHandler,
  createValidationError,
} from '@/middleware/error.middleware';
import {
  authMiddleware,
  AuthenticatedRequest,
} from '@/middleware/auth.middleware';
// Import response utilities to enable extended Response methods
import '@/shared/utils/response';

const _router =  Router();

/**
 * Register RFID card
 * POST /rfid/cards
 */
router.post(
  '/cards',
  authMiddleware as any,
  (asyncHandler as any)(async (req: AuthenticatedRequest, res: any) => {
    const { cardNumber, studentId } = req.body;

    // Basic validation
    if (!studentId) {
      throw createValidationError('studentId is required');
    }

    // Fallback or autogenerated card number
    const _generatedId =  `RFID-${Date.now()}-${Math.random()
      .toString(36)
      .substring(2, 10)}`;
    const _finalCardNumber =  cardNumber || generatedId;

    // Get school ID from authenticated user context
    const _schoolId =  req.user?.schoolId || 'default-school-id';

    // Call RFID service to register
    const _result =  await RFIDService.registerCard({
      cardNumber: finalCardNumber,
      studentId,
      schoolId,
      cardType: 'student' as const, // Default to student type
    });

    // Check service response and handle errors
    if (!result.success) {
      throw createValidationError(result.error?.message || 'Failed to register RFID card');
    }

    res.status(201).json({
      message: 'RFID card registered successfully',
      data: result.data,
    });
  })
);

export { router as rfidRouter };