name: Optimized CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  AWS_REGION: 'ap-south-1'
  BUILD_TIMEOUT: 900 # 15 minutes

jobs:
  # Parallel setup jobs for different components
  setup-backend:
    name: Setup Backend Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.backend-cache }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "backend-cache=${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache-keys.outputs.backend-cache }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install backend dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

  setup-frontend:
    name: Setup Frontend Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-keys.outputs.frontend-cache }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "frontend-cache=${{ runner.os }}-node-${{ hashFiles('web/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Cache frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.npm
          key: ${{ steps.cache-keys.outputs.frontend-cache }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install frontend dependencies
        run: cd web && npm ci --prefer-offline --no-audit --no-fund

  # Parallel quality checks
  code-quality-backend:
    name: Backend Code Quality
    runs-on: ubuntu-latest
    needs: setup-backend
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore backend dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-backend.outputs.cache-key }}

      - name: Lint backend
        run: npm run lint

      - name: Type check backend
        run: npm run type-check

      - name: Format check backend
        run: npm run format:check

  code-quality-frontend:
    name: Frontend Code Quality
    runs-on: ubuntu-latest
    needs: setup-frontend
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Restore frontend dependencies
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-frontend.outputs.cache-key }}

      - name: Lint frontend
        run: cd web && npm run lint

      - name: Type check frontend
        run: cd web && npm run type-check

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [setup-backend, setup-frontend]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-backend.outputs.cache-key }}

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=high || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json > snyk-results.json || true

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            npm-audit-results.json
            snyk-results.json
          retention-days: 30

  # Parallel test execution
  unit-tests-backend:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: setup-backend
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-backend.outputs.cache-key }}

      - name: Run backend unit tests
        run: npm run test:unit -- --coverage --maxWorkers=2 --detectOpenHandles

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: backend-unittests
          name: backend-codecov

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-unit-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  unit-tests-frontend:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: setup-frontend
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-frontend.outputs.cache-key }}

      - name: Run frontend unit tests
        run: cd web && npm run test:unit -- --coverage --maxWorkers=2 --watchAll=false

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: ./web/coverage/coverage-final.json
          flags: frontend-unittests
          name: frontend-codecov

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-unit-test-results
          path: |
            web/coverage/
            web/test-results/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup-backend, setup-frontend]
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: hasivu_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --tmpfs /var/lib/postgresql/data
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-backend.outputs.cache-key }}

      - name: Setup test database
        run: |
          npm run db:generate
          npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hasivu_test

      - name: Run integration tests
        run: npm run test:integration -- --coverage --maxWorkers=2
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/hasivu_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Parallel builds
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [code-quality-backend, security-scan, unit-tests-backend]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup-backend.outputs.cache-key }}

      - name: Build backend
        run: npm run build

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: |
            dist/
            package*.json
          retention-days: 7

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [code-quality-frontend, security-scan, unit-tests-frontend]
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-frontend.outputs.cache-key }}

      - name: Build frontend
        run: cd web && npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_TELEMETRY_DISABLED: 1

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            web/.next/
            web/public/
            web/package*.json
          retention-days: 7

  # Optimized Docker build with better caching
  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, integration-tests]
    if: github.event_name == 'push'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/hasivu-platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/hasivu-platform:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/hasivu-platform:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}

  # E2E tests run in parallel with Docker build
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            web/node_modules
            ~/.npm
          key: ${{ needs.setup-frontend.outputs.cache-key }}

      - name: Install Playwright browsers
        run: cd web && npx playwright install --with-deps

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: web/

      - name: Run E2E tests
        run: cd web && npm run test:playwright
        env:
          BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            web/playwright-report/
            web/test-results/
          retention-days: 7

  # Blue-green deployment jobs
  deploy-staging:
    name: Deploy to Staging (Blue-Green)
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.hasivu.com
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging (blue-green)
        run: |
          DEPLOYMENT_ID=$(date +%s)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

          # Blue-green deployment logic
          npm run deploy:staging:blue-green
        env:
          STAGE: staging
          DEPLOYMENT_STRATEGY: blue-green

      - name: Run smoke tests
        run: npm run test:smoke:staging
        env:
          BASE_URL: https://staging.hasivu.com

      - name: Switch traffic (blue-green)
        run: npm run switch:traffic:staging
        env:
          DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}

      - name: Notify deployment success
        if: success()
        run: |
          BUILD_TIME=$((SECONDS - START_TIME))
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"✅ Staging deployment successful!\\nCommit: ${{ github.sha }}\\nBuild Time: ${BUILD_TIME}s\\nEnvironment: https://staging.hasivu.com\"}"

      - name: Rollback on failure
        if: failure()
        run: |
          npm run rollback:staging
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"❌ Staging deployment FAILED!\\nCommit: ${{ github.sha }}\\nRollback initiated.\"}"

  deploy-production:
    name: Deploy to Production (Blue-Green)
    runs-on: ubuntu-latest
    needs: [docker-build, e2e-tests]
    if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://hasivu.com
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run production readiness check
        run: npm run check:production

      - name: Deploy to production (blue-green)
        run: |
          DEPLOYMENT_ID=$(date +%s)
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV

          npm run deploy:production:blue-green
        env:
          STAGE: production
          DEPLOYMENT_STRATEGY: blue-green

      - name: Run smoke tests
        run: npm run test:smoke:production
        env:
          BASE_URL: https://hasivu.com

      - name: Health check
        run: npm run health:check:production

      - name: Switch traffic (blue-green)
        run: npm run switch:traffic:production
        env:
          DEPLOYMENT_ID: ${{ env.DEPLOYMENT_ID }}

      - name: Notify deployment success
        if: success()
        run: |
          BUILD_TIME=$((SECONDS - START_TIME))
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"🚀 Production deployment successful!\\nCommit: ${{ github.sha }}\\nBuild Time: ${BUILD_TIME}s\\nEnvironment: https://hasivu.com\\nDeployment Frequency: Check metrics\"}"

      - name: Rollback on failure
        if: failure()
        run: |
          npm run rollback:production
          curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"text\":\"💥 Production deployment FAILED!\\nCommit: ${{ github.sha }}\\nRollback initiated.\\nCheck logs for details.\"}"

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Calculate build metrics
        run: |
          echo "Build completed in $((SECONDS - START_TIME)) seconds"
          echo "BUILD_DURATION=$((SECONDS - START_TIME))" >> $GITHUB_ENV

      - name: Send metrics to monitoring
        run: |
          # Send build duration and success/failure metrics
          curl -X POST ${{ secrets.METRICS_WEBHOOK_URL }} \
            -H 'Content-Type: application/json' \
            -d "{\"build_duration\": ${{ env.BUILD_DURATION }}, \"success\": ${{ job.status == 'success' }}, \"commit\": \"${{ github.sha }}\"}" || true
