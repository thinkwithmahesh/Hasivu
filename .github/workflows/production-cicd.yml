name: HASIVU Platform - Production CI/CD Pipeline
# Priority 6: Production Deployment & CI/CD
# Comprehensive pipeline for 10/10 production readiness

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.15.0'
  DATABASE_URL: 'postgresql://test:test@localhost:5432/hasivu_test'
  REDIS_URL: 'redis://localhost:6379'

jobs:
  # === STAGE 1: CODE QUALITY & SECURITY ===
  code-quality:
    name: 'Code Quality & Linting'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ESLint Check
        run: pnpm run lint

      - name: TypeScript Type Check
        run: pnpm run type-check

      - name: Prettier Format Check
        run: pnpm run format:check

      - name: Dependency Vulnerability Scan
        run: pnpm audit --audit-level moderate

  # === STAGE 2: SECURITY SCANNING ===
  security-scan:
    name: 'Security & Vulnerability Scanning'
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - uses: actions/checkout@v4

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'

  # === STAGE 3: COMPREHENSIVE TESTING ===
  unit-tests:
    name: 'Unit & Integration Tests'
    runs-on: ubuntu-latest
    needs: [code-quality]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: hasivu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Database
        run: |
          pnpm run db:migrate:test
          pnpm run db:seed:test

      - name: Run Unit Tests
        run: pnpm run test:unit --coverage

      - name: Run Integration Tests
        run: pnpm run test:integration

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: hasivu-coverage

  # === STAGE 4: END-TO-END TESTING ===
  e2e-tests:
    name: 'End-to-End Testing'
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: hasivu_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm exec playwright install --with-deps

      - name: Setup Test Database
        run: |
          pnpm run db:migrate:test
          pnpm run db:seed:e2e

      - name: Build Application
        run: pnpm run build
        env:
          NODE_ENV: test

      - name: Start Application
        run: |
          pnpm run start &
          sleep 30
        env:
          NODE_ENV: test

      - name: Run E2E Tests
        run: pnpm run test:e2e
        env:
          PLAYWRIGHT_HEADLESS: true

      - name: Upload E2E Test Results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: test-results/

  # === STAGE 5: PERFORMANCE TESTING ===
  performance-tests:
    name: 'Performance & Load Testing'
    runs-on: ubuntu-latest
    needs: [unit-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: hasivu_test
        ports:
          - 5432:5432

      redis:
        image: redis:7
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Application
        run: pnpm run build

      - name: Start Application
        run: |
          pnpm run start &
          sleep 30

      - name: Install Artillery
        run: npm install -g artillery@latest

      - name: Run Performance Tests
        run: |
          artillery run tests/performance/api-load-test.yml
          artillery run tests/performance/concurrent-users-test.yml
          artillery run tests/performance/lunch-rush-simulation.yml

      - name: Performance Regression Check
        run: pnpm run test:performance:compare

  # === STAGE 6: ACCESSIBILITY TESTING ===
  accessibility-tests:
    name: 'Accessibility Compliance (WCAG 2.1 AA)'
    runs-on: ubuntu-latest
    needs: [e2e-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Application
        run: pnpm run build

      - name: Start Application
        run: |
          pnpm run start &
          sleep 30

      - name: Run axe-core Accessibility Tests
        run: pnpm run test:accessibility

      - name: Run Pa11y Accessibility Scanner
        run: |
          npm install -g pa11y
          pa11y http://localhost:3000 --standard WCAG2AA --reporter json > accessibility-report.json

      - name: Upload Accessibility Report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-report
          path: accessibility-report.json

  # === STAGE 7: BUILD & CONTAINERIZATION ===
  build-and-containerize:
    name: 'Build & Container Images'
    runs-on: ubuntu-latest
    needs: [security-scan, unit-tests, e2e-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: hasivu/platform
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Container Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'hasivu/platform:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # === STAGE 8: DEPLOYMENT STAGING ===
  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build-and-containerize, performance-tests, accessibility-tests]
    if: github.ref == 'refs/heads/develop'

    environment:
      name: staging
      url: https://staging.hasivu.edu.in

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Deploy to EKS Staging
        run: |
          aws eks update-kubeconfig --region ap-south-1 --name hasivu-staging
          kubectl set image deployment/hasivu-web hasivu-web=hasivu/platform:${{ github.sha }} -n staging
          kubectl rollout status deployment/hasivu-web -n staging --timeout=600s

      - name: Run Smoke Tests on Staging
        run: |
          sleep 60
          curl -f https://staging.hasivu.edu.in/health || exit 1
          pnpm run test:smoke:staging

      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # === STAGE 9: PRODUCTION DEPLOYMENT ===
  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'

    environment:
      name: production
      url: https://app.hasivu.edu.in

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ap-south-1

      - name: Pre-deployment Database Backup
        run: |
          aws rds create-db-snapshot \
            --db-snapshot-identifier hasivu-prod-backup-$(date +%Y%m%d%H%M%S) \
            --db-instance-identifier hasivu-prod

      - name: Blue-Green Deployment to Production
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --region ap-south-1 --name hasivu-production

          # Deploy to green environment
          kubectl set image deployment/hasivu-web-green hasivu-web=hasivu/platform:${{ github.sha }} -n production
          kubectl rollout status deployment/hasivu-web-green -n production --timeout=600s

          # Health check on green
          kubectl port-forward service/hasivu-web-green 8080:80 -n production &
          sleep 30
          curl -f http://localhost:8080/health || exit 1

          # Switch traffic to green
          kubectl patch service hasivu-web -n production -p '{"spec":{"selector":{"version":"green"}}}'

          # Wait for traffic switch
          sleep 30

          # Final health check
          curl -f https://app.hasivu.edu.in/health || exit 1

      - name: Post-deployment Verification
        run: |
          # Run critical path tests
          pnpm run test:smoke:production

          # Check all services
          kubectl get pods -n production

          # Verify database connectivity
          pnpm run db:health:production

      - name: Cleanup Old Deployment
        run: |
          # Scale down blue environment
          kubectl scale deployment hasivu-web-blue --replicas=0 -n production

      - name: Update Production Metrics
        run: |
          # Send deployment metrics to monitoring
          curl -X POST "${{ secrets.DATADOG_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"title":"Production Deployment","text":"Successfully deployed ${{ github.sha }}","tags":["deployment","production"]}'

      - name: Notify Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#production'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            🚀 Production Deployment Successful!
            Version: ${{ github.sha }}
            Branch: ${{ github.ref_name }}
            Deployed by: ${{ github.actor }}

  # === STAGE 10: POST-DEPLOYMENT MONITORING ===
  post-deployment-monitoring:
    name: 'Post-Deployment Monitoring'
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Monitor System Health (30 minutes)
        run: |
          for i in {1..30}; do
            echo "Health check $i/30"
            curl -f https://app.hasivu.edu.in/health || exit 1
            curl -f https://api.hasivu.edu.in/health || exit 1
            sleep 60
          done

      - name: Performance Baseline Check
        run: |
          # Run light performance test to ensure no regression
          artillery quick --count 10 --num 2 https://app.hasivu.edu.in

      - name: Alert if Issues Found
        if: failure()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{"channel":"#alerts","text":"🚨 Post-deployment monitoring detected issues in production!"}'

# === ENVIRONMENT PROTECTION RULES ===
# This would be configured in GitHub settings:
# - production: requires manual approval from DevOps team
# - staging: requires successful test completion
# - Both: restrict to main/develop branches only
