/**
 * HASIVU Platform - Integration Test Configuration
 * Comprehensive configuration for integration testing infrastructure
 * Generated by SuperClaude - Comprehensive Testing Framework
 */

import { Config } from 'jest';
import { pathsToModuleNameMapper } from 'ts-jest';
import { readFileSync } from 'fs';
import { join } from 'path';

// Load TypeScript configuration for path mapping
const tsConfig = JSON.parse(
  readFileSync(join(__dirname, '../tsconfig.json'), 'utf8')
);

/**
 * Integration Test Configuration
 * Specialized for testing service interactions, database operations,
 * and external system integrations
 */
const config: Config = {
  // Test Environment Configuration
  testEnvironment: 'node',
  
  // Global Setup and Teardown
  globalSetup: '<rootDir>/tests/setup/global-setup.ts',
  globalTeardown: '<rootDir>/tests/setup/global-teardown.ts',
  
  // Setup Files Before Tests
  setupFilesAfterEnv: [
    '<rootDir>/tests/setup/test-setup.ts',
    '<rootDir>/tests/setup/integration-setup.ts',
    '<rootDir>/tests/setup/database-setup.ts',
    '<rootDir>/tests/setup/redis-setup.ts',
    '<rootDir>/tests/setup/external-service-mocks.ts'
  ],
  
  // Test File Patterns
  testMatch: [
    '<rootDir>/tests/integration/**/*.test.ts',
    '<rootDir>/tests/integration/**/*.spec.ts'
  ],
  
  // Coverage Configuration
  collectCoverage: true,
  coverageDirectory: '<rootDir>/coverage/integration',
  coverageReporters: [
    'text',
    'html',
    'lcov',
    'json-summary',
    'cobertura'
  ],
  
  // Coverage Collection Patterns
  collectCoverageFrom: [
    'src/**/*.ts',
    '!src/**/*.d.ts',
    '!src/**/*.test.ts',
    '!src/**/*.spec.ts',
    '!src/types/**',
    '!src/test-utils/**',
    '!src/migrations/**',
    '!src/seeds/**'
  ],
  
  // Coverage Thresholds for Integration Tests
  coverageThreshold: {
    global: {
      branches: 70,
      functions: 70,
      lines: 70,
      statements: 70
    },
    // Service Layer Coverage
    './src/services/': {
      branches: 80,
      functions: 85,
      lines: 80,
      statements: 80
    },
    // Controller Layer Coverage  
    './src/controllers/': {
      branches: 75,
      functions: 80,
      lines: 75,
      statements: 75
    },
    // Utility Layer Coverage
    './src/utils/': {
      branches: 65,
      functions: 70,
      lines: 65,
      statements: 65
    }
  },
  
  // TypeScript Configuration
  preset: 'ts-jest',
  transform: {
    '^.+\\.ts$': ['ts-jest', {
      tsconfig: {
        module: 'commonjs',
        esModuleInterop: true,
        allowSyntheticDefaultImports: true,
        skipLibCheck: true,
        strict: true,
        experimentalDecorators: true,
        emitDecoratorMetadata: true
      }
    }]
  },
  
  // Module Resolution
  moduleNameMapper: {
    ...pathsToModuleNameMapper(tsConfig.compilerOptions.paths || {}, {
      prefix: '<rootDir>/'
    }),
    // Additional path mappings for integration tests
    '^@/(.*)$': '<rootDir>/src/$1',
    '^@test/(.*)$': '<rootDir>/tests/$1',
    '^@fixtures/(.*)$': '<rootDir>/tests/fixtures/$1',
    '^@mocks/(.*)$': '<rootDir>/tests/mocks/$1'
  },
  
  // Module File Extensions
  moduleFileExtensions: [
    'ts',
    'tsx',
    'js',
    'jsx',
    'json',
    'node'
  ],
  
  // Test Execution Configuration
  maxWorkers: '50%',
  testTimeout: 30000, // 30 seconds for integration tests
  
  // Verbose Output for Integration Tests
  verbose: true,
  
  // Test Results Processing
  reporters: [
    'default',
    ['jest-html-reporters', {
      publicPath: './reports/integration',
      filename: 'integration-test-report.html',
      expand: true,
      hideIcon: false,
      pageTitle: 'Hasivu Integration Test Report'
    }],
    ['jest-junit', {
      outputDirectory: './reports/integration',
      outputName: 'integration-test-results.xml',
      classNameTemplate: '{classname}',
      titleTemplate: '{title}',
      ancestorSeparator: ' â€º ',
      usePathForSuiteName: true
    }]
  ],
  
  // Global Test Variables
  globals: {
    'ts-jest': {
      useESM: false,
      isolatedModules: true
    },
    // Integration Test Environment Variables
    TEST_ENVIRONMENT: 'integration',
    TEST_DATABASE_URL: process.env.TEST_DATABASE_URL || 'postgresql://test:test@localhost:5432/hasivu_test',
    TEST_REDIS_URL: process.env.TEST_REDIS_URL || 'redis://localhost:6379/1',
    
    // External Service URLs for Integration Testing
    TEST_PAYMENT_GATEWAY_URL: process.env.TEST_PAYMENT_GATEWAY_URL || 'https://api.sandbox.razorpay.com',
    TEST_SMS_GATEWAY_URL: process.env.TEST_SMS_GATEWAY_URL || 'https://api.textlocal.in',
    TEST_EMAIL_SERVICE_URL: process.env.TEST_EMAIL_SERVICE_URL || 'https://api.sendgrid.com',
    TEST_WHATSAPP_API_URL: process.env.TEST_WHATSAPP_API_URL || 'https://graph.facebook.com',
    
    // Integration Test Flags
    ENABLE_EXTERNAL_SERVICES: process.env.ENABLE_EXTERNAL_SERVICES === 'true',
    MOCK_EXTERNAL_SERVICES: process.env.MOCK_EXTERNAL_SERVICES !== 'false',
    ENABLE_DATABASE_TRANSACTIONS: true,
    ENABLE_REDIS_CLEANUP: true,
    
    // Performance Testing Configuration
    LOAD_TEST_DURATION: parseInt(process.env.LOAD_TEST_DURATION || '60', 10), // seconds
    CONCURRENT_USERS: parseInt(process.env.CONCURRENT_USERS || '50', 10),
    REQUEST_RATE_LIMIT: parseInt(process.env.REQUEST_RATE_LIMIT || '100', 10), // requests per second
    
    // RFID System Integration Testing
    RFID_READER_SIMULATION: true,
    RFID_BATCH_SIZE: parseInt(process.env.RFID_BATCH_SIZE || '100', 10),
    RFID_TRANSACTION_TIMEOUT: parseInt(process.env.RFID_TRANSACTION_TIMEOUT || '5000', 10), // ms
    
    // School Management Integration
    SCHOOL_ADMIN_SIMULATION: true,
    BULK_OPERATION_LIMIT: parseInt(process.env.BULK_OPERATION_LIMIT || '1000', 10),
    CONCURRENT_SCHOOL_OPERATIONS: parseInt(process.env.CONCURRENT_SCHOOL_OPERATIONS || '10', 10)
  },
  
  // Test Environment Variables Setup
  testEnvironmentOptions: {
    url: 'http://localhost:3000',
    exposedGlobals: [
      'TextEncoder',
      'TextDecoder',
      'Response',
      'Request',
      'Headers',
      'fetch',
      'FormData',
      'URLSearchParams'
    ]
  },
  
  // Clear Mocks Between Tests
  clearMocks: true,
  restoreMocks: true,
  resetMocks: false,
  
  // Handle Unhandled Promise Rejections
  detectOpenHandles: true,
  forceExit: false,
  
  // Module Path Ignoring
  modulePathIgnorePatterns: [
    '<rootDir>/dist/',
    '<rootDir>/build/',
    '<rootDir>/coverage/',
    '<rootDir>/node_modules/'
  ],
  
  // Transform Ignore Patterns
  transformIgnorePatterns: [
    'node_modules/(?!(.*\\.mjs$|@testing-library|@jest))'
  ],
  
  // Test Data Management
  testPathIgnorePatterns: [
    '/node_modules/',
    '/dist/',
    '/build/',
    '/coverage/',
    '/docs/',
    '/scripts/(?!test)'
  ],
  
  // Integration Test Specific Settings
  testSequencer: '<rootDir>/tests/config/integration-sequencer.ts',
  
  // Error Handling
  errorOnDeprecated: true,
  bail: 0, // Run all tests even if some fail
  
  // Watch Mode Configuration
  watchPathIgnorePatterns: [
    '/node_modules/',
    '/coverage/',
    '/dist/',
    '/build/',
    '/.git/'
  ],
  
  // Custom Test Environment Configuration
  testRunner: 'jest-circus/runner',
  
  // Integration Test Hooks and Lifecycle
  snapshotSerializers: [
    '<rootDir>/tests/serializers/date-serializer.ts',
    '<rootDir>/tests/serializers/object-id-serializer.ts',
    '<rootDir>/tests/serializers/uuid-serializer.ts'
  ],
  
  // Performance Monitoring
  slowTestThreshold: 5, // 5 seconds threshold for slow test warning
  
  // Test Data and Fixtures  
  // integrationTeardown: '<rootDir>/tests/teardown/integration-teardown.ts', // Custom property, not standard Jest config
  
  // Custom Matchers - extend existing setupFilesAfterEnv
  // customMatchers: [ // Custom property, not standard Jest config
  //   '<rootDir>/tests/matchers/database-matchers.ts',
  //   '<rootDir>/tests/matchers/api-response-matchers.ts',
  //   '<rootDir>/tests/matchers/performance-matchers.ts',
  //   '<rootDir>/tests/matchers/security-matchers.ts'
  // ]
};

/**
 * Integration Test Environment Configuration
 * Manages test environment setup, external service configuration,
 * and integration testing infrastructure
 */
export const integrationConfig = {
  // Database Configuration for Integration Tests
  database: {
    host: process.env.TEST_DB_HOST || 'localhost',
    port: parseInt(process.env.TEST_DB_PORT || '5432', 10),
    username: process.env.TEST_DB_USER || 'test_user',
    password: process.env.TEST_DB_PASS || 'test_password',
    database: process.env.TEST_DB_NAME || 'hasivu_integration_test',
    schema: process.env.TEST_DB_SCHEMA || 'public',
    
    // Connection Pool Configuration
    connectionPoolSize: parseInt(process.env.TEST_DB_POOL_SIZE || '10', 10),
    connectionTimeout: parseInt(process.env.TEST_DB_TIMEOUT || '30000', 10),
    queryTimeout: parseInt(process.env.TEST_DB_QUERY_TIMEOUT || '15000', 10),
    
    // Test Database Management
    dropSchemaBeforeTest: true,
    createSchemaBeforeTest: true,
    runMigrationsBeforeTest: true,
    seedDataBeforeTest: true,
    cleanupAfterTest: true,
    
    // Transaction Management
    useTransactions: true,
    rollbackAfterEachTest: true,
    isolationLevel: 'READ_COMMITTED'
  },
  
  // Redis Configuration for Integration Tests
  redis: {
    host: process.env.TEST_REDIS_HOST || 'localhost',
    port: parseInt(process.env.TEST_REDIS_PORT || '6379', 10),
    password: process.env.TEST_REDIS_PASSWORD || '',
    database: parseInt(process.env.TEST_REDIS_DB || '1', 10),
    
    // Connection Configuration
    connectTimeout: 10000,
    lazyConnect: true,
    maxRetriesPerRequest: 3,
    retryDelayOnFailover: 100,
    
    // Test Cache Management
    flushDatabaseBeforeTest: true,
    cleanupAfterTest: true,
    keyPrefix: 'test:',
    keyExpiration: 3600 // 1 hour
  },
  
  // External Service Mock Configuration
  externalServices: {
    payment: {
      mockProvider: 'razorpay',
      apiKey: 'test_rzp_key_mock',
      apiSecret: 'test_rzp_secret_mock',
      webhookSecret: 'test_webhook_secret',
      mockEndpoints: {
        createOrder: '/api/mock/payment/orders',
        capturePayment: '/api/mock/payment/capture',
        refundPayment: '/api/mock/payment/refund',
        webhookHandler: '/api/mock/payment/webhook'
      }
    },
    
    sms: {
      mockProvider: 'textlocal',
      apiKey: 'test_sms_api_key_mock',
      mockEndpoints: {
        sendSms: '/api/mock/sms/send',
        bulkSms: '/api/mock/sms/bulk',
        deliveryStatus: '/api/mock/sms/status'
      }
    },
    
    email: {
      mockProvider: 'sendgrid',
      apiKey: 'test_email_api_key_mock',
      mockEndpoints: {
        sendEmail: '/api/mock/email/send',
        templateEmail: '/api/mock/email/template',
        bounceWebhook: '/api/mock/email/bounce'
      }
    },
    
    whatsapp: {
      mockProvider: 'facebook',
      accessToken: 'test_wa_access_token_mock',
      verifyToken: 'test_wa_verify_token_mock',
      mockEndpoints: {
        sendMessage: '/api/mock/whatsapp/send',
        webhook: '/api/mock/whatsapp/webhook',
        mediaUpload: '/api/mock/whatsapp/media'
      }
    },
    
    rfid: {
      mockReaders: [
        {
          id: 'reader_001',
          location: 'main_gate',
          type: 'long_range',
          status: 'active'
        },
        {
          id: 'reader_002', 
          location: 'cafeteria_entrance',
          type: 'medium_range',
          status: 'active'
        },
        {
          id: 'reader_003',
          location: 'delivery_area',
          type: 'short_range',
          status: 'active'
        }
      ],
      simulationMode: true,
      batchProcessing: true,
      concurrentReads: 50
    }
  },
  
  // Load Testing Configuration
  loadTesting: {
    enabled: process.env.ENABLE_LOAD_TESTS === 'true',
    scenarios: {
      normal: {
        duration: '60s',
        concurrentUsers: 50,
        rampUpTime: '10s',
        thresholds: {
          http_req_duration: ['p(95)<500'],
          http_req_failed: ['rate<0.01']
        }
      },
      peak: {
        duration: '120s',
        concurrentUsers: 200,
        rampUpTime: '30s',
        thresholds: {
          http_req_duration: ['p(95)<1000'],
          http_req_failed: ['rate<0.05']
        }
      },
      stress: {
        duration: '300s',
        concurrentUsers: 500,
        rampUpTime: '60s',
        thresholds: {
          http_req_duration: ['p(95)<2000'],
          http_req_failed: ['rate<0.10']
        }
      }
    }
  },
  
  // Security Testing Configuration
  security: {
    rateLimitTesting: true,
    authenticationTesting: true,
    authorizationTesting: true,
    inputValidationTesting: true,
    sqlInjectionTesting: true,
    xssTesting: true,
    csrfTesting: true,
    
    // Security Test Thresholds
    maxFailedLoginAttempts: 5,
    accountLockoutDuration: 900, // 15 minutes
    sessionTimeout: 3600, // 1 hour
    passwordMinLength: 8,
    
    // Penetration Testing Simulation
    bruteForceSimulation: {
      enabled: true,
      maxAttempts: 100,
      timeWindow: 300 // 5 minutes
    }
  },
  
  // API Integration Testing
  api: {
    baseUrl: process.env.TEST_API_BASE_URL || 'http://localhost:3000',
    timeout: 10000,
    retryAttempts: 3,
    retryDelay: 1000,
    
    // API Versioning Tests
    versions: ['v1', 'v2'],
    versioningStrategy: 'header', // 'header' | 'path' | 'query'
    
    // Response Validation
    validateResponseSchema: true,
    validateResponseTime: true,
    validateErrorHandling: true,
    
    // Content Types
    supportedContentTypes: [
      'application/json',
      'application/x-www-form-urlencoded',
      'multipart/form-data',
      'text/plain'
    ]
  },
  
  // Microservices Integration Testing
  microservices: {
    services: [
      {
        name: 'auth-service',
        url: process.env.TEST_AUTH_SERVICE_URL || 'http://localhost:3001',
        healthCheck: '/health',
        timeout: 5000
      },
      {
        name: 'payment-service',
        url: process.env.TEST_PAYMENT_SERVICE_URL || 'http://localhost:3002',
        healthCheck: '/health',
        timeout: 5000
      },
      {
        name: 'notification-service',
        url: process.env.TEST_NOTIFICATION_SERVICE_URL || 'http://localhost:3003',
        healthCheck: '/health',
        timeout: 5000
      },
      {
        name: 'menu-service',
        url: process.env.TEST_MENU_SERVICE_URL || 'http://localhost:3004',
        healthCheck: '/health',
        timeout: 5000
      },
      {
        name: 'order-service',
        url: process.env.TEST_ORDER_SERVICE_URL || 'http://localhost:3005',
        healthCheck: '/health',
        timeout: 5000
      },
      {
        name: 'rfid-service',
        url: process.env.TEST_RFID_SERVICE_URL || 'http://localhost:3006',
        healthCheck: '/health',
        timeout: 5000
      }
    ],
    
    // Service Discovery Configuration
    serviceRegistry: {
      enabled: true,
      registryUrl: process.env.TEST_SERVICE_REGISTRY_URL || 'http://localhost:8500',
      healthCheckInterval: 30000,
      retryAttempts: 3
    },
    
    // Circuit Breaker Configuration
    circuitBreaker: {
      enabled: true,
      failureThreshold: 5,
      resetTimeout: 30000,
      monitoringPeriod: 60000
    }
  },
  
  // Message Queue Integration Testing
  messageQueue: {
    provider: 'rabbitmq',
    connection: {
      url: process.env.TEST_RABBITMQ_URL || 'amqp://guest:guest@localhost:5672',
      heartbeat: 60,
      connectionTimeout: 10000
    },
    
    // Queue Configuration
    queues: {
      orderProcessing: 'test.order.processing',
      paymentNotification: 'test.payment.notification',
      menuUpdates: 'test.menu.updates',
      rfidEvents: 'test.rfid.events',
      userNotifications: 'test.user.notifications'
    },
    
    // Dead Letter Queue Configuration
    deadLetterQueue: {
      enabled: true,
      retryAttempts: 3,
      retryDelay: 5000
    }
  },
  
  // File Storage Integration Testing
  fileStorage: {
    provider: 'local',
    basePath: './test-uploads',
    
    // File Type Validation
    allowedTypes: [
      'image/jpeg',
      'image/png', 
      'image/gif',
      'application/pdf',
      'text/csv',
      'application/vnd.ms-excel'
    ],
    
    // File Size Limits
    maxFileSize: 10 * 1024 * 1024, // 10MB
    maxTotalSize: 100 * 1024 * 1024, // 100MB
    
    // Cleanup Configuration
    cleanupAfterTest: true,
    preserveTestFiles: process.env.PRESERVE_TEST_FILES === 'true'
  },
  
  // Monitoring Integration Testing
  monitoring: {
    enabled: true,
    metricsEndpoint: '/metrics',
    healthEndpoint: '/health',
    
    // Performance Metrics
    trackResponseTime: true,
    trackThroughput: true,
    trackErrorRate: true,
    trackResourceUsage: true,
    
    // Alert Configuration
    alerts: {
      responseTimeThreshold: 1000, // ms
      errorRateThreshold: 0.05, // 5%
      throughputThreshold: 100, // requests/second
      memoryUsageThreshold: 0.85 // 85%
    }
  },
  
  // Data Generation and Fixtures
  dataGeneration: {
    // User Data Generation
    userCount: 1000,
    schoolCount: 10,
    menuItemCount: 500,
    orderCount: 10000,
    
    // Realistic Data Patterns
    generateRealisticNames: true,
    generateRealisticAddresses: true,
    generateRealisticPhoneNumbers: true,
    generateRealisticMenuItems: true,
    
    // Time-based Data Generation
    generateHistoricalData: true,
    historicalDataDays: 90,
    generateFutureData: true,
    futureDataDays: 30
  },
  
  // Parallel Test Execution
  parallelExecution: {
    enabled: true,
    maxConcurrency: 4,
    isolationLevel: 'process',
    
    // Test Grouping Strategy
    groupBy: 'service', // 'service' | 'feature' | 'complexity'
    balanceStrategy: 'runtime', // 'runtime' | 'count' | 'size'
    
    // Resource Management
    memoryLimitPerWorker: '512MB',
    timeoutPerWorker: 600000 // 10 minutes
  },
  
  // Debugging and Development
  debugging: {
    logLevel: process.env.TEST_LOG_LEVEL || 'info',
    enableSqlLogging: process.env.ENABLE_SQL_LOGGING === 'true',
    enableRedisLogging: process.env.ENABLE_REDIS_LOGGING === 'true',
    enableApiLogging: process.env.ENABLE_API_LOGGING === 'true',
    
    // Test Debugging
    preserveTestData: process.env.PRESERVE_TEST_DATA === 'true',
    captureScreenshots: process.env.CAPTURE_SCREENSHOTS === 'true',
    recordTestVideos: process.env.RECORD_TEST_VIDEOS === 'true',
    
    // Performance Profiling
    enableProfiling: process.env.ENABLE_PROFILING === 'true',
    profilingInterval: 1000,
    memorySnapshots: process.env.MEMORY_SNAPSHOTS === 'true'
  }
};

/**
 * Test Suite Organization Configuration
 * Defines how integration tests are categorized and executed
 */
export const testSuiteConfig = {
  // Test Categories
  categories: {
    // Core System Integration
    core: {
      pattern: '**/core/**/*.test.ts',
      timeout: 15000,
      retries: 2,
      priority: 'high'
    },
    
    // API Integration Tests
    api: {
      pattern: '**/api/**/*.test.ts',
      timeout: 20000,
      retries: 1,
      priority: 'high'
    },
    
    // Database Integration Tests
    database: {
      pattern: '**/database/**/*.test.ts',
      timeout: 30000,
      retries: 2,
      priority: 'medium'
    },
    
    // External Service Integration
    external: {
      pattern: '**/external/**/*.test.ts',
      timeout: 45000,
      retries: 3,
      priority: 'medium'
    },
    
    // End-to-End Workflow Tests
    e2e: {
      pattern: '**/e2e/**/*.test.ts',
      timeout: 60000,
      retries: 1,
      priority: 'high'
    },
    
    // Performance Integration Tests
    performance: {
      pattern: '**/performance/**/*.test.ts',
      timeout: 120000,
      retries: 0,
      priority: 'low'
    },
    
    // Security Integration Tests
    security: {
      pattern: '**/security/**/*.test.ts',
      timeout: 30000,
      retries: 1,
      priority: 'high'
    }
  },
  
  // Test Execution Strategy
  executionStrategy: {
    // Dependency Order
    dependencyOrder: [
      'database',
      'core',
      'api',
      'external',
      'security',
      'e2e',
      'performance'
    ],
    
    // Parallel Execution Groups
    parallelGroups: [
      ['database', 'core'],
      ['api', 'external'],
      ['security'],
      ['e2e'],
      ['performance']
    ],
    
    // Cleanup Strategy
    cleanupBetweenCategories: true,
    resetDatabaseBetweenCategories: true,
    clearCacheBetweenCategories: true
  }
};

/**
 * Integration Test Helpers Configuration
 * Utilities and helpers for integration test execution
 */
export const testHelpers = {
  // Database Helpers
  database: {
    seedDataPath: './tests/fixtures/seeds',
    migrationPath: './tests/fixtures/migrations',
    backupPath: './tests/fixtures/backups',
    
    // Test Data Management
    generateTestData: true,
    useFixtureData: true,
    preserveReferentialIntegrity: true
  },
  
  // API Testing Helpers
  api: {
    requestTimeout: 10000,
    defaultHeaders: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      'User-Agent': 'Hasivu-Integration-Tests/1.0'
    },
    
    // Authentication Helpers
    authTokenLifetime: 3600,
    refreshTokenLifetime: 86400,
    generateTestTokens: true
  },
  
  // File System Helpers
  filesystem: {
    testUploadPath: './test-uploads',
    testDownloadPath: './test-downloads',
    
    // File Generation
    generateTestImages: true,
    generateTestDocuments: true,
    generateTestCSVs: true,
    
    // Cleanup
    cleanupTestFiles: true,
    preserveFailureArtifacts: true
  },
  
  // Time and Date Helpers
  temporal: {
    // Test Time Configuration
    useFixedTime: true,
    fixedTime: '2024-01-15T10:00:00.000Z',
    timeZone: 'Asia/Kolkata',
    
    // Time Progression
    enableTimeTravel: true,
    timeStepSize: 'minutes',
    businessHours: {
      start: '08:00',
      end: '20:00',
      days: [1, 2, 3, 4, 5, 6] // Monday to Saturday
    }
  },
  
  // Mock Configuration
  mocks: {
    // HTTP Mocks
    enableHttpMocks: true,
    recordHttpCalls: process.env.RECORD_HTTP_CALLS === 'true',
    replayHttpCalls: process.env.REPLAY_HTTP_CALLS === 'true',
    
    // Service Mocks
    mockExternalServices: process.env.MOCK_EXTERNAL_SERVICES !== 'false',
    mockDatabaseCalls: false,
    mockRedisOperations: false,
    
    // Real Service Integration
    useRealPaymentGateway: process.env.USE_REAL_PAYMENT_GATEWAY === 'true',
    useRealSmsService: process.env.USE_REAL_SMS_SERVICE === 'true',
    useRealEmailService: process.env.USE_REAL_EMAIL_SERVICE === 'true'
  }
};

/**
 * Performance Benchmarking Configuration
 * Defines performance testing parameters and thresholds
 */
export const performanceConfig = {
  // Benchmark Thresholds
  thresholds: {
    // API Response Times (ms)
    authentication: 200,
    userOperations: 300,
    menuOperations: 250,
    orderProcessing: 500,
    paymentProcessing: 1000,
    notificationDelivery: 150,
    rfidOperations: 100,
    
    // Database Operation Times (ms)
    simpleQuery: 50,
    complexQuery: 200,
    transactionCommit: 100,
    bulkOperations: 1000,
    
    // Memory Usage (MB)
    baseMemoryUsage: 100,
    peakMemoryUsage: 500,
    memoryLeakThreshold: 50, // MB increase per test
    
    // CPU Usage (%)
    averageCpuUsage: 30,
    peakCpuUsage: 80,
    
    // Concurrent Operations
    maxConcurrentRequests: 500,
    maxConcurrentDbConnections: 50,
    maxConcurrentRfidReads: 100
  },
  
  // Load Testing Scenarios
  loadScenarios: {
    // Lunch Rush Simulation
    lunchRush: {
      description: 'Peak lunch hour traffic simulation',
      duration: 1800, // 30 minutes
      users: {
        students: 800,
        staff: 50,
        parents: 200
      },
      operations: {
        menuBrowsing: 0.4,
        orderPlacement: 0.3,
        paymentProcessing: 0.2,
        orderTracking: 0.1
      }
    },
    
    // Daily Operations
    dailyOperations: {
      description: 'Regular daily usage patterns',
      duration: 28800, // 8 hours
      users: {
        students: 1500,
        staff: 100,
        parents: 500,
        admins: 20
      },
      operationDistribution: {
        morning: 0.2,
        lunch: 0.5,
        evening: 0.2,
        night: 0.1
      }
    },
    
    // System Stress Test
    stressTest: {
      description: 'Maximum capacity stress testing',
      duration: 3600, // 1 hour
      users: {
        concurrent: 2000,
        total: 5000
      },
      rampUp: 300, // 5 minutes
      sustainedLoad: 2700, // 45 minutes
      rampDown: 300 // 5 minutes
    }
  },
  
  // Resource Monitoring
  monitoring: {
    interval: 1000, // 1 second
    metrics: [
      'cpu_usage',
      'memory_usage',
      'disk_io',
      'network_io',
      'database_connections',
      'redis_connections',
      'active_sessions',
      'request_queue_size',
      'response_times'
    ],
    
    // Alert Thresholds
    alerts: {
      criticalMemoryUsage: 0.90,
      criticalCpuUsage: 0.85,
      criticalDiskUsage: 0.90,
      highErrorRate: 0.05,
      slowResponseTime: 2000
    }
  }
};

export default config;