export declare const DailyMenuRepository: {
    findByDate: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findBySchoolAndDate: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByDateRange: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByIdWithItems: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    cloneMenu: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    getWeeklyPlan: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findById: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByIdOrThrow: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findAll: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findOne: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findBySchoolId: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByUserId: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByEmail: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    create: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    createMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    update: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    updateMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    delete: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    deleteMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    softDelete: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    count: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    transaction: import("jest-mock").Mock<(callback: any) => any>;
    reset(): void;
};
export declare const MenuItemRepository: {
    findAvailable: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByCategory: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    updateAvailability: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    bulkUpdatePrices: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findById: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByIdOrThrow: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findAll: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findOne: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByDateRange: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findBySchoolId: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByUserId: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    findByEmail: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    create: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    createMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    update: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    updateMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    delete: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    deleteMany: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    softDelete: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    count: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    transaction: import("jest-mock").Mock<(callback: any) => any>;
    reset(): void;
};
export declare const cache: {
    get: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    set: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    setex: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    del: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    clear: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    exists: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    expire: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    ttl: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
};
export declare const logger: {
    info: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    warn: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    error: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    debug: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
    child: import("jest-mock").Mock<import("jest-mock").UnknownFunction>;
};
//# sourceMappingURL=repositories.d.ts.map