"use strict";
/**
 * HASIVU Platform - Cache Utility
 * Simple in-memory cache with Redis-like interface
 * Implements basic caching for development and testing
 * Generated by SuperClaude Wave 3: Epic 3 Implementation - UTILITIES
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cache = void 0;
/**
 * Simple in-memory cache implementation
 */
class InMemoryCache {
    cache;
    constructor() {
        this.cache = new Map();
    }
    /**
     * Get value from cache
     */
    async get(key) {
        const item = this.cache.get(key);
        if (!item) {
            return null;
        }
        // Check if expired
        if (item.expiry && Date.now() > item.expiry) {
            this.cache.delete(key);
            return null;
        }
        return item.value;
    }
    /**
     * Set value in cache
     */
    async set(key, value) {
        this.cache.set(key, { value });
    }
    /**
     * Set value with expiration (in seconds)
     */
    async setex(key, seconds, value) {
        const expiry = Date.now() + (seconds * 1000);
        this.cache.set(key, { value, expiry });
    }
    /**
     * Delete key from cache
     */
    async del(key) {
        const existed = this.cache.has(key);
        this.cache.delete(key);
        return existed ? 1 : 0;
    }
    /**
     * Check if key exists
     */
    async exists(key) {
        const item = this.cache.get(key);
        if (!item) {
            return false;
        }
        // Check if expired
        if (item.expiry && Date.now() > item.expiry) {
            this.cache.delete(key);
            return false;
        }
        return true;
    }
    /**
     * Clear all cache
     */
    async clear() {
        this.cache.clear();
    }
    /**
     * Get cache size
     */
    size() {
        return this.cache.size;
    }
}
// Export singleton instance
exports.cache = new InMemoryCache();
