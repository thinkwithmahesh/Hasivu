/**
 * HASIVU Platform - Cache Utility
 * Simple in-memory cache with Redis-like interface
 * Implements basic caching for development and testing
 * Generated by SuperClaude Wave 3: Epic 3 Implementation - UTILITIES
 */

/**
 * Simple in-memory cache implementation
 */
class InMemoryCache {
  private cache: Map<string, { value: string; expiry?: number }>;

  constructor() {
    this.cache = new Map();
  }

  /**
   * Get value from cache
   */
  async get(key: string): Promise<string | null> {
    const item = this.cache.get(key);

    if (!item) {
      return null;
    }

    // Check if expired
    if (item.expiry && Date.now() > item.expiry) {
      this.cache.delete(key);
      return null;
    }

    return item.value;
  }

  /**
   * Set value in cache
   */
  async set(key: string, value: string): Promise<void> {
    this.cache.set(key, { value });
  }

  /**
   * Set value with expiration (in seconds)
   */
  async setex(key: string, seconds: number, value: string): Promise<void> {
    const expiry = Date.now() + seconds * 1000;
    this.cache.set(key, { value, expiry });
  }

  /**
   * Delete key from cache
   */
  async del(key: string): Promise<number> {
    const existed = this.cache.has(key);
    this.cache.delete(key);
    return existed ? 1 : 0;
  }

  /**
   * Check if key exists
   */
  async exists(key: string): Promise<boolean> {
    const item = this.cache.get(key);

    if (!item) {
      return false;
    }

    // Check if expired
    if (item.expiry && Date.now() > item.expiry) {
      this.cache.delete(key);
      return false;
    }

    return true;
  }

  /**
   * Clear all cache
   */
  async clear(): Promise<void> {
    this.cache.clear();
  }

  /**
   * Get cache size
   */
  size(): number {
    return this.cache.size;
  }
}

// Export singleton instance
export const cache = new InMemoryCache();
