/**
 * HASIVU Platform - Login Screen Component
 * User authentication with biometric support and form validation
 * Generated by SuperClaude Wave 3: Frontend Implementation
 */

import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  KeyboardAvoidingView,
  Platform,
  ScrollView,
  Alert,
  Keyboard,
  TouchableWithoutFeedback,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { TextInput, Button, Checkbox, ActivityIndicator } from 'react-native-paper';
import { useDispatch, useSelector } from 'react-redux';
import { Formik } from 'formik';
import * as Yup from 'yup';
import * as LocalAuthentication from 'expo-local-authentication';
import { Ionicons } from '@expo/vector-icons';

import {
  login,
  clearError,
  selectAuth,
  selectIsLoginLocked,
  selectLockTimeRemaining,
} from '@/store/slices/authSlice';
import { theme, colors, typography, spacing, borderRadius } from '@/constants/theme';
import { AppDispatch } from '@/store';
import { LoginCredentials } from '@/types/auth';

/**
 * Login form validation schema
 */
const loginSchema = Yup.object().shape({
  email: Yup.string().email('Please enter a valid email address').required('Email is required'),
  password: Yup.string()
    .min(6, 'Password must be at least 6 characters')
    .required('Password is required'),
});

/**
 * Login screen props
 */
interface LoginScreenProps {
  navigation: any;
}

/**
 * Login screen component
 */
export const LoginScreen: React.FC<LoginScreenProps> = ({ navigation }) => {
  const dispatch = useDispatch<AppDispatch>();
  const { loading, error, biometricEnabled } = useSelector(selectAuth);
  const isLoginLocked = useSelector(selectIsLoginLocked);
  const lockTimeRemaining = useSelector(selectLockTimeRemaining);

  const [showPassword, setShowPassword] = useState(false);
  const [biometricSupported, setBiometricSupported] = useState(false);
  const [biometricEnrolled, setBiometricEnrolled] = useState(false);
  const [lockCountdown, setLockCountdown] = useState(0);

  /**
   * Check biometric availability on component mount
   */
  useEffect(() => {
    checkBiometricAvailability();
  }, []);

  /**
   * Handle login lock countdown
   */
  useEffect(() => {
    if (isLoginLocked && lockTimeRemaining > 0) {
      setLockCountdown(Math.ceil(lockTimeRemaining / 1000));

      const interval = setInterval(() => {
        const remaining = Math.ceil((lockTimeRemaining - (Date.now() % lockTimeRemaining)) / 1000);
        if (remaining <= 0) {
          setLockCountdown(0);
          clearInterval(interval);
        } else {
          setLockCountdown(remaining);
        }
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isLoginLocked, lockTimeRemaining]);

  /**
   * Clear error when component unmounts or navigates away
   */
  useEffect(() => {
    return () => {
      dispatch(clearError());
    };
  }, [dispatch]);

  /**
   * Check if biometric authentication is available
   */
  const checkBiometricAvailability = async () => {
    try {
      const compatible = await LocalAuthentication.hasHardwareAsync();
      const enrolled = await LocalAuthentication.isEnrolledAsync();

      setBiometricSupported(compatible);
      setBiometricEnrolled(enrolled);
    } catch (error) {
      console.error('Error checking biometric availability:', error);
    }
  };

  /**
   * Handle form submission
   */
  const handleLogin = async (values: LoginCredentials) => {
    if (isLoginLocked) {
      Alert.alert(
        'Account Locked',
        `Too many failed login attempts. Please try again in ${Math.ceil(lockCountdown / 60)} minutes.`
      );
      return;
    }

    try {
      await dispatch(login(values)).unwrap();
      // Navigation will be handled by the auth navigator
    } catch (error: any) {
      // Error is handled by Redux and displayed in UI
      console.error('Login error:', error);
    }
  };

  /**
   * Handle biometric authentication
   */
  const handleBiometricLogin = async () => {
    if (!biometricSupported || !biometricEnrolled || !biometricEnabled) {
      Alert.alert(
        'Biometric Not Available',
        'Biometric authentication is not set up on this device.'
      );
      return;
    }

    try {
      const result = await LocalAuthentication.authenticateAsync({
        promptMessage: 'Login to HASIVU',
        fallbackLabel: 'Use Password',
        disableDeviceFallback: false,
      });

      if (result.success) {
        // TODO: Handle biometric login with stored credentials
        Alert.alert('Success', 'Biometric authentication successful!');
      } else {
        console.log('Biometric authentication failed:', result.error);
      }
    } catch (error) {
      console.error('Biometric authentication error:', error);
      Alert.alert('Error', 'Biometric authentication failed. Please try again.');
    }
  };

  /**
   * Navigate to registration screen
   */
  const navigateToRegister = () => {
    navigation.navigate('Register');
  };

  /**
   * Navigate to forgot password screen
   */
  const navigateToForgotPassword = () => {
    navigation.navigate('ForgotPassword');
  };

  /**
   * Format countdown time
   */
  const formatCountdown = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
  };

  return (
    <SafeAreaView style={styles.container}>
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardAvoidingView}
      >
        <TouchableWithoutFeedback onPress={Keyboard.dismiss}>
          <ScrollView
            contentContainerStyle={styles.scrollContent}
            keyboardShouldPersistTaps="handled"
            showsVerticalScrollIndicator={false}
          >
            {/* Header */}
            <View style={styles.header}>
              <Text style={styles.title}>Welcome Back</Text>
              <Text style={styles.subtitle}>Sign in to your HASIVU account</Text>
            </View>

            {/* Login Form */}
            <View style={styles.formContainer}>
              <Formik
                initialValues={{
                  email: '',
                  password: '',
                  rememberMe: false,
                }}
                validationSchema={loginSchema}
                onSubmit={handleLogin}
              >
                {({
                  handleChange,
                  handleBlur,
                  handleSubmit,
                  values,
                  errors,
                  touched,
                  setFieldValue,
                }) => (
                  <>
                    {/* Email Input */}
                    <TextInput
                      label="Email Address"
                      value={values.email}
                      onChangeText={handleChange('email')}
                      onBlur={handleBlur('email')}
                      keyboardType="email-address"
                      autoCapitalize="none"
                      autoCorrect={false}
                      autoComplete="email"
                      textContentType="emailAddress"
                      error={touched.email && !!errors.email}
                      disabled={loading || isLoginLocked}
                      style={styles.input}
                      mode="outlined"
                      left={<TextInput.Icon icon="email" />}
                    />
                    {touched.email && errors.email && (
                      <Text style={styles.errorText}>{errors.email}</Text>
                    )}

                    {/* Password Input */}
                    <TextInput
                      label="Password"
                      value={values.password}
                      onChangeText={handleChange('password')}
                      onBlur={handleBlur('password')}
                      secureTextEntry={!showPassword}
                      autoCapitalize="none"
                      autoCorrect={false}
                      autoComplete="password"
                      textContentType="password"
                      error={touched.password && !!errors.password}
                      disabled={loading || isLoginLocked}
                      style={styles.input}
                      mode="outlined"
                      left={<TextInput.Icon icon="lock" />}
                      right={
                        <TextInput.Icon
                          icon={showPassword ? 'eye-off' : 'eye'}
                          onPress={() => setShowPassword(!showPassword)}
                        />
                      }
                    />
                    {touched.password && errors.password && (
                      <Text style={styles.errorText}>{errors.password}</Text>
                    )}

                    {/* Remember Me Checkbox */}
                    <View style={styles.checkboxContainer}>
                      <Checkbox
                        status={values.rememberMe ? 'checked' : 'unchecked'}
                        onPress={() => setFieldValue('rememberMe', !values.rememberMe)}
                        disabled={loading || isLoginLocked}
                      />
                      <Text style={styles.checkboxLabel}>Remember me</Text>
                    </View>

                    {/* Error Message */}
                    {error && (
                      <View style={styles.errorContainer}>
                        <Ionicons name="alert-circle" size={20} color={colors.error} />
                        <Text style={styles.errorMessage}>{error}</Text>
                      </View>
                    )}

                    {/* Lock Message */}
                    {isLoginLocked && (
                      <View style={styles.lockContainer}>
                        <Ionicons name="lock-closed" size={20} color={colors.warning} />
                        <Text style={styles.lockMessage}>
                          Account locked due to too many failed attempts.{'\n'}
                          Try again in {formatCountdown(lockCountdown)}
                        </Text>
                      </View>
                    )}

                    {/* Login Button */}
                    <Button
                      mode="contained"
                      onPress={handleSubmit}
                      disabled={loading || isLoginLocked}
                      style={styles.loginButton}
                      contentStyle={styles.loginButtonContent}
                      labelStyle={styles.loginButtonLabel}
                    >
                      {loading ? (
                        <ActivityIndicator size="small" color={colors.textInverse} />
                      ) : (
                        'Sign In'
                      )}
                    </Button>

                    {/* Biometric Login Button */}
                    {biometricSupported && biometricEnrolled && biometricEnabled && (
                      <Button
                        mode="outlined"
                        onPress={handleBiometricLogin}
                        disabled={loading || isLoginLocked}
                        style={styles.biometricButton}
                        contentStyle={styles.biometricButtonContent}
                        icon="fingerprint"
                      >
                        Use Biometric Login
                      </Button>
                    )}
                  </>
                )}
              </Formik>
            </View>

            {/* Footer Links */}
            <View style={styles.footer}>
              <Button
                mode="text"
                onPress={navigateToForgotPassword}
                disabled={loading}
                style={styles.linkButton}
              >
                Forgot Password?
              </Button>

              <View style={styles.signupContainer}>
                <Text style={styles.signupText}>Don't have an account? </Text>
                <Button
                  mode="text"
                  onPress={navigateToRegister}
                  disabled={loading}
                  style={styles.signupButton}
                  labelStyle={styles.signupButtonLabel}
                >
                  Sign Up
                </Button>
              </View>
            </View>
          </ScrollView>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  keyboardAvoidingView: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    paddingHorizontal: spacing.lg,
    paddingVertical: spacing.xl,
  },
  header: {
    alignItems: 'center',
    marginBottom: spacing.xxl,
    paddingTop: spacing.xl,
  },
  title: {
    ...typography.h2,
    color: colors.text,
    textAlign: 'center',
    marginBottom: spacing.sm,
  },
  subtitle: {
    ...typography.body1,
    color: colors.textSecondary,
    textAlign: 'center',
  },
  formContainer: {
    marginBottom: spacing.xl,
  },
  input: {
    marginBottom: spacing.md,
    backgroundColor: colors.surface,
  },
  errorText: {
    ...typography.caption,
    color: colors.error,
    marginTop: -spacing.sm,
    marginBottom: spacing.md,
    marginLeft: spacing.sm,
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: spacing.lg,
  },
  checkboxLabel: {
    ...typography.body2,
    color: colors.text,
    marginLeft: spacing.sm,
  },
  errorContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.errorLight + '20',
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    borderRadius: borderRadius.sm,
    marginBottom: spacing.md,
  },
  errorMessage: {
    ...typography.body2,
    color: colors.error,
    marginLeft: spacing.sm,
    flex: 1,
  },
  lockContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: colors.warningLight + '20',
    paddingHorizontal: spacing.md,
    paddingVertical: spacing.sm,
    borderRadius: borderRadius.sm,
    marginBottom: spacing.md,
  },
  lockMessage: {
    ...typography.body2,
    color: colors.warning,
    marginLeft: spacing.sm,
    flex: 1,
    textAlign: 'center',
  },
  loginButton: {
    marginBottom: spacing.md,
    borderRadius: borderRadius.md,
  },
  loginButtonContent: {
    paddingVertical: spacing.sm,
  },
  loginButtonLabel: {
    ...typography.button,
    color: colors.textInverse,
  },
  biometricButton: {
    borderRadius: borderRadius.md,
    borderColor: colors.primary,
  },
  biometricButtonContent: {
    paddingVertical: spacing.sm,
  },
  footer: {
    alignItems: 'center',
    marginTop: 'auto',
    paddingTop: spacing.xl,
  },
  linkButton: {
    marginBottom: spacing.lg,
  },
  signupContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  signupText: {
    ...typography.body2,
    color: colors.textSecondary,
  },
  signupButton: {
    marginLeft: -spacing.sm,
  },
  signupButtonLabel: {
    ...typography.body2,
    color: colors.primary,
    fontWeight: '600',
  },
});

export default LoginScreen;
