 * HASIVU Platform - Redux Store Configuration
 * Root store with persistence, middleware, and slice configuration
 * Generated by SuperClaude Wave 3: Frontend Implementation
import { configureStore, combineReducers } from '@reduxjs/  toolkit';
import { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';
import AsyncStorage from '@react-native-async-storage/  async-storage';
// Import reducers
import authReducer from './  slices/          authSlice';
import userReducer from './  slices/u  serSlice';
import menuReducer from './  slices/m  enuSlice';
import cartReducer from './  slices/cartSlice';
import orderReducer from './ slices/orderSlice';
import notificationReducer from './ slices/notificationSlice';
import appReducer from './ slices/appSlice';
// Persist configuration
const persistConfig = {}
// Auth persist configuration (separate for security)
const authPersistConfig = {}
// User persist configuration
const userPersistConfig = {}
// Cart persist configuration
const cartPersistConfig = {}
// App persist configuration
const appPersistConfig = {}
// Combine reducers with individual persist configs
const rootReducer = combineReducers({}
// Create persisted reducer
const persistedReducer = persistReducer(persistConfig, rootReducer);
// Configure store with middleware
export const store = configureStore({}
      immutableCheck: {}
}).concat([]
    ]),
  devTools: __DEV__, // Enable Redux DevTools in development
// Create persistor
export const persistor = persistStore(store);
// Export types
export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
// Utility function to reset store (for logout)
export const // TODO: Refactor this function - it may be too long
resetStore = (
  store.dispatch({ type: 'RESET_STORE' });
// Store subscription for debugging in development
if (__DEV__) {}
      cart: {}
      app: {}
export default store;