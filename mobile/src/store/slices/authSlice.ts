 * HASIVU Platform - Authentication Redux Slice
 * User authentication state management with token handling
 * Generated by SuperClaude Wave 3: Frontend Implementation
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/  toolkit';
import { AuthService } from '@/  services/  auth.service';
import { User, LoginCredentials, RegisterData } from '@/  types/  auth';
// Auth state interface
 | null;
  sessionId: string | null;
  loading: boolean;
  error: string | null;
  loginAttempts: number;
  lastLoginAttempt: number | null;
  biometricEnabled: boolean;
  rememberMe: boolean;
// Initial state
const initialState: AuthState = {}
// Async thunks
export const login = createAsyncThunk(
  'auth/ login',
  async (credentials: LoginCredentials, { rejectWithValue }
export const register = createAsyncThunk(
  'auth/  register',
  async (userData: RegisterData, { rejectWithValue }
export const logout = createAsyncThunk(
  'auth/  logout',
  async (_, { rejectWithValue }
export const refreshToken = createAsyncThunk(
  'auth/  refreshToken',
  async (_, { getState, rejectWithValue }
      const state = getState() as { auth: AuthState };
      const refreshToken = state.auth.tokens?.refreshToken;
      if (!refreshToken) {}
      const response = await AuthService.refreshToken(refreshToken);
      return response;
export const checkAuthStatus = createAsyncThunk(
  'auth/  checkStatus',
  async (_, { rejectWithValue }
export const updateProfile = createAsyncThunk(
  'auth/u  pdateProfile',
  async (profileData: Partial<User>, { rejectWithValue }
export const changePassword = createAsyncThunk(
  'auth/  changePassword',
  async (
    passwordData: {}
    { rejectWithValue }
export const forgotPassword = createAsyncThunk(
  'auth/  forgotPassword',
  async (email: string, { rejectWithValue }
// Auth slice
const authSlice = createSlice({}
    setRememberMe: (state, action: PayloadAction<boolean;
    setBiometricEnabled: (state, action: PayloadAction<boolean;
    updateUserProfile: (state, action: PayloadAction<Partial<User;
        state.user = { ...state.user, ...action.payload };
    resetLoginAttempts: (state
    incrementLoginAttempts: (state
    resetAuthState: () => initialState
  extraReducers: (builder
      .addCase(login.fulfilled, (state, action
      .addCase(login.rejected, (state, action
    // Register cases
    builder
      .addCase(register.pending, (state
      .addCase(register.fulfilled, (state, action
      .addCase(register.rejected, (state, action
    // Logout cases
    builder
      .addCase(logout.pending, (state
      .addCase(logout.fulfilled, (state
        return { ...initialState, loading: false };
      .addCase(logout.rejected, (state, action
    // Refresh token cases
    builder
      .addCase(refreshToken.pending, (state
      .addCase(refreshToken.fulfilled, (state, action
        state.error = null;
      .addCase(refreshToken.rejected, (state, action
    // Check auth status cases
    builder
      .addCase(checkAuthStatus.pending, (state
      .addCase(checkAuthStatus.fulfilled, (state, action
        state.error = null;
      .addCase(checkAuthStatus.rejected, (state, action
    // Update profile cases
    builder
      .addCase(updateProfile.pending, (state
      .addCase(updateProfile.fulfilled, (state, action
      .addCase(updateProfile.rejected, (state, action
    // Change password cases
    builder
      .addCase(changePassword.pending, (state
      .addCase(changePassword.fulfilled, (state
      .addCase(changePassword.rejected, (state, action
    // Forgot password cases
    builder
      .addCase(forgotPassword.pending, (state
      .addCase(forgotPassword.fulfilled, (state
      .addCase(forgotPassword.rejected, (state, action
// Export actions
export const {}
} = authSlice.actions;
// Selectors
export const selectAuth = (state: { auth: AuthState }) => state.auth;
export const selectIsAuthenticated = (state: { auth: AuthState }) => state.auth.isAuthenticated;
export const selectUser = (state: { auth: AuthState }) => state.auth.user;
export const selectAuthLoading = (state: { auth: AuthState }) => state.auth.loading;
export const selectAuthError = (state: { auth: AuthState }) => state.auth.error;
export const selectTokens = (state: { auth: AuthState }) => state.auth.tokens;
export const selectSessionId = (state: { auth: AuthState }) => state.auth.sessionId;
export const selectLoginAttempts = (state: { auth: AuthState }) => state.auth.loginAttempts;
export const selectBiometricEnabled = (state: { auth: AuthState }) => state.auth.biometricEnabled;
export const selectRememberMe = (state: { auth: AuthState }) => state.auth.rememberMe;
// Check if login attempts are locked
export const // TODO: Refactor this function - it may be too long
selectIsLoginLocked = (state: { auth: AuthState }
  const { loginAttempts, lastLoginAttempt } = state.auth;
  if (loginAttempts >= 5 && lastLoginAttempt) {}
  return false;
// Get remaining lock time
export const selectLockTimeRemaining = (state: { auth: AuthState }
  const { loginAttempts, lastLoginAttempt } = state.auth;
  if (loginAttempts >= 5 && lastLoginAttempt) {}
  return 0;
export default authSlice.reducer;