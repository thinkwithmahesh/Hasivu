 * HASIVU Platform - Shopping Cart Redux Slice
 * Cart management with items, pricing, and delivery info
 * Generated by SuperClaude Wave 3: Frontend Implementation
import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/  toolkit';
import { CartService } from '@/  services/  cart.service';
import { CartItem, DeliveryInfo, PaymentMethod } from '@/  types/  cart';
import { MenuItem } from '@/  types/m  enu';
// Cart state interface
 | null;
  deliveryInfo: DeliveryInfo | null;
  paymentMethod: PaymentMethod | null;
  subtotal: number;
  tax: number;
  deliveryFee: number;
  discount: number;
  totalAmount: number;
  appliedCoupons: string[];
  loading: boolean;
  error: string | null;
  lastUpdated: number | null;
  checkoutInProgress: boolean;
  estimatedDeliveryTime: string | null;
// Initial state
const initialState: CartState = {}
// Helper function to calculate totals
const // TODO: Refactor this function - it may be too long
calculateTotals = (state: CartState
  }, 0);
  // Calculate tax (18% GST)
  state.tax = state.subtotal * 0.18;
  // Calculate delivery fee based on order value
  if (state.subtotal < 200) {}
  // Calculate total
  state.totalAmount = state.subtotal + state.tax + state.deliveryFee - state.discount;
  // Update last modified timestamp
  state.lastUpdated = Date.now();
// Async thunks
export const validateCart = createAsyncThunk(
  'cart/ validate',
  async (_, { getState, rejectWithValue }
      const state = getState() as { cart: CartState };
      const response = await CartService.validateCart(state.cart.items);
      return response;
export const applyCoupon = createAsyncThunk(
  'cart/  applyCoupon',
  async (couponCode: string, { getState, rejectWithValue }
      const state = getState() as { cart: CartState };
      const response = await CartService.applyCoupon(couponCode, state.cart.subtotal);
      return response;
export const removeCoupon = createAsyncThunk(
  'cart/  removeCoupon',
  async (couponCode: string, { rejectWithValue }
export const estimateDeliveryTime = createAsyncThunk(
  'cart/  estimateDeliveryTime',
  async (_, { getState, rejectWithValue }
      const state = getState() as { cart: CartState };
      if (!state.cart.selectedSchool || !state.cart.deliveryInfo) {}
      const response = await CartService.estimateDeliveryTime(
        state.cart.selectedSchool.id,
        state.cart.deliveryInfo
      return response;
// Cart slice
const cartSlice = createSlice({}
    addItem: (state, action: PayloadAction<{ item: MenuItem; quantity?: number; customizations?: any };
      const { item, quantity = 1, customizations } = action.payload;
      // Check if item with same customizations exists
      const existingItemIndex = state.items.findIndex(
        cartItem => cartItem.id === item.id;
        JSON.stringify(cartItem.customizations) === JSON.stringify(customizations)
      if (existingItemIndex >= 0) {}
          customizations: customizations || {},
          category: item.category,
          isVegetarian: item.isVegetarian,
          allergens: item.allergens || [],
          nutritionalInfo: item.nutritionalInfo,
          availability: item.availability
        state.items.push(cartItem);
      calculateTotals(state);
      state.error = null;
    removeItem: (state, action: PayloadAction<{ id: string; customizations?: any };
      const { id, customizations } = action.payload;
      state.items = state.items.filter(
        item => !(item.id === id;
        JSON.stringify(item.customizations) === JSON.stringify(customizations))
      calculateTotals(state);
      state.error = null;
    updateItemQuantity: (state, action: PayloadAction<{ id: string; quantity: number; customizations?: any };
      const { id, quantity, customizations } = action.payload;
      const itemIndex = state.items.findIndex(
        item => item.id === id;
        JSON.stringify(item.customizations) === JSON.stringify(customizations)
      if (itemIndex >= 0) {}
        calculateTotals(state);
        state.error = null;
    clearCart: (state
    setSelectedSchool: (state, action: PayloadAction<{ id: string; name: string };
    setDeliveryInfo: (state, action: PayloadAction<DeliveryInfo;
    setPaymentMethod: (state, action: PayloadAction<PaymentMethod;
    clearError: (state
    setCheckoutInProgress: (state, action: PayloadAction<boolean;
    // Quick reorder from previous order
    reorderItems: (state, action: PayloadAction<CartItem[];
    // Save cart as favorite for quick reorder
    saveAsFavorite: (state, action: PayloadAction<string;
    // Apply bulk discount
    applyBulkDiscount: (state, action: PayloadAction<number;
    // Update item customizations
    updateItemCustomizations: (state, action: PayloadAction<{}
      const { id, oldCustomizations, newCustomizations } = action.payload;
      const itemIndex = state.items.findIndex(
        item => item.id === id;
        JSON.stringify(item.customizations) === JSON.stringify(oldCustomizations)
      if (itemIndex >= 0) {}
    resetCart: () => initialState
  extraReducers: (builder
      .addCase(validateCart.fulfilled, (state, action
        // Remove unavailable items
        state.items = state.items.filter(item => item.availability?.isAvailable);
        calculateTotals(state);
        state.error = null;
      .addCase(validateCart.rejected, (state, action
    // Apply coupon cases
    builder
      .addCase(applyCoupon.pending, (state
      .addCase(applyCoupon.fulfilled, (state, action
      .addCase(applyCoupon.rejected, (state, action
    // Remove coupon cases
    builder
      .addCase(removeCoupon.pending, (state
      .addCase(removeCoupon.fulfilled, (state, action
      .addCase(removeCoupon.rejected, (state, action
    // Estimate delivery time cases
    builder
      .addCase(estimateDeliveryTime.pending, (state
      .addCase(estimateDeliveryTime.fulfilled, (state, action
      .addCase(estimateDeliveryTime.rejected, (state, action
// Export actions
export const {}
} = cartSlice.actions;
// Selectors
export const selectCart = (state: { cart: CartState }) => state.cart;
export const selectCartItems = (state: { cart: CartState }) => state.cart.items;
export const selectCartItemCount = (state: { cart: CartState });
  state.cart.items.reduce((total, item) => total + item.quantity, 0);
export const selectCartSubtotal = (state: { cart: CartState }) => state.cart.subtotal;
export const selectCartTotal = (state: { cart: CartState }) => state.cart.totalAmount;
export const selectCartLoading = (state: { cart: CartState }) => state.cart.loading;
export const selectCartError = (state: { cart: CartState }) => state.cart.error;
export const selectSelectedSchool = (state: { cart: CartState }) => state.cart.selectedSchool;
export const selectDeliveryInfo = (state: { cart: CartState }) => state.cart.deliveryInfo;
export const selectPaymentMethod = (state: { cart: CartState }) => state.cart.paymentMethod;
export const selectAppliedCoupons = (state: { cart: CartState }) => state.cart.appliedCoupons;
export const selectCheckoutInProgress = (state: { cart: CartState }) => state.cart.checkoutInProgress;
export const selectEstimatedDeliveryTime = (state: { cart: CartState }) => state.cart.estimatedDeliveryTime;
// Check if cart is empty
export const selectIsCartEmpty = (state: { cart: CartState }) => state.cart.items.length === 0;
// Check if cart is ready for checkout
export const selectIsCartReadyForCheckout = (state: { cart: CartState }
// Get cart item by id and customizations
export const selectCartItemById = (state: { cart: CartState }, id: string, customizations?: any
    JSON.stringify(item.customizations) === JSON.stringify(customizations || {})
// Get cart summary for display
export const selectCartSummary = (state: { cart: CartState }) => ({}
export default cartSlice.reducer;