/**
 * HASIVU Platform - Mobile App Entry Point
 * React Native app with Redux, Navigation, and Theme Support
 * Generated by SuperClaude Wave 3: Frontend Implementation
 */

import React, { useEffect, useState } from 'react';
import { LogBox, StatusBar } from 'react-native';
import { SafeAreaProvider } from 'react-native-safe-area-context';
import { Provider as PaperProvider } from 'react-native-paper';
import { Provider as ReduxProvider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { NavigationContainer } from '@react-navigation/native';
import * as SplashScreen from 'expo-splash-screen';
import * as Font from 'expo-font';
import * as Notifications from 'expo-notifications';

import { store, persistor } from '@/store';
import { theme } from '@/constants/theme';
import { AppNavigator } from '@/navigation/AppNavigator';
import { NotificationService } from '@/services/notification.service';
import { AuthService } from '@/services/auth.service';
import { LoadingScreen } from '@/components/common/LoadingScreen';
import { ErrorBoundary } from '@/components/common/ErrorBoundary';

// Configure notifications
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

// Ignore specific warnings in development
LogBox.ignoreLogs([
  'Require cycle:',
  'Remote debugger',
  'Setting a timer',
  'AsyncStorage has been extracted',
]);

/**
 * Main App Component
 */
export default function App(): JSX.Element {
  const [isReady, setIsReady] = useState(false);
  const [initializing, setInitializing] = useState(true);

  useEffect(() => {
    async function prepare() {
      try {
        // Keep the splash screen visible
        await SplashScreen.preventAutoHideAsync();

        // Pre-load fonts, make any API calls you need to do here
        await Font.loadAsync({
          'Poppins-Regular': require('@/assets/fonts/Poppins-Regular.ttf'),
          'Poppins-Medium': require('@/assets/fonts/Poppins-Medium.ttf'),
          'Poppins-SemiBold': require('@/assets/fonts/Poppins-SemiBold.ttf'),
          'Poppins-Bold': require('@/assets/fonts/Poppins-Bold.ttf'),
        });

        // Initialize services
        await Promise.all([
          AuthService.initialize(),
          NotificationService.initialize(),
        ]);

        // Simulate minimum loading time for better UX
        await new Promise(resolve => setTimeout(resolve, 2000));

      } catch (error) {
        console.error('App initialization error:', error);
      } finally {
        setIsReady(true);
        setInitializing(false);
      }
    }

    prepare();
  }, []);

  const onLayoutRootView = React.useCallback(async () => {
    if (isReady) {
      // Hide the splash screen once the app is ready
      await SplashScreen.hideAsync();
    }
  }, [isReady]);

  if (!isReady || initializing) {
    return <LoadingScreen message="Initializing HASIVU..." />;
  }

  return (
    <ErrorBoundary>
      <ReduxProvider store={store}>
        <PersistGate loading={<LoadingScreen message="Loading..." />} persistor={persistor}>
          <PaperProvider theme={theme}>
            <SafeAreaProvider onLayout={onLayoutRootView}>
              <StatusBar 
                barStyle="light-content" 
                backgroundColor={theme.colors.primary}
                translucent={false}
              />
              <NavigationContainer theme={theme}>
                <AppNavigator />
              </NavigationContainer>
            </SafeAreaProvider>
          </PaperProvider>
        </PersistGate>
      </ReduxProvider>
    </ErrorBoundary>
  );
}