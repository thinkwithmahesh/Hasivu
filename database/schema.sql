-- HASIVU Platform Database Schema
-- PostgreSQL 15+ with optimized indexes and JSONB storage
-- Generated by SuperClaude Wave 1: Infrastructure Foundation

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";
CREATE EXTENSION IF NOT EXISTS "btree_gin";

-- Create schemas for organization
CREATE SCHEMA IF NOT EXISTS hasivu_core;
CREATE SCHEMA IF NOT EXISTS hasivu_analytics;
CREATE SCHEMA IF NOT EXISTS hasivu_notifications;

-- Set search path
SET search_path = hasivu_core, public;

-- =====================================================
-- CORE PLATFORM TABLES
-- =====================================================

-- Schools and Organizations
CREATE TABLE schools (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_code VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    address JSONB NOT NULL,
    contact_info JSONB NOT NULL,
    subscription_plan VARCHAR(50) DEFAULT 'basic',
    settings JSONB DEFAULT '{}',
    timezone VARCHAR(50) DEFAULT 'Asia/Kolkata',
    academic_calendar JSONB DEFAULT '{}',
    status VARCHAR(20) DEFAULT 'active',
    onboarded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Vendors (Food Service Providers)
CREATE TABLE vendors (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    vendor_code VARCHAR(20) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    business_details JSONB NOT NULL,
    contact_info JSONB NOT NULL,
    certifications JSONB DEFAULT '[]',
    service_areas JSONB DEFAULT '[]',
    rating DECIMAL(3,2) DEFAULT 0.00,
    performance_metrics JSONB DEFAULT '{}',
    payment_details JSONB NOT NULL,
    status VARCHAR(20) DEFAULT 'active',
    verified_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- School-Vendor Relationships
CREATE TABLE school_vendors (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    vendor_id UUID NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,
    contract_details JSONB NOT NULL,
    service_types JSONB NOT NULL,
    pricing_model JSONB NOT NULL,
    performance_metrics JSONB DEFAULT '{}',
    status VARCHAR(20) DEFAULT 'active',
    contract_start DATE NOT NULL,
    contract_end DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(school_id, vendor_id)
);

-- =====================================================
-- USER MANAGEMENT
-- =====================================================

-- Users (Parents, Administrators, Support)
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email VARCHAR(255) NOT NULL UNIQUE,
    phone VARCHAR(20),
    password_hash VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL,
    profile JSONB NOT NULL,
    preferences JSONB DEFAULT '{}',
    security_settings JSONB DEFAULT '{}',
    two_factor_enabled BOOLEAN DEFAULT false,
    email_verified BOOLEAN DEFAULT false,
    phone_verified BOOLEAN DEFAULT false,
    last_login TIMESTAMP WITH TIME ZONE,
    login_attempts INTEGER DEFAULT 0,
    locked_until TIMESTAMP WITH TIME ZONE,
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Students
CREATE TABLE students (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    student_id VARCHAR(50) NOT NULL,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    class VARCHAR(50) NOT NULL,
    section VARCHAR(10),
    roll_number VARCHAR(50),
    date_of_birth DATE NOT NULL,
    dietary_restrictions JSONB DEFAULT '[]',
    allergies JSONB DEFAULT '[]',
    emergency_contacts JSONB NOT NULL,
    medical_info JSONB DEFAULT '{}',
    academic_info JSONB DEFAULT '{}',
    rfid_cards JSONB DEFAULT '[]',
    status VARCHAR(20) DEFAULT 'active',
    admission_date DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(school_id, student_id)
);

-- Parent-Student Relationships
CREATE TABLE parent_students (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    parent_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    relationship VARCHAR(50) NOT NULL,
    permissions JSONB DEFAULT '{}',
    notification_preferences JSONB DEFAULT '{}',
    is_primary BOOLEAN DEFAULT false,
    authorized_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(parent_id, student_id)
);

-- Admin Users for Schools
CREATE TABLE admin_users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
    vendor_id UUID REFERENCES vendors(id) ON DELETE CASCADE,
    admin_level VARCHAR(50) NOT NULL,
    permissions JSONB NOT NULL,
    department VARCHAR(100),
    reports_to UUID REFERENCES admin_users(id),
    status VARCHAR(20) DEFAULT 'active',
    appointed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT admin_users_org_check CHECK (
        (school_id IS NOT NULL AND vendor_id IS NULL) OR 
        (school_id IS NULL AND vendor_id IS NOT NULL) OR
        (school_id IS NULL AND vendor_id IS NULL)
    )
);

-- =====================================================
-- PRODUCT CATALOG AND MENU MANAGEMENT
-- =====================================================

-- Product Categories
CREATE TABLE product_categories (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name VARCHAR(255) NOT NULL,
    description TEXT,
    parent_id UUID REFERENCES product_categories(id),
    display_order INTEGER DEFAULT 0,
    icon VARCHAR(255),
    color_code VARCHAR(7),
    dietary_tags JSONB DEFAULT '[]',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Products (Meals and Items)
CREATE TABLE products (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    product_code VARCHAR(50) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category_id UUID NOT NULL REFERENCES product_categories(id),
    vendor_id UUID NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,
    base_price DECIMAL(10,2) NOT NULL,
    preparation_time INTEGER DEFAULT 30,
    dietary_info JSONB NOT NULL,
    nutritional_info JSONB NOT NULL,
    allergen_info JSONB DEFAULT '[]',
    ingredients JSONB DEFAULT '[]',
    images JSONB DEFAULT '[]',
    availability_rules JSONB DEFAULT '{}',
    customization_options JSONB DEFAULT '[]',
    tags JSONB DEFAULT '[]',
    rating DECIMAL(3,2) DEFAULT 0.00,
    reviews_count INTEGER DEFAULT 0,
    is_featured BOOLEAN DEFAULT false,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- School-specific Menu Configuration
CREATE TABLE school_menus (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    school_price DECIMAL(10,2) NOT NULL,
    availability_schedule JSONB NOT NULL,
    customizations JSONB DEFAULT '{}',
    min_order_quantity INTEGER DEFAULT 1,
    max_order_quantity INTEGER DEFAULT 10,
    advance_order_hours INTEGER DEFAULT 24,
    special_instructions TEXT,
    is_active BOOLEAN DEFAULT true,
    effective_from DATE NOT NULL,
    effective_until DATE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(school_id, product_id, effective_from)
);

-- Menu Planning and Scheduling
CREATE TABLE menu_schedules (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    schedule_date DATE NOT NULL,
    meal_type VARCHAR(50) NOT NULL,
    menu_items JSONB NOT NULL,
    special_events JSONB DEFAULT '[]',
    preparation_notes TEXT,
    nutritional_summary JSONB DEFAULT '{}',
    estimated_quantities JSONB DEFAULT '{}',
    status VARCHAR(20) DEFAULT 'draft',
    published_at TIMESTAMP WITH TIME ZONE,
    created_by UUID NOT NULL REFERENCES admin_users(id),
    approved_by UUID REFERENCES admin_users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(school_id, schedule_date, meal_type)
);

-- =====================================================
-- ORDER MANAGEMENT
-- =====================================================

-- Shopping Cart/Order Items
CREATE TABLE cart_items (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    parent_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    scheduled_date DATE NOT NULL,
    meal_type VARCHAR(50) NOT NULL,
    customizations JSONB DEFAULT '{}',
    special_instructions TEXT,
    unit_price DECIMAL(10,2) NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    is_recurring BOOLEAN DEFAULT false,
    recurrence_pattern JSONB,
    added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(parent_id, student_id, product_id, scheduled_date, meal_type)
);

-- Orders
CREATE TABLE orders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    order_number VARCHAR(50) NOT NULL UNIQUE,
    parent_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    vendor_id UUID NOT NULL REFERENCES vendors(id) ON DELETE CASCADE,
    order_date DATE NOT NULL,
    meal_type VARCHAR(50) NOT NULL,
    items JSONB NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    taxes DECIMAL(10,2) DEFAULT 0.00,
    delivery_charges DECIMAL(10,2) DEFAULT 0.00,
    discounts DECIMAL(10,2) DEFAULT 0.00,
    total_amount DECIMAL(10,2) NOT NULL,
    payment_status VARCHAR(20) DEFAULT 'pending',
    order_status VARCHAR(20) DEFAULT 'confirmed',
    delivery_status VARCHAR(20) DEFAULT 'scheduled',
    special_instructions TEXT,
    estimated_delivery_time TIMESTAMP WITH TIME ZONE,
    actual_delivery_time TIMESTAMP WITH TIME ZONE,
    delivery_feedback JSONB,
    cancellation_reason TEXT,
    refund_details JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Saved Preferences and Quick Reordering
CREATE TABLE saved_orders (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    parent_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    order_template JSONB NOT NULL,
    meal_types JSONB NOT NULL,
    frequency VARCHAR(50),
    tags JSONB DEFAULT '[]',
    is_favorite BOOLEAN DEFAULT false,
    usage_count INTEGER DEFAULT 0,
    last_used TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- RFID DELIVERY VERIFICATION
-- =====================================================

-- RFID Devices and Hardware
CREATE TABLE rfid_devices (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    device_id VARCHAR(100) NOT NULL UNIQUE,
    device_type VARCHAR(50) NOT NULL,
    vendor_brand VARCHAR(100),
    model VARCHAR(100),
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    location JSONB NOT NULL,
    configuration JSONB NOT NULL,
    firmware_version VARCHAR(50),
    last_heartbeat TIMESTAMP WITH TIME ZONE,
    status VARCHAR(20) DEFAULT 'active',
    maintenance_schedule JSONB DEFAULT '{}',
    performance_metrics JSONB DEFAULT '{}',
    installed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- RFID Cards for Students
CREATE TABLE rfid_cards (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    card_id VARCHAR(100) NOT NULL UNIQUE,
    card_type VARCHAR(50) NOT NULL,
    student_id UUID NOT NULL REFERENCES students(id) ON DELETE CASCADE,
    school_id UUID NOT NULL REFERENCES schools(id) ON DELETE CASCADE,
    card_number VARCHAR(50),
    encrypted_data TEXT,
    activation_date DATE,
    expiry_date DATE,
    status VARCHAR(20) DEFAULT 'active',
    replacement_reason TEXT,
    previous_card_id UUID REFERENCES rfid_cards(id),
    issued_by UUID NOT NULL REFERENCES admin_users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- RFID Scan Events and Delivery Verification
CREATE TABLE rfid_scans (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    scan_id VARCHAR(100) NOT NULL UNIQUE,
    device_id UUID NOT NULL REFERENCES rfid_devices(id),
    card_id UUID NOT NULL REFERENCES rfid_cards(id),
    order_id UUID NOT NULL REFERENCES orders(id),
    scan_timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
    scan_location JSONB NOT NULL,
    verification_photos JSONB DEFAULT '[]',
    delivery_confirmation JSONB NOT NULL,
    verification_status VARCHAR(20) DEFAULT 'verified',
    anomalies JSONB DEFAULT '[]',
    processing_time INTEGER,
    parent_notified_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- PAYMENT PROCESSING
-- =====================================================

-- Payment Gateways Configuration
CREATE TABLE payment_gateways (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    gateway_name VARCHAR(100) NOT NULL,
    gateway_type VARCHAR(50) NOT NULL,
    configuration JSONB NOT NULL,
    supported_methods JSONB NOT NULL,
    transaction_fees JSONB NOT NULL,
    currency_support JSONB NOT NULL,
    status VARCHAR(20) DEFAULT 'active',
    priority INTEGER DEFAULT 1,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Payment Methods for Users
CREATE TABLE payment_methods (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    gateway_id UUID NOT NULL REFERENCES payment_gateways(id),
    method_type VARCHAR(50) NOT NULL,
    encrypted_details JSONB NOT NULL,
    display_name VARCHAR(255),
    is_default BOOLEAN DEFAULT false,
    verification_status VARCHAR(20) DEFAULT 'pending',
    verification_data JSONB,
    expiry_date DATE,
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Payment Transactions
CREATE TABLE payment_transactions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    transaction_id VARCHAR(100) NOT NULL UNIQUE,
    order_id UUID NOT NULL REFERENCES orders(id),
    user_id UUID NOT NULL REFERENCES users(id),
    payment_method_id UUID NOT NULL REFERENCES payment_methods(id),
    gateway_id UUID NOT NULL REFERENCES payment_gateways(id),
    amount DECIMAL(12,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    gateway_transaction_id VARCHAR(255),
    payment_status VARCHAR(20) DEFAULT 'pending',
    gateway_response JSONB,
    failure_reason TEXT,
    refund_details JSONB,
    processing_fees DECIMAL(10,2) DEFAULT 0.00,
    initiated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Subscription Plans and Billing
CREATE TABLE subscription_plans (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    plan_name VARCHAR(100) NOT NULL,
    plan_type VARCHAR(50) NOT NULL,
    billing_cycle VARCHAR(20) NOT NULL,
    base_price DECIMAL(10,2) NOT NULL,
    features JSONB NOT NULL,
    usage_limits JSONB NOT NULL,
    trial_period_days INTEGER DEFAULT 0,
    discount_rules JSONB DEFAULT '[]',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User Subscriptions
CREATE TABLE user_subscriptions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    plan_id UUID NOT NULL REFERENCES subscription_plans(id),
    school_id UUID REFERENCES schools(id) ON DELETE CASCADE,
    subscription_status VARCHAR(20) DEFAULT 'active',
    billing_status VARCHAR(20) DEFAULT 'current',
    current_period_start DATE NOT NULL,
    current_period_end DATE NOT NULL,
    trial_end DATE,
    usage_metrics JSONB DEFAULT '{}',
    billing_details JSONB NOT NULL,
    auto_renewal BOOLEAN DEFAULT true,
    cancellation_reason TEXT,
    cancelled_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Invoices and Billing
CREATE TABLE invoices (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    invoice_number VARCHAR(50) NOT NULL UNIQUE,
    user_id UUID NOT NULL REFERENCES users(id),
    subscription_id UUID REFERENCES user_subscriptions(id),
    billing_period_start DATE NOT NULL,
    billing_period_end DATE NOT NULL,
    line_items JSONB NOT NULL,
    subtotal DECIMAL(10,2) NOT NULL,
    tax_amount DECIMAL(10,2) DEFAULT 0.00,
    discount_amount DECIMAL(10,2) DEFAULT 0.00,
    total_amount DECIMAL(10,2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    payment_status VARCHAR(20) DEFAULT 'pending',
    payment_due_date DATE NOT NULL,
    payment_transaction_id UUID REFERENCES payment_transactions(id),
    invoice_pdf_url TEXT,
    sent_at TIMESTAMP WITH TIME ZONE,
    paid_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- NOTIFICATIONS AND COMMUNICATION
-- =====================================================

-- Move to hasivu_notifications schema
SET search_path = hasivu_notifications, hasivu_core, public;

-- Notification channels and configuration
CREATE TABLE notification_channels (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    channel_type VARCHAR(50) NOT NULL,
    provider VARCHAR(100) NOT NULL,
    configuration JSONB NOT NULL,
    capabilities JSONB NOT NULL,
    rate_limits JSONB NOT NULL,
    fallback_chain JSONB DEFAULT '[]',
    status VARCHAR(20) DEFAULT 'active',
    analytics JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Notification messages with comprehensive tracking
CREATE TABLE notification_messages (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    message_id VARCHAR(255) NOT NULL UNIQUE,
    recipient_id UUID NOT NULL REFERENCES hasivu_core.users(id),
    channels JSONB NOT NULL,
    content JSONB NOT NULL,
    template_id UUID,
    priority VARCHAR(20) DEFAULT 'normal',
    scheduling JSONB,
    delivery JSONB NOT NULL,
    engagement JSONB DEFAULT '{}',
    metadata JSONB NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    scheduled_for TIMESTAMP WITH TIME ZONE,
    delivered_at TIMESTAMP WITH TIME ZONE
);

-- Notification templates with multi-channel support
CREATE TABLE notification_templates (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    template_id VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(100) NOT NULL,
    channels JSONB NOT NULL,
    variables JSONB DEFAULT '[]',
    localization JSONB DEFAULT '{}',
    personalization JSONB DEFAULT '[]',
    analytics JSONB DEFAULT '{}',
    version INTEGER DEFAULT 1,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User notification preferences
CREATE TABLE notification_preferences (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES hasivu_core.users(id),
    channel_preferences JSONB NOT NULL,
    category_settings JSONB NOT NULL,
    timing_preferences JSONB NOT NULL,
    emergency_overrides JSONB DEFAULT '[]',
    family_coordination JSONB,
    do_not_disturb JSONB DEFAULT '[]',
    analytics JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(user_id)
);

-- WhatsApp specific tables
CREATE TABLE whatsapp_business_config (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    business_account_id VARCHAR(255) NOT NULL UNIQUE,
    phone_number VARCHAR(20) NOT NULL UNIQUE,
    display_name VARCHAR(255),
    webhook_url TEXT NOT NULL,
    webhook_verify_token VARCHAR(255) NOT NULL,
    access_token TEXT NOT NULL,
    api_version VARCHAR(10) DEFAULT 'v18.0',
    rate_limits JSONB NOT NULL,
    compliance_settings JSONB NOT NULL,
    quality_rating DECIMAL(3,2),
    status VARCHAR(20) DEFAULT 'active',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- =====================================================
-- ANALYTICS AND REPORTING
-- =====================================================

-- Move to hasivu_analytics schema
SET search_path = hasivu_analytics, hasivu_core, public;

-- Analytics dashboards and configurations
CREATE TABLE analytics_dashboards (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    dashboard_id VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    dashboard_type VARCHAR(50) NOT NULL,
    owner_id UUID NOT NULL REFERENCES hasivu_core.users(id),
    configuration JSONB NOT NULL,
    widgets JSONB NOT NULL,
    permissions JSONB NOT NULL,
    analytics JSONB DEFAULT '{}',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- KPI metrics with historical tracking
CREATE TABLE kpi_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metric_id VARCHAR(100) NOT NULL UNIQUE,
    name VARCHAR(255) NOT NULL,
    category VARCHAR(50) NOT NULL,
    value DECIMAL(12,4) NOT NULL,
    previous_value DECIMAL(12,4),
    target DECIMAL(12,4),
    calculation_method VARCHAR(100) NOT NULL,
    dimensions JSONB NOT NULL,
    timeframe JSONB NOT NULL,
    alert_thresholds JSONB DEFAULT '[]',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Financial analytics data
CREATE TABLE financial_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    metric_type VARCHAR(50) NOT NULL,
    metric_value DECIMAL(15,4) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    dimensions JSONB NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    aggregation_period VARCHAR(20),
    school_id UUID REFERENCES hasivu_core.schools(id),
    vendor_id UUID REFERENCES hasivu_core.vendors(id)
);

-- Student analytics data
CREATE TABLE student_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    student_id UUID NOT NULL REFERENCES hasivu_core.students(id),
    metric_type VARCHAR(50) NOT NULL,
    metric_value DECIMAL(12,4) NOT NULL,
    dimensions JSONB NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    aggregation_period VARCHAR(20),
    privacy_level VARCHAR(20) DEFAULT 'aggregated'
);

-- Operational analytics data
CREATE TABLE operational_analytics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    operation_type VARCHAR(50) NOT NULL,
    metric_type VARCHAR(50) NOT NULL,
    metric_value DECIMAL(12,4) NOT NULL,
    dimensions JSONB NOT NULL,
    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    aggregation_period VARCHAR(20),
    school_id UUID REFERENCES hasivu_core.schools(id),
    vendor_id UUID REFERENCES hasivu_core.vendors(id),
    device_id VARCHAR(255)
);

-- =====================================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- =====================================================

-- Reset to core schema for indexes
SET search_path = hasivu_core, public;

-- Core entity indexes
CREATE INDEX idx_schools_status_onboarded ON schools(status, onboarded_at);
CREATE INDEX idx_vendors_status_rating ON vendors(status, rating DESC);
CREATE INDEX idx_school_vendors_school_status ON school_vendors(school_id, status);

-- User and student indexes
CREATE INDEX idx_users_email_status ON users(email, status);
CREATE INDEX idx_users_role_status ON users(role, status);
CREATE INDEX idx_students_school_class ON students(school_id, class, status);
CREATE INDEX idx_parent_students_parent ON parent_students(parent_id, is_primary);

-- Product and menu indexes
CREATE INDEX idx_products_vendor_active ON products(vendor_id, is_active);
CREATE INDEX idx_products_category_active ON products(category_id, is_active);
CREATE INDEX idx_school_menus_school_date ON school_menus(school_id, effective_from, is_active);
CREATE INDEX idx_menu_schedules_school_date ON menu_schedules(school_id, schedule_date);

-- Order and cart indexes
CREATE INDEX idx_orders_parent_date ON orders(parent_id, order_date DESC);
CREATE INDEX idx_orders_school_date ON orders(school_id, order_date DESC);
CREATE INDEX idx_orders_status_date ON orders(order_status, order_date DESC);
CREATE INDEX idx_cart_items_parent_student ON cart_items(parent_id, student_id, scheduled_date);

-- RFID system indexes
CREATE INDEX idx_rfid_devices_school_status ON rfid_devices(school_id, status);
CREATE INDEX idx_rfid_cards_student_status ON rfid_cards(student_id, status);
CREATE INDEX idx_rfid_scans_order_timestamp ON rfid_scans(order_id, scan_timestamp DESC);
CREATE INDEX idx_rfid_scans_device_timestamp ON rfid_scans(device_id, scan_timestamp DESC);

-- Payment indexes
CREATE INDEX idx_payment_transactions_user_status ON payment_transactions(user_id, payment_status);
CREATE INDEX idx_payment_transactions_order ON payment_transactions(order_id);
CREATE INDEX idx_invoices_user_period ON invoices(user_id, billing_period_end DESC);
CREATE INDEX idx_user_subscriptions_user_status ON user_subscriptions(user_id, subscription_status);

-- JSONB indexes for better query performance
CREATE INDEX idx_products_dietary_info ON products USING GIN(dietary_info);
CREATE INDEX idx_students_dietary_restrictions ON students USING GIN(dietary_restrictions);
CREATE INDEX idx_orders_items ON orders USING GIN(items);
CREATE INDEX idx_school_menus_availability ON school_menus USING GIN(availability_schedule);

-- Notification schema indexes
CREATE INDEX idx_notification_messages_recipient_priority ON hasivu_notifications.notification_messages(recipient_id, priority);
CREATE INDEX idx_notification_messages_scheduled ON hasivu_notifications.notification_messages(scheduled_for);

-- Analytics schema indexes
CREATE INDEX idx_financial_analytics_type_timestamp ON hasivu_analytics.financial_analytics(metric_type, timestamp);
CREATE INDEX idx_student_analytics_student_type ON hasivu_analytics.student_analytics(student_id, metric_type);
CREATE INDEX idx_operational_analytics_school_type ON hasivu_analytics.operational_analytics(school_id, metric_type);

-- =====================================================
-- VIEWS FOR COMMON QUERIES
-- =====================================================

-- Active student orders view
CREATE VIEW active_student_orders AS
SELECT 
    o.*,
    s.name as student_name,
    s.class,
    s.section,
    sc.name as school_name,
    u.email as parent_email
FROM orders o
JOIN students s ON o.student_id = s.id
JOIN schools sc ON o.school_id = sc.id
JOIN users u ON o.parent_id = u.id
WHERE o.order_status IN ('confirmed', 'preparing', 'ready', 'out_for_delivery');

-- Student dietary summary view
CREATE VIEW student_dietary_summary AS
SELECT 
    s.id,
    s.name,
    s.class,
    s.dietary_restrictions,
    s.allergies,
    COUNT(o.id) as total_orders,
    AVG(o.total_amount) as avg_order_value
FROM students s
LEFT JOIN orders o ON s.id = o.student_id
GROUP BY s.id, s.name, s.class, s.dietary_restrictions, s.allergies;

-- School performance dashboard view
CREATE VIEW school_performance_dashboard AS
SELECT 
    s.id,
    s.name,
    COUNT(DISTINCT st.id) as total_students,
    COUNT(DISTINCT o.id) as total_orders,
    SUM(o.total_amount) as total_revenue,
    AVG(o.total_amount) as avg_order_value,
    COUNT(DISTINCT o.parent_id) as active_parents
FROM schools s
LEFT JOIN students st ON s.id = st.school_id
LEFT JOIN orders o ON s.id = o.school_id
WHERE s.status = 'active'
GROUP BY s.id, s.name;

-- =====================================================
-- TRIGGERS FOR AUTOMATIC UPDATES
-- =====================================================

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at triggers to all relevant tables
CREATE TRIGGER update_schools_updated_at BEFORE UPDATE ON schools FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_vendors_updated_at BEFORE UPDATE ON vendors FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_students_updated_at BEFORE UPDATE ON students FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_orders_updated_at BEFORE UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- SECURITY AND PERMISSIONS
-- =====================================================

-- Create roles for different access levels
CREATE ROLE hasivu_admin;
CREATE ROLE hasivu_school_admin;
CREATE ROLE hasivu_vendor;
CREATE ROLE hasivu_parent;
CREATE ROLE hasivu_readonly;

-- Grant appropriate permissions
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA hasivu_core TO hasivu_admin;
GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA hasivu_core TO hasivu_admin;

GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA hasivu_core TO hasivu_school_admin;
GRANT USAGE ON ALL SEQUENCES IN SCHEMA hasivu_core TO hasivu_school_admin;

GRANT SELECT ON ALL TABLES IN SCHEMA hasivu_core TO hasivu_readonly;

-- Row Level Security policies would be implemented based on specific requirements
-- This is a foundation that can be extended with RLS policies

-- =====================================================
-- SAMPLE DATA INSERTION (Development/Testing)
-- =====================================================

-- Insert sample school
INSERT INTO schools (school_code, name, address, contact_info) VALUES 
('SCH001', 'Bangalore International School', 
 '{"street": "123 Education Lane", "city": "Bangalore", "state": "Karnataka", "pincode": "560001"}',
 '{"phone": "+91-80-12345678", "email": "admin@bis.edu.in", "website": "https://bis.edu.in"}');

-- Insert sample vendor
INSERT INTO vendors (vendor_code, name, business_details, contact_info, payment_details) VALUES 
('VEN001', 'Healthy Meals Co.', 
 '{"business_type": "food_service", "registration": "REG123456", "license": "LIC789012"}',
 '{"phone": "+91-80-87654321", "email": "orders@healthymeals.co.in"}',
 '{"bank_account": "encrypted_details", "payment_terms": "net_15"}');

-- =====================================================
-- COMMENTS FOR DOCUMENTATION
-- =====================================================

COMMENT ON SCHEMA hasivu_core IS 'Core HASIVU platform tables for users, schools, products, and orders';
COMMENT ON SCHEMA hasivu_analytics IS 'Analytics and reporting tables for business intelligence';
COMMENT ON SCHEMA hasivu_notifications IS 'Notification system tables for multi-channel communication';

COMMENT ON TABLE schools IS 'Educational institutions using the HASIVU platform';
COMMENT ON TABLE vendors IS 'Food service providers serving schools';
COMMENT ON TABLE students IS 'Students enrolled in schools with meal service';
COMMENT ON TABLE orders IS 'Meal orders placed by parents for students';
COMMENT ON TABLE rfid_scans IS 'RFID-based delivery verification records';
COMMENT ON TABLE payment_transactions IS 'Payment processing records with gateway integration';

-- Set default search path back
SET search_path = hasivu_core, public;

-- Database schema creation completed
SELECT 'HASIVU Platform Database Schema Created Successfully' as status;