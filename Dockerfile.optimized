# Optimized Multi-stage Dockerfile for Hasivu Platform
# Enhanced for production deployment with minimal image size and maximum performance

# ================================
# Stage 1: Base Dependencies Layer
# ================================
FROM node:18-alpine AS base
WORKDIR /app

# Install system dependencies and security updates
RUN apk add --no-cache \
    libc6-compat \
    dumb-init \
    tini \
    && apk update && apk upgrade \
    && rm -rf /var/cache/apk/*

# Create non-root user early for better layer caching
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# ================================
# Stage 2: Backend Dependencies
# ================================
FROM base AS backend-deps

# Copy package files first for better caching
COPY package*.json ./

# Install dependencies with optimized settings
RUN npm ci --only=production --no-audit --no-fund --prefer-offline \
    && npm cache clean --force

# ================================
# Stage 3: Frontend Dependencies
# ================================
FROM base AS frontend-deps

# Copy package files for frontend
COPY web/package*.json ./web/

# Install frontend dependencies
RUN cd web && npm ci --only=production --no-audit --no-fund --prefer-offline \
    && npm cache clean --force

# ================================
# Stage 4: Backend Builder
# ================================
FROM base AS backend-builder
WORKDIR /app

# Copy dependencies from deps stage
COPY --from=backend-deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy source code (excluding node_modules for better caching)
COPY --chown=nodejs:nodejs . .

# Generate Prisma client (cached if schema unchanged)
RUN npx prisma generate

# Build backend with optimizations
ENV NODE_ENV=production
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# ================================
# Stage 5: Frontend Builder
# ================================
FROM base AS frontend-builder
WORKDIR /app

# Copy frontend dependencies
COPY --from=frontend-deps --chown=nodejs:nodejs /app/web/node_modules ./web/node_modules

# Copy web source code
COPY --chown=nodejs:nodejs web ./web

# Build frontend with optimizations
WORKDIR /app/web
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production

# Build arguments for environment variables
ARG NEXT_PUBLIC_API_URL
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL

# Build with standalone output for better performance
RUN npm run build && \
    npm prune --production && \
    npm cache clean --force

# ================================
# Stage 6: Production Backend Image
# ================================
FROM base AS backend-production
WORKDIR /app

# Copy built backend with minimal layers
COPY --from=backend-builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=backend-builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=backend-builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=backend-builder --chown=nodejs:nodejs /app/prisma ./prisma

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3001

# Health check with optimized settings
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "dist/index.js"]

# ================================
# Stage 7: Production Frontend Image
# ================================
FROM base AS frontend-production
WORKDIR /app

# Copy built frontend (standalone build for better performance)
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/.next/standalone ./
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/.next/static ./.next/static
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/public ./public

# Switch to non-root user
USER nodejs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "server.js"]

# ================================
# Stage 8: Combined Production Image (Default)
# ================================
FROM base AS production
WORKDIR /app

# Install additional runtime dependencies
RUN apk add --no-cache \
    curl \
    && rm -rf /var/cache/apk/*

# Copy backend
COPY --from=backend-builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=backend-builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=backend-builder --chown=nodejs:nodejs /app/package*.json ./
COPY --from=backend-builder --chown=nodejs:nodejs /app/prisma ./prisma

# Copy frontend
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/.next ./web/.next
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/public ./web/public
COPY --from=frontend-builder --chown=nodejs:nodejs /app/web/package*.json ./web/

# Copy startup script
COPY --chown=nodejs:nodejs scripts/docker-entrypoint.sh ./
RUN chmod +x docker-entrypoint.sh

# Create necessary directories
RUN mkdir -p /app/logs && chown -R nodejs:nodejs /app/logs

# Switch to non-root user
USER nodejs

# Expose ports
EXPOSE 3000 3001

# Health check for combined service
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:3000/health || exit 1

# Use tini as init system
ENTRYPOINT ["/sbin/tini", "--"]

# Start application
CMD ["./docker-entrypoint.sh"]

# ================================
# Stage 9: Debug Image (Optional)
# ================================
FROM production AS debug

# Switch back to root for debug tools
USER root

# Install debug tools
RUN apk add --no-cache \
    bash \
    curl \
    vim \
    htop \
    && rm -rf /var/cache/apk/*

# Switch back to nodejs user
USER nodejs

# Debug command
CMD ["bash"]