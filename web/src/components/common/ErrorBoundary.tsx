/**
 * HASIVU Platform - Error Boundary Component
 * React error boundary with fallback UI, error reporting, and retry functionality
 * Generated by SuperClaude Frontend Implementation
 */

import React, { Component, ReactNode, ErrorInfo as ReactErrorInfo } from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Container,
  Alert,
  AlertTitle,
  Collapse,
  IconButton as _IconButton,
  Chip,
  Stack,
  useTheme,
  Fade,
} from '@mui/material';
import {
  ErrorOutline,
  Refresh,
  ExpandMore,
  ExpandLess,
  BugReport,
  Home,
  ContactSupport,
} from '@mui/icons-material';
import { keyframes } from '@mui/system';

// Animation for error appearance
const errorShake = keyframes`
  0%, 20%, 40%, 60%, 80%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-2px);
  }
`;

const fadeInScale = keyframes`
  0% {
    opacity: 0;
    transform: scale(0.9);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
`;

/**
 * Custom error information interface
 */
export interface CustomErrorInfo {
  message: string;
  stack?: string;
  componentStack?: string;
  timestamp: number;
  userAgent: string;
  url: string;
  userId?: string;
}

/**
 * Error Boundary Props Interface
 */
export interface ErrorBoundaryProps {
  /** Child components to render */
  children: ReactNode;
  /** Custom fallback component */
  fallback?: React.ComponentType<ErrorFallbackProps>;
  /** Error reporting callback */
  onError?: (error: Error, errorInfo: CustomErrorInfo) => void;
  /** Show detailed error information */
  showDetails?: boolean;
  /** Allow users to retry */
  showRetry?: boolean;
  /** Custom error messages */
  errorMessages?: {
    title?: string;
    description?: string;
    actionText?: string;
  };
  /** Isolation level - prevents error propagation */
  isolate?: boolean;
}

/**
 * Error Boundary State Interface
 */
interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
  errorInfo: ReactErrorInfo | null;
  errorId: string;
  retryCount: number;
  showDetails: boolean;
}

/**
 * Error Fallback Props Interface
 */
export interface ErrorFallbackProps {
  error: Error | null;
  errorInfo: ReactErrorInfo | null;
  errorId: string;
  retryCount: number;
  showDetails: boolean;
  onRetry: () => void;
  onToggleDetails: () => void;
  onReportError: () => void;
  onGoHome: () => void;
  customMessages?: {
    title?: string;
    description?: string;
    actionText?: string;
  };
}

/**
 * Default Error Fallback Component
 */
const DefaultErrorFallback: React.FC<ErrorFallbackProps> = ({
  error,
  errorInfo,
  errorId,
  retryCount,
  showDetails,
  onRetry,
  onToggleDetails,
  onReportError,
  onGoHome,
  customMessages,
}) => {
  const theme = useTheme();

  const errorTitle = customMessages?.title || 'Oops! Something went wrong';
  const errorDescription =
    customMessages?.description ||
    "We're sorry, but something unexpected happened. Don't worry, our team has been notified and we're working on fixing this issue.";
  const actionText = customMessages?.actionText || 'Try Again';

  // Generate user-friendly error message
  const getUserFriendlyMessage = (error: Error | null): string => {
    if (!error) return 'An unknown error occurred';

    const message = error.message?.toLowerCase() || '';

    if (message.includes('network') || message.includes('fetch')) {
      return 'Network connection issue. Please check your internet connection.';
    }
    if (message.includes('timeout')) {
      return 'The request timed out. Please try again.';
    }
    if (message.includes('unauthorized') || message.includes('403') || message.includes('401')) {
      return 'Authentication required. Please log in again.';
    }
    if (message.includes('not found') || message.includes('404')) {
      return 'The requested resource was not found.';
    }
    if (message.includes('server') || message.includes('500')) {
      return 'Server error. Please try again later.';
    }

    return 'An unexpected error occurred. Please try again.';
  };

  const friendlyMessage = getUserFriendlyMessage(error);
  const isNetworkError =
    error?.message?.toLowerCase().includes('network') ||
    error?.message?.toLowerCase().includes('fetch');

  return (
    <Container maxWidth="md" sx={{ py: 4 }}>
      <Fade in={true} timeout={600}>
        <Paper
          elevation={3}
          sx={{
            p: { xs: 3, sm: 4, md: 6 },
            textAlign: 'center',
            borderRadius: 3,
            background: `linear-gradient(135deg, ${theme.palette.error.light}15, ${theme.palette.background.paper})`,
            border: `1px solid ${theme.palette.error.light}30`,
            animation: `${fadeInScale} 0.6s ease-out`,
            position: 'relative',
            overflow: 'hidden',
            '&::before': {
              content: '""',
              position: 'absolute',
              top: 0,
              left: 0,
              right: 0,
              height: 4,
              background: `linear-gradient(90deg, ${theme.palette.error.main}, ${theme.palette.error.light})`,
            },
          }}
        >
          {/* Error Icon */}
          <Box
            sx={{
              display: 'inline-flex',
              alignItems: 'center',
              justifyContent: 'center',
              width: 80,
              height: 80,
              borderRadius: '50%',
              backgroundColor: `${theme.palette.error.light}20`,
              mb: 3,
              animation: retryCount > 0 ? `${errorShake} 0.5s ease-in-out` : undefined,
            }}
          >
            <ErrorOutline
              sx={{
                fontSize: 40,
                color: theme.palette.error.main,
              }}
            />
          </Box>

          {/* Error Title */}
          <Typography
            variant="h4"
            gutterBottom
            sx={{
              fontWeight: 600,
              color: theme.palette.text.primary,
              mb: 2,
              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.25rem' },
            }}
          >
            {errorTitle}
          </Typography>

          {/* User-friendly Error Message */}
          <Typography
            variant="h6"
            sx={{
              color: theme.palette.error.main,
              mb: 2,
              fontWeight: 500,
              fontSize: { xs: '1rem', sm: '1.125rem' },
            }}
          >
            {friendlyMessage}
          </Typography>

          {/* Error Description */}
          <Typography
            variant="body1"
            sx={{
              color: theme.palette.text.secondary,
              mb: 4,
              maxWidth: 600,
              mx: 'auto',
              lineHeight: 1.6,
            }}
          >
            {errorDescription}
          </Typography>

          {/* Error ID and Retry Count */}
          <Stack
            direction={{ xs: 'column', sm: 'row' }}
            spacing={1}
            justifyContent="center"
            sx={{ mb: 4 }}
          >
            <Chip
              label={`Error ID: ${errorId}`}
              size="small"
              variant="outlined"
              color="error"
              sx={{ fontFamily: 'monospace' }}
            />
            {retryCount > 0 && (
              <Chip
                label={`Retry attempts: ${retryCount}`}
                size="small"
                variant="outlined"
                color="warning"
              />
            )}
            {isNetworkError && (
              <Chip
                label="Network Issue"
                size="small"
                color="warning"
                icon={<ContactSupport fontSize="small" />}
              />
            )}
          </Stack>

          {/* Action Buttons */}
          <Stack
            direction={{ xs: 'column', sm: 'row' }}
            spacing={2}
            justifyContent="center"
            sx={{ mb: 3 }}
          >
            <Button
              variant="contained"
              size="large"
              startIcon={<Refresh />}
              onClick={onRetry}
              disabled={retryCount >= 3}
              sx={{
                minWidth: 140,
                borderRadius: 2,
                '&:hover': {
                  transform: 'translateY(-1px)',
                },
              }}
            >
              {retryCount >= 3 ? 'Max Retries Reached' : actionText}
            </Button>

            <Button
              variant="outlined"
              size="large"
              startIcon={<Home />}
              onClick={onGoHome}
              sx={{
                minWidth: 140,
                borderRadius: 2,
                '&:hover': {
                  transform: 'translateY(-1px)',
                },
              }}
            >
              Go Home
            </Button>

            <Button
              variant="text"
              size="large"
              startIcon={<BugReport />}
              onClick={onReportError}
              sx={{
                minWidth: 140,
                borderRadius: 2,
              }}
            >
              Report Issue
            </Button>
          </Stack>

          {/* Toggle Details Button */}
          <Button
            variant="text"
            size="small"
            endIcon={showDetails ? <ExpandLess /> : <ExpandMore />}
            onClick={onToggleDetails}
            sx={{
              mb: 2,
              color: theme.palette.text.secondary,
              textTransform: 'none',
            }}
          >
            {showDetails ? 'Hide' : 'Show'} Error Details
          </Button>

          {/* Error Details Collapse */}
          <Collapse in={showDetails}>
            <Alert
              severity="error"
              sx={{
                textAlign: 'left',
                mt: 2,
                '& .MuiAlert-message': {
                  width: '100%',
                },
              }}
            >
              <AlertTitle>Technical Details</AlertTitle>

              <Box sx={{ mb: 2 }}>
                <Typography variant="subtitle2" gutterBottom>
                  Error Message:
                </Typography>
                <Typography
                  variant="body2"
                  component="pre"
                  sx={{
                    fontFamily: 'monospace',
                    backgroundColor: theme.palette.grey[100],
                    p: 1,
                    borderRadius: 1,
                    fontSize: '0.75rem',
                    overflow: 'auto',
                    maxHeight: 100,
                  }}
                >
                  {error?.message || 'No error message available'}
                </Typography>
              </Box>

              {error?.stack && (
                <Box sx={{ mb: 2 }}>
                  <Typography variant="subtitle2" gutterBottom>
                    Stack Trace:
                  </Typography>
                  <Typography
                    variant="body2"
                    component="pre"
                    sx={{
                      fontFamily: 'monospace',
                      backgroundColor: theme.palette.grey[100],
                      p: 1,
                      borderRadius: 1,
                      fontSize: '0.75rem',
                      overflow: 'auto',
                      maxHeight: 200,
                    }}
                  >
                    {error.stack}
                  </Typography>
                </Box>
              )}

              {errorInfo?.componentStack && (
                <Box>
                  <Typography variant="subtitle2" gutterBottom>
                    Component Stack:
                  </Typography>
                  <Typography
                    variant="body2"
                    component="pre"
                    sx={{
                      fontFamily: 'monospace',
                      backgroundColor: theme.palette.grey[100],
                      p: 1,
                      borderRadius: 1,
                      fontSize: '0.75rem',
                      overflow: 'auto',
                      maxHeight: 200,
                    }}
                  >
                    {errorInfo.componentStack}
                  </Typography>
                </Box>
              )}
            </Alert>
          </Collapse>

          {/* School-friendly encouragement */}
          <Typography
            variant="caption"
            sx={{
              color: theme.palette.text.disabled,
              mt: 3,
              display: 'block',
              fontStyle: 'italic',
            }}
          >
            🍎 Don't worry! Every great meal starts with a little preparation. We'll get this sorted
            out!
          </Typography>
        </Paper>
      </Fade>
    </Container>
  );
};

/**
 * HASIVU Error Boundary Component
 *
 * Features:
 * - Catches JavaScript errors in child components
 * - Displays user-friendly error messages
 * - Provides retry functionality with limits
 * - Error reporting capabilities
 * - Mobile-responsive design
 * - Accessibility compliant
 * - School-friendly messaging
 * - Detailed error information for debugging
 */
export class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  private retryTimeoutId: NodeJS.Timeout | null = null;

  constructor(props: ErrorBoundaryProps) {
    super(props);

    this.state = {
      hasError: false,
      error: null,
      errorInfo: null,
      errorId: '',
      retryCount: 0,
      showDetails: props.showDetails || false,
    };
  }

  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    // Generate unique error ID
    const errorId = `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    return {
      hasError: true,
      error,
      errorId,
    };
  }

  componentDidCatch(error: Error, errorInfo: ReactErrorInfo) {
    // Update state with error info
    this.setState({
      errorInfo,
    });

    // Prepare error information for reporting
    const errorData: CustomErrorInfo = {
      message: error.message,
      stack: error.stack,
      componentStack: errorInfo.componentStack,
      timestamp: Date.now(),
      userAgent: navigator.userAgent,
      url: window.location.href,
      // userId could be retrieved from context/store
    };

    // Report error
    if (this.props.onError) {
      this.props.onError(error, errorData);
    } else {
      // Default error logging

      // Send to error reporting service (implement your preferred service)
      this.reportErrorToService(error, errorData);
    }
  }

  private reportErrorToService = async (error: Error, errorData: CustomErrorInfo) => {
    try {
      // Implement your error reporting service here
      // Examples: Sentry, LogRocket, Bugsnag, custom endpoint

      // For now, we'll just log to console in development
      if (process.env.NODE_ENV === 'development') {
      }

      // Example API call (uncomment and modify as needed):
      /*
      await fetch('/api/errors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(errorData),
      });
      */
    } catch (reportingError) {}
  };

  private handleRetry = () => {
    if (this.state.retryCount >= 3) return;

    this.setState(prevState => ({
      hasError: false,
      error: null,
      errorInfo: null,
      retryCount: prevState.retryCount + 1,
      showDetails: false,
    }));

    // Clear any existing timeout
    if (this.retryTimeoutId) {
      clearTimeout(this.retryTimeoutId);
    }

    // Set a timeout to prevent immediate re-error in case of persistent issues
    this.retryTimeoutId = setTimeout(() => {
      // Additional retry logic could go here
    }, 1000);
  };

  private handleToggleDetails = () => {
    this.setState(prevState => ({
      showDetails: !prevState.showDetails,
    }));
  };

  private handleReportError = () => {
    if (this.state.error && this.state.errorInfo) {
      const _errorData: CustomErrorInfo = {
        message: this.state.error.message,
        stack: this.state.error.stack,
        componentStack: this.state.errorInfo.componentStack,
        timestamp: Date.now(),
        userAgent: navigator.userAgent,
        url: window.location.href,
      };

      // Open email client with error details
      const subject = encodeURIComponent(`HASIVU Error Report - ${this.state.errorId}`);
      const body = encodeURIComponent(
        `Error Report for HASIVU Platform\n\n` +
          `Error ID: ${this.state.errorId}\n` +
          `Timestamp: ${new Date().toISOString()}\n` +
          `URL: ${window.location.href}\n\n` +
          `Error Message: ${this.state.error.message}\n\n` +
          `Please describe what you were doing when this error occurred:\n\n` +
          `[Please describe your actions here]\n\n` +
          `Technical Details:\n${this.state.error.stack}\n\n` +
          `Component Stack:\n${this.state.errorInfo.componentStack}`
      );

      window.open(`mailto:support@hasivu.com?subject=${subject}&body=${body}`);
    }
  };

  private handleGoHome = () => {
    // Reset error state and navigate to home
    this.setState({
      hasError: false,
      error: null,
      errorInfo: null,
      retryCount: 0,
      showDetails: false,
    });

    // Navigate to home page
    window.location.href = '/';
  };

  componentWillUnmount() {
    if (this.retryTimeoutId) {
      clearTimeout(this.retryTimeoutId);
    }
  }

  render() {
    if (this.state.hasError) {
      const FallbackComponent = this.props.fallback || DefaultErrorFallback;

      return (
        <FallbackComponent
          error={this.state.error}
          errorInfo={this.state.errorInfo}
          errorId={this.state.errorId}
          retryCount={this.state.retryCount}
          showDetails={this.state.showDetails}
          onRetry={this.handleRetry}
          onToggleDetails={this.handleToggleDetails}
          onReportError={this.handleReportError}
          onGoHome={this.handleGoHome}
          customMessages={this.props.errorMessages}
        />
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
