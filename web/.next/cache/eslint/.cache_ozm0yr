[{"/Users/mahesha/Downloads/hasivu-platform/web/src/app/admin/schedule/page.tsx":"1","/Users/mahesha/Downloads/hasivu-platform/web/src/app/analytics/page.tsx":"2","/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/forgot-password/page.tsx":"3","/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/login/page.tsx":"4","/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/register/page.tsx":"5","/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/admin/page.tsx":"6","/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/kitchen/page.tsx":"7","/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/page.tsx":"8","/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/parent/page.tsx":"9","/Users/mahesha/Downloads/hasivu-platform/web/src/app/inventory-management/page.tsx":"10","/Users/mahesha/Downloads/hasivu-platform/web/src/app/kitchen/schedule/page.tsx":"11","/Users/mahesha/Downloads/hasivu-platform/web/src/app/kitchen-management/page.tsx":"12","/Users/mahesha/Downloads/hasivu-platform/web/src/app/layout.tsx":"13","/Users/mahesha/Downloads/hasivu-platform/web/src/app/menu/page.tsx":"14","/Users/mahesha/Downloads/hasivu-platform/web/src/app/notifications/page.tsx":"15","/Users/mahesha/Downloads/hasivu-platform/web/src/app/order-workflow/page.tsx":"16","/Users/mahesha/Downloads/hasivu-platform/web/src/app/orders/page.tsx":"17","/Users/mahesha/Downloads/hasivu-platform/web/src/app/page.tsx":"18","/Users/mahesha/Downloads/hasivu-platform/web/src/app/rfid-verification/page.tsx":"19","/Users/mahesha/Downloads/hasivu-platform/web/src/app/settings/page.tsx":"20","/Users/mahesha/Downloads/hasivu-platform/web/src/components/AuthModal.tsx":"21","/Users/mahesha/Downloads/hasivu-platform/web/src/components/DashboardOverview.tsx":"22","/Users/mahesha/Downloads/hasivu-platform/web/src/components/MobileResponsiveNavigation.tsx":"23","/Users/mahesha/Downloads/hasivu-platform/web/src/components/NotificationSystem.tsx":"24","/Users/mahesha/Downloads/hasivu-platform/web/src/components/OnboardingFlow.tsx":"25","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ProgressiveLoading.tsx":"26","/Users/mahesha/Downloads/hasivu-platform/web/src/components/RFIDManagementDashboard.tsx":"27","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/AccessibilityProvider.tsx":"28","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/AriaUtils.tsx":"29","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/FocusManager.tsx":"30","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/ScreenReaderOnly.tsx":"31","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/SkipNavigation.tsx":"32","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/__tests__/accessibility.test.tsx":"33","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/AuthLayout.tsx":"34","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EmailVerificationForm.tsx":"35","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedLoginForm.tsx":"36","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedPasswordRecoveryForm.tsx":"37","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedSchoolLoginForm.tsx":"38","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ForgotPasswordForm.tsx":"39","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/LoginForm.tsx":"40","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MfaForm.tsx":"41","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MultiFactorAuthForm.tsx":"42","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MultiStepRegistrationForm.tsx":"43","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ProfileManagementForm.tsx":"44","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ProtectedRoute.tsx":"45","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/RegisterForm.tsx":"46","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/SocialLoginButtons.tsx":"47","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/index.ts":"48","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/schemas.ts":"49","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ComponentTest.tsx":"50","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ErrorBoundary.tsx":"51","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/LoadingScreen.tsx":"52","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ProgressBar.tsx":"53","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/index.ts":"54","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/ParentDashboard.tsx":"55","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/admin-dashboard.tsx":"56","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/advanced-features.tsx":"57","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/dashboard-demo.tsx":"58","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-admin-dashboard-v2.tsx":"59","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-admin-dashboard.tsx":"60","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-kitchen-dashboard.tsx":"61","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-parent-dashboard.tsx":"62","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-student-dashboard.tsx":"63","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/index.ts":"64","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/kitchen-dashboard.tsx":"65","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/ParentDashboard.tsx":"66","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/ChildManagement.tsx":"67","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/NotificationCenter.tsx":"68","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/NutritionDashboard.tsx":"69","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/OrderHistory.tsx":"70","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/OrderTracking.tsx":"71","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/PaymentMethods.tsx":"72","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/SubscriptionManagement.tsx":"73","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent-dashboard.tsx":"74","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/student-dashboard.tsx":"75","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/types.ts":"76","/Users/mahesha/Downloads/hasivu-platform/web/src/components/demo/PaymentIntelligenceDemo.tsx":"77","/Users/mahesha/Downloads/hasivu-platform/web/src/components/demo/RFIDLiveDemo.tsx":"78","/Users/mahesha/Downloads/hasivu-platform/web/src/components/error-boundary/ErrorBoundary.tsx":"79","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/CTASection.tsx":"80","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/FeatureCard.tsx":"81","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/HeroSection.tsx":"82","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/StatsSection.tsx":"83","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/TestimonialsSection.tsx":"84","/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/InventoryManagement.tsx":"85","/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/KitchenManagementDashboard.tsx":"86","/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/OrderWorkflowBoard.tsx":"87","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HASIVULandingPage.tsx":"88","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HASIVULandingPageProd.tsx":"89","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/ProductionLandingPage.tsx":"90","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/Layout.tsx":"91","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/app-layout.tsx":"92","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/main-header.tsx":"93","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/mobile-menu.tsx":"94","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/navigation-menu.tsx":"95","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/index.ts":"96","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/navigation/bottom-tab-nav.tsx":"97","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/navigation/breadcrumb-nav.tsx":"98","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/sidebar/sidebar-nav.tsx":"99","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/sidebar-layout.tsx":"100","/Users/mahesha/Downloads/hasivu-platform/web/src/components/loading/LoadingStates.tsx":"101","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/animated-list.tsx":"102","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/background-beams.tsx":"103","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/bento-grid.tsx":"104","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/marquee.tsx":"105","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/number-ticker.tsx":"106","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/text-generate-effect.tsx":"107","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/CategoryTabs.tsx":"108","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/EnhancedMealList.tsx":"109","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/EnhancedMealOrderingDemo.tsx":"110","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealCard.tsx":"111","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealOrderingDrawer.tsx":"112","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealOrderingInterface.tsx":"113","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealSearchCommand.tsx":"114","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/NotificationSystem.tsx":"115","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/NutritionalTooltips.tsx":"116","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/OrderSummary.tsx":"117","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/QuantitySelector.tsx":"118","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/RFIDInterface.tsx":"119","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/RFIDVerification.tsx":"120","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/__tests__/enhanced-meal-ordering-integration.test.tsx":"121","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/types.ts":"122","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/BottomNavigation.tsx":"123","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/BottomSheet.tsx":"124","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/LoadingSkeleton.tsx":"125","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileHeader.tsx":"126","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileLayout.tsx":"127","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileNavSheet.tsx":"128","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileNavigation.tsx":"129","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileOptimizations.tsx":"130","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobilePushNotifications.tsx":"131","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/NativeFeatures.tsx":"132","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/OfflineQueue.tsx":"133","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/PWAEnhanced.tsx":"134","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/PWAFeatures.tsx":"135","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/SchoolMobileComponents.tsx":"136","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/SwipeableCard.tsx":"137","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/TouchGestures.tsx":"138","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/TouchOptimized.tsx":"139","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/VirtualScrollList.tsx":"140","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/advanced-mobile-experience.tsx":"141","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/index.ts":"142","/Users/mahesha/Downloads/hasivu-platform/web/src/components/notifications/RealTimeNotifications.tsx":"143","/Users/mahesha/Downloads/hasivu-platform/web/src/components/orders/OrderTracker.tsx":"144","/Users/mahesha/Downloads/hasivu-platform/web/src/components/providers/redux-provider.tsx":"145","/Users/mahesha/Downloads/hasivu-platform/web/src/components/providers/theme-provider.tsx":"146","/Users/mahesha/Downloads/hasivu-platform/web/src/components/rfid/RFIDVerificationSystem.tsx":"147","/Users/mahesha/Downloads/hasivu-platform/web/src/components/rfid/__tests__/RFIDVerificationSystem.test.tsx":"148","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffManagementSystem.tsx":"149","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffScheduling.tsx":"150","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffTasksManagement.tsx":"151","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/command.test.tsx":"152","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/cross-browser.test.tsx":"153","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/drawer.test.tsx":"154","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/error-handling.test.tsx":"155","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/input-otp.test.tsx":"156","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/performance.test.tsx":"157","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/popover.test.tsx":"158","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/simple.test.tsx":"159","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/tooltip.test.tsx":"160","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/accordion.tsx":"161","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/advanced-command.tsx":"162","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/advanced-tooltip.tsx":"163","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/alert-dialog.tsx":"164","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/alert.tsx":"165","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/avatar.tsx":"166","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/badge.tsx":"167","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/breadcrumb.tsx":"168","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/button.tsx":"169","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/calendar.tsx":"170","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/card.tsx":"171","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/carousel.tsx":"172","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/chart.tsx":"173","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/checkbox.tsx":"174","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/collapsible.tsx":"175","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/command.tsx":"176","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/context-menu.tsx":"177","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/dialog.tsx":"178","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/drawer.tsx":"179","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/dropdown-menu.tsx":"180","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/form.tsx":"181","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/hover-card.tsx":"182","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/index.ts":"183","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/input-otp.tsx":"184","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/input.tsx":"185","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/label.tsx":"186","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/loading-states.tsx":"187","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/meal-order-drawer.tsx":"188","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/menubar.tsx":"189","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/navigation-menu.tsx":"190","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/pagination.tsx":"191","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/paper-shaders-background.tsx":"192","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/popover.tsx":"193","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/progress.tsx":"194","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/radio-group.tsx":"195","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/resizable.tsx":"196","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/scroll-area.tsx":"197","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/select.tsx":"198","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/separator.tsx":"199","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sheet.tsx":"200","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sidebar.tsx":"201","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/skeleton.tsx":"202","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/slider.tsx":"203","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/smart-popover.tsx":"204","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sonner.tsx":"205","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/switch.tsx":"206","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/table.tsx":"207","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/tabs.tsx":"208","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/textarea.tsx":"209","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toast.tsx":"210","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toggle-group.tsx":"211","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toggle.tsx":"212","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/tooltip.tsx":"213","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/AuthContext.tsx":"214","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/SocketContext.tsx":"215","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/auth-context.tsx":"216","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/integration-provider.tsx":"217","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-dashboard.ts":"218","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-meal-ordering.ts":"219","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-payment.ts":"220","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-realtime.ts":"221","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-rfid.ts":"222","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-toast.ts":"223","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useAccessibility.ts":"224","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useApiIntegration.ts":"225","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useAuth.ts":"226","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileAnalytics.ts":"227","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileLayout-clean.ts":"228","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileLayout.ts":"229","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/usePWA.ts":"230","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useRealTimeIntegration.ts":"231","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useSocket.ts":"232","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useTouchOptimization.ts":"233","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/accessibility-testing.ts":"234","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/api-client.ts":"235","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/demo-data.ts":"236","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/design-system.ts":"237","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/enhanced-api-client.ts":"238","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/adaptive-rate-limiter.ts":"239","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/cache-service.ts":"240","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/lambda-optimizer.ts":"241","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance.ts":"242","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/seo.ts":"243","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/socket-client.ts":"244","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/test-polyfills.ts":"245","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/test-setup.ts":"246","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/utils-backup.ts":"247","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/utils.ts":"248","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/_app.tsx":"249","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/integration-demo.tsx":"250","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/mobile-demo.tsx":"251","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/mobile-features-demo.tsx":"252","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/offline.tsx":"253","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/test-auth-components.tsx":"254","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/test-components.tsx":"255","/Users/mahesha/Downloads/hasivu-platform/web/src/services/api/hasivu-api.service.ts":"256","/Users/mahesha/Downloads/hasivu-platform/web/src/services/api.ts":"257","/Users/mahesha/Downloads/hasivu-platform/web/src/store/index.ts":"258","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/analyticsSlice.ts":"259","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/authSlice.ts":"260","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/menuSlice.ts":"261","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/notificationSlice.ts":"262","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/orderSlice.ts":"263","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/paymentSlice.ts":"264","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/rfidSlice.ts":"265","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/uiSlice.ts":"266","/Users/mahesha/Downloads/hasivu-platform/web/src/styles/globalStyles.ts":"267","/Users/mahesha/Downloads/hasivu-platform/web/src/styles/theme.ts":"268","/Users/mahesha/Downloads/hasivu-platform/web/src/types/auth.ts":"269","/Users/mahesha/Downloads/hasivu-platform/web/src/types/dashboard.ts":"270","/Users/mahesha/Downloads/hasivu-platform/web/src/types/navigation.ts":"271","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/accessibility.ts":"272","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/analytics.ts":"273","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/api.ts":"274","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/constants.ts":"275","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/createEmotionCache.ts":"276","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/dataMigration.ts":"277","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/formatCurrency.ts":"278","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/formatters.ts":"279","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/helpers-backup.ts":"280","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/helpers.ts":"281","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/index.ts":"282","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/notifications.ts":"283","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/validators.ts":"284","/Users/mahesha/Downloads/hasivu-platform/web/src/app/blend/page.tsx":"285","/Users/mahesha/Downloads/hasivu-platform/web/src/app/sprrrint/page.tsx":"286","/Users/mahesha/Downloads/hasivu-platform/web/src/app/startwell/page.tsx":"287","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HybridLandingPage.tsx":"288","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/SprrrintInspiredLandingPage.tsx":"289","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/StartwellInspiredLandingPage.tsx":"290","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/analytics.ts":"291"},{"size":326,"mtime":1757174494758,"results":"292","hashOfConfig":"293"},{"size":8141,"mtime":1756995573126,"results":"294","hashOfConfig":"293"},{"size":2661,"mtime":1757074847032,"results":"295","hashOfConfig":"293"},{"size":1614,"mtime":1757243381614,"results":"296","hashOfConfig":"293"},{"size":1673,"mtime":1757243132457,"results":"297","hashOfConfig":"293"},{"size":2016,"mtime":1757075063056,"results":"298","hashOfConfig":"293"},{"size":2498,"mtime":1757075083047,"results":"299","hashOfConfig":"293"},{"size":149,"mtime":1757160878334,"results":"300","hashOfConfig":"293"},{"size":2510,"mtime":1757075072823,"results":"301","hashOfConfig":"293"},{"size":206,"mtime":1757164067339,"results":"302","hashOfConfig":"293"},{"size":338,"mtime":1757168945971,"results":"303","hashOfConfig":"293"},{"size":225,"mtime":1757164049764,"results":"304","hashOfConfig":"293"},{"size":6766,"mtime":1757119525054,"results":"305","hashOfConfig":"293"},{"size":19218,"mtime":1756995901671,"results":"306","hashOfConfig":"293"},{"size":10937,"mtime":1756995645180,"results":"307","hashOfConfig":"293"},{"size":197,"mtime":1757164058221,"results":"308","hashOfConfig":"293"},{"size":18024,"mtime":1756996071225,"results":"309","hashOfConfig":"293"},{"size":1186,"mtime":1757181851372,"results":"310","hashOfConfig":"293"},{"size":209,"mtime":1757162843445,"results":"311","hashOfConfig":"293"},{"size":19331,"mtime":1757243092652,"results":"312","hashOfConfig":"293"},{"size":19140,"mtime":1757144027550,"results":"313","hashOfConfig":"293"},{"size":18497,"mtime":1757243352847,"results":"314","hashOfConfig":"293"},{"size":19396,"mtime":1757243269960,"results":"315","hashOfConfig":"293"},{"size":20571,"mtime":1757243287070,"results":"316","hashOfConfig":"293"},{"size":23384,"mtime":1757243300442,"results":"317","hashOfConfig":"293"},{"size":13112,"mtime":1757144582256,"results":"318","hashOfConfig":"293"},{"size":24386,"mtime":1757243174404,"results":"319","hashOfConfig":"293"},{"size":8028,"mtime":1757118679241,"results":"320","hashOfConfig":"293"},{"size":11033,"mtime":1757118720784,"results":"321","hashOfConfig":"293"},{"size":8990,"mtime":1755153851102,"results":"322","hashOfConfig":"293"},{"size":4676,"mtime":1757118649020,"results":"323","hashOfConfig":"293"},{"size":2921,"mtime":1755153851102,"results":"324","hashOfConfig":"293"},{"size":18053,"mtime":1757119987528,"results":"325","hashOfConfig":"293"},{"size":10624,"mtime":1757243191285,"results":"326","hashOfConfig":"293"},{"size":8343,"mtime":1755153851079,"results":"327","hashOfConfig":"293"},{"size":16241,"mtime":1757118888384,"results":"328","hashOfConfig":"293"},{"size":20752,"mtime":1755153851080,"results":"329","hashOfConfig":"293"},{"size":13809,"mtime":1755153851076,"results":"330","hashOfConfig":"293"},{"size":13330,"mtime":1755153851076,"results":"331","hashOfConfig":"293"},{"size":13498,"mtime":1757148920439,"results":"332","hashOfConfig":"293"},{"size":13728,"mtime":1755153851079,"results":"333","hashOfConfig":"293"},{"size":23066,"mtime":1755153851081,"results":"334","hashOfConfig":"293"},{"size":25312,"mtime":1755153851081,"results":"335","hashOfConfig":"293"},{"size":32854,"mtime":1755153851080,"results":"336","hashOfConfig":"293"},{"size":11221,"mtime":1757075026123,"results":"337","hashOfConfig":"293"},{"size":18281,"mtime":1755153851077,"results":"338","hashOfConfig":"293"},{"size":8424,"mtime":1755153851078,"results":"339","hashOfConfig":"293"},{"size":1796,"mtime":1757162112566,"results":"340","hashOfConfig":"293"},{"size":9743,"mtime":1757179683528,"results":"341","hashOfConfig":"293"},{"size":7915,"mtime":1755153851090,"results":"342","hashOfConfig":"293"},{"size":18601,"mtime":1755153851090,"results":"343","hashOfConfig":"293"},{"size":9474,"mtime":1755153851089,"results":"344","hashOfConfig":"293"},{"size":12131,"mtime":1755153851090,"results":"345","hashOfConfig":"293"},{"size":527,"mtime":1757179481382,"results":"346","hashOfConfig":"293"},{"size":64025,"mtime":1757162270422,"results":"347","hashOfConfig":"293"},{"size":33509,"mtime":1755153851085,"results":"348","hashOfConfig":"293"},{"size":27353,"mtime":1755446005150,"results":"349","hashOfConfig":"293"},{"size":10216,"mtime":1755153851086,"results":"350","hashOfConfig":"293"},{"size":51417,"mtime":1757179573760,"results":"351","hashOfConfig":"293"},{"size":66451,"mtime":1756995991658,"results":"352","hashOfConfig":"293"},{"size":38361,"mtime":1756996000624,"results":"353","hashOfConfig":"293"},{"size":35636,"mtime":1756995982758,"results":"354","hashOfConfig":"293"},{"size":24448,"mtime":1756995972840,"results":"355","hashOfConfig":"293"},{"size":665,"mtime":1755242762119,"results":"356","hashOfConfig":"293"},{"size":31683,"mtime":1755153851085,"results":"357","hashOfConfig":"293"},{"size":16456,"mtime":1755153851088,"results":"358","hashOfConfig":"293"},{"size":863,"mtime":1755153851087,"results":"359","hashOfConfig":"293"},{"size":826,"mtime":1755153851087,"results":"360","hashOfConfig":"293"},{"size":822,"mtime":1755153851087,"results":"361","hashOfConfig":"293"},{"size":491,"mtime":1755153851088,"results":"362","hashOfConfig":"293"},{"size":741,"mtime":1755153851087,"results":"363","hashOfConfig":"293"},{"size":863,"mtime":1755153851088,"results":"364","hashOfConfig":"293"},{"size":1114,"mtime":1755153851087,"results":"365","hashOfConfig":"293"},{"size":27775,"mtime":1755153851085,"results":"366","hashOfConfig":"293"},{"size":22218,"mtime":1755153851084,"results":"367","hashOfConfig":"293"},{"size":181,"mtime":1755309436018,"results":"368","hashOfConfig":"293"},{"size":25689,"mtime":1757143735466,"results":"369","hashOfConfig":"293"},{"size":18904,"mtime":1757143606144,"results":"370","hashOfConfig":"293"},{"size":10392,"mtime":1757119277025,"results":"371","hashOfConfig":"293"},{"size":8182,"mtime":1755153851075,"results":"372","hashOfConfig":"293"},{"size":3565,"mtime":1755153851076,"results":"373","hashOfConfig":"293"},{"size":7310,"mtime":1755153851075,"results":"374","hashOfConfig":"293"},{"size":5536,"mtime":1755153851075,"results":"375","hashOfConfig":"293"},{"size":7818,"mtime":1755153851075,"results":"376","hashOfConfig":"293"},{"size":28819,"mtime":1757176532041,"results":"377","hashOfConfig":"293"},{"size":27422,"mtime":1757242753387,"results":"378","hashOfConfig":"293"},{"size":17604,"mtime":1757167737291,"results":"379","hashOfConfig":"293"},{"size":23665,"mtime":1757124763053,"results":"380","hashOfConfig":"293"},{"size":21399,"mtime":1757126559805,"results":"381","hashOfConfig":"293"},{"size":21113,"mtime":1757161654491,"results":"382","hashOfConfig":"293"},{"size":3807,"mtime":1755153851082,"results":"383","hashOfConfig":"293"},{"size":5167,"mtime":1755153851083,"results":"384","hashOfConfig":"293"},{"size":14770,"mtime":1755153851083,"results":"385","hashOfConfig":"293"},{"size":14125,"mtime":1755153851083,"results":"386","hashOfConfig":"293"},{"size":10295,"mtime":1755153851083,"results":"387","hashOfConfig":"293"},{"size":688,"mtime":1755427667543,"results":"388","hashOfConfig":"293"},{"size":6448,"mtime":1755153851082,"results":"389","hashOfConfig":"293"},{"size":5242,"mtime":1755153851082,"results":"390","hashOfConfig":"293"},{"size":13967,"mtime":1757174494759,"results":"391","hashOfConfig":"293"},{"size":6206,"mtime":1755153851084,"results":"392","hashOfConfig":"293"},{"size":10393,"mtime":1757119319371,"results":"393","hashOfConfig":"293"},{"size":1428,"mtime":1757158525394,"results":"394","hashOfConfig":"293"},{"size":1507,"mtime":1757158907743,"results":"395","hashOfConfig":"293"},{"size":1298,"mtime":1757158886416,"results":"396","hashOfConfig":"293"},{"size":1471,"mtime":1757158895047,"results":"397","hashOfConfig":"293"},{"size":1517,"mtime":1757158960848,"results":"398","hashOfConfig":"293"},{"size":1379,"mtime":1757158535594,"results":"399","hashOfConfig":"293"},{"size":16019,"mtime":1755153851098,"results":"400","hashOfConfig":"293"},{"size":17939,"mtime":1755153851098,"results":"401","hashOfConfig":"293"},{"size":22499,"mtime":1755153851097,"results":"402","hashOfConfig":"293"},{"size":31920,"mtime":1755153851096,"results":"403","hashOfConfig":"293"},{"size":11171,"mtime":1755153851099,"results":"404","hashOfConfig":"293"},{"size":20005,"mtime":1755153851101,"results":"405","hashOfConfig":"293"},{"size":7714,"mtime":1755153851100,"results":"406","hashOfConfig":"293"},{"size":13838,"mtime":1755153851101,"results":"407","hashOfConfig":"293"},{"size":10447,"mtime":1755153851097,"results":"408","hashOfConfig":"293"},{"size":27758,"mtime":1755153851100,"results":"409","hashOfConfig":"293"},{"size":14625,"mtime":1755153851098,"results":"410","hashOfConfig":"293"},{"size":15145,"mtime":1755153851099,"results":"411","hashOfConfig":"293"},{"size":16279,"mtime":1755153851101,"results":"412","hashOfConfig":"293"},{"size":37471,"mtime":1755153851100,"results":"413","hashOfConfig":"293"},{"size":4467,"mtime":1757179513670,"results":"414","hashOfConfig":"293"},{"size":4854,"mtime":1755153851095,"results":"415","hashOfConfig":"293"},{"size":12408,"mtime":1755153851091,"results":"416","hashOfConfig":"293"},{"size":8078,"mtime":1755153851096,"results":"417","hashOfConfig":"293"},{"size":10292,"mtime":1755153851094,"results":"418","hashOfConfig":"293"},{"size":10411,"mtime":1757118896146,"results":"419","hashOfConfig":"293"},{"size":12294,"mtime":1755153851092,"results":"420","hashOfConfig":"293"},{"size":5605,"mtime":1757118879410,"results":"421","hashOfConfig":"293"},{"size":18393,"mtime":1755153851094,"results":"422","hashOfConfig":"293"},{"size":25557,"mtime":1755153851092,"results":"423","hashOfConfig":"293"},{"size":19108,"mtime":1755153851095,"results":"424","hashOfConfig":"293"},{"size":22432,"mtime":1755153851092,"results":"425","hashOfConfig":"293"},{"size":19303,"mtime":1755153851093,"results":"426","hashOfConfig":"293"},{"size":15957,"mtime":1755153851094,"results":"427","hashOfConfig":"293"},{"size":22322,"mtime":1755153851091,"results":"428","hashOfConfig":"293"},{"size":6946,"mtime":1755153851093,"results":"429","hashOfConfig":"293"},{"size":18791,"mtime":1755153851093,"results":"430","hashOfConfig":"293"},{"size":14175,"mtime":1755153851091,"results":"431","hashOfConfig":"293"},{"size":7748,"mtime":1755153851096,"results":"432","hashOfConfig":"293"},{"size":41231,"mtime":1755446255216,"results":"433","hashOfConfig":"293"},{"size":998,"mtime":1755242762120,"results":"434","hashOfConfig":"293"},{"size":18043,"mtime":1757164442730,"results":"435","hashOfConfig":"293"},{"size":14321,"mtime":1755153851101,"results":"436","hashOfConfig":"293"},{"size":399,"mtime":1756978031384,"results":"437","hashOfConfig":"293"},{"size":326,"mtime":1755153851084,"results":"438","hashOfConfig":"293"},{"size":17821,"mtime":1757162770834,"results":"439","hashOfConfig":"293"},{"size":5767,"mtime":1757162909699,"results":"440","hashOfConfig":"293"},{"size":34164,"mtime":1757168273287,"results":"441","hashOfConfig":"293"},{"size":27499,"mtime":1757174319589,"results":"442","hashOfConfig":"293"},{"size":26371,"mtime":1757168658529,"results":"443","hashOfConfig":"293"},{"size":22647,"mtime":1755153851069,"results":"444","hashOfConfig":"293"},{"size":20330,"mtime":1755153851069,"results":"445","hashOfConfig":"293"},{"size":27696,"mtime":1755153851070,"results":"446","hashOfConfig":"293"},{"size":26916,"mtime":1755154007057,"results":"447","hashOfConfig":"293"},{"size":26391,"mtime":1755153851068,"results":"448","hashOfConfig":"293"},{"size":21018,"mtime":1755153851070,"results":"449","hashOfConfig":"293"},{"size":30169,"mtime":1755153851069,"results":"450","hashOfConfig":"293"},{"size":329,"mtime":1755153851071,"results":"451","hashOfConfig":"293"},{"size":27280,"mtime":1755153851071,"results":"452","hashOfConfig":"293"},{"size":1991,"mtime":1755427413957,"results":"453","hashOfConfig":"293"},{"size":7395,"mtime":1755153851064,"results":"454","hashOfConfig":"293"},{"size":10804,"mtime":1755153851071,"results":"455","hashOfConfig":"293"},{"size":4434,"mtime":1755427686903,"results":"456","hashOfConfig":"293"},{"size":1583,"mtime":1755153851067,"results":"457","hashOfConfig":"293"},{"size":1419,"mtime":1755153851071,"results":"458","hashOfConfig":"293"},{"size":1128,"mtime":1755153851072,"results":"459","hashOfConfig":"293"},{"size":2712,"mtime":1755427421266,"results":"460","hashOfConfig":"293"},{"size":6596,"mtime":1757118289973,"results":"461","hashOfConfig":"293"},{"size":2622,"mtime":1755153851067,"results":"462","hashOfConfig":"293"},{"size":3257,"mtime":1757118314114,"results":"463","hashOfConfig":"293"},{"size":6250,"mtime":1755153851074,"results":"464","hashOfConfig":"293"},{"size":10481,"mtime":1755153851065,"results":"465","hashOfConfig":"293"},{"size":1070,"mtime":1755153851073,"results":"466","hashOfConfig":"293"},{"size":329,"mtime":1755427424862,"results":"467","hashOfConfig":"293"},{"size":4885,"mtime":1755153851068,"results":"468","hashOfConfig":"293"},{"size":7442,"mtime":1755427428892,"results":"469","hashOfConfig":"293"},{"size":3869,"mtime":1755153851071,"results":"470","hashOfConfig":"293"},{"size":3021,"mtime":1755153851067,"results":"471","hashOfConfig":"293"},{"size":7623,"mtime":1755153851073,"results":"472","hashOfConfig":"293"},{"size":4120,"mtime":1755153851074,"results":"473","hashOfConfig":"293"},{"size":1261,"mtime":1755153851065,"results":"474","hashOfConfig":"293"},{"size":1795,"mtime":1755309436018,"results":"475","hashOfConfig":"293"},{"size":2258,"mtime":1755153851065,"results":"476","hashOfConfig":"293"},{"size":3130,"mtime":1755153851074,"results":"477","hashOfConfig":"293"},{"size":724,"mtime":1755153851066,"results":"478","hashOfConfig":"293"},{"size":13500,"mtime":1755153851066,"results":"479","hashOfConfig":"293"},{"size":15191,"mtime":1755153851064,"results":"480","hashOfConfig":"293"},{"size":8605,"mtime":1755427433197,"results":"481","hashOfConfig":"293"},{"size":5128,"mtime":1755153851066,"results":"482","hashOfConfig":"293"},{"size":2777,"mtime":1755153851064,"results":"483","hashOfConfig":"293"},{"size":2250,"mtime":1756976683873,"results":"484","hashOfConfig":"293"},{"size":1294,"mtime":1755153851065,"results":"485","hashOfConfig":"293"},{"size":790,"mtime":1755153851065,"results":"486","hashOfConfig":"293"},{"size":1481,"mtime":1755153851067,"results":"487","hashOfConfig":"293"},{"size":1723,"mtime":1755427436808,"results":"488","hashOfConfig":"293"},{"size":1656,"mtime":1755153851066,"results":"489","hashOfConfig":"293"},{"size":5628,"mtime":1755153851073,"results":"490","hashOfConfig":"293"},{"size":769,"mtime":1755153851072,"results":"491","hashOfConfig":"293"},{"size":4281,"mtime":1755153851066,"results":"492","hashOfConfig":"293"},{"size":23699,"mtime":1755427440525,"results":"493","hashOfConfig":"293"},{"size":261,"mtime":1755153851074,"results":"494","hashOfConfig":"293"},{"size":1271,"mtime":1755153851064,"results":"495","hashOfConfig":"293"},{"size":14430,"mtime":1755153851063,"results":"496","hashOfConfig":"293"},{"size":1142,"mtime":1755153851066,"results":"497","hashOfConfig":"293"},{"size":1153,"mtime":1755153851067,"results":"498","hashOfConfig":"293"},{"size":2765,"mtime":1755153851072,"results":"499","hashOfConfig":"293"},{"size":1897,"mtime":1755153851064,"results":"500","hashOfConfig":"293"},{"size":771,"mtime":1755153851073,"results":"501","hashOfConfig":"293"},{"size":4859,"mtime":1755153851072,"results":"502","hashOfConfig":"293"},{"size":1996,"mtime":1755153851068,"results":"503","hashOfConfig":"293"},{"size":1541,"mtime":1755427444501,"results":"504","hashOfConfig":"293"},{"size":1209,"mtime":1755153851067,"results":"505","hashOfConfig":"293"},{"size":10922,"mtime":1756994577235,"results":"506","hashOfConfig":"293"},{"size":16678,"mtime":1755153851054,"results":"507","hashOfConfig":"293"},{"size":8883,"mtime":1757159273416,"results":"508","hashOfConfig":"293"},{"size":11081,"mtime":1755153851055,"results":"509","hashOfConfig":"293"},{"size":3504,"mtime":1755309436019,"results":"510","hashOfConfig":"293"},{"size":5115,"mtime":1755309436019,"results":"511","hashOfConfig":"293"},{"size":2028,"mtime":1755309436019,"results":"512","hashOfConfig":"293"},{"size":2004,"mtime":1755309436019,"results":"513","hashOfConfig":"293"},{"size":1450,"mtime":1755309436019,"results":"514","hashOfConfig":"293"},{"size":3908,"mtime":1755446292602,"results":"515","hashOfConfig":"293"},{"size":4616,"mtime":1755309436019,"results":"516","hashOfConfig":"293"},{"size":16357,"mtime":1757178938755,"results":"517","hashOfConfig":"293"},{"size":5972,"mtime":1756977648616,"results":"518","hashOfConfig":"293"},{"size":1627,"mtime":1755309436020,"results":"519","hashOfConfig":"293"},{"size":769,"mtime":1755309436020,"results":"520","hashOfConfig":"293"},{"size":1222,"mtime":1755427725266,"results":"521","hashOfConfig":"293"},{"size":2098,"mtime":1755309436020,"results":"522","hashOfConfig":"293"},{"size":2102,"mtime":1755309436020,"results":"523","hashOfConfig":"293"},{"size":1781,"mtime":1757169571430,"results":"524","hashOfConfig":"293"},{"size":4584,"mtime":1755309436020,"results":"525","hashOfConfig":"293"},{"size":18109,"mtime":1757119924540,"results":"526","hashOfConfig":"293"},{"size":9451,"mtime":1757093612491,"results":"527","hashOfConfig":"293"},{"size":1478,"mtime":1755309436021,"results":"528","hashOfConfig":"293"},{"size":9770,"mtime":1757093677887,"results":"529","hashOfConfig":"293"},{"size":1864,"mtime":1755309436021,"results":"530","hashOfConfig":"293"},{"size":2243,"mtime":1755309436021,"results":"531","hashOfConfig":"293"},{"size":3549,"mtime":1755309436021,"results":"532","hashOfConfig":"293"},{"size":4623,"mtime":1755309436021,"results":"533","hashOfConfig":"293"},{"size":16902,"mtime":1757119599960,"results":"534","hashOfConfig":"293"},{"size":16082,"mtime":1757119491756,"results":"535","hashOfConfig":"293"},{"size":3499,"mtime":1757075324987,"results":"536","hashOfConfig":"293"},{"size":2418,"mtime":1755309436022,"results":"537","hashOfConfig":"293"},{"size":3832,"mtime":1755309436022,"results":"538","hashOfConfig":"293"},{"size":1539,"mtime":1755309436022,"results":"539","hashOfConfig":"293"},{"size":1468,"mtime":1755447166152,"results":"540","hashOfConfig":"293"},{"size":9838,"mtime":1755153851059,"results":"541","hashOfConfig":"293"},{"size":18592,"mtime":1755153851059,"results":"542","hashOfConfig":"293"},{"size":16448,"mtime":1755153851059,"results":"543","hashOfConfig":"293"},{"size":19222,"mtime":1755153851057,"results":"544","hashOfConfig":"293"},{"size":11605,"mtime":1755153851058,"results":"545","hashOfConfig":"293"},{"size":14111,"mtime":1755153851058,"results":"546","hashOfConfig":"293"},{"size":8025,"mtime":1755153851058,"results":"547","hashOfConfig":"293"},{"size":13614,"mtime":1757126445573,"results":"548","hashOfConfig":"293"},{"size":19833,"mtime":1757164664197,"results":"549","hashOfConfig":"293"},{"size":2119,"mtime":1756977857561,"results":"550","hashOfConfig":"293"},{"size":472,"mtime":1756977997945,"results":"551","hashOfConfig":"293"},{"size":6851,"mtime":1756977881750,"results":"552","hashOfConfig":"293"},{"size":1694,"mtime":1756977924184,"results":"553","hashOfConfig":"293"},{"size":570,"mtime":1756977953281,"results":"554","hashOfConfig":"293"},{"size":5081,"mtime":1756977904821,"results":"555","hashOfConfig":"293"},{"size":456,"mtime":1756977967329,"results":"556","hashOfConfig":"293"},{"size":464,"mtime":1756977981403,"results":"557","hashOfConfig":"293"},{"size":1156,"mtime":1756978008910,"results":"558","hashOfConfig":"293"},{"size":842,"mtime":1755309436023,"results":"559","hashOfConfig":"293"},{"size":2144,"mtime":1755309436023,"results":"560","hashOfConfig":"293"},{"size":8674,"mtime":1757074912938,"results":"561","hashOfConfig":"293"},{"size":1337,"mtime":1755309436024,"results":"562","hashOfConfig":"293"},{"size":293,"mtime":1755309436024,"results":"563","hashOfConfig":"293"},{"size":1656,"mtime":1755309436024,"results":"564","hashOfConfig":"293"},{"size":3058,"mtime":1755309436024,"results":"565","hashOfConfig":"293"},{"size":2723,"mtime":1755309436024,"results":"566","hashOfConfig":"293"},{"size":4429,"mtime":1755309436024,"results":"567","hashOfConfig":"293"},{"size":1906,"mtime":1755309436024,"results":"568","hashOfConfig":"293"},{"size":11963,"mtime":1757166938994,"results":"569","hashOfConfig":"293"},{"size":443,"mtime":1755427735268,"results":"570","hashOfConfig":"293"},{"size":1623,"mtime":1755309436024,"results":"571","hashOfConfig":"293"},{"size":1972,"mtime":1755309436025,"results":"572","hashOfConfig":"293"},{"size":1844,"mtime":1755427749150,"results":"573","hashOfConfig":"293"},{"size":1572,"mtime":1755309436025,"results":"574","hashOfConfig":"293"},{"size":3886,"mtime":1755309436025,"results":"575","hashOfConfig":"293"},{"size":9119,"mtime":1757179559483,"results":"576","hashOfConfig":"293"},{"size":882,"mtime":1757181702962,"results":"577","hashOfConfig":"293"},{"size":873,"mtime":1757181290182,"results":"578","hashOfConfig":"293"},{"size":437,"mtime":1757180605504,"results":"579","hashOfConfig":"293"},{"size":17648,"mtime":1757182490506,"results":"580","hashOfConfig":"293"},{"size":9830,"mtime":1757183216070,"results":"581","hashOfConfig":"293"},{"size":17929,"mtime":1757183147874,"results":"582","hashOfConfig":"293"},{"size":819,"mtime":1757181089646,"results":"583","hashOfConfig":"293"},{"filePath":"584","messages":"585","suppressedMessages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ve9hi1",{"filePath":"587","messages":"588","suppressedMessages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","suppressedMessages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593"},{"filePath":"594","messages":"595","suppressedMessages":"596","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"597"},{"filePath":"598","messages":"599","suppressedMessages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601"},{"filePath":"602","messages":"603","suppressedMessages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","suppressedMessages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","suppressedMessages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"611","messages":"612","suppressedMessages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","suppressedMessages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","suppressedMessages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"620","messages":"621","suppressedMessages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"623","messages":"624","suppressedMessages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","suppressedMessages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","suppressedMessages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632"},{"filePath":"633","messages":"634","suppressedMessages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","suppressedMessages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"639","messages":"640","suppressedMessages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","suppressedMessages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"645","messages":"646","suppressedMessages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648"},{"filePath":"649","messages":"650","suppressedMessages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652"},{"filePath":"653","messages":"654","suppressedMessages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656"},{"filePath":"657","messages":"658","suppressedMessages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"660","messages":"661","suppressedMessages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663"},{"filePath":"664","messages":"665","suppressedMessages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667"},{"filePath":"668","messages":"669","suppressedMessages":"670","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671"},{"filePath":"672","messages":"673","suppressedMessages":"674","errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675"},{"filePath":"676","messages":"677","suppressedMessages":"678","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679"},{"filePath":"680","messages":"681","suppressedMessages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","suppressedMessages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","suppressedMessages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","suppressedMessages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","suppressedMessages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","suppressedMessages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"698","messages":"699","suppressedMessages":"700","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"701"},{"filePath":"702","messages":"703","suppressedMessages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"705"},{"filePath":"706","messages":"707","suppressedMessages":"708","errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709"},{"filePath":"710","messages":"711","suppressedMessages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"713"},{"filePath":"714","messages":"715","suppressedMessages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717"},{"filePath":"718","messages":"719","suppressedMessages":"720","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721"},{"filePath":"722","messages":"723","suppressedMessages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"725"},{"filePath":"726","messages":"727","suppressedMessages":"728","errorCount":9,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729"},{"filePath":"730","messages":"731","suppressedMessages":"732","errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733"},{"filePath":"734","messages":"735","suppressedMessages":"736","errorCount":7,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737"},{"filePath":"738","messages":"739","suppressedMessages":"740","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741"},{"filePath":"742","messages":"743","suppressedMessages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"745"},{"filePath":"746","messages":"747","suppressedMessages":"748","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"749"},{"filePath":"750","messages":"751","suppressedMessages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","suppressedMessages":"755","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756"},{"filePath":"757","messages":"758","suppressedMessages":"759","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"760"},{"filePath":"761","messages":"762","suppressedMessages":"763","errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764"},{"filePath":"765","messages":"766","suppressedMessages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","suppressedMessages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"771","messages":"772","suppressedMessages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","suppressedMessages":"776","errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777"},{"filePath":"778","messages":"779","suppressedMessages":"780","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"781"},{"filePath":"782","messages":"783","suppressedMessages":"784","errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785"},{"filePath":"786","messages":"787","suppressedMessages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"789"},{"filePath":"790","messages":"791","suppressedMessages":"792","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"793"},{"filePath":"794","messages":"795","suppressedMessages":"796","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797"},{"filePath":"798","messages":"799","suppressedMessages":"800","errorCount":31,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801"},{"filePath":"802","messages":"803","suppressedMessages":"804","errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"805"},{"filePath":"806","messages":"807","suppressedMessages":"808","errorCount":24,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809"},{"filePath":"810","messages":"811","suppressedMessages":"812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"813","messages":"814","suppressedMessages":"815","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816"},{"filePath":"817","messages":"818","suppressedMessages":"819","errorCount":2,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"820"},{"filePath":"821","messages":"822","suppressedMessages":"823","errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824"},{"filePath":"825","messages":"826","suppressedMessages":"827","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828"},{"filePath":"829","messages":"830","suppressedMessages":"831","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"832"},{"filePath":"833","messages":"834","suppressedMessages":"835","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"836"},{"filePath":"837","messages":"838","suppressedMessages":"839","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840"},{"filePath":"841","messages":"842","suppressedMessages":"843","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"844"},{"filePath":"845","messages":"846","suppressedMessages":"847","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848"},{"filePath":"849","messages":"850","suppressedMessages":"851","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852"},{"filePath":"853","messages":"854","suppressedMessages":"855","errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"856"},{"filePath":"857","messages":"858","suppressedMessages":"859","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":5,"fixableWarningCount":0,"source":"860"},{"filePath":"861","messages":"862","suppressedMessages":"863","errorCount":11,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864"},{"filePath":"865","messages":"866","suppressedMessages":"867","errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"868"},{"filePath":"869","messages":"870","suppressedMessages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872"},{"filePath":"873","messages":"874","suppressedMessages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","suppressedMessages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"879","messages":"880","suppressedMessages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","suppressedMessages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","suppressedMessages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","suppressedMessages":"890","errorCount":19,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"891"},{"filePath":"892","messages":"893","suppressedMessages":"894","errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"895"},{"filePath":"896","messages":"897","suppressedMessages":"898","errorCount":9,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899"},{"filePath":"900","messages":"901","suppressedMessages":"902","errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"903"},{"filePath":"904","messages":"905","suppressedMessages":"906","errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"907"},{"filePath":"908","messages":"909","suppressedMessages":"910","errorCount":22,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"911"},{"filePath":"912","messages":"913","suppressedMessages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"915","messages":"916","suppressedMessages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","suppressedMessages":"920","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"921"},{"filePath":"922","messages":"923","suppressedMessages":"924","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925"},{"filePath":"926","messages":"927","suppressedMessages":"928","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929"},{"filePath":"930","messages":"931","suppressedMessages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"933","messages":"934","suppressedMessages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"936","messages":"937","suppressedMessages":"938","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939"},{"filePath":"940","messages":"941","suppressedMessages":"942","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"943"},{"filePath":"944","messages":"945","suppressedMessages":"946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"947","messages":"948","suppressedMessages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","suppressedMessages":"952","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"953"},{"filePath":"954","messages":"955","suppressedMessages":"956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"957","messages":"958","suppressedMessages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"960","messages":"961","suppressedMessages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"963","messages":"964","suppressedMessages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","suppressedMessages":"968","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"969"},{"filePath":"970","messages":"971","suppressedMessages":"972","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973"},{"filePath":"974","messages":"975","suppressedMessages":"976","errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"977"},{"filePath":"978","messages":"979","suppressedMessages":"980","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981"},{"filePath":"982","messages":"983","suppressedMessages":"984","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"985"},{"filePath":"986","messages":"987","suppressedMessages":"988","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989"},{"filePath":"990","messages":"991","suppressedMessages":"992","errorCount":18,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"993"},{"filePath":"994","messages":"995","suppressedMessages":"996","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997"},{"filePath":"998","messages":"999","suppressedMessages":"1000","errorCount":8,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001"},{"filePath":"1002","messages":"1003","suppressedMessages":"1004","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005"},{"filePath":"1006","messages":"1007","suppressedMessages":"1008","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1009"},{"filePath":"1010","messages":"1011","suppressedMessages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1013","messages":"1014","suppressedMessages":"1015","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1016"},{"filePath":"1017","messages":"1018","suppressedMessages":"1019","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1020"},{"filePath":"1021","messages":"1022","suppressedMessages":"1023","errorCount":8,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1024"},{"filePath":"1025","messages":"1026","suppressedMessages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1028","messages":"1029","suppressedMessages":"1030","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1031"},{"filePath":"1032","messages":"1033","suppressedMessages":"1034","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035"},{"filePath":"1036","messages":"1037","suppressedMessages":"1038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1039","messages":"1040","suppressedMessages":"1041","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1042"},{"filePath":"1043","messages":"1044","suppressedMessages":"1045","errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1046"},{"filePath":"1047","messages":"1048","suppressedMessages":"1049","errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1050"},{"filePath":"1051","messages":"1052","suppressedMessages":"1053","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1054"},{"filePath":"1055","messages":"1056","suppressedMessages":"1057","errorCount":15,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1058"},{"filePath":"1059","messages":"1060","suppressedMessages":"1061","errorCount":5,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1062"},{"filePath":"1063","messages":"1064","suppressedMessages":"1065","errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1066"},{"filePath":"1067","messages":"1068","suppressedMessages":"1069","errorCount":3,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1070"},{"filePath":"1071","messages":"1072","suppressedMessages":"1073","errorCount":12,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1074"},{"filePath":"1075","messages":"1076","suppressedMessages":"1077","errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1078"},{"filePath":"1079","messages":"1080","suppressedMessages":"1081","errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1082"},{"filePath":"1083","messages":"1084","suppressedMessages":"1085","errorCount":7,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1086"},{"filePath":"1087","messages":"1088","suppressedMessages":"1089","errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090"},{"filePath":"1091","messages":"1092","suppressedMessages":"1093","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1094"},{"filePath":"1095","messages":"1096","suppressedMessages":"1097","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1098"},{"filePath":"1099","messages":"1100","suppressedMessages":"1101","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1102"},{"filePath":"1103","messages":"1104","suppressedMessages":"1105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1106","messages":"1107","suppressedMessages":"1108","errorCount":8,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1109"},{"filePath":"1110","messages":"1111","suppressedMessages":"1112","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1113"},{"filePath":"1114","messages":"1115","suppressedMessages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1117","messages":"1118","suppressedMessages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1120","messages":"1121","suppressedMessages":"1122","errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123"},{"filePath":"1124","messages":"1125","suppressedMessages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1127"},{"filePath":"1128","messages":"1129","suppressedMessages":"1130","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1131"},{"filePath":"1132","messages":"1133","suppressedMessages":"1134","errorCount":9,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1135"},{"filePath":"1136","messages":"1137","suppressedMessages":"1138","errorCount":12,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1139"},{"filePath":"1140","messages":"1141","suppressedMessages":"1142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1143","messages":"1144","suppressedMessages":"1145","errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1146"},{"filePath":"1147","messages":"1148","suppressedMessages":"1149","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1150"},{"filePath":"1151","messages":"1152","suppressedMessages":"1153","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1154"},{"filePath":"1155","messages":"1156","suppressedMessages":"1157","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1158"},{"filePath":"1159","messages":"1160","suppressedMessages":"1161","errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1162"},{"filePath":"1163","messages":"1164","suppressedMessages":"1165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1166"},{"filePath":"1167","messages":"1168","suppressedMessages":"1169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1170","messages":"1171","suppressedMessages":"1172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1173","messages":"1174","suppressedMessages":"1175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1176","messages":"1177","suppressedMessages":"1178","errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1179"},{"filePath":"1180","messages":"1181","suppressedMessages":"1182","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1183"},{"filePath":"1184","messages":"1185","suppressedMessages":"1186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1187","messages":"1188","suppressedMessages":"1189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1190","messages":"1191","suppressedMessages":"1192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1193","messages":"1194","suppressedMessages":"1195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1196","messages":"1197","suppressedMessages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1199","messages":"1200","suppressedMessages":"1201","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1202"},{"filePath":"1203","messages":"1204","suppressedMessages":"1205","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1206"},{"filePath":"1207","messages":"1208","suppressedMessages":"1209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1210","messages":"1211","suppressedMessages":"1212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1213","messages":"1214","suppressedMessages":"1215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1216","messages":"1217","suppressedMessages":"1218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1219","messages":"1220","suppressedMessages":"1221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1222","messages":"1223","suppressedMessages":"1224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1225","messages":"1226","suppressedMessages":"1227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1228","messages":"1229","suppressedMessages":"1230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1231","messages":"1232","suppressedMessages":"1233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1234","messages":"1235","suppressedMessages":"1236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1237","messages":"1238","suppressedMessages":"1239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1240","messages":"1241","suppressedMessages":"1242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1243","messages":"1244","suppressedMessages":"1245","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1246"},{"filePath":"1247","messages":"1248","suppressedMessages":"1249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1250","messages":"1251","suppressedMessages":"1252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1253","messages":"1254","suppressedMessages":"1255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1256","messages":"1257","suppressedMessages":"1258","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1259"},{"filePath":"1260","messages":"1261","suppressedMessages":"1262","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1263"},{"filePath":"1264","messages":"1265","suppressedMessages":"1266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1267","messages":"1268","suppressedMessages":"1269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1270","messages":"1271","suppressedMessages":"1272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1273","messages":"1274","suppressedMessages":"1275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1276","messages":"1277","suppressedMessages":"1278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1279","messages":"1280","suppressedMessages":"1281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1282","messages":"1283","suppressedMessages":"1284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1285","messages":"1286","suppressedMessages":"1287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1288","messages":"1289","suppressedMessages":"1290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1291","messages":"1292","suppressedMessages":"1293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1294","messages":"1295","suppressedMessages":"1296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1297","messages":"1298","suppressedMessages":"1299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1300","messages":"1301","suppressedMessages":"1302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1303","messages":"1304","suppressedMessages":"1305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1306","messages":"1307","suppressedMessages":"1308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1309","messages":"1310","suppressedMessages":"1311","errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1312"},{"filePath":"1313","messages":"1314","suppressedMessages":"1315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1316","messages":"1317","suppressedMessages":"1318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1319","messages":"1320","suppressedMessages":"1321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1322","messages":"1323","suppressedMessages":"1324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1325","messages":"1326","suppressedMessages":"1327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1328","messages":"1329","suppressedMessages":"1330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1331","messages":"1332","suppressedMessages":"1333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1334","messages":"1335","suppressedMessages":"1336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1337","messages":"1338","suppressedMessages":"1339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1340","messages":"1341","suppressedMessages":"1342","errorCount":1,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1343"},{"filePath":"1344","messages":"1345","suppressedMessages":"1346","errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1347"},{"filePath":"1348","messages":"1349","suppressedMessages":"1350","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1351"},{"filePath":"1352","messages":"1353","suppressedMessages":"1354","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1355"},{"filePath":"1356","messages":"1357","suppressedMessages":"1358","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1359"},{"filePath":"1360","messages":"1361","suppressedMessages":"1362","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1363"},{"filePath":"1364","messages":"1365","suppressedMessages":"1366","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1367"},{"filePath":"1368","messages":"1369","suppressedMessages":"1370","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1371"},{"filePath":"1372","messages":"1373","suppressedMessages":"1374","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1375"},{"filePath":"1376","messages":"1377","suppressedMessages":"1378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1379","messages":"1380","suppressedMessages":"1381","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1382"},{"filePath":"1383","messages":"1384","suppressedMessages":"1385","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1386"},{"filePath":"1387","messages":"1388","suppressedMessages":"1389","errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1390"},{"filePath":"1391","messages":"1392","suppressedMessages":"1393","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1394"},{"filePath":"1395","messages":"1396","suppressedMessages":"1397","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1398"},{"filePath":"1399","messages":"1400","suppressedMessages":"1401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1402","messages":"1403","suppressedMessages":"1404","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1405"},{"filePath":"1406","messages":"1407","suppressedMessages":"1408","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1409"},{"filePath":"1410","messages":"1411","suppressedMessages":"1412","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1413"},{"filePath":"1414","messages":"1415","suppressedMessages":"1416","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1417"},{"filePath":"1418","messages":"1419","suppressedMessages":"1420","errorCount":1,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1421"},{"filePath":"1422","messages":"1423","suppressedMessages":"1424","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1425"},{"filePath":"1426","messages":"1427","suppressedMessages":"1428","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1429"},{"filePath":"1430","messages":"1431","suppressedMessages":"1432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1433","messages":"1434","suppressedMessages":"1435","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1436"},{"filePath":"1437","messages":"1438","suppressedMessages":"1439","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1440"},{"filePath":"1441","messages":"1442","suppressedMessages":"1443","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1444"},{"filePath":"1445","messages":"1446","suppressedMessages":"1447","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1448"},{"filePath":"1449","messages":"1450","suppressedMessages":"1451","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1452"},{"filePath":"1453","messages":"1454","suppressedMessages":"1455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1456","messages":"1457","suppressedMessages":"1458","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1459"},{"filePath":"1460","messages":"1461","suppressedMessages":"1462","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1463"},{"filePath":"1464","messages":"1465","suppressedMessages":"1466","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1467"},{"filePath":"1468","messages":"1469","suppressedMessages":"1470","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1471"},{"filePath":"1472","messages":"1473","suppressedMessages":"1474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1475","messages":"1476","suppressedMessages":"1477","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1478"},{"filePath":"1479","messages":"1480","suppressedMessages":"1481","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1482"},{"filePath":"1483","messages":"1484","suppressedMessages":"1485","errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1486"},{"filePath":"1487","messages":"1488","suppressedMessages":"1489","errorCount":18,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1490"},{"filePath":"1491","messages":"1492","suppressedMessages":"1493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1494","messages":"1495","suppressedMessages":"1496","errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1497"},{"filePath":"1498","messages":"1499","suppressedMessages":"1500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1501","messages":"1502","suppressedMessages":"1503","errorCount":1,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1504"},{"filePath":"1505","messages":"1506","suppressedMessages":"1507","errorCount":0,"fatalErrorCount":0,"warningCount":91,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1508"},{"filePath":"1509","messages":"1510","suppressedMessages":"1511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1512","messages":"1513","suppressedMessages":"1514","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1515"},{"filePath":"1516","messages":"1517","suppressedMessages":"1518","errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1519"},{"filePath":"1520","messages":"1521","suppressedMessages":"1522","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1523"},{"filePath":"1524","messages":"1525","suppressedMessages":"1526","errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1527"},{"filePath":"1528","messages":"1529","suppressedMessages":"1530","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1531"},{"filePath":"1532","messages":"1533","suppressedMessages":"1534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1535","messages":"1536","suppressedMessages":"1537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1538","messages":"1539","suppressedMessages":"1540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1541","messages":"1542","suppressedMessages":"1543","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1544"},{"filePath":"1545","messages":"1546","suppressedMessages":"1547","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1548"},{"filePath":"1549","messages":"1550","suppressedMessages":"1551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1552","messages":"1553","suppressedMessages":"1554","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1555"},{"filePath":"1556","messages":"1557","suppressedMessages":"1558","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1559"},{"filePath":"1560","messages":"1561","suppressedMessages":"1562","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1563"},{"filePath":"1564","messages":"1565","suppressedMessages":"1566","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1567"},{"filePath":"1568","messages":"1569","suppressedMessages":"1570","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1571"},{"filePath":"1572","messages":"1573","suppressedMessages":"1574","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1575"},{"filePath":"1576","messages":"1577","suppressedMessages":"1578","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1579"},{"filePath":"1580","messages":"1581","suppressedMessages":"1582","errorCount":1,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1583"},{"filePath":"1584","messages":"1585","suppressedMessages":"1586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1587","messages":"1588","suppressedMessages":"1589","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1590"},{"filePath":"1591","messages":"1592","suppressedMessages":"1593","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1594"},{"filePath":"1595","messages":"1596","suppressedMessages":"1597","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1598"},{"filePath":"1599","messages":"1600","suppressedMessages":"1601","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1602"},{"filePath":"1603","messages":"1604","suppressedMessages":"1605","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1606"},{"filePath":"1607","messages":"1608","suppressedMessages":"1609","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1610"},{"filePath":"1611","messages":"1612","suppressedMessages":"1613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1614","messages":"1615","suppressedMessages":"1616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1617","messages":"1618","suppressedMessages":"1619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1620","messages":"1621","suppressedMessages":"1622","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1623"},{"filePath":"1624","messages":"1625","suppressedMessages":"1626","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1627"},{"filePath":"1628","messages":"1629","suppressedMessages":"1630","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1631"},{"filePath":"1632","messages":"1633","suppressedMessages":"1634","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1635"},"/Users/mahesha/Downloads/hasivu-platform/web/src/app/admin/schedule/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/analytics/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/forgot-password/page.tsx",["1636","1637"],[],"\"use client\"\n\nimport { useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { ForgotPasswordForm } from '@/components/auth/ForgotPasswordForm'\nimport { AuthLayout } from '@/components/auth/AuthLayout'\nimport { useAuth } from '@/contexts/auth-context'\nimport type { ForgotPasswordFormData } from '@/components/auth/schemas'\n\nexport default function ForgotPasswordPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { forgotPassword } = useAuth()\n  const router = useRouter()\n\n  const handleForgotPassword = async (data: ForgotPasswordFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const result = await forgotPassword(data.email)\n\n      if (result) {\n        setSuccess(true)\n      } else {\n        setError('Failed to send password reset instructions. Please try again.')\n      }\n    } catch (err: any) {\n      console.error('Forgot password error:', err)\n      setError(err.message || 'An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (success) {\n    return (\n      <AuthLayout\n        title=\"Check Your Email\"\n        description=\"We've sent password reset instructions to your email address\"\n      >\n        <div className=\"w-full max-w-md text-center\">\n          <div className=\"p-6 bg-green-50 border border-green-200 rounded-lg\">\n            <div className=\"text-green-700 mb-4\">\n              <svg className=\"w-12 h-12 mx-auto\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-medium text-green-900 mb-2\">\n              Reset Instructions Sent\n            </h3>\n            <p className=\"text-green-700 mb-4\">\n              If an account with this email exists, we've sent you a password reset link.\n            </p>\n            <button\n              onClick={() => router.push('/auth/login')}\n              className=\"text-primary-600 hover:text-primary-500 font-medium\"\n            >\n              Return to Login\n            </button>\n          </div>\n        </div>\n      </AuthLayout>\n    )\n  }\n\n  return (\n    <AuthLayout\n      title=\"Forgot Your Password?\"\n      description=\"Enter your email address and we'll send you a reset link\"\n    >\n      <ForgotPasswordForm\n        onSubmit={handleForgotPassword}\n        isLoading={isLoading}\n        error={error}\n        className=\"w-full max-w-md\"\n      />\n    </AuthLayout>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/login/page.tsx",["1638","1639"],[],"\"use client\"\n\nimport { useState } from 'react'\nimport { LoginForm } from '@/components/auth/LoginForm'\nimport { AuthLayout } from '@/components/auth/AuthLayout'\nimport { useAuth } from '@/contexts/auth-context'\nimport type { LoginFormData } from '@/components/auth/schemas'\n\nexport default function LoginPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { login } = useAuth()\n\n  const handleLogin = async (data: LoginFormData & { role: string }) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const success = await login({\n        email: data.email,\n        password: data.password,\n        role: data.role,\n        rememberMe: data.rememberMe || false,\n      })\n\n      if (success) {\n        // Redirect will be handled by the auth context\n      } else {\n        setError('Invalid email or password. Please try again.')\n      }\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleSocialLogin = async (provider: 'google' | 'facebook') => {\n    setError(null)\n    // TODO: Implement social login\n    setError('Social login is coming soon!')\n  }\n\n  return (\n    <AuthLayout\n      title=\"Welcome Back to HASIVU\"\n      description=\"Sign in to manage your school meal account and orders\"\n    >\n      <LoginForm\n        onSubmit={handleLogin}\n        onSocialLogin={handleSocialLogin}\n        isLoading={isLoading}\n        error={error}\n        className=\"w-full max-w-md\"\n      />\n    </AuthLayout>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/app/auth/register/page.tsx",["1640","1641","1642"],[],"\"use client\"\n\nimport { useState } from 'react'\nimport { RegisterForm } from '@/components/auth/RegisterForm'\nimport { AuthLayout } from '@/components/auth/AuthLayout'\nimport { useAuth } from '@/contexts/auth-context'\nimport type { RegistrationFormData } from '@/components/auth/schemas'\n\nexport default function RegisterPage() {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const { register } = useAuth()\n\n  const handleRegister = async (data: RegistrationFormData) => {\n    setIsLoading(true)\n    setError(null)\n\n    try {\n      const success = await register({\n        firstName: data.firstName,\n        lastName: data.lastName,\n        email: data.email,\n        password: data.password,\n        grade: data.grade,\n        section: data.section,\n        role: 'parent', // Default role, can be adjusted based on email or selection\n      })\n\n      if (success) {\n        // Redirect will be handled by the auth context\n        console.log('Registration successful')\n      } else {\n        setError('Registration failed. Please check your information and try again.')\n      }\n    } catch (err: any) {\n      console.error('Registration error:', err)\n      setError(err.message || 'An unexpected error occurred. Please try again.')\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  return (\n    <AuthLayout\n      title=\"Join HASIVU Today\"\n      description=\"Create your account to start managing school meals efficiently\"\n    >\n      <RegisterForm\n        onSubmit={handleRegister}\n        isLoading={isLoading}\n        error={error}\n        className=\"w-full max-w-md\"\n      />\n    </AuthLayout>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/admin/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/kitchen/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/dashboard/parent/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/inventory-management/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/kitchen/schedule/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/kitchen-management/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/layout.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/menu/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/notifications/page.tsx",["1643"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { ArrowLeft, Bell, BellRing, MessageSquare, AlertTriangle, CheckCircle, Clock, Settings } from 'lucide-react';\n\nexport default function NotificationsPage() {\n  const [activeTab, setActiveTab] = useState<'all' | 'unread' | 'system' | 'orders'>('all');\n\n  const notifications = [\n    {\n      id: 1,\n      type: 'order',\n      title: 'New Order Received',\n      message: 'Order #ORD-001 has been placed by Sarah Johnson for lunch delivery at 12:30 PM',\n      time: '2 minutes ago',\n      read: false,\n      priority: 'high',\n      icon: BellRing,\n      color: 'text-orange-600'\n    },\n    {\n      id: 2,\n      type: 'system',\n      title: 'Payment Successful',\n      message: 'Payment of ₹85 has been processed successfully for Order #ORD-002',\n      time: '5 minutes ago',\n      read: false,\n      priority: 'medium',\n      icon: CheckCircle,\n      color: 'text-green-600'\n    },\n    {\n      id: 3,\n      type: 'system',\n      title: 'Low Inventory Alert',\n      message: 'Butter Chicken ingredients are running low. Please restock before tomorrow.',\n      time: '15 minutes ago',\n      read: true,\n      priority: 'high',\n      icon: AlertTriangle,\n      color: 'text-red-600'\n    },\n    {\n      id: 4,\n      type: 'order',\n      title: 'Order Delivered',\n      message: 'Order #ORD-003 has been successfully delivered to David Johnson',\n      time: '1 hour ago',\n      read: true,\n      priority: 'low',\n      icon: CheckCircle,\n      color: 'text-green-600'\n    },\n    {\n      id: 5,\n      type: 'system',\n      title: 'New User Registration',\n      message: 'New parent account created: Michael Johnson (michael.johnson@email.com)',\n      time: '2 hours ago',\n      read: true,\n      priority: 'medium',\n      icon: MessageSquare,\n      color: 'text-blue-600'\n    },\n    {\n      id: 6,\n      type: 'order',\n      title: 'Order Preparation Started',\n      message: 'Kitchen has started preparing Order #ORD-004 - Mini Idli with Sambar',\n      time: '3 hours ago',\n      read: true,\n      priority: 'medium',\n      icon: Clock,\n      color: 'text-yellow-600'\n    }\n  ];\n\n  const filterNotifications = () => {\n    switch (activeTab) {\n      case 'unread':\n        return notifications.filter(n => !n.read);\n      case 'system':\n        return notifications.filter(n => n.type === 'system');\n      case 'orders':\n        return notifications.filter(n => n.type === 'order');\n      default:\n        return notifications;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-700';\n      case 'medium': return 'bg-yellow-100 text-yellow-700';\n      case 'low': return 'bg-green-100 text-green-700';\n      default: return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n  const filteredNotifications = filterNotifications();\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-accent-50\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"h-10 w-10 rounded-xl bg-primary-500 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-xl\">H</span>\n                </div>\n                <div>\n                  <div className=\"font-display font-bold text-2xl text-primary-600\">Notifications</div>\n                  <div className=\"text-sm text-gray-600 -mt-1\">HASIVU Platform</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"secondary\" className=\"px-3 py-1\">\n                <Bell className=\"h-4 w-4 mr-1\" />\n                {unreadCount} unread\n              </Badge>\n              <Button variant=\"outline\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Notifications Center</h1>\n          <p className=\"text-gray-600\">Stay updated with system alerts, order updates, and platform activities</p>\n        </div>\n\n        {/* Notification Tabs */}\n        <div className=\"mb-6\">\n          <div className=\"flex space-x-1 bg-gray-100 rounded-lg p-1 inline-flex\">\n            {[\n              { key: 'all', label: 'All', count: notifications.length },\n              { key: 'unread', label: 'Unread', count: unreadCount },\n              { key: 'system', label: 'System', count: notifications.filter(n => n.type === 'system').length },\n              { key: 'orders', label: 'Orders', count: notifications.filter(n => n.type === 'order').length }\n            ].map((tab) => (\n              <button\n                key={tab.key}\n                onClick={() => setActiveTab(tab.key as any)}\n                className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                  activeTab === tab.key\n                    ? 'bg-white text-primary-600 shadow-sm'\n                    : 'text-gray-600 hover:text-gray-800'\n                }`}\n              >\n                {tab.label} ({tab.count})\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n          <Card className=\"border-0 shadow-soft\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Today</p>\n                  <p className=\"text-2xl font-bold\">12</p>\n                </div>\n                <Bell className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-soft\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">High Priority</p>\n                  <p className=\"text-2xl font-bold text-red-600\">2</p>\n                </div>\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-soft\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Order Updates</p>\n                  <p className=\"text-2xl font-bold text-green-600\">8</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"border-0 shadow-soft\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">System Alerts</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">3</p>\n                </div>\n                <Settings className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Notifications List */}\n        <Card className=\"border-0 shadow-soft\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Recent Notifications</span>\n              <Button variant=\"outline\" size=\"sm\">\n                Mark all as read\n              </Button>\n            </CardTitle>\n            <CardDescription>\n              {filteredNotifications.length} notifications\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredNotifications.map((notification) => {\n                const IconComponent = notification.icon;\n                return (\n                  <div\n                    key={notification.id}\n                    className={`flex items-start space-x-4 p-4 rounded-lg border transition-all duration-200 hover:shadow-sm ${\n                      notification.read\n                        ? 'bg-gray-50 border-gray-200'\n                        : 'bg-blue-50 border-blue-200 shadow-sm'\n                    }`}\n                  >\n                    <div className={`p-2 rounded-full bg-white border-2 ${\n                      notification.read ? 'border-gray-300' : 'border-blue-300'\n                    }`}>\n                      <IconComponent className={`h-4 w-4 ${notification.color}`} />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className={`font-medium ${\n                          notification.read ? 'text-gray-700' : 'text-gray-900'\n                        }`}>\n                          {notification.title}\n                        </h4>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge\n                            variant=\"secondary\"\n                            className={getPriorityColor(notification.priority)}\n                          >\n                            {notification.priority}\n                          </Badge>\n                          {!notification.read && (\n                            <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                          )}\n                        </div>\n                      </div>\n                      <p className={`text-sm mb-2 ${\n                        notification.read ? 'text-gray-600' : 'text-gray-700'\n                      }`}>\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">{notification.time}</p>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/app/order-workflow/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/orders/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/rfid-verification/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/settings/page.tsx",["1644"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { ArrowLeft, Settings, Shield, Bell, Database, Globe, Palette, Zap } from 'lucide-react';\n\nexport default function SettingsPage() {\n  const [activeTab, setActiveTab] = useState<'general' | 'security' | 'notifications' | 'integrations'>('general');\n\n  const [settings, setSettings] = useState({\n    // General Settings\n    schoolName: 'Bangalore International School',\n    schoolCode: 'BIS-2024',\n    timezone: 'Asia/Kolkata',\n    language: 'English',\n    currency: 'INR',\n    \n    // Security Settings\n    twoFactorAuth: true,\n    sessionTimeout: false,\n    ipWhitelist: false,\n    auditLogging: true,\n    \n    // Notification Settings\n    emailNotifications: true,\n    smsNotifications: false,\n    pushNotifications: true,\n    orderAlerts: true,\n    inventoryAlerts: true,\n    \n    // Integration Settings\n    razorpayEnabled: true,\n    rfidEnabled: false,\n    analyticsEnabled: true,\n    backupEnabled: true\n  });\n\n  const handleSettingChange = (key: string, value: boolean | string) => {\n    setSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  const settingsTabs = [\n    { key: 'general', label: 'General', icon: Settings },\n    { key: 'security', label: 'Security', icon: Shield },\n    { key: 'notifications', label: 'Notifications', icon: Bell },\n    { key: 'integrations', label: 'Integrations', icon: Zap }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary-50 to-accent-50\">\n      {/* Header */}\n      <header className=\"border-b bg-white/80 backdrop-blur\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/dashboard\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back to Dashboard\n                </Button>\n              </Link>\n              <div className=\"flex items-center gap-3\">\n                <div className=\"h-10 w-10 rounded-xl bg-primary-500 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-xl\">H</span>\n                </div>\n                <div>\n                  <div className=\"font-display font-bold text-2xl text-primary-600\">Settings</div>\n                  <div className=\"text-sm text-gray-600 -mt-1\">HASIVU Platform</div>\n                </div>\n              </div>\n            </div>\n            <Button>\n              <Database className=\"h-4 w-4 mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">System Settings</h1>\n          <p className=\"text-gray-600\">Configure platform settings, integrations, and system preferences</p>\n        </div>\n\n        <div className=\"flex flex-col lg:flex-row gap-6\">\n          {/* Settings Navigation */}\n          <div className=\"lg:w-1/4\">\n            <Card className=\"border-0 shadow-soft\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle>Settings Categories</CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-1\">\n                  {settingsTabs.map((tab) => {\n                    const IconComponent = tab.icon;\n                    return (\n                      <button\n                        key={tab.key}\n                        onClick={() => setActiveTab(tab.key as any)}\n                        className={`w-full flex items-center px-4 py-3 text-left transition-colors ${\n                          activeTab === tab.key\n                            ? 'bg-primary-50 text-primary-600 border-r-2 border-primary-500'\n                            : 'text-gray-600 hover:bg-gray-50'\n                        }`}\n                      >\n                        <IconComponent className=\"h-4 w-4 mr-3\" />\n                        {tab.label}\n                      </button>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Settings Content */}\n          <div className=\"lg:w-3/4\">\n            {activeTab === 'general' && (\n              <div className=\"space-y-6\">\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Globe className=\"h-5 w-5 mr-2\" />\n                      School Information\n                    </CardTitle>\n                    <CardDescription>Basic school and platform configuration</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">School Name</label>\n                      <div className=\"p-3 bg-gray-50 rounded-md text-gray-700\">\n                        {settings.schoolName}\n                      </div>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-2\">School Code</label>\n                      <div className=\"p-3 bg-gray-50 rounded-md text-gray-700\">\n                        {settings.schoolCode}\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Timezone</label>\n                        <div className=\"p-3 bg-gray-50 rounded-md text-gray-700\">\n                          {settings.timezone}\n                        </div>\n                      </div>\n                      <div>\n                        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Currency</label>\n                        <div className=\"p-3 bg-gray-50 rounded-md text-gray-700\">\n                          Indian Rupee ({settings.currency})\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Palette className=\"h-5 w-5 mr-2\" />\n                      Platform Preferences\n                    </CardTitle>\n                    <CardDescription>Customize platform appearance and behavior</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Dark Mode</p>\n                        <p className=\"text-sm text-gray-600\">Enable dark theme for the platform</p>\n                      </div>\n                      <Switch />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Compact Layout</p>\n                        <p className=\"text-sm text-gray-600\">Use smaller spacing and components</p>\n                      </div>\n                      <Switch />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeTab === 'security' && (\n              <div className=\"space-y-6\">\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Shield className=\"h-5 w-5 mr-2\" />\n                      Authentication & Security\n                    </CardTitle>\n                    <CardDescription>Configure security settings and access controls</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Two-Factor Authentication</p>\n                        <p className=\"text-sm text-gray-600\">Require 2FA for admin accounts</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch \n                          checked={settings.twoFactorAuth}\n                          onCheckedChange={(checked) => handleSettingChange('twoFactorAuth', checked)}\n                        />\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">Enabled</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Session Timeout</p>\n                        <p className=\"text-sm text-gray-600\">Auto-logout after 30 minutes of inactivity</p>\n                      </div>\n                      <Switch \n                        checked={settings.sessionTimeout}\n                        onCheckedChange={(checked) => handleSettingChange('sessionTimeout', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">IP Whitelist</p>\n                        <p className=\"text-sm text-gray-600\">Restrict access to specific IP addresses</p>\n                      </div>\n                      <Switch \n                        checked={settings.ipWhitelist}\n                        onCheckedChange={(checked) => handleSettingChange('ipWhitelist', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Audit Logging</p>\n                        <p className=\"text-sm text-gray-600\">Log all user actions for security audit</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch \n                          checked={settings.auditLogging}\n                          onCheckedChange={(checked) => handleSettingChange('auditLogging', checked)}\n                        />\n                        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700\">Active</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeTab === 'notifications' && (\n              <div className=\"space-y-6\">\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Bell className=\"h-5 w-5 mr-2\" />\n                      Notification Preferences\n                    </CardTitle>\n                    <CardDescription>Configure how and when you receive notifications</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Email Notifications</p>\n                        <p className=\"text-sm text-gray-600\">Receive updates via email</p>\n                      </div>\n                      <Switch \n                        checked={settings.emailNotifications}\n                        onCheckedChange={(checked) => handleSettingChange('emailNotifications', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">SMS Notifications</p>\n                        <p className=\"text-sm text-gray-600\">Receive critical alerts via SMS</p>\n                      </div>\n                      <Switch \n                        checked={settings.smsNotifications}\n                        onCheckedChange={(checked) => handleSettingChange('smsNotifications', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Push Notifications</p>\n                        <p className=\"text-sm text-gray-600\">Browser push notifications</p>\n                      </div>\n                      <Switch \n                        checked={settings.pushNotifications}\n                        onCheckedChange={(checked) => handleSettingChange('pushNotifications', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Order Alerts</p>\n                        <p className=\"text-sm text-gray-600\">Notifications for new orders and updates</p>\n                      </div>\n                      <Switch \n                        checked={settings.orderAlerts}\n                        onCheckedChange={(checked) => handleSettingChange('orderAlerts', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Inventory Alerts</p>\n                        <p className=\"text-sm text-gray-600\">Low stock and inventory warnings</p>\n                      </div>\n                      <Switch \n                        checked={settings.inventoryAlerts}\n                        onCheckedChange={(checked) => handleSettingChange('inventoryAlerts', checked)}\n                      />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeTab === 'integrations' && (\n              <div className=\"space-y-6\">\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Zap className=\"h-5 w-5 mr-2\" />\n                      Third-Party Integrations\n                    </CardTitle>\n                    <CardDescription>Manage external service connections</CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Razorpay Payment Gateway</p>\n                        <p className=\"text-sm text-gray-600\">Process online payments securely</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch \n                          checked={settings.razorpayEnabled}\n                          onCheckedChange={(checked) => handleSettingChange('razorpayEnabled', checked)}\n                        />\n                        <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">Connected</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">RFID System</p>\n                        <p className=\"text-sm text-gray-600\">Enable contactless meal pickup</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch \n                          checked={settings.rfidEnabled}\n                          onCheckedChange={(checked) => handleSettingChange('rfidEnabled', checked)}\n                        />\n                        <Badge variant=\"secondary\" className=\"bg-yellow-100 text-yellow-700\">Setup Pending</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Analytics & Tracking</p>\n                        <p className=\"text-sm text-gray-600\">Google Analytics integration</p>\n                      </div>\n                      <Switch \n                        checked={settings.analyticsEnabled}\n                        onCheckedChange={(checked) => handleSettingChange('analyticsEnabled', checked)}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium\">Automated Backups</p>\n                        <p className=\"text-sm text-gray-600\">Daily database backups to cloud storage</p>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Switch \n                          checked={settings.backupEnabled}\n                          onCheckedChange={(checked) => handleSettingChange('backupEnabled', checked)}\n                        />\n                        <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-700\">Active</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-0 shadow-soft\">\n                  <CardHeader>\n                    <CardTitle>Available Integrations</CardTitle>\n                    <CardDescription>Connect additional services to enhance functionality</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                        <h4 className=\"font-medium\">WhatsApp Business</h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">Send order updates via WhatsApp</p>\n                        <Badge variant=\"outline\" className=\"mt-2\">Coming Soon</Badge>\n                      </div>\n                      <div className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\">\n                        <h4 className=\"font-medium\">Paytm Integration</h4>\n                        <p className=\"text-sm text-gray-600 mt-1\">Alternative payment gateway</p>\n                        <Badge variant=\"outline\" className=\"mt-2\">Available</Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/AuthModal.tsx",["1645","1646","1647","1648","1649","1650","1651"],[],"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Eye, EyeOff, Mail, Lock, User, Building, Phone, ChevronRight, AlertCircle, CheckCircle, Loader2 } from 'lucide-react';\nimport { hasivuApiService } from '../services/hasivu-api.service';\nimport { toast } from 'react-hot-toast';\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  initialMode?: 'login' | 'signup' | 'forgot-password';\n  onAuthSuccess?: (user: any) => void;\n}\n\ntype AuthMode = 'login' | 'signup' | 'forgot-password' | 'verify-email' | 'reset-password';\n\ninterface FormData {\n  email: string;\n  password: string;\n  confirmPassword: string;\n  firstName: string;\n  lastName: string;\n  schoolName: string;\n  phoneNumber: string;\n  role: 'admin' | 'food_director' | 'staff';\n  verificationCode: string;\n  newPassword: string;\n}\n\nconst AuthModal: React.FC<AuthModalProps> = ({ \n  isOpen, \n  onClose, \n  initialMode = 'login',\n  onAuthSuccess \n}) => {\n  const [mode, setMode] = useState<AuthMode>(initialMode);\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [errors, setErrors] = useState<Partial<FormData>>({});\n  \n  const [formData, setFormData] = useState<FormData>({\n    email: '',\n    password: '',\n    confirmPassword: '',\n    firstName: '',\n    lastName: '',\n    schoolName: '',\n    phoneNumber: '',\n    role: 'admin',\n    verificationCode: '',\n    newPassword: ''\n  });\n\n  // Reset form when modal opens/closes\n  useEffect(() => {\n    if (!isOpen) {\n      setFormData({\n        email: '',\n        password: '',\n        confirmPassword: '',\n        firstName: '',\n        lastName: '',\n        schoolName: '',\n        phoneNumber: '',\n        role: 'admin',\n        verificationCode: '',\n        newPassword: ''\n      });\n      setErrors({});\n      setMode(initialMode);\n    }\n  }, [isOpen, initialMode]);\n\n  const validateForm = (): boolean => {\n    const newErrors: Partial<FormData> = {};\n\n    // Email validation\n    if (!formData.email) {\n      newErrors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = 'Please enter a valid email address';\n    }\n\n    // Password validation for login and signup\n    if ((mode === 'login' || mode === 'signup') && !formData.password) {\n      newErrors.password = 'Password is required';\n    }\n\n    if (mode === 'signup') {\n      if (formData.password.length < 8) {\n        newErrors.password = 'Password must be at least 8 characters';\n      }\n      \n      if (formData.password !== formData.confirmPassword) {\n        newErrors.confirmPassword = 'Passwords do not match';\n      }\n\n      if (!formData.firstName.trim()) {\n        newErrors.firstName = 'First name is required';\n      }\n\n      if (!formData.lastName.trim()) {\n        newErrors.lastName = 'Last name is required';\n      }\n\n      if (!formData.schoolName.trim()) {\n        newErrors.schoolName = 'School name is required';\n      }\n\n      if (!formData.phoneNumber.trim()) {\n        newErrors.phoneNumber = 'Phone number is required';\n      }\n    }\n\n    if (mode === 'verify-email' && !formData.verificationCode) {\n      newErrors.verificationCode = 'Verification code is required';\n    }\n\n    if (mode === 'reset-password') {\n      if (!formData.newPassword) {\n        newErrors.newPassword = 'New password is required';\n      } else if (formData.newPassword.length < 8) {\n        newErrors.newPassword = 'Password must be at least 8 characters';\n      }\n      \n      if (!formData.verificationCode) {\n        newErrors.verificationCode = 'Verification code is required';\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleInputChange = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  const handleLogin = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      const response = await hasivuApiService.login({\n        email: formData.email,\n        password: formData.password\n      });\n\n      toast.success('Login successful!');\n      onAuthSuccess?.(response.data);\n      onClose();\n    } catch (error: any) {\n      const message = error.response?.data?.message || 'Login failed. Please try again.';\n      toast.error(message);\n      \n      if (message.includes('verify')) {\n        setMode('verify-email');\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignup = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      await hasivuApiService.register({\n        email: formData.email,\n        password: formData.password,\n        firstName: formData.firstName,\n        lastName: formData.lastName,\n        schoolName: formData.schoolName,\n        phoneNumber: formData.phoneNumber,\n        role: formData.role\n      });\n\n      toast.success('Account created! Please check your email for verification.');\n      setMode('verify-email');\n    } catch (error: any) {\n      const message = error.response?.data?.message || 'Registration failed. Please try again.';\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      await hasivuApiService.forgotPassword(formData.email);\n      toast.success('Password reset code sent to your email!');\n      setMode('reset-password');\n    } catch (error: any) {\n      const message = error.response?.data?.message || 'Failed to send reset code.';\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyEmail = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      const response = await hasivuApiService.verifyEmail(formData.email, formData.verificationCode);\n      toast.success('Email verified successfully!');\n      onAuthSuccess?.(response.data);\n      onClose();\n    } catch (error: any) {\n      const message = error.response?.data?.message || 'Verification failed.';\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleResetPassword = async () => {\n    if (!validateForm()) return;\n\n    setIsLoading(true);\n    try {\n      await hasivuApiService.resetPassword(\n        formData.email,\n        formData.verificationCode,\n        formData.newPassword\n      );\n      toast.success('Password reset successful!');\n      setMode('login');\n    } catch (error: any) {\n      const message = error.response?.data?.message || 'Password reset failed.';\n      toast.error(message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    switch (mode) {\n      case 'login':\n        await handleLogin();\n        break;\n      case 'signup':\n        await handleSignup();\n        break;\n      case 'forgot-password':\n        await handleForgotPassword();\n        break;\n      case 'verify-email':\n        await handleVerifyEmail();\n        break;\n      case 'reset-password':\n        await handleResetPassword();\n        break;\n    }\n  };\n\n  const renderInput = (\n    field: keyof FormData,\n    label: string,\n    type: string = 'text',\n    icon?: React.ReactNode,\n    placeholder?: string\n  ) => (\n    <div className=\"space-y-2\">\n      <label htmlFor={field} className=\"block text-sm font-medium text-gray-700\">\n        {label}\n      </label>\n      <div className=\"relative\">\n        {icon && (\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n            <div className=\"text-gray-400\">{icon}</div>\n          </div>\n        )}\n        <input\n          type={type}\n          id={field}\n          value={formData[field]}\n          onChange={(e) => handleInputChange(field, e.target.value)}\n          className={`w-full ${icon ? 'pl-10' : 'pl-3'} pr-3 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n            errors[field] ? 'border-red-500' : ''\n          }`}\n          placeholder={placeholder || label}\n          disabled={isLoading}\n        />\n        {errors[field] && (\n          <div className=\"absolute inset-y-0 right-0 pr-3 flex items-center\">\n            <AlertCircle className=\"w-5 h-5 text-red-500\" />\n          </div>\n        )}\n      </div>\n      {errors[field] && (\n        <p className=\"text-sm text-red-600\">{errors[field]}</p>\n      )}\n    </div>\n  );\n\n  const renderPasswordInput = (\n    field: keyof FormData,\n    label: string,\n    showPasswordState: boolean,\n    setShowPasswordState: (show: boolean) => void\n  ) => (\n    <div className=\"space-y-2\">\n      <label htmlFor={field} className=\"block text-sm font-medium text-gray-700\">\n        {label}\n      </label>\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n          <Lock className=\"w-5 h-5 text-gray-400\" />\n        </div>\n        <input\n          type={showPasswordState ? 'text' : 'password'}\n          id={field}\n          value={formData[field]}\n          onChange={(e) => handleInputChange(field, e.target.value)}\n          className={`w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors ${\n            errors[field] ? 'border-red-500' : ''\n          }`}\n          placeholder={label}\n          disabled={isLoading}\n        />\n        <button\n          type=\"button\"\n          onClick={() => setShowPasswordState(!showPasswordState)}\n          className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600\"\n          disabled={isLoading}\n        >\n          {showPasswordState ? <EyeOff className=\"w-5 h-5\" /> : <Eye className=\"w-5 h-5\" />}\n        </button>\n        {errors[field] && (\n          <div className=\"absolute inset-y-0 right-10 pr-3 flex items-center\">\n            <AlertCircle className=\"w-5 h-5 text-red-500\" />\n          </div>\n        )}\n      </div>\n      {errors[field] && (\n        <p className=\"text-sm text-red-600\">{errors[field]}</p>\n      )}\n    </div>\n  );\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'login': return 'Welcome Back';\n      case 'signup': return 'Create Your Account';\n      case 'forgot-password': return 'Reset Password';\n      case 'verify-email': return 'Verify Your Email';\n      case 'reset-password': return 'Set New Password';\n    }\n  };\n\n  const getSubtitle = () => {\n    switch (mode) {\n      case 'login': return 'Sign in to your HASIVU account';\n      case 'signup': return 'Join thousands of schools using HASIVU';\n      case 'forgot-password': return 'Enter your email to receive a reset code';\n      case 'verify-email': return 'Enter the verification code sent to your email';\n      case 'reset-password': return 'Enter your reset code and new password';\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\"\n          onClick={onClose}\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: 20 }}\n          className=\"relative w-full max-w-md bg-white rounded-2xl shadow-2xl max-h-[90vh] overflow-y-auto\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Header */}\n          <div className=\"p-6 pb-0\">\n            <button\n              onClick={onClose}\n              className=\"absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 transition-colors\"\n              disabled={isLoading}\n            >\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n            \n            <div className=\"text-center mb-6\">\n              <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{getTitle()}</h2>\n              <p className=\"text-gray-600\">{getSubtitle()}</p>\n            </div>\n          </div>\n\n          {/* Form */}\n          <form onSubmit={handleSubmit} className=\"px-6 pb-6 space-y-4\">\n            {/* Login Form */}\n            {mode === 'login' && (\n              <>\n                {renderInput('email', 'Email Address', 'email', <Mail className=\"w-5 h-5\" />)}\n                {renderPasswordInput('password', 'Password', showPassword, setShowPassword)}\n                \n                <button\n                  type=\"button\"\n                  onClick={() => setMode('forgot-password')}\n                  className=\"text-sm text-blue-600 hover:text-blue-800 transition-colors\"\n                  disabled={isLoading}\n                >\n                  Forgot your password?\n                </button>\n              </>\n            )}\n\n            {/* Signup Form */}\n            {mode === 'signup' && (\n              <>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  {renderInput('firstName', 'First Name', 'text', <User className=\"w-5 h-5\" />)}\n                  {renderInput('lastName', 'Last Name', 'text', <User className=\"w-5 h-5\" />)}\n                </div>\n                \n                {renderInput('email', 'Email Address', 'email', <Mail className=\"w-5 h-5\" />)}\n                {renderInput('schoolName', 'School Name', 'text', <Building className=\"w-5 h-5\" />)}\n                {renderInput('phoneNumber', 'Phone Number', 'tel', <Phone className=\"w-5 h-5\" />)}\n                \n                <div className=\"space-y-2\">\n                  <label className=\"block text-sm font-medium text-gray-700\">Role</label>\n                  <select\n                    value={formData.role}\n                    onChange={(e) => handleInputChange('role', e.target.value as any)}\n                    className=\"w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    disabled={isLoading}\n                  >\n                    <option value=\"admin\">School Administrator</option>\n                    <option value=\"food_director\">Food Service Director</option>\n                    <option value=\"staff\">Staff Member</option>\n                  </select>\n                </div>\n                \n                {renderPasswordInput('password', 'Password', showPassword, setShowPassword)}\n                {renderPasswordInput('confirmPassword', 'Confirm Password', showConfirmPassword, setShowConfirmPassword)}\n              </>\n            )}\n\n            {/* Forgot Password Form */}\n            {mode === 'forgot-password' && (\n              <>\n                {renderInput('email', 'Email Address', 'email', <Mail className=\"w-5 h-5\" />)}\n              </>\n            )}\n\n            {/* Email Verification Form */}\n            {mode === 'verify-email' && (\n              <>\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg mb-4\">\n                  <CheckCircle className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                  <p className=\"text-sm text-blue-800\">\n                    We've sent a verification code to <strong>{formData.email}</strong>\n                  </p>\n                </div>\n                {renderInput('verificationCode', 'Verification Code', 'text', <Lock className=\"w-5 h-5\" />, '6-digit code')}\n              </>\n            )}\n\n            {/* Reset Password Form */}\n            {mode === 'reset-password' && (\n              <>\n                {renderInput('verificationCode', 'Reset Code', 'text', <Lock className=\"w-5 h-5\" />, '6-digit code')}\n                {renderPasswordInput('newPassword', 'New Password', showPassword, setShowPassword)}\n              </>\n            )}\n\n            {/* Submit Button */}\n            <button\n              type=\"submit\"\n              disabled={isLoading}\n              className=\"w-full bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 flex items-center justify-center space-x-2 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"w-5 h-5 animate-spin\" />\n              ) : (\n                <>\n                  <span>\n                    {mode === 'login' ? 'Sign In' :\n                     mode === 'signup' ? 'Create Account' :\n                     mode === 'forgot-password' ? 'Send Reset Code' :\n                     mode === 'verify-email' ? 'Verify Email' :\n                     'Reset Password'}\n                  </span>\n                  <ChevronRight className=\"w-4 h-4\" />\n                </>\n              )}\n            </button>\n\n            {/* Mode Switching */}\n            <div className=\"text-center pt-4 border-t border-gray-200\">\n              {mode === 'login' && (\n                <p className=\"text-sm text-gray-600\">\n                  Don't have an account?{' '}\n                  <button\n                    type=\"button\"\n                    onClick={() => setMode('signup')}\n                    className=\"text-blue-600 hover:text-blue-800 font-semibold transition-colors\"\n                    disabled={isLoading}\n                  >\n                    Sign up\n                  </button>\n                </p>\n              )}\n              \n              {mode === 'signup' && (\n                <p className=\"text-sm text-gray-600\">\n                  Already have an account?{' '}\n                  <button\n                    type=\"button\"\n                    onClick={() => setMode('login')}\n                    className=\"text-blue-600 hover:text-blue-800 font-semibold transition-colors\"\n                    disabled={isLoading}\n                  >\n                    Sign in\n                  </button>\n                </p>\n              )}\n              \n              {(mode === 'forgot-password' || mode === 'reset-password') && (\n                <button\n                  type=\"button\"\n                  onClick={() => setMode('login')}\n                  className=\"text-sm text-blue-600 hover:text-blue-800 font-semibold transition-colors\"\n                  disabled={isLoading}\n                >\n                  ← Back to Sign In\n                </button>\n              )}\n            </div>\n          </form>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};\n\nexport default AuthModal;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/DashboardOverview.tsx",["1652","1653"],[],"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  PieChart, Pie, Cell, Area, AreaChart \n} from 'recharts';\nimport { \n  TrendingUp, TrendingDown, Users, Shield, \n  Clock, AlertTriangle, CheckCircle, DollarSign, \n  Activity, Zap, Bell, ArrowUpRight \n} from 'lucide-react';\nimport { hasivuApiService } from '../services/hasivu-api.service';\nimport { toast } from 'react-hot-toast';\n\ninterface DashboardStats {\n  totalStudents: number;\n  activeOrders: number;\n  monthlyRevenue: number;\n  fraudPrevented: number;\n  systemUptime: number;\n  avgDeliveryTime: number;\n  verificationAccuracy: number;\n  trendsData: Array<{\n    month: string;\n    revenue: number;\n    orders: number;\n    students: number;\n  }>;\n  fraudAnalytics: Array<{\n    type: string;\n    count: number;\n    prevented: number;\n  }>;\n  recentActivity: Array<{\n    id: string;\n    type: 'order' | 'verification' | 'fraud' | 'system';\n    message: string;\n    timestamp: string;\n    status: 'success' | 'warning' | 'error';\n  }>;\n  performanceMetrics: {\n    apiResponseTime: number;\n    databaseQueries: number;\n    cacheHitRate: number;\n    errorRate: number;\n  };\n}\n\nconst DashboardOverview: React.FC = () => {\n  const [stats, setStats] = useState<DashboardStats | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  const [selectedPeriod, setSelectedPeriod] = useState<'7d' | '30d' | '90d'>('30d');\n\n  useEffect(() => {\n    loadDashboardData();\n    \n    // Auto-refresh every 30 seconds\n    const interval = setInterval(() => {\n      refreshDashboard();\n    }, 30000);\n\n    return () => clearInterval(interval);\n  }, [selectedPeriod]);\n\n  const loadDashboardData = async () => {\n    try {\n      setIsLoading(true);\n      const [analyticsRes, realtimeRes, performanceRes] = await Promise.all([\n        hasivuApiService.getAnalyticsDashboard({ period: selectedPeriod }),\n        hasivuApiService.getRealtimeMetrics(),\n        hasivuApiService.getSystemPerformance()\n      ]);\n\n      const dashboardStats: DashboardStats = {\n        totalStudents: analyticsRes.data.totalStudents || 12543,\n        activeOrders: realtimeRes.data.activeOrders || 89,\n        monthlyRevenue: analyticsRes.data.monthlyRevenue || 247650,\n        fraudPrevented: analyticsRes.data.fraudPrevented || 124,\n        systemUptime: performanceRes.data.uptime || 99.97,\n        avgDeliveryTime: realtimeRes.data.avgDeliveryTime || 8.4,\n        verificationAccuracy: analyticsRes.data.verificationAccuracy || 99.94,\n        trendsData: analyticsRes.data.trends || generateMockTrends(),\n        fraudAnalytics: analyticsRes.data.fraudAnalytics || generateMockFraud(),\n        recentActivity: realtimeRes.data.recentActivity || generateMockActivity(),\n        performanceMetrics: performanceRes.data.metrics || {\n          apiResponseTime: 142,\n          databaseQueries: 2847,\n          cacheHitRate: 94.2,\n          errorRate: 0.03\n        }\n      };\n\n      setStats(dashboardStats);\n    } catch (error) {\n      toast.error('Failed to load dashboard data');\n      \n      // Load fallback demo data\n      setStats({\n        totalStudents: 12543,\n        activeOrders: 89,\n        monthlyRevenue: 247650,\n        fraudPrevented: 124,\n        systemUptime: 99.97,\n        avgDeliveryTime: 8.4,\n        verificationAccuracy: 99.94,\n        trendsData: generateMockTrends(),\n        fraudAnalytics: generateMockFraud(),\n        recentActivity: generateMockActivity(),\n        performanceMetrics: {\n          apiResponseTime: 142,\n          databaseQueries: 2847,\n          cacheHitRate: 94.2,\n          errorRate: 0.03\n        }\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshDashboard = async () => {\n    setRefreshing(true);\n    try {\n      const realtimeRes = await hasivuApiService.getRealtimeMetrics();\n      if (stats) {\n        setStats(prev => prev ? {\n          ...prev,\n          activeOrders: realtimeRes.data.activeOrders || prev.activeOrders,\n          avgDeliveryTime: realtimeRes.data.avgDeliveryTime || prev.avgDeliveryTime,\n          recentActivity: realtimeRes.data.recentActivity || prev.recentActivity\n        } : null);\n      }\n    } catch (error) {\n      // Silently handle refresh errors - dashboard will continue with cached data\n    } finally {\n      setRefreshing(false);\n    }\n  };\n\n  const generateMockTrends = () => [\n    { month: 'Jan', revenue: 180000, orders: 1200, students: 8500 },\n    { month: 'Feb', revenue: 195000, orders: 1350, students: 9200 },\n    { month: 'Mar', revenue: 210000, orders: 1450, students: 10100 },\n    { month: 'Apr', revenue: 225000, orders: 1600, students: 11200 },\n    { month: 'May', revenue: 240000, orders: 1750, students: 12000 },\n    { month: 'Jun', revenue: 247650, orders: 1834, students: 12543 }\n  ];\n\n  const generateMockFraud = () => [\n    { type: 'Card Fraud', count: 45, prevented: 44 },\n    { type: 'Identity Theft', count: 23, prevented: 23 },\n    { type: 'Account Takeover', count: 18, prevented: 17 },\n    { type: 'Synthetic ID', count: 12, prevented: 12 },\n    { type: 'Payment Abuse', count: 31, prevented: 28 }\n  ];\n\n  const generateMockActivity = () => [\n    { id: '1', type: 'verification', message: 'RFID verification completed for Lincoln High', timestamp: '2 min ago', status: 'success' },\n    { id: '2', type: 'fraud', message: 'Prevented fraudulent transaction attempt', timestamp: '5 min ago', status: 'warning' },\n    { id: '3', type: 'order', message: '15 new orders processed successfully', timestamp: '8 min ago', status: 'success' },\n    { id: '4', type: 'system', message: 'Payment gateway response time optimized', timestamp: '12 min ago', status: 'success' },\n    { id: '5', type: 'verification', message: 'RFID reader connectivity restored', timestamp: '18 min ago', status: 'success' }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        {[...Array(3)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-32 bg-gray-200 rounded-lg mb-4\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!stats) return null;\n\n  const StatCard = ({ \n    title, \n    value, \n    change, \n    icon: Icon, \n    format = 'number',\n    color = 'blue' \n  }: {\n    title: string;\n    value: number;\n    change?: number;\n    icon: React.ComponentType<any>;\n    format?: 'number' | 'currency' | 'percentage' | 'time';\n    color?: 'blue' | 'green' | 'purple' | 'orange';\n  }) => {\n    const formatValue = (val: number) => {\n      switch (format) {\n        case 'currency': return `$${val.toLocaleString()}`;\n        case 'percentage': return `${val}%`;\n        case 'time': return `${val} min`;\n        default: return val.toLocaleString();\n      }\n    };\n\n    const colorClasses = {\n      blue: 'from-blue-500 to-blue-600',\n      green: 'from-green-500 to-green-600',\n      purple: 'from-purple-500 to-purple-600',\n      orange: 'from-orange-500 to-orange-600'\n    };\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-lg transition-shadow\"\n      >\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className={`p-3 rounded-lg bg-gradient-to-r ${colorClasses[color]} text-white`}>\n            <Icon className=\"w-6 h-6\" />\n          </div>\n          {change && (\n            <div className={`flex items-center space-x-1 ${change >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n              {change >= 0 ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />}\n              <span className=\"text-sm font-medium\">{Math.abs(change)}%</span>\n            </div>\n          )}\n        </div>\n        <h3 className=\"text-2xl font-bold text-gray-900 mb-1\">{formatValue(value)}</h3>\n        <p className=\"text-gray-600 text-sm\">{title}</p>\n      </motion.div>\n    );\n  };\n\n  const ActivityIcon = ({ type }: { type: string }) => {\n    switch (type) {\n      case 'verification': return <Shield className=\"w-4 h-4 text-blue-500\" />;\n      case 'fraud': return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\n      case 'order': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'system': return <Activity className=\"w-4 h-4 text-purple-500\" />;\n      default: return <Bell className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const CHART_COLORS = ['#3B82F6', '#10B981', '#8B5CF6', '#F59E0B', '#EF4444'];\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Dashboard Overview</h1>\n          <p className=\"text-gray-600 mt-1\">Real-time insights and analytics for your HASIVU platform</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <select\n            value={selectedPeriod}\n            onChange={(e) => setSelectedPeriod(e.target.value as any)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"7d\">Last 7 days</option>\n            <option value=\"30d\">Last 30 days</option>\n            <option value=\"90d\">Last 90 days</option>\n          </select>\n          \n          <button\n            onClick={() => loadDashboardData()}\n            disabled={refreshing}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 flex items-center space-x-2\"\n          >\n            <Activity className={`w-4 h-4 ${refreshing ? 'animate-spin' : ''}`} />\n            <span>Refresh</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Total Students\"\n          value={stats.totalStudents}\n          change={8.2}\n          icon={Users}\n          color=\"blue\"\n        />\n        <StatCard\n          title=\"Monthly Revenue\"\n          value={stats.monthlyRevenue}\n          change={12.5}\n          icon={DollarSign}\n          format=\"currency\"\n          color=\"green\"\n        />\n        <StatCard\n          title=\"Fraud Prevention Rate\"\n          value={99.7}\n          icon={Shield}\n          format=\"percentage\"\n          color=\"purple\"\n        />\n        <StatCard\n          title=\"System Uptime\"\n          value={stats.systemUptime}\n          icon={Zap}\n          format=\"percentage\"\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Performance Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <StatCard\n          title=\"Active Orders\"\n          value={stats.activeOrders}\n          icon={Clock}\n          color=\"blue\"\n        />\n        <StatCard\n          title=\"Avg Delivery Time\"\n          value={stats.avgDeliveryTime}\n          icon={Activity}\n          format=\"time\"\n          color=\"green\"\n        />\n        <StatCard\n          title=\"RFID Accuracy\"\n          value={stats.verificationAccuracy}\n          icon={CheckCircle}\n          format=\"percentage\"\n          color=\"purple\"\n        />\n        <StatCard\n          title=\"Fraud Prevented\"\n          value={stats.fraudPrevented}\n          icon={AlertTriangle}\n          color=\"orange\"\n        />\n      </div>\n\n      {/* Charts Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Trends */}\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">Revenue Trends</h3>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n              <TrendingUp className=\"w-4 h-4 text-green-500\" />\n              <span>+12.5% vs last period</span>\n            </div>\n          </div>\n          \n          <ResponsiveContainer width=\"100%\" height={300}>\n            <AreaChart data={stats.trendsData}>\n              <defs>\n                <linearGradient id=\"colorRevenue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                  <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8}/>\n                  <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0}/>\n                </linearGradient>\n              </defs>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis />\n              <Tooltip \n                formatter={(value) => [`$${(value as number).toLocaleString()}`, 'Revenue']}\n              />\n              <Area \n                type=\"monotone\" \n                dataKey=\"revenue\" \n                stroke=\"#3B82F6\" \n                fillOpacity={1} \n                fill=\"url(#colorRevenue)\" \n              />\n            </AreaChart>\n          </ResponsiveContainer>\n        </motion.div>\n\n        {/* Fraud Analytics */}\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">Fraud Prevention</h3>\n            <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n              <Shield className=\"w-4 h-4\" />\n              <span>99.7% Success Rate</span>\n            </div>\n          </div>\n          \n          <ResponsiveContainer width=\"100%\" height={300}>\n            <PieChart>\n              <Pie\n                data={stats.fraudAnalytics}\n                cx=\"50%\"\n                cy=\"50%\"\n                outerRadius={100}\n                dataKey=\"prevented\"\n                label={({ type, prevented }) => `${type}: ${prevented}`}\n              >\n                {stats.fraudAnalytics.map((_, index) => (\n                  <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip />\n            </PieChart>\n          </ResponsiveContainer>\n        </motion.div>\n      </div>\n\n      {/* Recent Activity & System Performance */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Activity */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">Recent Activity</h3>\n            <button className=\"text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center space-x-1\">\n              <span>View All</span>\n              <ArrowUpRight className=\"w-4 h-4\" />\n            </button>\n          </div>\n          \n          <div className=\"space-y-4 max-h-80 overflow-y-auto\">\n            {stats.recentActivity.map((activity) => (\n              <div key={activity.id} className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50\">\n                <ActivityIcon type={activity.type} />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900\">{activity.message}</p>\n                  <p className=\"text-xs text-gray-500 mt-1\">{activity.timestamp}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </motion.div>\n\n        {/* System Performance */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\"\n        >\n          <div className=\"flex items-center justify-between mb-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900\">System Performance</h3>\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">All Systems Operational</span>\n            </div>\n          </div>\n          \n          <div className=\"space-y-6\">\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">API Response Time</span>\n                <span className=\"text-sm text-gray-900\">{stats.performanceMetrics.apiResponseTime}ms</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '85%' }}></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Cache Hit Rate</span>\n                <span className=\"text-sm text-gray-900\">{stats.performanceMetrics.cacheHitRate}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '94%' }}></div>\n              </div>\n            </div>\n            \n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <span className=\"text-sm font-medium text-gray-700\">Error Rate</span>\n                <span className=\"text-sm text-gray-900\">{stats.performanceMetrics.errorRate}%</span>\n              </div>\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                <div className=\"bg-red-500 h-2 rounded-full\" style={{ width: '3%' }}></div>\n              </div>\n            </div>\n            \n            <div className=\"pt-4 border-t border-gray-200\">\n              <div className=\"text-xs text-gray-500 space-y-1\">\n                <p>Database Queries: {stats.performanceMetrics.databaseQueries.toLocaleString()}/day</p>\n                <p>Last Updated: {new Date().toLocaleTimeString()}</p>\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardOverview;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/MobileResponsiveNavigation.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/NotificationSystem.tsx",["1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667"],[],"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bell, X, AlertTriangle, Info, CheckCircle, \n  Shield, Radio, CreditCard, Activity,\n  ChevronRight, Trash2\n} from 'lucide-react';\nimport { toast } from 'react-hot-toast';\n\nexport interface Notification {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error' | 'security' | 'rfid' | 'payment' | 'system';\n  title: string;\n  message: string;\n  timestamp: string;\n  read: boolean;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  actionUrl?: string;\n  actionLabel?: string;\n  metadata?: Record<string, string | number | boolean>;\n  userId?: string;\n  schoolId?: string;\n  expiresAt?: string;\n}\n\ninterface NotificationSystemProps {\n  userId?: string;\n  schoolId?: string;\n  onNotificationClick?: (notification: Notification) => void;\n  maxVisible?: number;\n  enableWebSocket?: boolean;\n}\n\ninterface WebSocketMessage {\n  type: 'notification' | 'notification_update' | 'notification_delete' | 'heartbeat';\n  data?: {\n    status?: string;\n    count?: number;\n    timestamp?: string;\n    message?: string;\n  };\n  notification?: Notification;\n  notificationId?: string;\n}\n\nconst NotificationSystem: React.FC<NotificationSystemProps> = ({\n  userId,\n  schoolId,\n  onNotificationClick,\n  maxVisible = 5,\n  enableWebSocket = true\n}) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [isOpen, setIsOpen] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [showAll, setShowAll] = useState(false);\n  \n  const wsRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const reconnectAttempts = useRef(0);\n  const maxReconnectAttempts = 5;\n\n  // Initialize notifications and WebSocket connection\n  useEffect(() => {\n    loadNotifications();\n    \n    if (enableWebSocket) {\n      connectWebSocket();\n    }\n\n    return () => {\n      disconnectWebSocket();\n    };\n  }, [userId, schoolId, enableWebSocket]);\n\n  // Update unread count when notifications change\n  useEffect(() => {\n    const unread = notifications.filter(n => !n.read).length;\n    setUnreadCount(unread);\n  }, [notifications]);\n\n  const loadNotifications = async () => {\n    try {\n      // In a real implementation, this would fetch from your backend\n      // For demo purposes, we'll generate some mock notifications\n      const mockNotifications = generateMockNotifications();\n      setNotifications(mockNotifications);\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n      toast.error('Failed to load notifications');\n    }\n  };\n\n  const connectWebSocket = useCallback(() => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    try {\n      // Replace with your actual WebSocket URL from environment variables\n      const wsUrl = process.env.NEXT_PUBLIC_WEBSOCKET_URL || 'wss://api.hasivu.com/notifications';\n      const ws = new WebSocket(`${wsUrl}?userId=${userId}&schoolId=${schoolId}`);\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        reconnectAttempts.current = 0;\n        \n        // Start heartbeat\n        heartbeatIntervalRef.current = setInterval(() => {\n          if (ws.readyState === WebSocket.OPEN) {\n            ws.send(JSON.stringify({ type: 'heartbeat' }));\n          }\n        }, 30000);\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleWebSocketMessage(message);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = (event) => {\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        setIsConnected(false);\n        \n        if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n        }\n\n        // Attempt to reconnect if not a manual close\n        if (event.code !== 1000 && reconnectAttempts.current < maxReconnectAttempts) {\n          const delay = Math.min(1000 * Math.pow(2, reconnectAttempts.current), 30000);\n          reconnectAttempts.current++;\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            console.log(`Attempting to reconnect (${reconnectAttempts.current}/${maxReconnectAttempts})`);\n            connectWebSocket();\n          }, delay);\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n      wsRef.current = ws;\n    } catch (error) {\n      console.error('Failed to connect WebSocket:', error);\n      setIsConnected(false);\n    }\n  }, [userId, schoolId]);\n\n  const disconnectWebSocket = useCallback(() => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n    }\n    \n    if (heartbeatIntervalRef.current) {\n      clearInterval(heartbeatIntervalRef.current);\n    }\n\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'Component unmounting');\n      wsRef.current = null;\n    }\n    \n    setIsConnected(false);\n  }, []);\n\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'notification':\n        if (message.notification) {\n          addNotification(message.notification);\n          showToastForNotification(message.notification);\n        }\n        break;\n        \n      case 'notification_update':\n        if (message.notification) {\n          updateNotification(message.notification);\n        }\n        break;\n        \n      case 'notification_delete':\n        if (message.notificationId) {\n          removeNotification(message.notificationId);\n        }\n        break;\n        \n      case 'heartbeat':\n        // Heartbeat received, connection is healthy\n        break;\n        \n      default:\n        console.log('Unknown WebSocket message type:', message.type);\n    }\n  };\n\n  const addNotification = (notification: Notification) => {\n    setNotifications(prev => {\n      // Check if notification already exists\n      const exists = prev.find(n => n.id === notification.id);\n      if (exists) return prev;\n      \n      // Add to beginning of array and limit total\n      const updated = [notification, ...prev];\n      return updated.slice(0, 100); // Keep max 100 notifications\n    });\n  };\n\n  const updateNotification = (updatedNotification: Notification) => {\n    setNotifications(prev => \n      prev.map(n => n.id === updatedNotification.id ? updatedNotification : n)\n    );\n  };\n\n  const removeNotification = (notificationId: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  const showToastForNotification = (notification: Notification) => {\n    const config = {\n      duration: notification.priority === 'urgent' ? 8000 : 4000,\n      position: 'top-right' as const,\n    };\n\n    switch (notification.type) {\n      case 'success':\n        toast.success(notification.title, config);\n        break;\n      case 'warning':\n        toast.error(notification.title, config);\n        break;\n      case 'error':\n        toast.error(notification.title, config);\n        break;\n      default:\n        toast(notification.title, config);\n    }\n  };\n\n  const markAsRead = async (notificationId: string) => {\n    try {\n      // Update locally first for immediate feedback\n      setNotifications(prev => \n        prev.map(n => \n          n.id === notificationId ? { ...n, read: true } : n\n        )\n      );\n\n      // Send to backend (would be actual API call in real implementation)\n      console.log('Marking notification as read:', notificationId);\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      setNotifications(prev => \n        prev.map(n => ({ ...n, read: true }))\n      );\n      \n      console.log('Marking all notifications as read');\n      toast.success('All notifications marked as read');\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n      toast.error('Failed to mark notifications as read');\n    }\n  };\n\n  const deleteNotification = async (notificationId: string) => {\n    try {\n      removeNotification(notificationId);\n      console.log('Deleting notification:', notificationId);\n    } catch (error) {\n      console.error('Failed to delete notification:', error);\n    }\n  };\n\n  const generateMockNotifications = (): Notification[] => {\n    const now = new Date();\n    const notifications: Notification[] = [\n      {\n        id: '1',\n        type: 'security',\n        title: 'Fraud Attempt Blocked',\n        message: 'Suspicious payment activity detected and automatically blocked for student ID 1234',\n        timestamp: new Date(now.getTime() - 5 * 60 * 1000).toISOString(),\n        read: false,\n        priority: 'high',\n        actionUrl: '/security/fraud-alerts',\n        actionLabel: 'View Details'\n      },\n      {\n        id: '2',\n        type: 'rfid',\n        title: 'RFID Reader Offline',\n        message: 'Main cafeteria RFID reader has gone offline. Last seen 10 minutes ago.',\n        timestamp: new Date(now.getTime() - 15 * 60 * 1000).toISOString(),\n        read: false,\n        priority: 'medium',\n        actionUrl: '/rfid/readers',\n        actionLabel: 'Check Status'\n      },\n      {\n        id: '3',\n        type: 'success',\n        title: 'Daily Revenue Target Met',\n        message: 'Congratulations! Today\\'s revenue target of $2,500 has been achieved.',\n        timestamp: new Date(now.getTime() - 2 * 60 * 60 * 1000).toISOString(),\n        read: true,\n        priority: 'low'\n      },\n      {\n        id: '4',\n        type: 'payment',\n        title: 'Low Balance Alert',\n        message: '15 students have account balances below $5.00 and may need to add funds.',\n        timestamp: new Date(now.getTime() - 4 * 60 * 60 * 1000).toISOString(),\n        read: false,\n        priority: 'medium',\n        actionUrl: '/payments/low-balance',\n        actionLabel: 'View Students'\n      },\n      {\n        id: '5',\n        type: 'system',\n        title: 'System Maintenance Scheduled',\n        message: 'Scheduled maintenance will occur tomorrow from 2:00 AM to 4:00 AM EST.',\n        timestamp: new Date(now.getTime() - 8 * 60 * 60 * 1000).toISOString(),\n        read: true,\n        priority: 'low'\n      }\n    ];\n\n    return notifications;\n  };\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    const iconProps = { className: \"w-5 h-5\" };\n    \n    switch (type) {\n      case 'success': return <CheckCircle {...iconProps} className=\"w-5 h-5 text-green-600\" />;\n      case 'warning': return <AlertTriangle {...iconProps} className=\"w-5 h-5 text-yellow-600\" />;\n      case 'error': return <AlertTriangle {...iconProps} className=\"w-5 h-5 text-red-600\" />;\n      case 'security': return <Shield {...iconProps} className=\"w-5 h-5 text-purple-600\" />;\n      case 'rfid': return <Radio {...iconProps} className=\"w-5 h-5 text-blue-600\" />;\n      case 'payment': return <CreditCard {...iconProps} className=\"w-5 h-5 text-green-600\" />;\n      case 'system': return <Activity {...iconProps} className=\"w-5 h-5 text-gray-600\" />;\n      default: return <Info {...iconProps} className=\"w-5 h-5 text-blue-600\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: Notification['priority']) => {\n    switch (priority) {\n      case 'urgent': return 'border-l-red-500 bg-red-50';\n      case 'high': return 'border-l-orange-500 bg-orange-50';\n      case 'medium': return 'border-l-yellow-500 bg-yellow-50';\n      default: return 'border-l-blue-500 bg-blue-50';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const now = new Date();\n    const time = new Date(timestamp);\n    const diff = now.getTime() - time.getTime();\n    \n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n    const days = Math.floor(diff / 86400000);\n    \n    if (minutes < 1) return 'Just now';\n    if (minutes < 60) return `${minutes}m ago`;\n    if (hours < 24) return `${hours}h ago`;\n    return `${days}d ago`;\n  };\n\n  const visibleNotifications = showAll ? notifications : notifications.slice(0, maxVisible);\n\n  return (\n    <>\n      {/* Notification Bell */}\n      <div className=\"relative\">\n        <button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"relative p-2 text-gray-600 hover:text-gray-900 hover:bg-gray-100 rounded-lg transition-colors\"\n        >\n          <Bell className=\"w-6 h-6\" />\n          {unreadCount > 0 && (\n            <motion.span\n              initial={{ scale: 0 }}\n              animate={{ scale: 1 }}\n              className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium\"\n            >\n              {unreadCount > 99 ? '99+' : unreadCount}\n            </motion.span>\n          )}\n          {!isConnected && enableWebSocket && (\n            <div className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-yellow-500 rounded-full border-2 border-white\" />\n          )}\n        </button>\n\n        {/* Notification Panel */}\n        <AnimatePresence>\n          {isOpen && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.95, y: -10 }}\n              animate={{ opacity: 1, scale: 1, y: 0 }}\n              exit={{ opacity: 0, scale: 0.95, y: -10 }}\n              className=\"absolute right-0 mt-2 w-96 bg-white rounded-lg shadow-xl border border-gray-200 z-50 max-h-96 overflow-hidden\"\n            >\n              {/* Header */}\n              <div className=\"px-4 py-3 border-b border-gray-200 flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">Notifications</h3>\n                  {unreadCount > 0 && (\n                    <span className=\"bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-medium\">\n                      {unreadCount} new\n                    </span>\n                  )}\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  {unreadCount > 0 && (\n                    <button\n                      onClick={markAllAsRead}\n                      className=\"text-sm text-blue-600 hover:text-blue-800\"\n                    >\n                      Mark all read\n                    </button>\n                  )}\n                  \n                  <button\n                    onClick={() => setIsOpen(false)}\n                    className=\"text-gray-400 hover:text-gray-600\"\n                  >\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n\n              {/* Connection Status */}\n              {enableWebSocket && (\n                <div className={`px-4 py-2 text-xs border-b border-gray-200 ${\n                  isConnected ? 'bg-green-50 text-green-800' : 'bg-yellow-50 text-yellow-800'\n                }`}>\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={`w-2 h-2 rounded-full ${\n                      isConnected ? 'bg-green-500' : 'bg-yellow-500'\n                    }`} />\n                    <span>\n                      {isConnected ? 'Real-time updates active' : 'Connecting to real-time updates...'}\n                    </span>\n                  </div>\n                </div>\n              )}\n\n              {/* Notifications List */}\n              <div className=\"max-h-80 overflow-y-auto\">\n                {visibleNotifications.length === 0 ? (\n                  <div className=\"p-8 text-center text-gray-500\">\n                    <Bell className=\"w-8 h-8 mx-auto mb-2 text-gray-300\" />\n                    <p>No notifications yet</p>\n                  </div>\n                ) : (\n                  <div className=\"divide-y divide-gray-200\">\n                    {visibleNotifications.map((notification) => (\n                      <motion.div\n                        key={notification.id}\n                        initial={{ opacity: 0, x: 20 }}\n                        animate={{ opacity: 1, x: 0 }}\n                        className={`p-4 hover:bg-gray-50 cursor-pointer border-l-4 ${\n                          notification.read ? 'opacity-75' : ''\n                        } ${getPriorityColor(notification.priority)}`}\n                        onClick={() => {\n                          if (!notification.read) {\n                            markAsRead(notification.id);\n                          }\n                          if (onNotificationClick) {\n                            onNotificationClick(notification);\n                          }\n                          if (notification.actionUrl) {\n                            window.location.href = notification.actionUrl;\n                          }\n                        }}\n                      >\n                        <div className=\"flex items-start space-x-3\">\n                          <div className=\"flex-shrink-0 mt-1\">\n                            {getNotificationIcon(notification.type)}\n                          </div>\n                          \n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <p className={`text-sm font-medium ${\n                                notification.read ? 'text-gray-700' : 'text-gray-900'\n                              }`}>\n                                {notification.title}\n                              </p>\n                              \n                              <div className=\"flex items-center space-x-1\">\n                                <span className=\"text-xs text-gray-500\">\n                                  {formatTimeAgo(notification.timestamp)}\n                                </span>\n                                {!notification.read && (\n                                  <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                                )}\n                              </div>\n                            </div>\n                            \n                            <p className=\"text-sm text-gray-600 line-clamp-2\">\n                              {notification.message}\n                            </p>\n                            \n                            {notification.actionLabel && (\n                              <div className=\"mt-2 flex items-center text-xs text-blue-600 hover:text-blue-800\">\n                                <span>{notification.actionLabel}</span>\n                                <ChevronRight className=\"w-3 h-3 ml-1\" />\n                              </div>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex-shrink-0\">\n                            <button\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                deleteNotification(notification.id);\n                              }}\n                              className=\"text-gray-400 hover:text-red-600 p-1\"\n                            >\n                              <Trash2 className=\"w-4 h-4\" />\n                            </button>\n                          </div>\n                        </div>\n                      </motion.div>\n                    ))}\n                  </div>\n                )}\n              </div>\n\n              {/* Footer */}\n              {notifications.length > maxVisible && (\n                <div className=\"px-4 py-3 border-t border-gray-200 bg-gray-50\">\n                  <button\n                    onClick={() => setShowAll(!showAll)}\n                    className=\"w-full text-sm text-blue-600 hover:text-blue-800 font-medium\"\n                  >\n                    {showAll ? 'Show less' : `View all ${notifications.length} notifications`}\n                  </button>\n                </div>\n              )}\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Click outside to close */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 z-40\"\n          onClick={() => setIsOpen(false)}\n        />\n      )}\n    </>\n  );\n};\n\nexport default NotificationSystem;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/OnboardingFlow.tsx",["1668","1669","1670"],[],"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  ArrowRight, ArrowLeft, Building, Users, CreditCard, \n  Radio, Settings, Shield, \n  Clock, CheckCircle, Loader2,\n  Download, Eye, Star, Sparkles\n} from 'lucide-react';\nimport { hasivuApiService } from '../services/hasivu-api.service';\nimport { toast } from 'react-hot-toast';\n\ninterface OnboardingStep {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string; size?: number }>;\n  required: boolean;\n  estimatedTime: string;\n}\n\ninterface SchoolInfo {\n  name: string;\n  address: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  phone: string;\n  email: string;\n  website: string;\n  studentCount: number;\n  lunchProgram: boolean;\n  currentSystem: string;\n}\n\ninterface UserSetup {\n  firstName: string;\n  lastName: string;\n  role: 'admin' | 'food_director' | 'staff';\n  email: string;\n  phone: string;\n  department: string;\n}\n\ninterface PaymentConfig {\n  acceptPayments: boolean;\n  paymentMethods: string[];\n  minimumBalance: number;\n  autoReload: boolean;\n  reloadAmount: number;\n}\n\ninterface RFIDSetup {\n  enableRFID: boolean;\n  readerCount: number;\n  cardQuantity: number;\n  locations: string[];\n  distributionMethod: 'bulk' | 'individual' | 'gradual';\n}\n\nconst OnboardingFlow: React.FC<{ onComplete: () => void; onSkip?: () => void }> = ({ \n  onComplete, \n  onSkip \n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [isLoading, setIsLoading] = useState(false);\n  const [schoolInfo, setSchoolInfo] = useState<SchoolInfo>({\n    name: '',\n    address: '',\n    city: '',\n    state: '',\n    zipCode: '',\n    phone: '',\n    email: '',\n    website: '',\n    studentCount: 0,\n    lunchProgram: true,\n    currentSystem: 'manual'\n  });\n  \n  const [userSetup, setUserSetup] = useState<UserSetup>({\n    firstName: '',\n    lastName: '',\n    role: 'admin',\n    email: '',\n    phone: '',\n    department: ''\n  });\n  \n  const [paymentConfig, setPaymentConfig] = useState<PaymentConfig>({\n    acceptPayments: true,\n    paymentMethods: ['card', 'parent_account'],\n    minimumBalance: 5,\n    autoReload: false,\n    reloadAmount: 25\n  });\n  \n  const [rfidSetup, setRFIDSetup] = useState<RFIDSetup>({\n    enableRFID: true,\n    readerCount: 3,\n    cardQuantity: 0,\n    locations: [],\n    distributionMethod: 'gradual'\n  });\n\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const steps: OnboardingStep[] = [\n    {\n      id: 'welcome',\n      title: 'Welcome to HASIVU',\n      description: 'Let\\'s get your school set up with our AI-powered food delivery system',\n      icon: Sparkles,\n      required: true,\n      estimatedTime: '2 min'\n    },\n    {\n      id: 'school_info',\n      title: 'School Information',\n      description: 'Tell us about your school and current setup',\n      icon: Building,\n      required: true,\n      estimatedTime: '5 min'\n    },\n    {\n      id: 'user_setup',\n      title: 'Administrator Setup',\n      description: 'Set up your administrator account and permissions',\n      icon: Users,\n      required: true,\n      estimatedTime: '3 min'\n    },\n    {\n      id: 'payment_config',\n      title: 'Payment Configuration',\n      description: 'Configure payment methods and account settings',\n      icon: CreditCard,\n      required: true,\n      estimatedTime: '4 min'\n    },\n    {\n      id: 'rfid_setup',\n      title: 'RFID System Setup',\n      description: 'Configure RFID cards and reader locations',\n      icon: Radio,\n      required: true,\n      estimatedTime: '6 min'\n    },\n    {\n      id: 'integration',\n      title: 'System Integration',\n      description: 'Connect with existing systems and import data',\n      icon: Settings,\n      required: false,\n      estimatedTime: '8 min'\n    },\n    {\n      id: 'security',\n      title: 'Security & Compliance',\n      description: 'Set up security policies and compliance settings',\n      icon: Shield,\n      required: true,\n      estimatedTime: '5 min'\n    },\n    {\n      id: 'completion',\n      title: 'Setup Complete',\n      description: 'Your HASIVU system is ready to go!',\n      icon: CheckCircle,\n      required: true,\n      estimatedTime: '2 min'\n    }\n  ];\n\n  // Auto-save progress\n  useEffect(() => {\n    const saveProgress = () => {\n      localStorage.setItem('hasivu_onboarding_progress', JSON.stringify({\n        currentStep,\n        schoolInfo,\n        userSetup,\n        paymentConfig,\n        rfidSetup,\n        completedSteps: Array.from(completedSteps)\n      }));\n    };\n\n    const timer = setTimeout(saveProgress, 1000);\n    return () => clearTimeout(timer);\n  }, [currentStep, schoolInfo, userSetup, paymentConfig, rfidSetup, completedSteps]);\n\n  // Load saved progress\n  useEffect(() => {\n    const saved = localStorage.getItem('hasivu_onboarding_progress');\n    if (saved) {\n      try {\n        const progress = JSON.parse(saved);\n        setCurrentStep(progress.currentStep || 0);\n        setSchoolInfo(progress.schoolInfo || schoolInfo);\n        setUserSetup(progress.userSetup || userSetup);\n        setPaymentConfig(progress.paymentConfig || paymentConfig);\n        setRFIDSetup(progress.rfidSetup || rfidSetup);\n        setCompletedSteps(new Set(progress.completedSteps || []));\n      } catch (error) {\n        console.error('Failed to load onboarding progress:', error);\n      }\n    }\n  }, []);\n\n  const validateStep = (stepIndex: number): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    switch (steps[stepIndex].id) {\n      case 'school_info':\n        if (!schoolInfo.name.trim()) newErrors.schoolName = 'School name is required';\n        if (!schoolInfo.email.trim()) newErrors.schoolEmail = 'School email is required';\n        if (!schoolInfo.phone.trim()) newErrors.schoolPhone = 'School phone is required';\n        if (schoolInfo.studentCount <= 0) newErrors.studentCount = 'Student count must be greater than 0';\n        break;\n        \n      case 'user_setup':\n        if (!userSetup.firstName.trim()) newErrors.firstName = 'First name is required';\n        if (!userSetup.lastName.trim()) newErrors.lastName = 'Last name is required';\n        if (!userSetup.email.trim()) newErrors.userEmail = 'Email is required';\n        break;\n        \n      case 'rfid_setup':\n        if (rfidSetup.enableRFID) {\n          if (rfidSetup.readerCount <= 0) newErrors.readerCount = 'At least 1 reader required';\n          if (rfidSetup.locations.length === 0) newErrors.locations = 'At least 1 location required';\n        }\n        break;\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const nextStep = async () => {\n    if (!validateStep(currentStep)) return;\n\n    setIsLoading(true);\n    \n    try {\n      // Save current step data to backend\n      await saveStepData(currentStep);\n      \n      setCompletedSteps(prev => new Set([...prev, currentStep]));\n      \n      if (currentStep < steps.length - 1) {\n        setCurrentStep(currentStep + 1);\n      } else {\n        await completeOnboarding();\n      }\n    } catch (error) {\n      console.error('Failed to save step:', error);\n      toast.error('Failed to save progress. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const saveStepData = async (stepIndex: number) => {\n    const stepId = steps[stepIndex].id;\n    \n    switch (stepId) {\n      case 'school_info':\n        await hasivuApiService.updateSchoolInfo(schoolInfo);\n        break;\n      case 'user_setup':\n        await hasivuApiService.updateUserProfile(userSetup);\n        break;\n      case 'payment_config':\n        await hasivuApiService.updatePaymentConfig(paymentConfig);\n        break;\n      case 'rfid_setup':\n        await hasivuApiService.updateRFIDConfig(rfidSetup);\n        break;\n    }\n  };\n\n  const completeOnboarding = async () => {\n    try {\n      await hasivuApiService.completeOnboarding({\n        schoolInfo,\n        userSetup,\n        paymentConfig,\n        rfidSetup\n      });\n      \n      localStorage.removeItem('hasivu_onboarding_progress');\n      toast.success('Onboarding completed successfully!');\n      onComplete();\n    } catch (error) {\n      console.error('Failed to complete onboarding:', error);\n      toast.error('Failed to complete setup. Please try again.');\n    }\n  };\n\n  const skipStep = () => {\n    if (!steps[currentStep].required) {\n      setCompletedSteps(prev => new Set([...prev, currentStep]));\n      if (currentStep < steps.length - 1) {\n        setCurrentStep(currentStep + 1);\n      }\n    }\n  };\n\n  const renderWelcomeStep = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"text-center space-y-8\"\n    >\n      <div className=\"space-y-4\">\n        <div className=\"mx-auto w-24 h-24 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-full flex items-center justify-center\">\n          <Sparkles className=\"w-12 h-12 text-white\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900\">Welcome to HASIVU!</h2>\n        <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n          We're excited to help you transform your school's food service with our AI-powered delivery platform. \n          This quick setup will get you running in under 30 minutes.\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto\">\n        <div className=\"bg-blue-50 rounded-lg p-6 text-center\">\n          <Shield className=\"w-8 h-8 text-blue-600 mx-auto mb-3\" />\n          <h3 className=\"font-semibold text-gray-900 mb-2\">99.7% Fraud Prevention</h3>\n          <p className=\"text-sm text-gray-600\">Advanced AI protects every transaction</p>\n        </div>\n        \n        <div className=\"bg-green-50 rounded-lg p-6 text-center\">\n          <Radio className=\"w-8 h-8 text-green-600 mx-auto mb-3\" />\n          <h3 className=\"font-semibold text-gray-900 mb-2\">RFID Verification</h3>\n          <p className=\"text-sm text-gray-600\">Instant student identification and delivery</p>\n        </div>\n        \n        <div className=\"bg-purple-50 rounded-lg p-6 text-center\">\n          <Clock className=\"w-8 h-8 text-purple-600 mx-auto mb-3\" />\n          <h3 className=\"font-semibold text-gray-900 mb-2\">8-Minute Average</h3>\n          <p className=\"text-sm text-gray-600\">Lightning-fast delivery times</p>\n        </div>\n      </div>\n\n      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4 max-w-2xl mx-auto\">\n        <div className=\"flex items-center space-x-3\">\n          <Star className=\"w-5 h-5 text-yellow-600\" />\n          <div className=\"text-left\">\n            <p className=\"font-medium text-gray-900\">30-Day Free Trial</p>\n            <p className=\"text-sm text-gray-600\">Full access to all features, no commitment required</p>\n          </div>\n        </div>\n      </div>\n    </motion.div>\n  );\n\n  const renderSchoolInfoStep = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"space-y-6 max-w-2xl mx-auto\"\n    >\n      <div className=\"text-center mb-8\">\n        <Building className=\"w-12 h-12 text-blue-600 mx-auto mb-4\" />\n        <h2 className=\"text-2xl font-bold text-gray-900\">School Information</h2>\n        <p className=\"text-gray-600\">Help us understand your school's needs and current setup</p>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">School Name *</label>\n          <input\n            type=\"text\"\n            value={schoolInfo.name}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, name: e.target.value }))}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n              errors.schoolName ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"Lincoln High School\"\n          />\n          {errors.schoolName && <p className=\"text-sm text-red-600 mt-1\">{errors.schoolName}</p>}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Student Count *</label>\n          <input\n            type=\"number\"\n            value={schoolInfo.studentCount || ''}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, studentCount: parseInt(e.target.value) || 0 }))}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n              errors.studentCount ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"1200\"\n          />\n          {errors.studentCount && <p className=\"text-sm text-red-600 mt-1\">{errors.studentCount}</p>}\n        </div>\n\n        <div className=\"md:col-span-2\">\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Address</label>\n          <input\n            type=\"text\"\n            value={schoolInfo.address}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, address: e.target.value }))}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"123 Education Street\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">City</label>\n          <input\n            type=\"text\"\n            value={schoolInfo.city}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, city: e.target.value }))}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            placeholder=\"Springfield\"\n          />\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">State</label>\n          <select\n            value={schoolInfo.state}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, state: e.target.value }))}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"\">Select State</option>\n            <option value=\"CA\">California</option>\n            <option value=\"TX\">Texas</option>\n            <option value=\"NY\">New York</option>\n            <option value=\"FL\">Florida</option>\n            {/* Add more states */}\n          </select>\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone Number *</label>\n          <input\n            type=\"tel\"\n            value={schoolInfo.phone}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, phone: e.target.value }))}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n              errors.schoolPhone ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"(555) 123-4567\"\n          />\n          {errors.schoolPhone && <p className=\"text-sm text-red-600 mt-1\">{errors.schoolPhone}</p>}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email *</label>\n          <input\n            type=\"email\"\n            value={schoolInfo.email}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, email: e.target.value }))}\n            className={`w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent ${\n              errors.schoolEmail ? 'border-red-500' : 'border-gray-300'\n            }`}\n            placeholder=\"admin@lincolnhigh.edu\"\n          />\n          {errors.schoolEmail && <p className=\"text-sm text-red-600 mt-1\">{errors.schoolEmail}</p>}\n        </div>\n\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Current System</label>\n          <select\n            value={schoolInfo.currentSystem}\n            onChange={(e) => setSchoolInfo(prev => ({ ...prev, currentSystem: e.target.value }))}\n            className=\"w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n          >\n            <option value=\"manual\">Manual/Cash Only</option>\n            <option value=\"basic_pos\">Basic POS System</option>\n            <option value=\"school_lunch\">School Lunch Program</option>\n            <option value=\"other\">Other</option>\n          </select>\n        </div>\n\n        <div>\n          <label className=\"flex items-center space-x-3\">\n            <input\n              type=\"checkbox\"\n              checked={schoolInfo.lunchProgram}\n              onChange={(e) => setSchoolInfo(prev => ({ ...prev, lunchProgram: e.target.checked }))}\n              className=\"w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500\"\n            />\n            <span className=\"text-sm text-gray-700\">Free/Reduced Lunch Program</span>\n          </label>\n        </div>\n      </div>\n    </motion.div>\n  );\n\n  const renderCompletionStep = () => (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      className=\"text-center space-y-8\"\n    >\n      <div className=\"space-y-4\">\n        <div className=\"mx-auto w-24 h-24 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full flex items-center justify-center\">\n          <CheckCircle className=\"w-12 h-12 text-white\" />\n        </div>\n        <h2 className=\"text-3xl font-bold text-gray-900\">Setup Complete!</h2>\n        <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n          Congratulations! Your HASIVU system is now configured and ready to revolutionize \n          your school's food service delivery.\n        </p>\n      </div>\n\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 max-w-2xl mx-auto\">\n        <h3 className=\"font-semibold text-gray-900 mb-4\">What happens next?</h3>\n        <div className=\"space-y-3 text-left\">\n          <div className=\"flex items-start space-x-3\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-gray-900\">RFID Cards Ordered</p>\n              <p className=\"text-sm text-gray-600\">Your RFID cards will arrive within 3-5 business days</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start space-x-3\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-gray-900\">Training Session Scheduled</p>\n              <p className=\"text-sm text-gray-600\">Our team will contact you to schedule staff training</p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-start space-x-3\">\n            <CheckCircle className=\"w-5 h-5 text-green-600 mt-0.5\" />\n            <div>\n              <p className=\"font-medium text-gray-900\">Dashboard Access Ready</p>\n              <p className=\"text-sm text-gray-600\">Start exploring your admin dashboard immediately</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col sm:flex-row gap-4 justify-center max-w-lg mx-auto\">\n        <button className=\"flex-1 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2\">\n          <Eye className=\"w-5 h-5\" />\n          <span>View Dashboard</span>\n        </button>\n        \n        <button className=\"flex-1 bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors flex items-center justify-center space-x-2\">\n          <Download className=\"w-5 h-5\" />\n          <span>Download Guide</span>\n        </button>\n      </div>\n    </motion.div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Progress Header */}\n      <div className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-semibold text-gray-900\">HASIVU Setup</h1>\n              <span className=\"text-sm text-gray-500\">\n                Step {currentStep + 1} of {steps.length}\n              </span>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-500\">\n                {steps[currentStep].estimatedTime} remaining\n              </span>\n              {onSkip && !steps[currentStep].required && (\n                <button\n                  onClick={() => onSkip()}\n                  className=\"text-sm text-gray-600 hover:text-gray-800\"\n                >\n                  Skip Setup\n                </button>\n              )}\n            </div>\n          </div>\n          \n          {/* Progress Bar */}\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-4xl mx-auto px-6 py-12\">\n        <AnimatePresence mode=\"wait\">\n          {steps[currentStep].id === 'welcome' && renderWelcomeStep()}\n          {steps[currentStep].id === 'school_info' && renderSchoolInfoStep()}\n          {steps[currentStep].id === 'completion' && renderCompletionStep()}\n          \n          {/* Add other step renderers as needed */}\n        </AnimatePresence>\n\n        {/* Navigation */}\n        <div className=\"flex items-center justify-between mt-12 pt-8 border-t border-gray-200\">\n          <button\n            onClick={prevStep}\n            disabled={currentStep === 0}\n            className=\"flex items-center space-x-2 px-6 py-3 text-gray-600 hover:text-gray-800 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            <span>Previous</span>\n          </button>\n\n          <div className=\"flex items-center space-x-4\">\n            {!steps[currentStep].required && currentStep > 0 && (\n              <button\n                onClick={skipStep}\n                className=\"px-6 py-3 text-gray-600 hover:text-gray-800\"\n              >\n                Skip for now\n              </button>\n            )}\n            \n            <button\n              onClick={nextStep}\n              disabled={isLoading}\n              className=\"flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n              ) : (\n                <>\n                  <span>\n                    {currentStep === steps.length - 1 ? 'Get Started' : 'Continue'}\n                  </span>\n                  <ArrowRight className=\"w-4 h-4\" />\n                </>\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OnboardingFlow;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ProgressiveLoading.tsx",["1671"],[],"import React from 'react';\nimport { motion } from 'framer-motion';\nimport { Loader2, AlertCircle, RefreshCw, Wifi, WifiOff } from 'lucide-react';\n\n// Loading Skeleton Components\nexport const SkeletonCard: React.FC<{ className?: string }> = ({ className = '' }) => (\n  <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n    <div className=\"animate-pulse\">\n      <div className=\"flex items-center space-x-4 mb-4\">\n        <div className=\"w-12 h-12 bg-gray-200 rounded-lg\"></div>\n        <div className=\"flex-1\">\n          <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n          <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n        </div>\n      </div>\n      <div className=\"space-y-3\">\n        <div className=\"h-3 bg-gray-200 rounded\"></div>\n        <div className=\"h-3 bg-gray-200 rounded w-5/6\"></div>\n        <div className=\"h-3 bg-gray-200 rounded w-4/6\"></div>\n      </div>\n    </div>\n  </div>\n);\n\nexport const SkeletonTable: React.FC<{ rows?: number; cols?: number }> = ({ \n  rows = 5, \n  cols = 4 \n}) => (\n  <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n    <div className=\"px-6 py-4 border-b border-gray-200\">\n      <div className=\"animate-pulse\">\n        <div className=\"h-6 bg-gray-200 rounded w-48\"></div>\n      </div>\n    </div>\n    <div className=\"divide-y divide-gray-200\">\n      {Array.from({ length: rows }).map((_, i) => (\n        <div key={i} className=\"px-6 py-4\">\n          <div className=\"animate-pulse flex space-x-4\">\n            {Array.from({ length: cols }).map((_, j) => (\n              <div key={j} className=\"flex-1\">\n                <div className=\"h-4 bg-gray-200 rounded w-full\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nexport const SkeletonChart: React.FC<{ className?: string }> = ({ className = '' }) => (\n  <div className={`bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}>\n    <div className=\"animate-pulse\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"h-6 bg-gray-200 rounded w-48\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-24\"></div>\n      </div>\n      <div className=\"h-64 bg-gray-200 rounded\"></div>\n    </div>\n  </div>\n);\n\nexport const SkeletonStats: React.FC<{ count?: number }> = ({ count = 4 }) => (\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n    {Array.from({ length: count }).map((_, i) => (\n      <div key={i} className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"w-10 h-10 bg-gray-200 rounded-lg\"></div>\n            <div className=\"w-8 h-4 bg-gray-200 rounded\"></div>\n          </div>\n          <div className=\"h-8 bg-gray-200 rounded w-20 mb-2\"></div>\n          <div className=\"h-4 bg-gray-200 rounded w-32\"></div>\n        </div>\n      </div>\n    ))}\n  </div>\n);\n\n// Progressive Loading States\ninterface LoadingState {\n  isLoading: boolean;\n  error?: string | null;\n  isEmpty?: boolean;\n  isRefreshing?: boolean;\n  progress?: number;\n  connectionStatus?: 'online' | 'offline' | 'reconnecting';\n}\n\ninterface ProgressiveLoadingProps extends LoadingState {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  emptyState?: React.ReactNode;\n  errorState?: React.ReactNode;\n  onRetry?: () => void;\n  className?: string;\n  showProgress?: boolean;\n  minimumLoadTime?: number;\n}\n\nexport const ProgressiveLoading: React.FC<ProgressiveLoadingProps> = ({\n  isLoading,\n  error,\n  isEmpty = false,\n  isRefreshing = false,\n  progress = 0,\n  connectionStatus = 'online',\n  children,\n  fallback,\n  emptyState,\n  errorState,\n  onRetry,\n  className = '',\n  showProgress = false,\n  minimumLoadTime = 500\n}) => {\n  const [showLoading, setShowLoading] = React.useState(isLoading);\n  const [minimumTimeMet, setMinimumTimeMet] = React.useState(false);\n\n  // Ensure minimum loading time for better UX\n  React.useEffect(() => {\n    if (isLoading) {\n      setShowLoading(true);\n      setMinimumTimeMet(false);\n      \n      const timer = setTimeout(() => {\n        setMinimumTimeMet(true);\n      }, minimumLoadTime);\n\n      return () => clearTimeout(timer);\n    } else if (minimumTimeMet) {\n      setShowLoading(false);\n    }\n  }, [isLoading, minimumLoadTime, minimumTimeMet]);\n\n  React.useEffect(() => {\n    if (!isLoading && minimumTimeMet) {\n      setShowLoading(false);\n    }\n  }, [isLoading, minimumTimeMet]);\n\n  // Connection Status Indicator\n  const ConnectionStatus = () => {\n    if (connectionStatus === 'online') return null;\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0, y: -20 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -20 }}\n        className={`fixed top-4 right-4 z-50 px-4 py-2 rounded-lg shadow-lg flex items-center space-x-2 ${\n          connectionStatus === 'offline' \n            ? 'bg-red-100 text-red-800 border border-red-200'\n            : 'bg-yellow-100 text-yellow-800 border border-yellow-200'\n        }`}\n      >\n        {connectionStatus === 'offline' ? (\n          <WifiOff className=\"w-4 h-4\" />\n        ) : (\n          <Wifi className=\"w-4 h-4 animate-pulse\" />\n        )}\n        <span className=\"text-sm font-medium\">\n          {connectionStatus === 'offline' ? 'Offline' : 'Reconnecting...'}\n        </span>\n      </motion.div>\n    );\n  };\n\n  // Loading Overlay for Refresh\n  const RefreshOverlay = () => {\n    if (!isRefreshing) return null;\n    \n    return (\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"absolute inset-0 bg-white/80 backdrop-blur-sm flex items-center justify-center z-10 rounded-lg\"\n      >\n        <div className=\"flex items-center space-x-3 bg-white px-4 py-2 rounded-lg shadow-lg border border-gray-200\">\n          <Loader2 className=\"w-5 h-5 text-blue-600 animate-spin\" />\n          <span className=\"text-sm font-medium text-gray-900\">Refreshing...</span>\n        </div>\n      </motion.div>\n    );\n  };\n\n  // Progress Bar\n  const ProgressBar = () => {\n    if (!showProgress || !showLoading) return null;\n    \n    return (\n      <div className=\"w-full bg-gray-200 rounded-full h-1 mb-4\">\n        <motion.div\n          className=\"bg-blue-600 h-1 rounded-full\"\n          initial={{ width: 0 }}\n          animate={{ width: `${progress}%` }}\n          transition={{ duration: 0.5 }}\n        />\n      </div>\n    );\n  };\n\n  // Error State\n  if (error && !showLoading) {\n    if (errorState) {\n      return <div className={className}>{errorState}</div>;\n    }\n    \n    return (\n      <div className={`flex flex-col items-center justify-center p-8 text-center ${className}`}>\n        <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n          <AlertCircle className=\"w-8 h-8 text-red-600\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Something went wrong</h3>\n        <p className=\"text-gray-600 mb-4 max-w-md\">{error}</p>\n        {onRetry && (\n          <button\n            onClick={onRetry}\n            className=\"flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            <span>Try again</span>\n          </button>\n        )}\n      </div>\n    );\n  }\n\n  // Empty State\n  if (isEmpty && !showLoading && !error) {\n    if (emptyState) {\n      return <div className={className}>{emptyState}</div>;\n    }\n    \n    return (\n      <div className={`flex flex-col items-center justify-center p-8 text-center ${className}`}>\n        <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n          <div className=\"w-8 h-8 bg-gray-300 rounded\"></div>\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No data available</h3>\n        <p className=\"text-gray-600\">There's nothing to show here yet.</p>\n      </div>\n    );\n  }\n\n  // Loading State\n  if (showLoading) {\n    return (\n      <div className={className}>\n        <ProgressBar />\n        {fallback || (\n          <div className=\"flex flex-col items-center justify-center p-8\">\n            <Loader2 className=\"w-8 h-8 text-blue-600 animate-spin mb-4\" />\n            <p className=\"text-gray-600\">Loading...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  // Success State with potential refresh overlay\n  return (\n    <div className={`relative ${className}`}>\n      <ConnectionStatus />\n      <RefreshOverlay />\n      {children}\n    </div>\n  );\n};\n\n// Specialized Loading Components\nexport const DashboardLoading: React.FC = () => (\n  <div className=\"p-6 space-y-6\">\n    <div className=\"flex items-center justify-between mb-6\">\n      <div className=\"animate-pulse\">\n        <div className=\"h-8 bg-gray-200 rounded w-64 mb-2\"></div>\n        <div className=\"h-4 bg-gray-200 rounded w-96\"></div>\n      </div>\n      <div className=\"animate-pulse\">\n        <div className=\"h-10 bg-gray-200 rounded w-32\"></div>\n      </div>\n    </div>\n    \n    <SkeletonStats count={4} />\n    \n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <SkeletonChart />\n      <SkeletonChart />\n    </div>\n    \n    <SkeletonTable rows={6} cols={5} />\n  </div>\n);\n\nexport const TableLoading: React.FC<{ rows?: number; cols?: number }> = ({ rows = 10, cols = 4 }) => (\n  <SkeletonTable rows={rows} cols={cols} />\n);\n\nexport const CardGridLoading: React.FC<{ count?: number }> = ({ count = 6 }) => (\n  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n    {Array.from({ length: count }).map((_, i) => (\n      <SkeletonCard key={i} />\n    ))}\n  </div>\n);\n\n// Lazy Loading Wrapper\ninterface LazyLoadProps {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n  threshold?: number;\n  rootMargin?: string;\n  onInView?: () => void;\n}\n\nexport const LazyLoad: React.FC<LazyLoadProps> = ({\n  children,\n  fallback = <div className=\"h-32 bg-gray-100 animate-pulse rounded-lg\"></div>,\n  threshold = 0.1,\n  rootMargin = '50px',\n  onInView\n}) => {\n  const [isInView, setIsInView] = React.useState(false);\n  const [hasBeenInView, setHasBeenInView] = React.useState(false);\n  const elementRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting) {\n          setIsInView(true);\n          if (!hasBeenInView) {\n            setHasBeenInView(true);\n            onInView?.();\n          }\n        } else {\n          setIsInView(false);\n        }\n      },\n      { threshold, rootMargin }\n    );\n\n    if (elementRef.current) {\n      observer.observe(elementRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [threshold, rootMargin, onInView, hasBeenInView]);\n\n  return (\n    <div ref={elementRef}>\n      {hasBeenInView ? children : fallback}\n    </div>\n  );\n};\n\n// Enhanced Loading Button\ninterface LoadingButtonProps {\n  isLoading?: boolean;\n  loadingText?: string;\n  children: React.ReactNode;\n  className?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  progress?: number;\n  showProgress?: boolean;\n}\n\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({\n  isLoading = false,\n  loadingText = 'Loading...',\n  children,\n  className = '',\n  disabled = false,\n  onClick,\n  progress = 0,\n  showProgress = false\n}) => {\n  const isDisabled = disabled || isLoading;\n  \n  return (\n    <button\n      onClick={onClick}\n      disabled={isDisabled}\n      className={`relative overflow-hidden transition-all duration-200 ${\n        isDisabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-md'\n      } ${className}`}\n    >\n      {/* Progress Bar Background */}\n      {showProgress && isLoading && (\n        <motion.div\n          className=\"absolute inset-0 bg-white/20\"\n          initial={{ width: 0 }}\n          animate={{ width: `${progress}%` }}\n          transition={{ duration: 0.5 }}\n        />\n      )}\n      \n      {/* Button Content */}\n      <div className=\"relative flex items-center justify-center space-x-2\">\n        {isLoading && (\n          <Loader2 className=\"w-4 h-4 animate-spin\" />\n        )}\n        <span>{isLoading ? loadingText : children}</span>\n      </div>\n    </button>\n  );\n};\n\n// Loading States Hook\nexport const useLoadingStates = () => {\n  const [loadingStates, setLoadingStates] = React.useState<Record<string, boolean>>({});\n  \n  const setLoading = React.useCallback((key: string, isLoading: boolean) => {\n    setLoadingStates(prev => ({\n      ...prev,\n      [key]: isLoading\n    }));\n  }, []);\n  \n  const isLoading = React.useCallback((key: string): boolean => {\n    return loadingStates[key] || false;\n  }, [loadingStates]);\n  \n  const hasAnyLoading = React.useCallback((): boolean => {\n    return Object.values(loadingStates).some(loading => loading);\n  }, [loadingStates]);\n  \n  return { setLoading, isLoading, hasAnyLoading, loadingStates };\n};\n\nexport default ProgressiveLoading;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/RFIDManagementDashboard.tsx",["1672","1673","1674","1675"],[],"import React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell \n} from 'recharts';\nimport { \n  Radio, Shield, CheckCircle, Clock, \n  CreditCard, RefreshCw, \n  MapPin, Search, \n  Plus, Edit2, Trash2\n} from 'lucide-react';\nimport { hasivuApiService } from '../services/hasivu-api.service';\n\ninterface RFIDCard {\n  id: string;\n  cardId: string;\n  studentId: string;\n  studentName: string;\n  schoolId: string;\n  status: 'active' | 'inactive' | 'lost' | 'blocked';\n  balance: number;\n  lastUsed: string;\n  createdAt: string;\n}\n\ninterface RFIDReader {\n  id: string;\n  name: string;\n  location: string;\n  status: 'online' | 'offline' | 'maintenance';\n  signalStrength: number;\n  lastPing: string;\n  todayScans: number;\n  batteryLevel?: number;\n}\n\ninterface VerificationLog {\n  id: string;\n  timestamp: string;\n  cardId: string;\n  readerId: string;\n  studentName: string;\n  status: 'success' | 'failed' | 'blocked';\n  responseTime: number;\n  location: string;\n}\n\ninterface RFIDDashboardData {\n  summary: {\n    totalCards: number;\n    activeCards: number;\n    onlineReaders: number;\n    todayVerifications: number;\n    successRate: number;\n    avgResponseTime: number;\n  };\n  cards: RFIDCard[];\n  readers: RFIDReader[];\n  verificationLogs: VerificationLog[];\n  analytics: {\n    daily: Array<{\n      date: string;\n      verifications: number;\n      success: number;\n      failed: number;\n    }>;\n    byLocation: Array<{\n      location: string;\n      count: number;\n      success: number;\n    }>;\n    statusDistribution: Array<{\n      status: string;\n      count: number;\n    }>;\n  };\n}\n\nconst RFIDManagementDashboard: React.FC = () => {\n  const [data, setData] = useState<RFIDDashboardData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState<'overview' | 'cards' | 'readers' | 'logs'>('overview');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'offline' | 'maintenance'>('all');\n  const [showAddCard, setShowAddCard] = useState(false);\n\n  useEffect(() => {\n    loadRFIDData();\n    \n    // Auto-refresh every 10 seconds for real-time updates\n    const interval = setInterval(loadRFIDData, 10000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadRFIDData = async () => {\n    try {\n      if (!data) setIsLoading(true);\n      \n      const [cardsRes, readersRes, logsRes, analyticsRes] = await Promise.all([\n        hasivuApiService.getRFIDCards(),\n        hasivuApiService.getRFIDReaders(),\n        hasivuApiService.getRFIDLogs({ limit: 100 }),\n        hasivuApiService.getRFIDAnalytics()\n      ]);\n\n      const rfidData: RFIDDashboardData = {\n        summary: {\n          totalCards: cardsRes.data.total || 2543,\n          activeCards: cardsRes.data.active || 2398,\n          onlineReaders: readersRes.data.online || 24,\n          todayVerifications: analyticsRes.data.todayVerifications || 1847,\n          successRate: analyticsRes.data.successRate || 99.94,\n          avgResponseTime: analyticsRes.data.avgResponseTime || 0.14\n        },\n        cards: cardsRes.data.cards || generateMockCards(),\n        readers: readersRes.data.readers || generateMockReaders(),\n        verificationLogs: logsRes.data.logs || generateMockLogs(),\n        analytics: analyticsRes.data.analytics || {\n          daily: generateMockDailyData(),\n          byLocation: generateMockLocationData(),\n          statusDistribution: generateMockStatusData()\n        }\n      };\n\n      setData(rfidData);\n    } catch (error) {\n      console.error('Failed to load RFID data:', error);\n      if (!data) {\n        // Load fallback demo data\n        setData({\n          summary: {\n            totalCards: 2543,\n            activeCards: 2398,\n            onlineReaders: 24,\n            todayVerifications: 1847,\n            successRate: 99.94,\n            avgResponseTime: 0.14\n          },\n          cards: generateMockCards(),\n          readers: generateMockReaders(),\n          verificationLogs: generateMockLogs(),\n          analytics: {\n            daily: generateMockDailyData(),\n            byLocation: generateMockLocationData(),\n            statusDistribution: generateMockStatusData()\n          }\n        });\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const generateMockCards = (): RFIDCard[] => [\n    {\n      id: '1',\n      cardId: 'RF001234',\n      studentId: 'STU001',\n      studentName: 'John Smith',\n      schoolId: 'SCH001',\n      status: 'active',\n      balance: 45.50,\n      lastUsed: '2024-01-15T12:30:00Z',\n      createdAt: '2023-09-01T08:00:00Z'\n    },\n    {\n      id: '2',\n      cardId: 'RF001235',\n      studentId: 'STU002',\n      studentName: 'Emma Johnson',\n      schoolId: 'SCH001',\n      status: 'active',\n      balance: 32.75,\n      lastUsed: '2024-01-15T11:45:00Z',\n      createdAt: '2023-09-01T08:00:00Z'\n    },\n    {\n      id: '3',\n      cardId: 'RF001236',\n      studentId: 'STU003',\n      studentName: 'Michael Brown',\n      schoolId: 'SCH001',\n      status: 'lost',\n      balance: 0,\n      lastUsed: '2024-01-10T14:20:00Z',\n      createdAt: '2023-09-01T08:00:00Z'\n    }\n  ];\n\n  const generateMockReaders = (): RFIDReader[] => [\n    {\n      id: '1',\n      name: 'Main Cafeteria - Entry',\n      location: 'Building A, Floor 1',\n      status: 'online',\n      signalStrength: 95,\n      lastPing: '2024-01-15T12:34:45Z',\n      todayScans: 342,\n      batteryLevel: 89\n    },\n    {\n      id: '2',\n      name: 'Library Entrance',\n      location: 'Building B, Floor 2',\n      status: 'online',\n      signalStrength: 87,\n      lastPing: '2024-01-15T12:34:42Z',\n      todayScans: 156,\n      batteryLevel: 72\n    },\n    {\n      id: '3',\n      name: 'Gym Access Point',\n      location: 'Sports Complex',\n      status: 'maintenance',\n      signalStrength: 0,\n      lastPing: '2024-01-14T16:20:00Z',\n      todayScans: 0\n    }\n  ];\n\n  const generateMockLogs = (): VerificationLog[] => [\n    {\n      id: '1',\n      timestamp: '2024-01-15T12:34:45Z',\n      cardId: 'RF001234',\n      readerId: '1',\n      studentName: 'John Smith',\n      status: 'success',\n      responseTime: 0.12,\n      location: 'Main Cafeteria'\n    },\n    {\n      id: '2',\n      timestamp: '2024-01-15T12:33:21Z',\n      cardId: 'RF001235',\n      readerId: '2',\n      studentName: 'Emma Johnson',\n      status: 'success',\n      responseTime: 0.15,\n      location: 'Library'\n    },\n    {\n      id: '3',\n      timestamp: '2024-01-15T12:32:10Z',\n      cardId: 'RF001299',\n      readerId: '1',\n      studentName: 'Unknown',\n      status: 'blocked',\n      responseTime: 0.08,\n      location: 'Main Cafeteria'\n    }\n  ];\n\n  const generateMockDailyData = () => [\n    { date: '2024-01-09', verifications: 1650, success: 1642, failed: 8 },\n    { date: '2024-01-10', verifications: 1723, success: 1715, failed: 8 },\n    { date: '2024-01-11', verifications: 1834, success: 1825, failed: 9 },\n    { date: '2024-01-12', verifications: 1756, success: 1748, failed: 8 },\n    { date: '2024-01-13', verifications: 1689, success: 1681, failed: 8 },\n    { date: '2024-01-14', verifications: 1598, success: 1591, failed: 7 },\n    { date: '2024-01-15', verifications: 1847, success: 1838, failed: 9 }\n  ];\n\n  const generateMockLocationData = () => [\n    { location: 'Main Cafeteria', count: 845, success: 843 },\n    { location: 'Library', count: 324, success: 322 },\n    { location: 'Gymnasium', count: 267, success: 265 },\n    { location: 'Science Lab', count: 189, success: 188 },\n    { location: 'Art Room', count: 156, success: 156 }\n  ];\n\n  const generateMockStatusData = () => [\n    { status: 'Active', count: 2398 },\n    { status: 'Inactive', count: 89 },\n    { status: 'Lost', count: 34 },\n    { status: 'Blocked', count: 22 }\n  ];\n\n  const filteredReaders = data?.readers.filter(reader => {\n    const matchesSearch = reader.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         reader.location.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === 'all' || reader.status === statusFilter;\n    return matchesSearch && matchesStatus;\n  }) || [];\n\n  const StatusBadge = ({ status }: { status: string }) => {\n    const colors = {\n      online: 'bg-green-100 text-green-800',\n      offline: 'bg-red-100 text-red-800',\n      maintenance: 'bg-yellow-100 text-yellow-800',\n      active: 'bg-green-100 text-green-800',\n      inactive: 'bg-gray-100 text-gray-800',\n      lost: 'bg-red-100 text-red-800',\n      blocked: 'bg-red-100 text-red-800',\n      success: 'bg-green-100 text-green-800',\n      failed: 'bg-red-100 text-red-800'\n    };\n\n    return (\n      <span className={`px-2 py-1 rounded-full text-xs font-medium ${colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800'}`}>\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </span>\n    );\n  };\n\n  const CHART_COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444'];\n\n  if (isLoading) {\n    return (\n      <div className=\"p-6 space-y-6\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"animate-pulse\">\n            <div className=\"h-32 bg-gray-200 rounded-lg mb-4\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  if (!data) return null;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">RFID Management</h1>\n          <p className=\"text-gray-600 mt-1\">Monitor and manage RFID cards and readers across your schools</p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <button\n            onClick={() => setShowAddCard(true)}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Add Card</span>\n          </button>\n          \n          <button\n            onClick={loadRFIDData}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n            <span>Refresh</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4\">\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <CreditCard className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.totalCards.toLocaleString()}</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Total Cards</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.activeCards.toLocaleString()}</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Active Cards</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-purple-100 rounded-lg\">\n              <Radio className=\"w-5 h-5 text-purple-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.onlineReaders}</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Online Readers</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-orange-100 rounded-lg\">\n              <Shield className=\"w-5 h-5 text-orange-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.todayVerifications.toLocaleString()}</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Today's Scans</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-green-100 rounded-lg\">\n              <Zap className=\"w-5 h-5 text-green-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.successRate}%</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Success Rate</p>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <Clock className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900\">{data.summary.avgResponseTime}s</span>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">Avg Response</p>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"-mb-px flex space-x-8\">\n          {[\n            { id: 'overview', label: 'Overview' },\n            { id: 'cards', label: 'Card Management' },\n            { id: 'readers', label: 'Reader Status' },\n            { id: 'logs', label: 'Verification Logs' }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`py-2 px-1 border-b-2 font-medium text-sm ${\n                activeTab === tab.id\n                  ? 'border-blue-500 text-blue-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {tab.label}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* Tab Content */}\n      {activeTab === 'overview' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Daily Verifications Chart */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Daily Verification Trends</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <LineChart data={data.analytics.daily}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"verifications\" stroke=\"#3B82F6\" strokeWidth={2} />\n                <Line type=\"monotone\" dataKey=\"success\" stroke=\"#10B981\" strokeWidth={2} />\n              </LineChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Card Status Distribution */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-200 p-6\">\n            <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Card Status Distribution</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <PieChart>\n                <Pie\n                  data={data.analytics.statusDistribution}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={100}\n                  dataKey=\"count\"\n                  label={({ status, count }) => `${status}: ${count}`}\n                >\n                  {data.analytics.statusDistribution.map((_, index) => (\n                    <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'readers' && (\n        <div className=\"space-y-6\">\n          {/* Filters */}\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <input\n                  type=\"text\"\n                  placeholder=\"Search readers...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent w-full\"\n                />\n              </div>\n            </div>\n            \n            <select\n              value={statusFilter}\n              onChange={(e) => setStatusFilter(e.target.value as any)}\n              className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n            >\n              <option value=\"all\">All Status</option>\n              <option value=\"online\">Online</option>\n              <option value=\"offline\">Offline</option>\n              <option value=\"maintenance\">Maintenance</option>\n            </select>\n          </div>\n\n          {/* Readers Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredReaders.map((reader) => (\n              <motion.div\n                key={reader.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\"\n              >\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`p-2 rounded-lg ${reader.status === 'online' ? 'bg-green-100' : reader.status === 'maintenance' ? 'bg-yellow-100' : 'bg-red-100'}`}>\n                      <Radio className={`w-5 h-5 ${reader.status === 'online' ? 'text-green-600' : reader.status === 'maintenance' ? 'text-yellow-600' : 'text-red-600'}`} />\n                    </div>\n                    <StatusBadge status={reader.status} />\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <button className=\"p-1 text-gray-400 hover:text-gray-600\">\n                      <Edit2 className=\"w-4 h-4\" />\n                    </button>\n                    <button className=\"p-1 text-gray-400 hover:text-red-600\">\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n                \n                <h4 className=\"font-semibold text-gray-900 mb-2\">{reader.name}</h4>\n                <p className=\"text-sm text-gray-600 mb-4 flex items-center\">\n                  <MapPin className=\"w-4 h-4 mr-1\" />\n                  {reader.location}\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Signal Strength</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                        <div \n                          className=\"bg-green-500 h-2 rounded-full\" \n                          style={{ width: `${reader.signalStrength}%` }}\n                        ></div>\n                      </div>\n                      <span className=\"text-sm font-medium\">{reader.signalStrength}%</span>\n                    </div>\n                  </div>\n                  \n                  {reader.batteryLevel && (\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">Battery Level</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-16 bg-gray-200 rounded-full h-2\">\n                          <div \n                            className={`h-2 rounded-full ${reader.batteryLevel > 30 ? 'bg-green-500' : 'bg-red-500'}`}\n                            style={{ width: `${reader.batteryLevel}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">{reader.batteryLevel}%</span>\n                      </div>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Today's Scans</span>\n                    <span className=\"text-sm font-medium\">{reader.todayScans.toLocaleString()}</span>\n                  </div>\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-gray-600\">Last Ping</span>\n                    <span className=\"text-sm text-gray-500\">{new Date(reader.lastPing).toLocaleTimeString()}</span>\n                  </div>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'logs' && (\n        <div className=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n          <div className=\"px-6 py-4 border-b border-gray-200\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">Recent Verification Logs</h3>\n          </div>\n          \n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Timestamp\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Student\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Card ID\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Location\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Response Time\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {data.verificationLogs.map((log) => (\n                  <tr key={log.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(log.timestamp).toLocaleString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {log.studentName}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900\">\n                      {log.cardId}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {log.location}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <StatusBadge status={log.status} />\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {log.responseTime}s\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RFIDManagementDashboard;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/AccessibilityProvider.tsx",["1676","1677"],[],"'use client';\n\n/**\n * HASIVU Platform - Accessibility Provider\n * Comprehensive accessibility management for WCAG 2.1 AA compliance\n */\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useRouter, usePathname } from 'next/navigation';\nimport { LiveRegion, StatusMessage } from './ScreenReaderOnly';\n\ninterface AccessibilityContextType {\n  announceMessage: (message: string, priority?: 'polite' | 'assertive') => void;\n  announcePageChange: (pageName: string) => void;\n  setFocusedElement: (element: HTMLElement | null) => void;\n  isReducedMotion: boolean;\n  isHighContrast: boolean;\n  fontSize: 'small' | 'medium' | 'large';\n  setFontSize: (size: 'small' | 'medium' | 'large') => void;\n}\n\nconst AccessibilityContext = createContext<AccessibilityContextType | undefined>(undefined);\n\ninterface AccessibilityProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AccessibilityProvider({ children }: AccessibilityProviderProps) {\n  const [announcements, setAnnouncements] = useState<Array<{ id: string; message: string; priority: 'polite' | 'assertive' }>>([]);\n  const [pageAnnouncement, setPageAnnouncement] = useState<string>('');\n  const [focusedElement, setFocusedElement] = useState<HTMLElement | null>(null);\n  const [isReducedMotion, setIsReducedMotion] = useState(false);\n  const [isHighContrast, setIsHighContrast] = useState(false);\n  const [fontSize, setFontSize] = useState<'small' | 'medium' | 'large'>('medium');\n  \n  const router = useRouter();\n  const pathname = usePathname();\n\n  // Detect user preferences\n  useEffect(() => {\n    // Check for reduced motion preference\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\n    setIsReducedMotion(mediaQuery.matches);\n    \n    const handleChange = (e: MediaQueryListEvent) => {\n      setIsReducedMotion(e.matches);\n    };\n    \n    mediaQuery.addEventListener('change', handleChange);\n    \n    // Check for high contrast preference\n    const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n    setIsHighContrast(contrastQuery.matches);\n    \n    const handleContrastChange = (e: MediaQueryListEvent) => {\n      setIsHighContrast(e.matches);\n    };\n    \n    contrastQuery.addEventListener('change', handleContrastChange);\n\n    // Load font size preference\n    const savedFontSize = localStorage.getItem('hasivu-font-size') as 'small' | 'medium' | 'large' | null;\n    if (savedFontSize) {\n      setFontSize(savedFontSize);\n      document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n      document.documentElement.classList.add(\n        savedFontSize === 'small' ? 'text-sm' : \n        savedFontSize === 'large' ? 'text-lg' : 'text-base'\n      );\n    }\n    \n    return () => {\n      mediaQuery.removeEventListener('change', handleChange);\n      contrastQuery.removeEventListener('change', handleContrastChange);\n    };\n  }, []);\n\n  // Handle font size changes\n  useEffect(() => {\n    localStorage.setItem('hasivu-font-size', fontSize);\n    document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n    document.documentElement.classList.add(\n      fontSize === 'small' ? 'text-sm' : \n      fontSize === 'large' ? 'text-lg' : 'text-base'\n    );\n  }, [fontSize]);\n\n  // Announce page changes\n  useEffect(() => {\n    const pageName = getPageName(pathname);\n    if (pageName) {\n      announcePageChange(pageName);\n    }\n  }, [pathname]);\n\n  // Keyboard navigation handler\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      // Skip to main content (Alt + M)\n      if (event.altKey && event.key.toLowerCase() === 'm') {\n        event.preventDefault();\n        const mainContent = document.getElementById('main-content');\n        if (mainContent) {\n          mainContent.focus();\n          mainContent.scrollIntoView({ behavior: 'smooth' });\n          announceMessage('Navigated to main content', 'polite');\n        }\n      }\n\n      // Skip to navigation (Alt + N)\n      if (event.altKey && event.key.toLowerCase() === 'n') {\n        event.preventDefault();\n        const nav = document.querySelector('nav') || document.querySelector('[role=\"navigation\"]');\n        if (nav) {\n          const focusable = nav.querySelector('a, button, [tabindex]:not([tabindex=\"-1\"])') as HTMLElement;\n          if (focusable) {\n            focusable.focus();\n            focusable.scrollIntoView({ behavior: 'smooth' });\n            announceMessage('Navigated to main navigation', 'polite');\n          }\n        }\n      }\n\n      // Increase font size (Alt + Plus)\n      if (event.altKey && event.key === '=') {\n        event.preventDefault();\n        if (fontSize === 'small') setFontSize('medium');\n        else if (fontSize === 'medium') setFontSize('large');\n        announceMessage(`Font size: ${fontSize === 'small' ? 'medium' : 'large'}`, 'polite');\n      }\n\n      // Decrease font size (Alt + Minus)\n      if (event.altKey && event.key === '-') {\n        event.preventDefault();\n        if (fontSize === 'large') setFontSize('medium');\n        else if (fontSize === 'medium') setFontSize('small');\n        announceMessage(`Font size: ${fontSize === 'large' ? 'medium' : 'small'}`, 'polite');\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [fontSize]);\n\n  const announceMessage = useCallback((message: string, priority: 'polite' | 'assertive' = 'polite') => {\n    const id = Date.now().toString();\n    setAnnouncements(prev => [...prev, { id, message, priority }]);\n    \n    // Clear announcement after 5 seconds\n    setTimeout(() => {\n      setAnnouncements(prev => prev.filter(announcement => announcement.id !== id));\n    }, 5000);\n  }, []);\n\n  const announcePageChange = useCallback((pageName: string) => {\n    setPageAnnouncement(`Page changed to: ${pageName}`);\n    \n    // Clear page announcement after 3 seconds\n    setTimeout(() => {\n      setPageAnnouncement('');\n    }, 3000);\n  }, []);\n\n  const value: AccessibilityContextType = {\n    announceMessage,\n    announcePageChange,\n    setFocusedElement,\n    isReducedMotion,\n    isHighContrast,\n    fontSize,\n    setFontSize: (size) => {\n      setFontSize(size);\n      announceMessage(`Font size changed to ${size}`, 'polite');\n    }\n  };\n\n  return (\n    <AccessibilityContext.Provider value={value}>\n      {children}\n      \n      {/* Announcement regions */}\n      {announcements.map(announcement => (\n        <LiveRegion key={announcement.id} politeness={announcement.priority}>\n          {announcement.message}\n        </LiveRegion>\n      ))}\n      \n      {pageAnnouncement && (\n        <StatusMessage message={pageAnnouncement} type=\"status\" />\n      )}\n\n      {/* Keyboard shortcuts help */}\n      <div className=\"sr-only\">\n        <p>Keyboard shortcuts available:</p>\n        <ul>\n          <li>Alt + M: Skip to main content</li>\n          <li>Alt + N: Skip to navigation</li>\n          <li>Alt + Plus: Increase font size</li>\n          <li>Alt + Minus: Decrease font size</li>\n        </ul>\n      </div>\n    </AccessibilityContext.Provider>\n  );\n}\n\nexport function useAccessibility(): AccessibilityContextType {\n  const context = useContext(AccessibilityContext);\n  if (context === undefined) {\n    throw new Error('useAccessibility must be used within an AccessibilityProvider');\n  }\n  return context;\n}\n\nfunction getPageName(pathname: string): string {\n  const routes: Record<string, string> = {\n    '/': 'Home',\n    '/menu': 'Menu',\n    '/dashboard': 'Dashboard',\n    '/dashboard/admin': 'Administrator Dashboard',\n    '/dashboard/teacher': 'Teacher Dashboard', \n    '/dashboard/parent': 'Parent Dashboard',\n    '/dashboard/student': 'Student Dashboard',\n    '/orders': 'Order Management',\n    '/profile': 'Profile',\n    '/settings': 'Settings',\n    '/auth/login': 'Login',\n    '/auth/register': 'Registration',\n  };\n  \n  return routes[pathname] || `Page: ${pathname.split('/').pop() || 'Unknown'}`;\n}\n\nexport default AccessibilityProvider;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/AriaUtils.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/FocusManager.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/ScreenReaderOnly.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/SkipNavigation.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/accessibility/__tests__/accessibility.test.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/AuthLayout.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EmailVerificationForm.tsx",["1678","1679","1680"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Mail, Loader2, ArrowLeft, Send, CheckCircle, RefreshCw } from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\n\nimport { emailVerificationSchema, type EmailVerificationFormData } from \"./schemas\"\n\ninterface EmailVerificationFormProps {\n  onSubmit: (data: EmailVerificationFormData) => Promise<void>\n  onResendCode?: () => Promise<void>\n  isLoading?: boolean\n  isResending?: boolean\n  error?: string | null\n  success?: boolean\n  email: string\n  className?: string\n}\n\nexport function EmailVerificationForm({\n  onSubmit,\n  onResendCode,\n  isLoading = false,\n  isResending = false,\n  error,\n  success = false,\n  email,\n  className\n}: EmailVerificationFormProps) {\n  const [timeLeft, setTimeLeft] = React.useState(60)\n  const [canResend, setCanResend] = React.useState(false)\n\n  const form = useForm<EmailVerificationFormData>({\n    resolver: zodResolver(emailVerificationSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  })\n\n  // Countdown timer for resend functionality\n  React.useEffect(() => {\n    if (timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)\n      return () => clearTimeout(timer)\n    } else {\n      setCanResend(true)\n    }\n  }, [timeLeft])\n\n  const handleSubmit = async (data: EmailVerificationFormData) => {\n    try {\n      await onSubmit(data)\n    } catch (error) {\n      console.error(\"Email verification error:\", error)\n    }\n  }\n\n  const handleResendCode = async () => {\n    if (onResendCode && canResend) {\n      try {\n        await onResendCode()\n        setTimeLeft(60)\n        setCanResend(false)\n        form.reset()\n      } catch (error) {\n        console.error(\"Resend code error:\", error)\n      }\n    }\n  }\n\n  const handleCodeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/\\D/g, '').slice(0, 6)\n    form.setValue('code', value)\n    \n    // Auto-submit when 6 digits are entered\n    if (value.length === 6) {\n      form.handleSubmit(handleSubmit)()\n    }\n  }\n\n  if (success) {\n    return (\n      <Card className={className} aria-label=\"Email verification success\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-3xl font-bold text-success-600\">\n            Email Verified!\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Your email has been successfully verified. Welcome to HASIVU!\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-success-100 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"w-8 h-8 text-success-600\" />\n          </div>\n          \n          <div className=\"p-4 bg-success-50 border border-success-200 rounded-md\">\n            <p className=\"text-sm text-success-700\">\n              Your account is now active and you can start using all features of the HASIVU platform.\n            </p>\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col space-y-2 text-center\">\n          <Link href=\"/dashboard\">\n            <Button className=\"w-full bg-primary-600 hover:bg-primary-700 text-white\">\n              Continue to Dashboard\n            </Button>\n          </Link>\n        </CardFooter>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={className} aria-label=\"Email verification form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          Verify Your Email\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          We've sent a 6-digit verification code to your email address\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center\">\n            <Mail className=\"w-8 h-8 text-primary-600\" />\n          </div>\n          \n          <div className=\"space-y-1\">\n            <p className=\"text-sm text-gray-600\">Verification code sent to:</p>\n            <p className=\"font-medium text-gray-900\">{email}</p>\n          </div>\n        </div>\n\n        {error && (\n          <div \n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"code\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700 text-center block\">\n                    Enter 6-Digit Code\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      onChange={handleCodeInput}\n                      placeholder=\"000000\"\n                      className=\"text-center text-2xl font-mono tracking-widest\"\n                      maxLength={6}\n                      autoComplete=\"one-time-code\"\n                      disabled={isLoading}\n                      inputMode=\"numeric\"\n                      pattern=\"[0-9]*\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading || form.watch('code').length !== 6}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                \"Verify Email\"\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"text-center space-y-3\">\n          <div className=\"text-sm text-gray-600\">\n            Didn't receive the code?\n          </div>\n          \n          {canResend ? (\n            <Button\n              variant=\"outline\"\n              onClick={handleResendCode}\n              disabled={isResending}\n              className=\"text-primary-600 border-primary-300 hover:bg-primary-50\"\n            >\n              {isResending ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Sending...\n                </>\n              ) : (\n                <>\n                  <RefreshCw className=\"mr-2 h-4 w-4\" />\n                  Resend Code\n                </>\n              )}\n            </Button>\n          ) : (\n            <p className=\"text-sm text-gray-500\">\n              Resend available in {timeLeft} seconds\n            </p>\n          )}\n        </div>\n\n        <div className=\"p-3 bg-info-50 border border-info-200 rounded-md\">\n          <div className=\"text-sm text-info-700\">\n            <p className=\"font-medium mb-1\">Tips:</p>\n            <ul className=\"space-y-1 text-left\">\n              <li>• Check your spam/junk folder</li>\n              <li>• Code expires in 10 minutes</li>\n              <li>• Make sure to enter all 6 digits</li>\n            </ul>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <Link\n          href=\"/auth/login\"\n          className=\"inline-flex items-center text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n        >\n          <ArrowLeft className=\"mr-1 h-4 w-4\" />\n          Back to sign in\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedLoginForm.tsx",["1681","1682","1683","1684"],[],"'use client';\n\n/**\n * HASIVU Platform - Enhanced Login Form Component\n * Enhanced version of the existing LoginForm with API integration and real-time features\n * Integrates with the HASIVU backend authentication system\n */\n\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport * as z from 'zod';\nimport { Eye, EyeOff, LogIn, Mail, Lock, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport Link from 'next/link';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useAuth } from '@/contexts/AuthContext';\nimport { useSocket } from '@/hooks/useSocket';\nimport { cn } from '@/lib/utils';\n\n// Enhanced login schema with validation\nconst loginSchema = z.object({\n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Please enter a valid email address')\n    .max(255, 'Email is too long'),\n  password: z\n    .string()\n    .min(1, 'Password is required')\n    .min(8, 'Password must be at least 8 characters')\n    .max(128, 'Password is too long'),\n  rememberMe: z.boolean().default(false),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\ninterface EnhancedLoginFormProps {\n  className?: string;\n  redirectTo?: string;\n  showSignUpLink?: boolean;\n  showForgotPassword?: boolean;\n  showSocialLogin?: boolean;\n  onLoginSuccess?: (user: any) => void;\n  autoFocus?: boolean;\n}\n\nexport function EnhancedLoginForm({\n  className,\n  redirectTo,\n  showSignUpLink = true,\n  showForgotPassword = true,\n  showSocialLogin = false,\n  onLoginSuccess,\n  autoFocus = true,\n}: EnhancedLoginFormProps) {\n  const { login, isLoading, error, clearError } = useAuth();\n  const { connectionState } = useSocket();\n  const router = useRouter();\n  const [showPassword, setShowPassword] = useState(false);\n  const [isSuccess, setIsSuccess] = useState(false);\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: '',\n      password: '',\n      rememberMe: false,\n    },\n    mode: 'onBlur', // Validate on blur for better UX\n  });\n\n  const onSubmit = async (data: LoginFormData) => {\n    try {\n      clearError();\n      const result = await login(data);\n      \n      setIsSuccess(true);\n      onLoginSuccess?.(result.user);\n      \n      // Small delay to show success state\n      setTimeout(() => {\n        const redirectUrl = redirectTo || router.query.redirect as string || '/dashboard';\n        router.push(redirectUrl);\n      }, 1000);\n      \n    } catch (error: any) {\n      // Error is handled by AuthContext and displayed via error state\n      console.error('Login failed:', error);\n      \n      // Reset form on certain errors\n      if (error?.code === 'INVALID_CREDENTIALS') {\n        form.reset({\n          email: data.email,\n          password: '',\n          rememberMe: data.rememberMe,\n        });\n      }\n    }\n  };\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSocialLogin = async (provider: 'google' | 'facebook') => {\n    // TODO: Implement social login when backend supports it\n    console.log(`Social login with ${provider} - not yet implemented`);\n  };\n\n  return (\n    <Card className={cn('w-full max-w-md mx-auto', className)}>\n      <CardHeader className=\"text-center space-y-2\">\n        <div className=\"mx-auto w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mb-4 shadow-lg\">\n          <LogIn className=\"w-8 h-8 text-white\" />\n        </div>\n        <CardTitle className=\"text-2xl font-bold text-gray-900\">\n          Welcome Back to HASIVU\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          Sign in to order delicious school meals and track your orders in real-time\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        {/* Connection Status */}\n        {connectionState === 'disconnected' && (\n          <Alert className=\"mb-4 border-yellow-200 bg-yellow-50\">\n            <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n            <AlertDescription className=\"text-yellow-800\">\n              Real-time features unavailable. You can still login and place orders.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Success Message */}\n        {isSuccess && (\n          <Alert className=\"mb-4 border-green-200 bg-green-50\">\n            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            <AlertDescription className=\"text-green-800\">\n              Login successful! Redirecting to your dashboard...\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Error Message */}\n        {error && !isSuccess && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              {error}\n              {error.includes('credentials') && (\n                <div className=\"mt-2 text-sm\">\n                  Please check your email and password, or{' '}\n                  <Link\n                    href=\"/auth/forgot-password\"\n                    className=\"underline hover:no-underline\"\n                  >\n                    reset your password\n                  </Link>\n                </div>\n              )}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Email Field */}\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-700\">\n                    Email Address\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"Enter your school email address\"\n                        className={cn(\n                          'pl-10 h-12',\n                          form.formState.errors.email && 'border-red-500 focus:border-red-500',\n                          field.value && !form.formState.errors.email && 'border-green-500'\n                        )}\n                        autoComplete=\"email\"\n                        autoFocus={autoFocus}\n                        disabled={isLoading || isSuccess}\n                        onFocus={() => clearError()}\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-xs mt-1\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Password Field */}\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium text-gray-700\">\n                    Password\n                  </FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                      <Input\n                        {...field}\n                        type={showPassword ? 'text' : 'password'}\n                        placeholder=\"Enter your password\"\n                        className={cn(\n                          'pl-10 pr-12 h-12',\n                          form.formState.errors.password && 'border-red-500 focus:border-red-500',\n                          field.value && !form.formState.errors.password && 'border-green-500'\n                        )}\n                        autoComplete=\"current-password\"\n                        disabled={isLoading || isSuccess}\n                        onFocus={() => clearError()}\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute right-1 top-1 h-10 w-10 p-0 hover:bg-gray-100\"\n                        onClick={togglePasswordVisibility}\n                        disabled={isLoading || isSuccess}\n                        tabIndex={-1}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4 text-gray-400\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4 text-gray-400\" />\n                        )}\n                      </Button>\n                    </div>\n                  </FormControl>\n                  <FormMessage className=\"text-xs mt-1\" />\n                </FormItem>\n              )}\n            />\n\n            {/* Remember Me and Forgot Password */}\n            <div className=\"flex items-center justify-between\">\n              <FormField\n                control={form.control}\n                name=\"rememberMe\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-2 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        disabled={isLoading || isSuccess}\n                        className=\"mt-0.5\"\n                      />\n                    </FormControl>\n                    <FormLabel className=\"text-sm text-gray-600 cursor-pointer\">\n                      Remember me for 30 days\n                    </FormLabel>\n                  </FormItem>\n                )}\n              />\n\n              {showForgotPassword && (\n                <Link\n                  href=\"/auth/forgot-password\"\n                  className=\"text-sm text-orange-600 hover:text-orange-700 font-medium transition-colors\"\n                >\n                  Forgot password?\n                </Link>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              className={cn(\n                'w-full h-12 text-base font-medium transition-all duration-200',\n                isSuccess \n                  ? 'bg-green-600 hover:bg-green-600' \n                  : 'bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600'\n              )}\n              disabled={isLoading || isSuccess || !form.formState.isValid}\n            >\n              {isSuccess ? (\n                <>\n                  <CheckCircle className=\"w-5 h-5 mr-2\" />\n                  Success! Redirecting...\n                </>\n              ) : isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\" />\n                  Signing In...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"w-5 h-5 mr-2\" />\n                  Sign In to HASIVU\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {/* Social Login (if enabled) */}\n        {showSocialLogin && (\n          <>\n            <div className=\"relative my-6\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <div className=\"w-full border-t border-gray-200\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or continue with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"google\")}\n                disabled={isLoading || isSuccess}\n                className=\"h-11 border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"#4285F4\"\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  />\n                  <path\n                    fill=\"#34A853\"\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  />\n                  <path\n                    fill=\"#FBBC05\"\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  />\n                  <path\n                    fill=\"#EA4335\"\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  />\n                </svg>\n                Google\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"facebook\")}\n                disabled={isLoading || isSuccess}\n                className=\"h-11 border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"#1877F2\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n                </svg>\n                Facebook\n              </Button>\n            </div>\n          </>\n        )}\n\n        {/* Sign Up Link */}\n        {showSignUpLink && (\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              New to HASIVU?{' '}\n              <Link\n                href=\"/auth/register\"\n                className=\"font-medium text-orange-600 hover:text-orange-700 transition-colors\"\n              >\n                Create your account\n              </Link>\n            </p>\n          </div>\n        )}\n\n        {/* Footer Information */}\n        <div className=\"mt-6 pt-6 border-t border-gray-100\">\n          <div className=\"text-center space-y-3\">\n            <p className=\"text-xs text-gray-500\">\n              By signing in, you agree to HASIVU's{' '}\n              <Link href=\"/terms\" className=\"text-orange-600 hover:underline\">\n                Terms of Service\n              </Link>{' '}\n              and{' '}\n              <Link href=\"/privacy\" className=\"text-orange-600 hover:underline\">\n                Privacy Policy\n              </Link>\n            </p>\n            \n            {/* Security and Features Indicators */}\n            <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                <span>Secure Login</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <div className={cn(\n                  'w-2 h-2 rounded-full',\n                  connectionState === 'connected' ? 'bg-green-500' : 'bg-yellow-500'\n                )}></div>\n                <span>Real-time Orders</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                <span>RFID Pickup</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default EnhancedLoginForm;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedPasswordRecoveryForm.tsx",["1685","1686","1687","1688","1689","1690"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { \n  Mail, Phone, Shield, HelpCircle, ArrowLeft, Send,\n  CheckCircle, AlertTriangle, School, Users, Key\n} from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\nimport {\n  forgotPasswordSchema,\n  securityQuestionsSchema,\n  parentVerificationSchema,\n  type ForgotPasswordFormData,\n  type SecurityQuestionsData,\n  type ParentVerificationData,\n  detectRoleFromEmail\n} from \"./schemas\"\n\ninterface EnhancedPasswordRecoveryFormProps {\n  onEmailRecovery: (data: ForgotPasswordFormData) => Promise<void>\n  onSecurityQuestions: (data: SecurityQuestionsData) => Promise<void>\n  onParentVerification: (data: ParentVerificationData) => Promise<void>\n  onSendSMS?: (phone: string) => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  success?: string | null\n  className?: string\n}\n\nconst SECURITY_QUESTIONS = [\n  \"What was the name of your first pet?\",\n  \"What is your mother's maiden name?\",\n  \"What was the name of your elementary school?\",\n  \"What is your favorite food?\",\n  \"What was your childhood nickname?\",\n  \"What is the name of your best friend?\",\n  \"What was your first car model?\",\n  \"What city were you born in?\"\n]\n\nexport function EnhancedPasswordRecoveryForm({\n  onEmailRecovery,\n  onSecurityQuestions,\n  onParentVerification,\n  onSendSMS,\n  isLoading = false,\n  error,\n  success,\n  className\n}: EnhancedPasswordRecoveryFormProps) {\n  const [recoveryMethod, setRecoveryMethod] = React.useState<\"email\" | \"security\" | \"parent\">(\"email\")\n  const [detectedRole, setDetectedRole] = React.useState<string | null>(null)\n  const [step, setStep] = React.useState<\"initial\" | \"questions\" | \"verification\" | \"success\">(\"initial\")\n\n  // Email recovery form\n  const emailForm = useForm<ForgotPasswordFormData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n      userType: \"student\"\n    }\n  })\n\n  // Security questions form\n  const questionsForm = useForm<SecurityQuestionsData>({\n    resolver: zodResolver(securityQuestionsSchema),\n    defaultValues: {\n      question1: { question: SECURITY_QUESTIONS[0], answer: \"\" },\n      question2: { question: SECURITY_QUESTIONS[1], answer: \"\" },\n      question3: { question: SECURITY_QUESTIONS[2], answer: \"\" }\n    }\n  })\n\n  // Parent verification form\n  const parentForm = useForm<ParentVerificationData>({\n    resolver: zodResolver(parentVerificationSchema),\n    defaultValues: {\n      studentEmail: \"\",\n      parentPhone: \"\",\n      verificationCode: \"\"\n    }\n  })\n\n  const watchedEmail = emailForm.watch(\"email\")\n\n  // Role detection from email\n  React.useEffect(() => {\n    if (watchedEmail && watchedEmail.includes(\"@hasivu.edu\")) {\n      const role = detectRoleFromEmail(watchedEmail)\n      setDetectedRole(role)\n      \n      if (role) {\n        emailForm.setValue(\"userType\", role === \"student\" ? \"student\" : role === \"parent\" ? \"parent\" : \"staff\")\n      }\n    } else {\n      setDetectedRole(null)\n    }\n  }, [watchedEmail, emailForm])\n\n  const handleEmailRecovery = async (data: ForgotPasswordFormData) => {\n    try {\n      await onEmailRecovery(data)\n      setStep(\"success\")\n    } catch (error) {\n      console.error(\"Email recovery error:\", error)\n    }\n  }\n\n  const handleSecurityQuestions = async (data: SecurityQuestionsData) => {\n    try {\n      await onSecurityQuestions(data)\n      setStep(\"success\")\n    } catch (error) {\n      console.error(\"Security questions error:\", error)\n    }\n  }\n\n  const handleParentVerification = async (data: ParentVerificationData) => {\n    try {\n      await onParentVerification(data)\n      setStep(\"success\")\n    } catch (error) {\n      console.error(\"Parent verification error:\", error)\n    }\n  }\n\n  const handleSendVerificationCode = async () => {\n    const phone = parentForm.getValues(\"parentPhone\")\n    if (phone && onSendSMS) {\n      try {\n        await onSendSMS(phone)\n      } catch (error) {\n        console.error(\"SMS send error:\", error)\n      }\n    }\n  }\n\n  const renderRoleBadge = () => {\n    if (!detectedRole) return null\n\n    const roleConfig = {\n      student: { label: \"Student\", color: \"bg-blue-100 text-blue-800\", icon: School },\n      parent: { label: \"Parent\", color: \"bg-green-100 text-green-800\", icon: Users },\n      admin: { label: \"Admin\", color: \"bg-purple-100 text-purple-800\", icon: Shield },\n      kitchen: { label: \"Kitchen\", color: \"bg-orange-100 text-orange-800\", icon: Users },\n      teacher: { label: \"Teacher\", color: \"bg-indigo-100 text-indigo-800\", icon: School }\n    }\n\n    const config = roleConfig[detectedRole as keyof typeof roleConfig]\n    if (!config) return null\n\n    const IconComponent = config.icon\n\n    return (\n      <div className=\"mt-2 flex items-center gap-2\">\n        <IconComponent className=\"h-4 w-4\" />\n        <Badge variant=\"outline\" className={config.color}>\n          Detected: {config.label}\n        </Badge>\n      </div>\n    )\n  }\n\n  if (step === \"success\") {\n    return (\n      <Card className={className}>\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n            <CheckCircle className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-xl font-semibold text-green-900\">\n            Recovery Instructions Sent\n          </CardTitle>\n          <CardDescription>\n            Please check your email or follow the verification steps provided\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"text-center\">\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              If you don't receive instructions within a few minutes, please check your spam folder\n              or contact support.\n            </p>\n            \n            <div className=\"flex flex-col gap-3\">\n              <Button asChild variant=\"default\">\n                <Link href=\"/auth/login\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Login\n                </Link>\n              </Button>\n              \n              <Button asChild variant=\"outline\">\n                <a href=\"mailto:support@hasivu.edu\">\n                  Contact Support\n                </a>\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">\n          Recover Your Account\n        </CardTitle>\n        <CardDescription className=\"text-center\">\n          Choose your preferred recovery method for your HASIVU account\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {success && (\n          <Alert>\n            <CheckCircle className=\"h-4 w-4\" />\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        <Tabs value={recoveryMethod} onValueChange={(value) => setRecoveryMethod(value as any)}>\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"email\" className=\"flex items-center gap-2\">\n              <Mail className=\"h-4 w-4\" />\n              Email\n            </TabsTrigger>\n            <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n              <HelpCircle className=\"h-4 w-4\" />\n              Questions\n            </TabsTrigger>\n            <TabsTrigger value=\"parent\" className=\"flex items-center gap-2\">\n              <Phone className=\"h-4 w-4\" />\n              Parent Help\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"email\" className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"font-semibold text-gray-900\">Email Recovery</h3>\n              <p className=\"text-sm text-gray-600\">\n                Enter your HASIVU email address to receive reset instructions\n              </p>\n            </div>\n\n            <Form {...emailForm}>\n              <form onSubmit={emailForm.handleSubmit(handleEmailRecovery)} className=\"space-y-4\">\n                <FormField\n                  control={emailForm.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>HASIVU Email Address</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"your.name@hasivu.edu\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                      {renderRoleBadge()}\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Sending...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"w-4 h-4 mr-2\" />\n                      Send Reset Instructions\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </TabsContent>\n\n          <TabsContent value=\"security\" className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"font-semibold text-gray-900\">Security Questions</h3>\n              <p className=\"text-sm text-gray-600\">\n                Answer your security questions to reset your password\n              </p>\n            </div>\n\n            <Form {...questionsForm}>\n              <form onSubmit={questionsForm.handleSubmit(handleSecurityQuestions)} className=\"space-y-4\">\n                <FormField\n                  control={questionsForm.control}\n                  name=\"question1.answer\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">\n                        {questionsForm.getValues(\"question1.question\")}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"Your answer\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={questionsForm.control}\n                  name=\"question2.answer\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">\n                        {questionsForm.getValues(\"question2.question\")}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"Your answer\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={questionsForm.control}\n                  name=\"question3.answer\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-sm font-medium\">\n                        {questionsForm.getValues(\"question3.question\")}\n                      </FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Key className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"Your answer\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Verifying...\n                    </>\n                  ) : (\n                    <>\n                      <Shield className=\"w-4 h-4 mr-2\" />\n                      Verify Answers\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <Alert>\n              <HelpCircle className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-sm\">\n                Answers are case-insensitive and should match what you provided during registration.\n              </AlertDescription>\n            </Alert>\n          </TabsContent>\n\n          <TabsContent value=\"parent\" className=\"space-y-4\">\n            <div className=\"text-center mb-4\">\n              <h3 className=\"font-semibold text-gray-900\">Parent Verification</h3>\n              <p className=\"text-sm text-gray-600\">\n                For student accounts, parent verification can help reset the password\n              </p>\n            </div>\n\n            <Form {...parentForm}>\n              <form onSubmit={parentForm.handleSubmit(handleParentVerification)} className=\"space-y-4\">\n                <FormField\n                  control={parentForm.control}\n                  name=\"studentEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Student Email Address</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"student.123@hasivu.edu\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={parentForm.control}\n                  name=\"parentPhone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Parent Phone Number</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            type=\"tel\"\n                            placeholder=\"+1 (555) 123-4567\"\n                            className=\"pl-10\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={handleSendVerificationCode}\n                    disabled={isLoading || !parentForm.getValues(\"parentPhone\")}\n                    className=\"flex-1\"\n                  >\n                    <Send className=\"w-4 h-4 mr-2\" />\n                    Send Code\n                  </Button>\n                </div>\n\n                <FormField\n                  control={parentForm.control}\n                  name=\"verificationCode\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Verification Code</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Shield className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            placeholder=\"123456\"\n                            className=\"pl-10\"\n                            maxLength={6}\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                      <p className=\"text-xs text-gray-500\">\n                        Enter the 6-digit code sent to your phone\n                      </p>\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={isLoading}\n                >\n                  {isLoading ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      Verifying...\n                    </>\n                  ) : (\n                    <>\n                      <Users className=\"w-4 h-4 mr-2\" />\n                      Verify Parent\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n\n            <Alert>\n              <Users className=\"h-4 w-4\" />\n              <AlertDescription className=\"text-sm\">\n                This method requires the parent phone number registered with the student account.\n              </AlertDescription>\n            </Alert>\n          </TabsContent>\n        </Tabs>\n\n        <Separator className=\"my-6\" />\n\n        <div className=\"text-center space-y-3\">\n          <p className=\"text-sm text-gray-600\">\n            Remember your password?{\" \"}\n            <Link\n              href=\"/auth/login\"\n              className=\"text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n            >\n              Sign in instead\n            </Link>\n          </p>\n          \n          <p className=\"text-xs text-gray-500\">\n            Still need help? Contact{\" \"}\n            <a\n              href=\"mailto:support@hasivu.edu\"\n              className=\"text-primary-600 hover:underline\"\n            >\n              support@hasivu.edu\n            </a>{\" \"}\n            or call the school office\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/EnhancedSchoolLoginForm.tsx",["1691","1692","1693"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Eye, EyeOff, Loader2, Mail, Lock, LogIn, School, Users, Shield, ChefHat, GraduationCap } from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\n\nimport { enhancedLoginSchema, detectRoleFromEmail, type EnhancedLoginFormData } from \"./schemas\"\n\ninterface EnhancedSchoolLoginFormProps {\n  onSubmit: (data: EnhancedLoginFormData) => Promise<void>\n  onSocialLogin?: (provider: \"google\" | \"microsoft\") => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  showRememberMe?: boolean\n  showSocialLogin?: boolean\n  className?: string\n}\n\nconst ROLE_CONFIG = {\n  student: {\n    icon: GraduationCap,\n    label: \"Student\",\n    color: \"bg-blue-100 text-blue-800 border-blue-200\",\n    description: \"Access meal ordering and account management\"\n  },\n  parent: {\n    icon: Users,\n    label: \"Parent/Guardian\", \n    color: \"bg-green-100 text-green-800 border-green-200\",\n    description: \"Manage children's accounts and meal preferences\"\n  },\n  admin: {\n    icon: Shield,\n    label: \"Administrator\",\n    color: \"bg-purple-100 text-purple-800 border-purple-200\", \n    description: \"Full system administration access\"\n  },\n  kitchen: {\n    icon: ChefHat,\n    label: \"Kitchen Staff\",\n    color: \"bg-orange-100 text-orange-800 border-orange-200\",\n    description: \"Meal preparation and order management\"\n  },\n  teacher: {\n    icon: School,\n    label: \"Teacher/Staff\",\n    color: \"bg-indigo-100 text-indigo-800 border-indigo-200\",\n    description: \"Educational staff portal access\"\n  }\n}\n\nexport function EnhancedSchoolLoginForm({\n  onSubmit,\n  onSocialLogin,\n  isLoading = false,\n  error,\n  showRememberMe = true,\n  showSocialLogin = true,\n  className\n}: EnhancedSchoolLoginFormProps) {\n  const [showPassword, setShowPassword] = React.useState(false)\n  const [detectedRole, setDetectedRole] = React.useState<string | null>(null)\n  const [emailValidated, setEmailValidated] = React.useState(false)\n\n  const form = useForm<EnhancedLoginFormData>({\n    resolver: zodResolver(enhancedLoginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n      detectedRole: undefined\n    },\n  })\n\n  const watchEmail = form.watch(\"email\")\n\n  // Role detection on email change\n  React.useEffect(() => {\n    if (watchEmail && watchEmail.includes(\"@hasivu.edu\")) {\n      const role = detectRoleFromEmail(watchEmail)\n      setDetectedRole(role)\n      setEmailValidated(true)\n      \n      if (role) {\n        form.setValue(\"detectedRole\", role as any)\n      }\n    } else {\n      setDetectedRole(null)\n      setEmailValidated(false)\n      form.setValue(\"detectedRole\", undefined)\n    }\n  }, [watchEmail, form])\n\n  const handleSubmit = async (data: EnhancedLoginFormData) => {\n    try {\n      await onSubmit(data)\n    } catch (error) {\n      console.error(\"Login error:\", error)\n    }\n  }\n\n  const handleSocialLogin = async (provider: \"google\" | \"microsoft\") => {\n    if (onSocialLogin) {\n      try {\n        await onSocialLogin(provider)\n      } catch (error) {\n        console.error(`${provider} login error:`, error)\n      }\n    }\n  }\n\n  const renderRoleBadge = () => {\n    if (!detectedRole || !emailValidated) return null\n    \n    const config = ROLE_CONFIG[detectedRole as keyof typeof ROLE_CONFIG]\n    if (!config) return null\n\n    const IconComponent = config.icon\n\n    return (\n      <div className=\"mt-2 p-3 rounded-lg border bg-slate-50\">\n        <div className=\"flex items-center gap-2 mb-1\">\n          <IconComponent className=\"h-4 w-4\" />\n          <Badge variant=\"outline\" className={config.color}>\n            {config.label}\n          </Badge>\n        </div>\n        <p className=\"text-xs text-gray-600\">{config.description}</p>\n      </div>\n    )\n  }\n\n  return (\n    <Card className={className} aria-label=\"HASIVU School Login\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <School className=\"h-8 w-8 text-primary-600\" />\n            <div className=\"text-left\">\n              <CardTitle className=\"text-2xl font-bold text-primary-600\">\n                HASIVU Platform\n              </CardTitle>\n              <p className=\"text-sm text-gray-500\">School Meal Management</p>\n            </div>\n          </div>\n        </div>\n        <CardDescription className=\"text-gray-600\">\n          Sign in with your school email address to continue\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">School Email Address</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"your.name@hasivu.edu\"\n                        className=\"pl-10\"\n                        autoComplete=\"email\"\n                        disabled={isLoading}\n                      />\n                      {emailValidated && (\n                        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-green-500\">\n                          <School className=\"h-4 w-4\" />\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                  {renderRoleBadge()}\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10 pr-10\"\n                        autoComplete=\"current-password\"\n                        disabled={isLoading}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600\"\n                        aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {showRememberMe && (\n              <div className=\"flex items-center justify-between\">\n                <FormField\n                  control={form.control}\n                  name=\"rememberMe\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <input\n                          type=\"checkbox\"\n                          checked={field.value}\n                          onChange={field.onChange}\n                          className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <Label className=\"text-sm text-gray-600\">\n                          Keep me signed in\n                        </Label>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                \n                <Link\n                  href=\"/auth/forgot-password\"\n                  className=\"text-sm text-primary-600 hover:text-primary-500 focus:outline-none focus:underline\"\n                >\n                  Forgot password?\n                </Link>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  Sign In to HASIVU\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {showSocialLogin && (\n          <>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or continue with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"google\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  />\n                </svg>\n                Google\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"microsoft\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M11.4 24H0V12.6h11.4V24zM24 24H12.6V12.6H24V24zM11.4 11.4H0V0h11.4v11.4zM24 11.4H12.6V0H24v11.4z\"/>\n                </svg>\n                Microsoft\n              </Button>\n            </div>\n          </>\n        )}\n\n        {/* School Information */}\n        <div className=\"mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200\">\n          <h4 className=\"font-medium text-blue-900 mb-2\">New to HASIVU Platform?</h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            <li>• Students: Use format student.{\"{ID}\"}@hasivu.edu</li>\n            <li>• Parents: Use format parent.{\"{name}\"}@hasivu.edu</li>\n            <li>• Staff: Use your assigned school email address</li>\n          </ul>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <p>\n          Don't have an account?{\" \"}\n          <Link\n            href=\"/auth/register\"\n            className=\"text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n          >\n            Register with your school\n          </Link>\n        </p>\n        <p className=\"text-xs text-gray-500\">\n          Need help? Contact{\" \"}\n          <a href=\"mailto:support@hasivu.edu\" className=\"text-primary-600 hover:underline\">\n            support@hasivu.edu\n          </a>\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ForgotPasswordForm.tsx",["1694","1695","1696"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Mail, Loader2, ArrowLeft, Send, CheckCircle, Eye, EyeOff } from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\n\nimport { forgotPasswordSchema, resetPasswordSchema, type ForgotPasswordFormData } from \"./schemas\"\n\ninterface ForgotPasswordFormProps {\n  onSubmit: (data: ForgotPasswordFormData) => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  success?: boolean\n  className?: string\n}\n\nexport function ForgotPasswordForm({\n  onSubmit,\n  isLoading = false,\n  error,\n  success = false,\n  className\n}: ForgotPasswordFormProps) {\n  const form = useForm<ForgotPasswordFormData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  })\n\n  const handleSubmit = async (data: ForgotPasswordFormData) => {\n    try {\n      await onSubmit(data)\n    } catch (error) {\n      console.error(\"Forgot password error:\", error)\n    }\n  }\n\n  const email = form.watch(\"email\")\n\n  return (\n    <Card className={className} aria-label=\"Forgot password form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          {success ? \"Check Your Email\" : \"Forgot Password?\"}\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          {success \n            ? \"We've sent password reset instructions to your email\"\n            : \"Enter your email address and we'll send you instructions to reset your password\"\n          }\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {success ? (\n          <div className=\"text-center space-y-4\">\n            <div className=\"mx-auto w-16 h-16 bg-success-100 rounded-full flex items-center justify-center\">\n              <CheckCircle className=\"w-8 h-8 text-success-600\" />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600\">\n                We've sent password reset instructions to:\n              </p>\n              <p className=\"font-medium text-gray-900\">{email}</p>\n            </div>\n            \n            <div className=\"p-4 bg-info-50 border border-info-200 rounded-md\">\n              <div className=\"text-sm text-info-700\">\n                <p className=\"font-medium mb-1\">Didn't receive the email?</p>\n                <ul className=\"space-y-1 text-left\">\n                  <li>• Check your spam/junk folder</li>\n                  <li>• Make sure the email address is correct</li>\n                  <li>• The link expires in 15 minutes</li>\n                </ul>\n              </div>\n            </div>\n\n            <Button\n              onClick={() => form.handleSubmit(handleSubmit)()}\n              variant=\"outline\"\n              disabled={isLoading}\n              className=\"w-full\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Resending...\n                </>\n              ) : (\n                <>\n                  <Send className=\"mr-2 h-4 w-4\" />\n                  Resend Email\n                </>\n              )}\n            </Button>\n          </div>\n        ) : (\n          <>\n            {error && (\n              <div \n                className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n                role=\"alert\"\n                aria-live=\"polite\"\n              >\n                {error}\n              </div>\n            )}\n\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"text-gray-700\">Email Address</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                          <Input\n                            {...field}\n                            type=\"email\"\n                            placeholder=\"Enter your email address\"\n                            className=\"pl-10\"\n                            autoComplete=\"email\"\n                            disabled={isLoading}\n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n                  disabled={isLoading}\n                  size=\"lg\"\n                >\n                  {isLoading ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Sending instructions...\n                    </>\n                  ) : (\n                    <>\n                      <Send className=\"mr-2 h-4 w-4\" />\n                      Send Reset Instructions\n                    </>\n                  )}\n                </Button>\n              </form>\n            </Form>\n          </>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <Link\n          href=\"/auth/login\"\n          className=\"inline-flex items-center text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n        >\n          <ArrowLeft className=\"mr-1 h-4 w-4\" />\n          Back to sign in\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}\n\n// Reset Password Form Component\ninterface ResetPasswordFormProps {\n  onSubmit: (data: { token: string; newPassword: string; confirmPassword: string }) => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  success?: boolean\n  token: string\n  className?: string\n}\n\nexport function ResetPasswordForm({\n  onSubmit,\n  isLoading = false,\n  error,\n  success = false,\n  token,\n  className\n}: ResetPasswordFormProps) {\n  const [showPassword, setShowPassword] = React.useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false)\n\n  const form = useForm({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      newPassword: \"\",\n      confirmPassword: \"\",\n    },\n  })\n\n  const handleSubmit = async (data: any) => {\n    try {\n      await onSubmit({ ...data, token })\n    } catch (error) {\n      console.error(\"Reset password error:\", error)\n    }\n  }\n\n  if (success) {\n    return (\n      <Card className={className} aria-label=\"Password reset success\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <CardTitle className=\"text-3xl font-bold text-success-600\">\n            Password Reset Successfully\n          </CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            Your password has been updated. You can now sign in with your new password.\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent className=\"text-center space-y-4\">\n          <div className=\"mx-auto w-16 h-16 bg-success-100 rounded-full flex items-center justify-center\">\n            <CheckCircle className=\"w-8 h-8 text-success-600\" />\n          </div>\n        </CardContent>\n\n        <CardFooter className=\"flex flex-col space-y-2 text-center\">\n          <Link href=\"/auth/login\">\n            <Button className=\"w-full bg-primary-600 hover:bg-primary-700 text-white\">\n              Continue to Sign In\n            </Button>\n          </Link>\n        </CardFooter>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={className} aria-label=\"Reset password form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          Reset Your Password\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          Enter your new password below\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {error && (\n          <div \n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"newPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">New Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter new password\"\n                        className=\"pr-10\"\n                        autoComplete=\"new-password\"\n                        disabled={isLoading}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                        aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">Confirm New Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Input\n                        {...field}\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm new password\"\n                        className=\"pr-10\"\n                        autoComplete=\"new-password\"\n                        disabled={isLoading}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                        aria-label={showConfirmPassword ? \"Hide password\" : \"Show password\"}\n                      >\n                        {showConfirmPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"p-3 bg-info-50 border border-info-200 rounded-md\">\n              <p className=\"text-sm text-info-700\">\n                <span className=\"font-medium\">Password requirements:</span>\n                <br />\n                • At least 8 characters long\n                <br />\n                • Mix of letters, numbers, and special characters recommended\n              </p>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Updating password...\n                </>\n              ) : (\n                \"Update Password\"\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <Link\n          href=\"/auth/login\"\n          className=\"inline-flex items-center text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n        >\n          <ArrowLeft className=\"mr-1 h-4 w-4\" />\n          Back to sign in\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/LoginForm.tsx",["1697","1698","1699"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Eye, EyeOff, Loader2, Mail, Lock, LogIn, Users, GraduationCap, Shield, ChefHat, Truck } from \"lucide-react\"\nimport Link from \"next/link\"\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\n\nimport { loginSchema, type LoginFormData } from \"./schemas\"\n\n// Role configuration\nconst USER_ROLES = {\n  student: {\n    label: 'Student',\n    icon: GraduationCap,\n    description: 'Access your meal orders and account',\n    color: 'bg-blue-500',\n  },\n  parent: {\n    label: 'Parent',\n    icon: Users,\n    description: 'Manage your child\\'s meals and payments',\n    color: 'bg-green-500',\n  },\n  admin: {\n    label: 'Admin',\n    icon: Shield,\n    description: 'System administration and management',\n    color: 'bg-purple-500',\n  },\n  kitchen: {\n    label: 'Kitchen',\n    icon: ChefHat,\n    description: 'Manage orders and meal preparation',\n    color: 'bg-orange-500',\n  },\n  vendor: {\n    label: 'Vendor',\n    icon: Truck,\n    description: 'Supply management and logistics',\n    color: 'bg-indigo-500',\n  },\n} as const\n\ntype UserRole = keyof typeof USER_ROLES\n\ninterface LoginFormProps {\n  onSubmit: (data: LoginFormData & { role: UserRole }) => Promise<void>\n  onSocialLogin?: (provider: \"google\" | \"facebook\") => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  showRememberMe?: boolean\n  showSocialLogin?: boolean\n  showRoleSelection?: boolean\n  defaultRole?: UserRole\n  className?: string\n}\n\nexport function LoginForm({\n  onSubmit,\n  onSocialLogin,\n  isLoading = false,\n  error,\n  showRememberMe = true,\n  showSocialLogin = true,\n  showRoleSelection = true,\n  defaultRole = 'student',\n  className\n}: LoginFormProps) {\n  const [showPassword, setShowPassword] = React.useState(false)\n  const [selectedRole, setSelectedRole] = React.useState<UserRole>(defaultRole)\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n    },\n  })\n\n  const handleSubmit = async (data: LoginFormData) => {\n    try {\n      await onSubmit({ ...data, role: selectedRole })\n    } catch (error) {\n      // Error handling is managed by parent component\n      console.error(\"Login error:\", error)\n    }\n  }\n\n  const handleSocialLogin = async (provider: \"google\" | \"facebook\") => {\n    if (onSocialLogin) {\n      try {\n        await onSocialLogin(provider)\n      } catch (error) {\n        console.error(`${provider} login error:`, error)\n      }\n    }\n  }\n\n  return (\n    <Card className={className} aria-label=\"Login form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          Welcome Back to HASIVU\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          {showRoleSelection ? (\n            <>Select your role and sign in to continue</>\n          ) : (\n            <>Sign in to your HASIVU account to continue</>\n          )}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {error && (\n          <div \n            data-testid=\"general-error\"\n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        {showRoleSelection && (\n          <div className=\"mb-6\">\n            <Label className=\"text-sm font-medium text-gray-700 mb-3 block\">Select Your Role</Label>\n            <Tabs value={selectedRole} onValueChange={(value) => setSelectedRole(value as UserRole)} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-5 mb-4\">\n                {Object.entries(USER_ROLES).map(([role, config]) => {\n                  const Icon = config.icon\n                  return (\n                    <TabsTrigger \n                      key={role}\n                      value={role}\n                      data-testid={`role-tab-${role}`}\n                      className=\"flex flex-col items-center gap-1 p-3 text-xs\"\n                      aria-selected={selectedRole === role}\n                    >\n                      <Icon className=\"h-4 w-4\" />\n                      {config.label}\n                    </TabsTrigger>\n                  )\n                })}\n              </TabsList>\n              \n              {/* Role descriptions */}\n              {Object.entries(USER_ROLES).map(([role, config]) => (\n                <TabsContent key={role} value={role} className=\"mt-2\">\n                  <p className=\"text-sm text-gray-600 text-center bg-gray-50 p-2 rounded-md\">\n                    {config.description}\n                  </p>\n                </TabsContent>\n              ))}\n            </Tabs>\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">Email Address</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        data-testid=\"email-input\"\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        className=\"pl-10\"\n                        autoComplete=\"email\"\n                        disabled={isLoading}\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage data-testid=\"email-error\" />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        data-testid=\"password-input\"\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Enter your password\"\n                        className=\"pl-10 pr-10\"\n                        autoComplete=\"current-password\"\n                        disabled={isLoading}\n                      />\n                      <button\n                        type=\"button\"\n                        data-testid=\"password-toggle\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none focus:text-gray-600\"\n                        aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                      >\n                        {showPassword ? (\n                          <EyeOff className=\"h-4 w-4\" />\n                        ) : (\n                          <Eye className=\"h-4 w-4\" />\n                        )}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage data-testid=\"password-error\" />\n                </FormItem>\n              )}\n            />\n\n            {showRememberMe && (\n              <div className=\"flex items-center justify-between\">\n                <FormField\n                  control={form.control}\n                  name=\"rememberMe\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                      <FormControl>\n                        <input\n                          type=\"checkbox\"\n                          data-testid=\"remember-me-checkbox\"\n                          checked={field.value}\n                          onChange={field.onChange}\n                          className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                          disabled={isLoading}\n                        />\n                      </FormControl>\n                      <div className=\"space-y-1 leading-none\">\n                        <Label className=\"text-sm text-gray-600\">\n                          Remember me\n                        </Label>\n                      </div>\n                    </FormItem>\n                  )}\n                />\n                \n                <Link\n                  href=\"/auth/forgot-password\"\n                  data-testid=\"forgot-password-link\"\n                  className=\"text-sm text-primary-600 hover:text-primary-500 focus:outline-none focus:underline\"\n                >\n                  Forgot password?\n                </Link>\n              </div>\n            )}\n\n            <Button\n              type=\"submit\"\n              data-testid=\"login-button\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Signing in...\n                </>\n              ) : (\n                <>\n                  <LogIn className=\"mr-2 h-4 w-4\" />\n                  Sign In\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {showSocialLogin && (\n          <>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or continue with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                data-testid=\"google-login-button\"\n                onClick={() => handleSocialLogin(\"google\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  />\n                </svg>\n                Google\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                data-testid=\"microsoft-login-button\"\n                onClick={() => handleSocialLogin(\"facebook\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n                </svg>\n                Facebook\n              </Button>\n            </div>\n          </>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <p>\n          Don't have an account?{\" \"}\n          <Link\n            href=\"/auth/register\"\n            data-testid=\"signup-link\"\n            className=\"text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n          >\n            Sign up for free\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MfaForm.tsx",["1700","1701","1702"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Shield, Loader2, ArrowLeft, Smartphone, Key, RefreshCw } from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\n\nimport { mfaSchema, type MfaFormData } from \"./schemas\"\n\ninterface MfaFormProps {\n  onSubmit: (data: MfaFormData) => Promise<void>\n  onUseBackupCode?: () => void\n  onResendCode?: () => Promise<void>\n  isLoading?: boolean\n  isResending?: boolean\n  error?: string | null\n  method?: \"authenticator\" | \"sms\" | \"email\"\n  contact?: string // phone number or email for sms/email method\n  className?: string\n}\n\nconst methodConfig = {\n  authenticator: {\n    icon: Key,\n    title: \"Authenticator App\",\n    description: \"Enter the 6-digit code from your authenticator app\",\n    placeholder: \"000000\",\n    inputMode: \"numeric\" as const,\n  },\n  sms: {\n    icon: Smartphone,\n    title: \"SMS Verification\",\n    description: \"Enter the 6-digit code sent to your phone\",\n    placeholder: \"000000\", \n    inputMode: \"numeric\" as const,\n  },\n  email: {\n    icon: Shield,\n    title: \"Email Verification\",\n    description: \"Enter the 6-digit code sent to your email\",\n    placeholder: \"000000\",\n    inputMode: \"numeric\" as const,\n  },\n}\n\nexport function MfaForm({\n  onSubmit,\n  onUseBackupCode,\n  onResendCode,\n  isLoading = false,\n  isResending = false,\n  error,\n  method = \"authenticator\",\n  contact,\n  className\n}: MfaFormProps) {\n  const [timeLeft, setTimeLeft] = React.useState(method === \"authenticator\" ? 0 : 60)\n  const [canResend, setCanResend] = React.useState(method === \"authenticator\")\n\n  const config = methodConfig[method]\n  const IconComponent = config.icon\n\n  const form = useForm<MfaFormData>({\n    resolver: zodResolver(mfaSchema),\n    defaultValues: {\n      code: \"\",\n    },\n  })\n\n  // Countdown timer for resend functionality (not applicable for authenticator)\n  React.useEffect(() => {\n    if (method !== \"authenticator\" && timeLeft > 0) {\n      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)\n      return () => clearTimeout(timer)\n    } else if (method !== \"authenticator\" && timeLeft === 0) {\n      setCanResend(true)\n    }\n  }, [timeLeft, method])\n\n  const handleSubmit = async (data: MfaFormData) => {\n    try {\n      await onSubmit(data)\n    } catch (error) {\n      console.error(\"MFA verification error:\", error)\n    }\n  }\n\n  const handleResendCode = async () => {\n    if (onResendCode && canResend && method !== \"authenticator\") {\n      try {\n        await onResendCode()\n        setTimeLeft(60)\n        setCanResend(false)\n        form.reset()\n      } catch (error) {\n        console.error(\"Resend code error:\", error)\n      }\n    }\n  }\n\n  const handleCodeInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/\\D/g, '').slice(0, 6)\n    form.setValue('code', value)\n    \n    // Auto-submit when 6 digits are entered\n    if (value.length === 6) {\n      form.handleSubmit(handleSubmit)()\n    }\n  }\n\n  const formatContact = (contact: string, method: string) => {\n    if (method === \"sms\") {\n      // Format phone number: +91 98765 ***10\n      return contact.replace(/(\\+\\d{1,3})(\\d{3,5})(\\d+)(\\d{2})/, \"$1 $2 ***$4\")\n    } else if (method === \"email\") {\n      // Format email: j***@example.com\n      const [username, domain] = contact.split(\"@\")\n      return `${username.charAt(0)}***@${domain}`\n    }\n    return contact\n  }\n\n  return (\n    <Card className={className} aria-label=\"Multi-factor authentication form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          {config.title}\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          {config.description}\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center\">\n            <IconComponent className=\"w-8 h-8 text-primary-600\" />\n          </div>\n          \n          {contact && method !== \"authenticator\" && (\n            <div className=\"space-y-1\">\n              <p className=\"text-sm text-gray-600\">\n                {method === \"sms\" ? \"Code sent to:\" : \"Code sent to:\"}\n              </p>\n              <p className=\"font-medium text-gray-900\">\n                {formatContact(contact, method)}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {error && (\n          <div \n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"code\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700 text-center block\">\n                    Authentication Code\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      onChange={handleCodeInput}\n                      placeholder={config.placeholder}\n                      className=\"text-center text-2xl font-mono tracking-widest\"\n                      maxLength={6}\n                      autoComplete=\"one-time-code\"\n                      disabled={isLoading}\n                      inputMode={config.inputMode}\n                      pattern=\"[0-9]*\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading || form.watch('code').length !== 6}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Verifying...\n                </>\n              ) : (\n                <>\n                  <Shield className=\"mr-2 h-4 w-4\" />\n                  Verify & Continue\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {/* Resend code functionality for SMS/Email */}\n        {method !== \"authenticator\" && (\n          <div className=\"text-center space-y-3\">\n            <div className=\"text-sm text-gray-600\">\n              Didn't receive the code?\n            </div>\n            \n            {canResend ? (\n              <Button\n                variant=\"outline\"\n                onClick={handleResendCode}\n                disabled={isResending}\n                className=\"text-primary-600 border-primary-300 hover:bg-primary-50\"\n              >\n                {isResending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Sending...\n                  </>\n                ) : (\n                  <>\n                    <RefreshCw className=\"mr-2 h-4 w-4\" />\n                    Resend Code\n                  </>\n                )}\n              </Button>\n            ) : (\n              <p className=\"text-sm text-gray-500\">\n                Resend available in {timeLeft} seconds\n              </p>\n            )}\n          </div>\n        )}\n\n        {/* Backup code option */}\n        {onUseBackupCode && (\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={onUseBackupCode}\n              className=\"text-sm text-gray-600 hover:text-gray-800\"\n              disabled={isLoading}\n            >\n              Use backup code instead\n            </Button>\n          </div>\n        )}\n\n        {/* Method-specific tips */}\n        <div className=\"p-3 bg-info-50 border border-info-200 rounded-md\">\n          <div className=\"text-sm text-info-700\">\n            <p className=\"font-medium mb-1\">\n              {method === \"authenticator\" ? \"Authenticator Tips:\" : \"Verification Tips:\"}\n            </p>\n            <ul className=\"space-y-1 text-left\">\n              {method === \"authenticator\" ? (\n                <>\n                  <li>• Use Google Authenticator, Authy, or similar app</li>\n                  <li>• Make sure your device time is synchronized</li>\n                  <li>• Code refreshes every 30 seconds</li>\n                </>\n              ) : (\n                <>\n                  <li>• Code expires in 10 minutes</li>\n                  <li>• Check spam folder if using email</li>\n                  <li>• Make sure to enter all 6 digits</li>\n                </>\n              )}\n            </ul>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <Link\n          href=\"/auth/login\"\n          className=\"inline-flex items-center text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n        >\n          <ArrowLeft className=\"mr-1 h-4 w-4\" />\n          Back to sign in\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}\n\n// Backup Code Form Component\ninterface BackupCodeFormProps {\n  onSubmit: (code: string) => Promise<void>\n  onBackToMfa?: () => void\n  isLoading?: boolean\n  error?: string | null\n  className?: string\n}\n\nexport function BackupCodeForm({\n  onSubmit,\n  onBackToMfa,\n  isLoading = false,\n  error,\n  className\n}: BackupCodeFormProps) {\n  const [backupCode, setBackupCode] = React.useState(\"\")\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    if (backupCode.trim()) {\n      try {\n        await onSubmit(backupCode.trim())\n      } catch (error) {\n        console.error(\"Backup code verification error:\", error)\n      }\n    }\n  }\n\n  return (\n    <Card className={className} aria-label=\"Backup code form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          Use Backup Code\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          Enter one of your backup codes to sign in\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-16 h-16 bg-warning-100 rounded-full flex items-center justify-center\">\n            <Key className=\"w-8 h-8 text-warning-600\" />\n          </div>\n        </div>\n\n        {error && (\n          <div \n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label className=\"text-gray-700 text-center block\">\n              Backup Code\n            </Label>\n            <Input\n              value={backupCode}\n              onChange={(e) => setBackupCode(e.target.value)}\n              placeholder=\"Enter backup code\"\n              className=\"text-center font-mono\"\n              autoComplete=\"off\"\n              disabled={isLoading}\n            />\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n            disabled={isLoading || !backupCode.trim()}\n            size=\"lg\"\n          >\n            {isLoading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Verifying...\n              </>\n            ) : (\n              <>\n                <Key className=\"mr-2 h-4 w-4\" />\n                Verify Backup Code\n              </>\n            )}\n          </Button>\n        </form>\n\n        {onBackToMfa && (\n          <div className=\"text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={onBackToMfa}\n              className=\"text-sm text-gray-600 hover:text-gray-800\"\n              disabled={isLoading}\n            >\n              Back to authenticator\n            </Button>\n          </div>\n        )}\n\n        <div className=\"p-3 bg-warning-50 border border-warning-200 rounded-md\">\n          <div className=\"text-sm text-warning-700\">\n            <p className=\"font-medium mb-1\">Important:</p>\n            <ul className=\"space-y-1 text-left\">\n              <li>• Each backup code can only be used once</li>\n              <li>• Store remaining codes in a safe place</li>\n              <li>• Generate new codes after using these</li>\n            </ul>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <Link\n          href=\"/auth/login\"\n          className=\"inline-flex items-center text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n        >\n          <ArrowLeft className=\"mr-1 h-4 w-4\" />\n          Back to sign in\n        </Link>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MultiFactorAuthForm.tsx",["1703","1704","1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716","1717","1718"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { \n  Smartphone, Shield, Key, Clock, AlertTriangle, CheckCircle,\n  Copy, Eye, EyeOff, RefreshCw, Phone, Mail, Settings, QrCode\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\n\nimport {\n  mfaSchema,\n  mfaSetupSchema,\n  recoveryCodesSchema,\n  type MfaFormData,\n  type MfaSetupData,\n  type RecoveryCodesData\n} from \"./schemas\"\n\ninterface MultiFactorAuthFormProps {\n  // MFA verification\n  onMfaVerify: (data: MfaFormData) => Promise<void>\n  \n  // MFA setup\n  onMfaSetup?: (data: MfaSetupData) => Promise<void>\n  onGenerateRecoveryCodes?: () => Promise<string[]>\n  onSendSmsCode?: (phoneNumber: string) => Promise<void>\n  onGenerateQrCode?: () => Promise<string> // Returns QR code data URL\n  \n  // Recovery\n  onUseRecoveryCode?: (code: string) => Promise<void>\n  onRequestNewCode?: (method: \"sms\" | \"email\") => Promise<void>\n  \n  // State\n  isLoading?: boolean\n  error?: string | null\n  success?: string | null\n  userPhone?: string\n  userEmail?: string\n  mfaEnabled?: boolean\n  mode?: \"verify\" | \"setup\" | \"emergency\"\n  className?: string\n}\n\nexport function MultiFactorAuthForm({\n  onMfaVerify,\n  onMfaSetup,\n  onGenerateRecoveryCodes,\n  onSendSmsCode,\n  onGenerateQrCode,\n  onUseRecoveryCode,\n  onRequestNewCode,\n  isLoading = false,\n  error,\n  success,\n  userPhone,\n  userEmail,\n  mfaEnabled = false,\n  mode = \"verify\",\n  className\n}: MultiFactorAuthFormProps) {\n  const [selectedMethod, setSelectedMethod] = React.useState<\"sms\" | \"app\" | \"recovery\">(\"sms\")\n  const [qrCodeData, setQrCodeData] = React.useState<string | null>(null)\n  const [recoveryCodes, setRecoveryCodes] = React.useState<string[]>([])\n  const [timeRemaining, setTimeRemaining] = React.useState(30)\n  const [canResend, setCanResend] = React.useState(false)\n  const [showRecoveryCodes, setShowRecoveryCodes] = React.useState(false)\n\n  // Forms\n  const mfaForm = useForm<MfaFormData>({\n    resolver: zodResolver(mfaSchema),\n    defaultValues: { code: \"\" }\n  })\n\n  const setupForm = useForm<MfaSetupData>({\n    resolver: zodResolver(mfaSetupSchema),\n    defaultValues: {\n      method: \"sms\",\n      phoneNumber: userPhone || \"\"\n    }\n  })\n\n  const recoveryForm = useForm<RecoveryCodesData>({\n    resolver: zodResolver(recoveryCodesSchema),\n    defaultValues: {\n      codes: [],\n      acknowledged: false\n    }\n  })\n\n  // Timer for resend functionality\n  React.useEffect(() => {\n    let interval: NodeJS.Timeout\n    \n    if (timeRemaining > 0 && !canResend) {\n      interval = setInterval(() => {\n        setTimeRemaining((prev) => {\n          if (prev <= 1) {\n            setCanResend(true)\n            return 0\n          }\n          return prev - 1\n        })\n      }, 1000)\n    }\n\n    return () => clearInterval(interval)\n  }, [timeRemaining, canResend])\n\n  const handleMfaVerify = async (data: MfaFormData) => {\n    try {\n      await onMfaVerify(data)\n    } catch (error) {\n      console.error(\"MFA verification error:\", error)\n    }\n  }\n\n  const handleMfaSetup = async (data: MfaSetupData) => {\n    if (onMfaSetup) {\n      try {\n        await onMfaSetup(data)\n        if (onGenerateRecoveryCodes) {\n          const codes = await onGenerateRecoveryCodes()\n          setRecoveryCodes(codes)\n          recoveryForm.setValue(\"codes\", codes)\n        }\n      } catch (error) {\n        console.error(\"MFA setup error:\", error)\n      }\n    }\n  }\n\n  const handleGenerateQrCode = async () => {\n    if (onGenerateQrCode) {\n      try {\n        const qrData = await onGenerateQrCode()\n        setQrCodeData(qrData)\n      } catch (error) {\n        console.error(\"QR code generation error:\", error)\n      }\n    }\n  }\n\n  const handleSendSms = async () => {\n    const phone = setupForm.getValues(\"phoneNumber\") || userPhone\n    if (phone && onSendSmsCode) {\n      try {\n        await onSendSmsCode(phone)\n        setTimeRemaining(30)\n        setCanResend(false)\n      } catch (error) {\n        console.error(\"SMS send error:\", error)\n      }\n    }\n  }\n\n  const handleUseRecoveryCode = async (code: string) => {\n    if (onUseRecoveryCode) {\n      try {\n        await onUseRecoveryCode(code)\n      } catch (error) {\n        console.error(\"Recovery code error:\", error)\n      }\n    }\n  }\n\n  const handleRequestNewCode = async (method: \"sms\" | \"email\") => {\n    if (onRequestNewCode) {\n      try {\n        await onRequestNewCode(method)\n        setTimeRemaining(30)\n        setCanResend(false)\n      } catch (error) {\n        console.error(\"Request new code error:\", error)\n      }\n    }\n  }\n\n  const copyRecoveryCode = (code: string) => {\n    navigator.clipboard.writeText(code)\n  }\n\n  const copyAllRecoveryCodes = () => {\n    const allCodes = recoveryCodes.join(\"\\n\")\n    navigator.clipboard.writeText(allCodes)\n  }\n\n  // MFA Verification Mode\n  if (mode === \"verify\") {\n    return (\n      <Card className={className}>\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4\">\n            <Shield className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <CardTitle>Two-Factor Authentication</CardTitle>\n          <CardDescription>\n            Enter the verification code to continue\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <Tabs value={selectedMethod} onValueChange={(value) => setSelectedMethod(value as any)}>\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"sms\" className=\"flex items-center gap-1\">\n                <Phone className=\"h-3 w-3\" />\n                SMS\n              </TabsTrigger>\n              <TabsTrigger value=\"app\" className=\"flex items-center gap-1\">\n                <Smartphone className=\"h-3 w-3\" />\n                App\n              </TabsTrigger>\n              <TabsTrigger value=\"recovery\" className=\"flex items-center gap-1\">\n                <Key className=\"h-3 w-3\" />\n                Recovery\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"sms\" className=\"space-y-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  We sent a code to {userPhone ? `***-***-${userPhone.slice(-4)}` : \"your phone\"}\n                </p>\n                {!canResend && timeRemaining > 0 && (\n                  <Badge variant=\"outline\" className=\"mb-4\">\n                    <Clock className=\"h-3 w-3 mr-1\" />\n                    Resend in {timeRemaining}s\n                  </Badge>\n                )}\n              </div>\n\n              <Form {...mfaForm}>\n                <form onSubmit={mfaForm.handleSubmit(handleMfaVerify)} className=\"space-y-4\">\n                  <FormField\n                    control={mfaForm.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SMS Code</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"123456\"\n                            className=\"text-center text-lg tracking-widest\"\n                            maxLength={6}\n                            autoComplete=\"one-time-code\"\n                            disabled={isLoading}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Verifying...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Verify Code\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => handleRequestNewCode(\"sms\")}\n                disabled={!canResend || isLoading}\n                className=\"w-full\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Resend SMS Code\n              </Button>\n            </TabsContent>\n\n            <TabsContent value=\"app\" className=\"space-y-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  Enter the code from your authenticator app\n                </p>\n              </div>\n\n              <Form {...mfaForm}>\n                <form onSubmit={mfaForm.handleSubmit(handleMfaVerify)} className=\"space-y-4\">\n                  <FormField\n                    control={mfaForm.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Authenticator Code</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"123456\"\n                            className=\"text-center text-lg tracking-widest\"\n                            maxLength={6}\n                            disabled={isLoading}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                    {isLoading ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Verifying...\n                      </>\n                    ) : (\n                      <>\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Verify Code\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </TabsContent>\n\n            <TabsContent value=\"recovery\" className=\"space-y-4\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-2\">\n                  Enter one of your recovery codes\n                </p>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Recovery Code</Label>\n                  <Input\n                    placeholder=\"Enter 8-character recovery code\"\n                    className=\"text-center text-lg tracking-widest\"\n                    maxLength={8}\n                    onChange={(e) => {\n                      if (e.target.value.length === 8) {\n                        handleUseRecoveryCode(e.target.value)\n                      }\n                    }}\n                    disabled={isLoading}\n                  />\n                </div>\n\n                <Alert>\n                  <Key className=\"h-4 w-4\" />\n                  <AlertDescription className=\"text-sm\">\n                    Recovery codes can only be used once. Make sure to save your remaining codes safely.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          <Separator />\n\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-sm text-gray-600\">\n              Having trouble? Contact{\" \"}\n              <a href=\"mailto:support@hasivu.edu\" className=\"text-primary-600 hover:underline\">\n                support@hasivu.edu\n              </a>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  // MFA Setup Mode\n  if (mode === \"setup\") {\n    return (\n      <Card className={className}>\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mb-4\">\n            <Settings className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <CardTitle>Setup Two-Factor Authentication</CardTitle>\n          <CardDescription>\n            Add an extra layer of security to your account\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {success && (\n            <Alert>\n              <CheckCircle className=\"h-4 w-4\" />\n              <AlertDescription>{success}</AlertDescription>\n            </Alert>\n          )}\n\n          <Form {...setupForm}>\n            <form onSubmit={setupForm.handleSubmit(handleMfaSetup)} className=\"space-y-6\">\n              <FormField\n                control={setupForm.control}\n                name=\"method\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Choose Authentication Method</FormLabel>\n                    <FormControl>\n                      <div className=\"grid grid-cols-1 gap-3\">\n                        <label className={`flex items-center space-x-3 p-4 border rounded-lg cursor-pointer transition-colors ${\n                          field.value === \"sms\" ? \"border-primary-500 bg-primary-50\" : \"border-gray-200\"\n                        }`}>\n                          <input\n                            type=\"radio\"\n                            value=\"sms\"\n                            checked={field.value === \"sms\"}\n                            onChange={field.onChange}\n                            className=\"sr-only\"\n                          />\n                          <Phone className=\"h-5 w-5 text-primary-600\" />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">SMS Text Message</div>\n                            <div className=\"text-sm text-gray-500\">Receive codes via SMS</div>\n                          </div>\n                        </label>\n\n                        <label className={`flex items-center space-x-3 p-4 border rounded-lg cursor-pointer transition-colors ${\n                          field.value === \"app\" ? \"border-primary-500 bg-primary-50\" : \"border-gray-200\"\n                        }`}>\n                          <input\n                            type=\"radio\"\n                            value=\"app\"\n                            checked={field.value === \"app\"}\n                            onChange={field.onChange}\n                            className=\"sr-only\"\n                          />\n                          <Smartphone className=\"h-5 w-5 text-primary-600\" />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium\">Authenticator App</div>\n                            <div className=\"text-sm text-gray-500\">Use Google Authenticator or similar</div>\n                          </div>\n                        </label>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {setupForm.watch(\"method\") === \"sms\" && (\n                <FormField\n                  control={setupForm.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number</FormLabel>\n                      <FormControl>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            {...field}\n                            type=\"tel\"\n                            placeholder=\"+1 (555) 123-4567\"\n                            className=\"flex-1\"\n                            disabled={isLoading}\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={handleSendSms}\n                            disabled={!field.value || isLoading}\n                          >\n                            Test\n                          </Button>\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {setupForm.watch(\"method\") === \"app\" && (\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleGenerateQrCode}\n                      disabled={isLoading}\n                      className=\"mb-4\"\n                    >\n                      <QrCode className=\"w-4 h-4 mr-2\" />\n                      Generate QR Code\n                    </Button>\n                    \n                    {qrCodeData && (\n                      <div className=\"flex justify-center mb-4\">\n                        <img src={qrCodeData} alt=\"QR Code\" className=\"w-48 h-48 border rounded-lg\" />\n                      </div>\n                    )}\n                    \n                    <p className=\"text-sm text-gray-600\">\n                      Scan this QR code with your authenticator app, then enter a code to verify setup.\n                    </p>\n                  </div>\n\n                  <div>\n                    <Label>Verification Code</Label>\n                    <Input\n                      placeholder=\"Enter code from your app\"\n                      className=\"text-center\"\n                      maxLength={6}\n                      disabled={isLoading}\n                    />\n                  </div>\n                </div>\n              )}\n\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Setting up...\n                  </>\n                ) : (\n                  <>\n                    <Shield className=\"w-4 h-4 mr-2\" />\n                    Enable Two-Factor Auth\n                  </>\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          {/* Recovery Codes Display */}\n          {recoveryCodes.length > 0 && (\n            <div className=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <h4 className=\"font-medium text-yellow-900\">Recovery Codes</h4>\n                <div className=\"flex gap-2\">\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => setShowRecoveryCodes(!showRecoveryCodes)}\n                  >\n                    {showRecoveryCodes ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={copyAllRecoveryCodes}\n                  >\n                    <Copy className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              </div>\n\n              {showRecoveryCodes && (\n                <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                  {recoveryCodes.map((code, index) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-white rounded border text-sm font-mono\"\n                    >\n                      <span>{code}</span>\n                      <Button\n                        type=\"button\"\n                        size=\"sm\"\n                        variant=\"ghost\"\n                        onClick={() => copyRecoveryCode(code)}\n                        className=\"h-6 w-6 p-0\"\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n\n              <Alert>\n                <Key className=\"h-4 w-4\" />\n                <AlertDescription className=\"text-sm\">\n                  <strong>Important:</strong> Save these recovery codes in a safe place. \n                  You can use them to access your account if you lose your phone or authenticator app.\n                </AlertDescription>\n              </Alert>\n\n              <Form {...recoveryForm}>\n                <form className=\"mt-3\">\n                  <FormField\n                    control={recoveryForm.control}\n                    name=\"acknowledged\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <input\n                            type=\"checkbox\"\n                            checked={field.value}\n                            onChange={field.onChange}\n                            className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <Label className=\"text-sm text-gray-700\">\n                            I have saved these recovery codes in a safe place\n                          </Label>\n                          <FormMessage />\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </form>\n              </Form>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return null\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/MultiStepRegistrationForm.tsx",["1719","1720","1721","1722","1723"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { \n  User, Mail, School, Phone, Lock, Eye, EyeOff, \n  ChevronRight, ChevronLeft, Check, Upload, AlertCircle,\n  Users, GraduationCap, Shield, ChefHat, UserCheck\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\n\nimport {\n  registrationStep1Schema,\n  registrationStep2Schema,\n  registrationStep3Schema,\n  type RegistrationStep1Data,\n  type RegistrationStep2Data,\n  type RegistrationStep3Data,\n  detectRoleFromEmail\n} from \"./schemas\"\n\ninterface MultiStepRegistrationFormProps {\n  onSubmit: (data: RegistrationStep1Data & RegistrationStep2Data & RegistrationStep3Data) => Promise<void>\n  onValidateSchoolId?: (schoolId: string) => Promise<boolean>\n  onValidateParentLink?: (email: string, studentId: string) => Promise<boolean>\n  isLoading?: boolean\n  error?: string | null\n  className?: string\n}\n\nconst STEPS = [\n  { id: 1, title: \"Personal Information\", description: \"Basic details and role\" },\n  { id: 2, title: \"School Information\", description: \"Validation and linking\" },\n  { id: 3, title: \"Security Setup\", description: \"Password and contacts\" }\n]\n\nconst ROLE_OPTIONS = [\n  { value: \"student\", label: \"Student\", icon: GraduationCap, description: \"Access meal ordering\" },\n  { value: \"parent\", label: \"Parent/Guardian\", icon: Users, description: \"Manage children's accounts\" },\n  { value: \"teacher\", label: \"Teacher\", icon: School, description: \"Educational staff\" },\n  { value: \"admin\", label: \"Administrator\", icon: Shield, description: \"System administration\" },\n  { value: \"kitchen\", label: \"Kitchen Staff\", icon: ChefHat, description: \"Meal preparation\" }\n]\n\nexport function MultiStepRegistrationForm({\n  onSubmit,\n  onValidateSchoolId,\n  onValidateParentLink,\n  isLoading = false,\n  error,\n  className\n}: MultiStepRegistrationFormProps) {\n  const [currentStep, setCurrentStep] = React.useState(1)\n  const [showPassword, setShowPassword] = React.useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false)\n  const [profileImage, setProfileImage] = React.useState<string | null>(null)\n  const [schoolIdValid, setSchoolIdValid] = React.useState<boolean | null>(null)\n  const [formData, setFormData] = React.useState<any>({})\n\n  // Step forms\n  const step1Form = useForm<RegistrationStep1Data>({\n    resolver: zodResolver(registrationStep1Schema),\n    defaultValues: {\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"student\"\n    }\n  })\n\n  const step2Form = useForm<RegistrationStep2Data>({\n    resolver: zodResolver(registrationStep2Schema),\n    defaultValues: {\n      schoolId: \"\",\n      classGrade: \"\",\n      parentStudentLink: \"\",\n      department: \"\",\n      employeeId: \"\"\n    }\n  })\n\n  const step3Form = useForm<RegistrationStep3Data>({\n    resolver: zodResolver(registrationStep3Schema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n      phone: \"\",\n      emergencyContact: {\n        name: \"\",\n        phone: \"\",\n        relationship: \"\"\n      },\n      termsAccepted: false,\n      privacyAccepted: false\n    }\n  })\n\n  const currentForm = currentStep === 1 ? step1Form : currentStep === 2 ? step2Form : step3Form\n  const progress = (currentStep / STEPS.length) * 100\n\n  // Watch form values\n  const watchedEmail = step1Form.watch(\"email\")\n  const watchedRole = step1Form.watch(\"role\")\n  const watchedSchoolId = step2Form.watch(\"schoolId\")\n\n  // Role detection\n  React.useEffect(() => {\n    if (watchedEmail && watchedEmail.includes(\"@hasivu.edu\")) {\n      const detectedRole = detectRoleFromEmail(watchedEmail)\n      if (detectedRole) {\n        step1Form.setValue(\"role\", detectedRole as any)\n      }\n    }\n  }, [watchedEmail, step1Form])\n\n  // School ID validation\n  React.useEffect(() => {\n    const validateSchoolId = async () => {\n      if (watchedSchoolId && watchedSchoolId.length === 9 && onValidateSchoolId) {\n        try {\n          const isValid = await onValidateSchoolId(watchedSchoolId)\n          setSchoolIdValid(isValid)\n        } catch (error) {\n          setSchoolIdValid(false)\n        }\n      } else {\n        setSchoolIdValid(null)\n      }\n    }\n\n    const debounceTimer = setTimeout(validateSchoolId, 500)\n    return () => clearTimeout(debounceTimer)\n  }, [watchedSchoolId, onValidateSchoolId])\n\n  const handleNext = async () => {\n    const isValid = await currentForm.trigger()\n    if (isValid) {\n      const currentData = currentForm.getValues()\n      setFormData(prev => ({ ...prev, ...currentData }))\n      \n      if (currentStep < STEPS.length) {\n        setCurrentStep(prev => prev + 1)\n      }\n    }\n  }\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(prev => prev - 1)\n    }\n  }\n\n  const handleFinalSubmit = async () => {\n    const isValid = await step3Form.trigger()\n    if (isValid) {\n      const finalData = {\n        ...formData,\n        ...step3Form.getValues(),\n        profileImage\n      }\n      await onSubmit(finalData)\n    }\n  }\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setProfileImage(reader.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const renderStep1 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Personal Information</h3>\n        <p className=\"text-sm text-gray-600\">Tell us about yourself</p>\n      </div>\n\n      <Form {...step1Form}>\n        <form className=\"space-y-4\">\n          <FormField\n            control={step1Form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>HASIVU School Email</FormLabel>\n                <FormControl>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      {...field}\n                      type=\"email\"\n                      placeholder=\"your.name@hasivu.edu\"\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={step1Form.control}\n              name=\"firstName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>First Name</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input {...field} placeholder=\"John\" className=\"pl-10\" />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={step1Form.control}\n              name=\"lastName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Last Name</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Doe\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={step1Form.control}\n            name=\"role\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Role</FormLabel>\n                <FormControl>\n                  <div className=\"grid grid-cols-1 gap-3\">\n                    {ROLE_OPTIONS.map((option) => {\n                      const IconComponent = option.icon\n                      return (\n                        <label\n                          key={option.value}\n                          className={`flex items-center space-x-3 p-3 border rounded-lg cursor-pointer transition-colors ${\n                            field.value === option.value\n                              ? \"border-primary-500 bg-primary-50\"\n                              : \"border-gray-200 hover:border-gray-300\"\n                          }`}\n                        >\n                          <input\n                            type=\"radio\"\n                            value={option.value}\n                            checked={field.value === option.value}\n                            onChange={field.onChange}\n                            className=\"sr-only\"\n                          />\n                          <IconComponent className=\"h-5 w-5 text-primary-600\" />\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-gray-900\">{option.label}</div>\n                            <div className=\"text-sm text-gray-500\">{option.description}</div>\n                          </div>\n                          {field.value === option.value && (\n                            <Check className=\"h-4 w-4 text-primary-600\" />\n                          )}\n                        </label>\n                      )\n                    })}\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </form>\n      </Form>\n    </div>\n  )\n\n  const renderStep2 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">School Information</h3>\n        <p className=\"text-sm text-gray-600\">Verify your school details</p>\n      </div>\n\n      <Form {...step2Form}>\n        <form className=\"space-y-4\">\n          <FormField\n            control={step2Form.control}\n            name=\"schoolId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>School ID</FormLabel>\n                <FormControl>\n                  <div className=\"relative\">\n                    <School className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      {...field}\n                      placeholder=\"HSV123456\"\n                      className=\"pl-10 pr-10\"\n                      maxLength={9}\n                    />\n                    {schoolIdValid !== null && (\n                      <div className={`absolute right-3 top-1/2 transform -translate-y-1/2 ${\n                        schoolIdValid ? \"text-green-500\" : \"text-red-500\"\n                      }`}>\n                        {schoolIdValid ? (\n                          <Check className=\"h-4 w-4\" />\n                        ) : (\n                          <AlertCircle className=\"h-4 w-4\" />\n                        )}\n                      </div>\n                    )}\n                  </div>\n                </FormControl>\n                <FormMessage />\n                {schoolIdValid === false && (\n                  <p className=\"text-sm text-red-600\">School ID not found. Please contact administration.</p>\n                )}\n              </FormItem>\n            )}\n          />\n\n          {watchedRole === \"student\" && (\n            <FormField\n              control={step2Form.control}\n              name=\"classGrade\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Class/Grade</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"e.g., Grade 10, Class A\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          )}\n\n          {watchedRole === \"parent\" && (\n            <FormField\n              control={step2Form.control}\n              name=\"parentStudentLink\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Student Email (to link)</FormLabel>\n                  <FormControl>\n                    <Input {...field} placeholder=\"student.123@hasivu.edu\" />\n                  </FormControl>\n                  <FormMessage />\n                  <p className=\"text-sm text-gray-500\">\n                    Enter your child's school email to link accounts\n                  </p>\n                </FormItem>\n              )}\n            />\n          )}\n\n          {(watchedRole === \"teacher\" || watchedRole === \"admin\") && (\n            <>\n              <FormField\n                control={step2Form.control}\n                name=\"department\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Department</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"e.g., Mathematics, Administration\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={step2Form.control}\n                name=\"employeeId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Employee ID</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"EMP001\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </>\n          )}\n        </form>\n      </Form>\n    </div>\n  )\n\n  const renderStep3 = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-center mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Security Setup</h3>\n        <p className=\"text-sm text-gray-600\">Secure your account</p>\n      </div>\n\n      <Form {...step3Form}>\n        <form className=\"space-y-4\">\n          {/* Profile Picture Upload */}\n          <div className=\"text-center\">\n            <Label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Profile Picture (Optional)\n            </Label>\n            <div className=\"flex flex-col items-center space-y-2\">\n              <Avatar className=\"w-20 h-20\">\n                <AvatarImage src={profileImage || undefined} />\n                <AvatarFallback>\n                  <Upload className=\"h-8 w-8 text-gray-400\" />\n                </AvatarFallback>\n              </Avatar>\n              <label className=\"cursor-pointer\">\n                <span className=\"text-sm text-primary-600 hover:text-primary-500\">\n                  {profileImage ? \"Change Photo\" : \"Upload Photo\"}\n                </span>\n                <input\n                  type=\"file\"\n                  className=\"hidden\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                />\n              </label>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 gap-4\">\n            <FormField\n              control={step3Form.control}\n              name=\"password\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        type={showPassword ? \"text\" : \"password\"}\n                        placeholder=\"Create secure password\"\n                        className=\"pl-10 pr-10\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowPassword(!showPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                  <p className=\"text-xs text-gray-500\">\n                    Must include uppercase, lowercase, number, and special character\n                  </p>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={step3Form.control}\n              name=\"confirmPassword\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Password</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        placeholder=\"Confirm your password\"\n                        className=\"pl-10 pr-10\"\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n                      </button>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={step3Form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone Number</FormLabel>\n                <FormControl>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      {...field}\n                      type=\"tel\"\n                      placeholder=\"+1 (555) 123-4567\"\n                      className=\"pl-10\"\n                    />\n                  </div>\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          {/* Emergency Contact */}\n          <div className=\"space-y-3\">\n            <Label className=\"text-sm font-medium text-gray-700\">Emergency Contact</Label>\n            \n            <FormField\n              control={step3Form.control}\n              name=\"emergencyContact.name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <Input {...field} placeholder=\"Emergency contact name\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <FormField\n                control={step3Form.control}\n                name=\"emergencyContact.phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Emergency phone\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={step3Form.control}\n                name=\"emergencyContact.relationship\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <Input {...field} placeholder=\"Relationship\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n          </div>\n\n          {/* Terms and Privacy */}\n          <div className=\"space-y-3\">\n            <FormField\n              control={step3Form.control}\n              name=\"termsAccepted\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                  <FormControl>\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <Label className=\"text-sm text-gray-600\">\n                      I accept the{\" \"}\n                      <a href=\"/terms\" className=\"text-primary-600 hover:underline\">\n                        Terms and Conditions\n                      </a>\n                    </Label>\n                    <FormMessage />\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={step3Form.control}\n              name=\"privacyAccepted\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                  <FormControl>\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <Label className=\"text-sm text-gray-600\">\n                      I accept the{\" \"}\n                      <a href=\"/privacy\" className=\"text-primary-600 hover:underline\">\n                        Privacy Policy\n                      </a>\n                    </Label>\n                    <FormMessage />\n                  </div>\n                </FormItem>\n              )}\n            />\n          </div>\n        </form>\n      </Form>\n    </div>\n  )\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold text-center\">\n          Join HASIVU Platform\n        </CardTitle>\n        <CardDescription className=\"text-center\">\n          Step {currentStep} of {STEPS.length}: {STEPS[currentStep - 1].title}\n        </CardDescription>\n        \n        {/* Progress Bar */}\n        <div className=\"mt-4\">\n          <Progress value={progress} className=\"h-2\" />\n          <div className=\"flex justify-between mt-2 text-xs text-gray-500\">\n            {STEPS.map((step, index) => (\n              <span key={step.id} className={`${index + 1 <= currentStep ? \"text-primary-600 font-medium\" : \"\"}`}>\n                {step.title}\n              </span>\n            ))}\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {currentStep === 1 && renderStep1()}\n        {currentStep === 2 && renderStep2()}\n        {currentStep === 3 && renderStep3()}\n\n        <div className=\"flex justify-between mt-6\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={handlePrevious}\n            disabled={currentStep === 1 || isLoading}\n          >\n            <ChevronLeft className=\"w-4 h-4 mr-2\" />\n            Previous\n          </Button>\n\n          {currentStep < STEPS.length ? (\n            <Button\n              type=\"button\"\n              onClick={handleNext}\n              disabled={isLoading}\n            >\n              Next\n              <ChevronRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          ) : (\n            <Button\n              type=\"button\"\n              onClick={handleFinalSubmit}\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Creating Account...\n                </>\n              ) : (\n                <>\n                  <UserCheck className=\"w-4 h-4 mr-2\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ProfileManagementForm.tsx",["1724","1725","1726","1727","1728","1729","1730","1731","1732","1733"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { \n  User, Phone, Upload, Shield, Bell, Utensils, CreditCard,\n  Camera, Check, X, AlertTriangle, Save, Eye, EyeOff,\n  Clock, Smartphone, Mail, Heart, Zap\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\"\nimport { Alert, AlertDescription } from \"@/components/ui/alert\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\n\nimport {\n  profileManagementSchema,\n  rfidLinkingSchema,\n  profilePreferencesSchema,\n  type ProfileManagementData,\n  type RfidLinkingData,\n  type ProfilePreferencesData,\n  DIETARY_RESTRICTIONS,\n  COMMON_ALLERGENS\n} from \"./schemas\"\n\ninterface ProfileManagementFormProps {\n  // Data handlers\n  onUpdateProfile: (data: ProfileManagementData) => Promise<void>\n  onLinkRfidCard?: (data: RfidLinkingData) => Promise<void>\n  onUploadAvatar?: (file: File) => Promise<string>\n  onValidateRfidCard?: (cardNumber: string) => Promise<boolean>\n  \n  // Initial data\n  initialData?: Partial<ProfileManagementData>\n  userRole?: \"student\" | \"parent\" | \"teacher\" | \"admin\" | \"kitchen\"\n  linkedCards?: Array<{ id: string; number: string; status: \"active\" | \"inactive\" }>\n  \n  // State\n  isLoading?: boolean\n  error?: string | null\n  success?: string | null\n  className?: string\n}\n\nconst SPICE_LEVELS = [\n  { value: \"mild\", label: \"Mild\", icon: \"🟢\" },\n  { value: \"medium\", label: \"Medium\", icon: \"🟡\" },\n  { value: \"spicy\", label: \"Spicy\", icon: \"🔴\" }\n]\n\nconst CUISINE_OPTIONS = [\n  \"Italian\", \"Chinese\", \"Indian\", \"Mexican\", \"Thai\", \"Japanese\",\n  \"Mediterranean\", \"American\", \"French\", \"Korean\", \"Middle Eastern\"\n]\n\nconst SESSION_TIMEOUT_OPTIONS = [\n  { value: \"15\", label: \"15 minutes\" },\n  { value: \"30\", label: \"30 minutes\" },\n  { value: \"60\", label: \"1 hour\" },\n  { value: \"120\", label: \"2 hours\" }\n]\n\nexport function ProfileManagementForm({\n  onUpdateProfile,\n  onLinkRfidCard,\n  onUploadAvatar,\n  onValidateRfidCard,\n  initialData,\n  userRole = \"student\",\n  linkedCards = [],\n  isLoading = false,\n  error,\n  success,\n  className\n}: ProfileManagementFormProps) {\n  const [activeTab, setActiveTab] = React.useState(\"personal\")\n  const [avatarPreview, setAvatarPreview] = React.useState<string | null>(\n    initialData?.personalInfo?.avatar || null\n  )\n  const [rfidValidationStatus, setRfidValidationStatus] = React.useState<{\n    [key: string]: boolean | null\n  }>({})\n\n  // Main profile form\n  const profileForm = useForm<ProfileManagementData>({\n    resolver: zodResolver(profileManagementSchema),\n    defaultValues: {\n      personalInfo: {\n        firstName: initialData?.personalInfo?.firstName || \"\",\n        lastName: initialData?.personalInfo?.lastName || \"\",\n        phone: initialData?.personalInfo?.phone || \"\",\n        avatar: initialData?.personalInfo?.avatar || \"\"\n      },\n      preferences: {\n        dietaryRestrictions: initialData?.preferences?.dietaryRestrictions || [],\n        allergens: initialData?.preferences?.allergens || [],\n        customDietaryNotes: initialData?.preferences?.customDietaryNotes || \"\",\n        mealPreferences: {\n          spiceLevel: initialData?.preferences?.mealPreferences?.spiceLevel || \"medium\",\n          preferredCuisine: initialData?.preferences?.mealPreferences?.preferredCuisine || [],\n          dislikedFoods: initialData?.preferences?.mealPreferences?.dislikedFoods || []\n        },\n        notificationPreferences: {\n          mealReminders: initialData?.preferences?.notificationPreferences?.mealReminders ?? true,\n          orderConfirmations: initialData?.preferences?.notificationPreferences?.orderConfirmations ?? true,\n          promotionalEmails: initialData?.preferences?.notificationPreferences?.promotionalEmails ?? false,\n          smsNotifications: initialData?.preferences?.notificationPreferences?.smsNotifications ?? true\n        }\n      },\n      securitySettings: {\n        twoFactorEnabled: initialData?.securitySettings?.twoFactorEnabled ?? false,\n        loginNotifications: initialData?.securitySettings?.loginNotifications ?? true,\n        sessionTimeout: initialData?.securitySettings?.sessionTimeout || \"30\"\n      }\n    }\n  })\n\n  // RFID card linking form\n  const rfidForm = useForm<RfidLinkingData>({\n    resolver: zodResolver(rfidLinkingSchema),\n    defaultValues: {\n      cardNumber: \"\",\n      confirmCardNumber: \"\",\n      securityPin: \"\"\n    }\n  })\n\n  const watchedRfidCard = rfidForm.watch(\"cardNumber\")\n\n  // RFID card validation\n  React.useEffect(() => {\n    const validateCard = async () => {\n      if (watchedRfidCard && watchedRfidCard.length === 8 && onValidateRfidCard) {\n        try {\n          const isValid = await onValidateRfidCard(watchedRfidCard)\n          setRfidValidationStatus(prev => ({ ...prev, [watchedRfidCard]: isValid }))\n        } catch (error) {\n          setRfidValidationStatus(prev => ({ ...prev, [watchedRfidCard]: false }))\n        }\n      }\n    }\n\n    const debounceTimer = setTimeout(validateCard, 500)\n    return () => clearTimeout(debounceTimer)\n  }, [watchedRfidCard, onValidateRfidCard])\n\n  const handleAvatarUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file && onUploadAvatar) {\n      try {\n        const avatarUrl = await onUploadAvatar(file)\n        setAvatarPreview(avatarUrl)\n        profileForm.setValue(\"personalInfo.avatar\", avatarUrl)\n      } catch (error) {\n        console.error(\"Avatar upload error:\", error)\n      }\n    } else if (file) {\n      // Local preview\n      const reader = new FileReader()\n      reader.onloadend = () => {\n        setAvatarPreview(reader.result as string)\n        profileForm.setValue(\"personalInfo.avatar\", reader.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const handleProfileSubmit = async (data: ProfileManagementData) => {\n    try {\n      await onUpdateProfile(data)\n    } catch (error) {\n      console.error(\"Profile update error:\", error)\n    }\n  }\n\n  const handleRfidSubmit = async (data: RfidLinkingData) => {\n    if (onLinkRfidCard) {\n      try {\n        await onLinkRfidCard(data)\n        rfidForm.reset()\n      } catch (error) {\n        console.error(\"RFID linking error:\", error)\n      }\n    }\n  }\n\n  const renderPersonalInfoTab = () => (\n    <div className=\"space-y-6\">\n      {/* Avatar Upload */}\n      <div className=\"flex flex-col items-center space-y-4\">\n        <Avatar className=\"w-24 h-24\">\n          <AvatarImage src={avatarPreview || undefined} />\n          <AvatarFallback>\n            <Camera className=\"h-8 w-8 text-gray-400\" />\n          </AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex flex-col items-center space-y-2\">\n          <label className=\"cursor-pointer\">\n            <span className=\"inline-flex items-center px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\">\n              <Upload className=\"h-4 w-4 mr-2\" />\n              {avatarPreview ? \"Change Photo\" : \"Upload Photo\"}\n            </span>\n            <input\n              type=\"file\"\n              className=\"hidden\"\n              accept=\"image/*\"\n              onChange={handleAvatarUpload}\n              disabled={isLoading}\n            />\n          </label>\n          <p className=\"text-xs text-gray-500\">JPG, PNG up to 2MB</p>\n        </div>\n      </div>\n\n      {/* Personal Information */}\n      <div className=\"grid grid-cols-2 gap-4\">\n        <FormField\n          control={profileForm.control}\n          name=\"personalInfo.firstName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>First Name</FormLabel>\n              <FormControl>\n                <div className=\"relative\">\n                  <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input {...field} placeholder=\"John\" className=\"pl-10\" disabled={isLoading} />\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"personalInfo.lastName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Last Name</FormLabel>\n              <FormControl>\n                <Input {...field} placeholder=\"Doe\" disabled={isLoading} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n\n      <FormField\n        control={profileForm.control}\n        name=\"personalInfo.phone\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Phone Number</FormLabel>\n            <FormControl>\n              <div className=\"relative\">\n                <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  {...field}\n                  type=\"tel\"\n                  placeholder=\"+1 (555) 123-4567\"\n                  className=\"pl-10\"\n                  disabled={isLoading}\n                />\n              </div>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n    </div>\n  )\n\n  const renderDietaryPreferencesTab = () => (\n    <div className=\"space-y-6\">\n      {/* Dietary Restrictions */}\n      <FormField\n        control={profileForm.control}\n        name=\"preferences.dietaryRestrictions\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Dietary Restrictions</FormLabel>\n            <FormDescription>\n              Select all that apply to your dietary needs\n            </FormDescription>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {DIETARY_RESTRICTIONS.map((restriction) => (\n                <div key={restriction} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`restriction-${restriction}`}\n                    checked={field.value?.includes(restriction)}\n                    onCheckedChange={(checked) => {\n                      const updatedRestrictions = checked\n                        ? [...(field.value || []), restriction]\n                        : field.value?.filter((r) => r !== restriction) || []\n                      field.onChange(updatedRestrictions)\n                    }}\n                    disabled={isLoading}\n                  />\n                  <Label\n                    htmlFor={`restriction-${restriction}`}\n                    className=\"text-sm font-normal capitalize\"\n                  >\n                    {restriction}\n                  </Label>\n                </div>\n              ))}\n            </div>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      {/* Allergens */}\n      <FormField\n        control={profileForm.control}\n        name=\"preferences.allergens\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n              Allergens & Food Sensitivities\n            </FormLabel>\n            <FormDescription>\n              Critical: Please select all allergens for safety\n            </FormDescription>\n            <div className=\"grid grid-cols-2 gap-3\">\n              {COMMON_ALLERGENS.map((allergen) => (\n                <div key={allergen} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={`allergen-${allergen}`}\n                    checked={field.value?.includes(allergen)}\n                    onCheckedChange={(checked) => {\n                      const updatedAllergens = checked\n                        ? [...(field.value || []), allergen]\n                        : field.value?.filter((a) => a !== allergen) || []\n                      field.onChange(updatedAllergens)\n                    }}\n                    disabled={isLoading}\n                  />\n                  <Label\n                    htmlFor={`allergen-${allergen}`}\n                    className=\"text-sm font-normal capitalize\"\n                  >\n                    {allergen}\n                  </Label>\n                </div>\n              ))}\n            </div>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      {/* Custom Notes */}\n      <FormField\n        control={profileForm.control}\n        name=\"preferences.customDietaryNotes\"\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>Additional Dietary Notes</FormLabel>\n            <FormControl>\n              <Textarea\n                {...field}\n                placeholder=\"Any additional dietary requirements, medical conditions, or special instructions...\"\n                className=\"min-h-[100px]\"\n                maxLength={500}\n                disabled={isLoading}\n              />\n            </FormControl>\n            <FormDescription>\n              {field.value?.length || 0}/500 characters\n            </FormDescription>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n\n      {/* Meal Preferences */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-gray-900\">Meal Preferences</h4>\n        \n        <FormField\n          control={profileForm.control}\n          name=\"preferences.mealPreferences.spiceLevel\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Spice Level Preference</FormLabel>\n              <FormControl>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {SPICE_LEVELS.map((level) => (\n                    <label\n                      key={level.value}\n                      className={`flex items-center justify-center space-x-2 p-3 border rounded-lg cursor-pointer transition-colors ${\n                        field.value === level.value\n                          ? \"border-primary-500 bg-primary-50\"\n                          : \"border-gray-200 hover:border-gray-300\"\n                      }`}\n                    >\n                      <input\n                        type=\"radio\"\n                        value={level.value}\n                        checked={field.value === level.value}\n                        onChange={field.onChange}\n                        className=\"sr-only\"\n                        disabled={isLoading}\n                      />\n                      <span className=\"text-lg\">{level.icon}</span>\n                      <span className=\"font-medium\">{level.label}</span>\n                    </label>\n                  ))}\n                </div>\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"preferences.mealPreferences.preferredCuisine\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Preferred Cuisines</FormLabel>\n              <FormDescription>Select your favorite types of cuisine</FormDescription>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {CUISINE_OPTIONS.map((cuisine) => (\n                  <div key={cuisine} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`cuisine-${cuisine}`}\n                      checked={field.value?.includes(cuisine)}\n                      onCheckedChange={(checked) => {\n                        const updatedCuisines = checked\n                          ? [...(field.value || []), cuisine]\n                          : field.value?.filter((c) => c !== cuisine) || []\n                        field.onChange(updatedCuisines)\n                      }}\n                      disabled={isLoading}\n                    />\n                    <Label\n                      htmlFor={`cuisine-${cuisine}`}\n                      className=\"text-sm font-normal\"\n                    >\n                      {cuisine}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n    </div>\n  )\n\n  const renderRfidCardTab = () => (\n    <div className=\"space-y-6\">\n      {/* Existing Cards */}\n      {linkedCards.length > 0 && (\n        <div className=\"space-y-3\">\n          <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Linked RFID Cards\n          </h4>\n          \n          {linkedCards.map((card) => (\n            <div\n              key={card.id}\n              className=\"flex items-center justify-between p-3 border rounded-lg bg-gray-50\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                <CreditCard className=\"h-5 w-5 text-gray-400\" />\n                <div>\n                  <p className=\"font-medium\">Card ****{card.number.slice(-4)}</p>\n                  <p className=\"text-sm text-gray-500\">\n                    Full number: {card.number}\n                  </p>\n                </div>\n              </div>\n              <Badge variant={card.status === \"active\" ? \"default\" : \"secondary\"}>\n                {card.status}\n              </Badge>\n            </div>\n          ))}\n          \n          <Separator className=\"my-4\" />\n        </div>\n      )}\n\n      {/* Link New Card */}\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-gray-900\">Link New RFID Card</h4>\n        \n        <Form {...rfidForm}>\n          <form onSubmit={rfidForm.handleSubmit(handleRfidSubmit)} className=\"space-y-4\">\n            <FormField\n              control={rfidForm.control}\n              name=\"cardNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>RFID Card Number</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <CreditCard className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        placeholder=\"A1B2C3D4\"\n                        className=\"pl-10 pr-10 font-mono uppercase\"\n                        maxLength={8}\n                        onChange={(e) => field.onChange(e.target.value.toUpperCase())}\n                        disabled={isLoading}\n                      />\n                      {watchedRfidCard && rfidValidationStatus[watchedRfidCard] !== null && (\n                        <div className={`absolute right-3 top-1/2 transform -translate-y-1/2 ${\n                          rfidValidationStatus[watchedRfidCard] ? \"text-green-500\" : \"text-red-500\"\n                        }`}>\n                          {rfidValidationStatus[watchedRfidCard] ? (\n                            <Check className=\"h-4 w-4\" />\n                          ) : (\n                            <X className=\"h-4 w-4\" />\n                          )}\n                        </div>\n                      )}\n                    </div>\n                  </FormControl>\n                  <FormDescription>\n                    8-character hexadecimal code found on your RFID card\n                  </FormDescription>\n                  <FormMessage />\n                  {watchedRfidCard && rfidValidationStatus[watchedRfidCard] === false && (\n                    <p className=\"text-sm text-red-600\">\n                      Card not found or already linked to another account\n                    </p>\n                  )}\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={rfidForm.control}\n              name=\"confirmCardNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Confirm Card Number</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"A1B2C3D4\"\n                      className=\"font-mono uppercase\"\n                      maxLength={8}\n                      onChange={(e) => field.onChange(e.target.value.toUpperCase())}\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={rfidForm.control}\n              name=\"securityPin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Security PIN</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"password\"\n                      placeholder=\"0000\"\n                      className=\"text-center text-lg tracking-wider\"\n                      maxLength={4}\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    4-digit PIN for card security (will be required for meal purchases)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n              {isLoading ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                  Linking Card...\n                </>\n              ) : (\n                <>\n                  <CreditCard className=\"w-4 h-4 mr-2\" />\n                  Link RFID Card\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n      </div>\n\n      <Alert>\n        <Shield className=\"h-4 w-4\" />\n        <AlertDescription>\n          Your RFID card allows quick meal purchases without entering payment details. \n          Keep your card secure and report lost cards immediately.\n        </AlertDescription>\n      </Alert>\n    </div>\n  )\n\n  const renderNotificationTab = () => (\n    <div className=\"space-y-6\">\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n          <Bell className=\"h-4 w-4\" />\n          Notification Preferences\n        </h4>\n\n        <div className=\"space-y-4\">\n          <FormField\n            control={profileForm.control}\n            name=\"preferences.notificationPreferences.mealReminders\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Meal Reminders</FormLabel>\n                  <FormDescription>\n                    Get notified about upcoming meal times and deadlines\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={isLoading}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={profileForm.control}\n            name=\"preferences.notificationPreferences.orderConfirmations\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base\">Order Confirmations</FormLabel>\n                  <FormDescription>\n                    Receive confirmation when orders are placed and ready\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={isLoading}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={profileForm.control}\n            name=\"preferences.notificationPreferences.smsNotifications\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base flex items-center gap-2\">\n                    <Smartphone className=\"h-4 w-4\" />\n                    SMS Notifications\n                  </FormLabel>\n                  <FormDescription>\n                    Receive important updates via text message\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={isLoading}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={profileForm.control}\n            name=\"preferences.notificationPreferences.promotionalEmails\"\n            render={({ field }) => (\n              <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                <div className=\"space-y-0.5\">\n                  <FormLabel className=\"text-base flex items-center gap-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    Promotional Emails\n                  </FormLabel>\n                  <FormDescription>\n                    Special offers, new menu items, and school events\n                  </FormDescription>\n                </div>\n                <FormControl>\n                  <Checkbox\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                    disabled={isLoading}\n                  />\n                </FormControl>\n              </FormItem>\n            )}\n          />\n        </div>\n      </div>\n\n      <Separator />\n\n      <div className=\"space-y-4\">\n        <h4 className=\"font-medium text-gray-900 flex items-center gap-2\">\n          <Shield className=\"h-4 w-4\" />\n          Security Settings\n        </h4>\n\n        <FormField\n          control={profileForm.control}\n          name=\"securitySettings.twoFactorEnabled\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">Two-Factor Authentication</FormLabel>\n                <FormDescription>\n                  Add an extra layer of security to your account\n                </FormDescription>\n              </div>\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                  disabled={isLoading}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"securitySettings.loginNotifications\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">Login Notifications</FormLabel>\n                <FormDescription>\n                  Get notified when someone signs into your account\n                </FormDescription>\n              </div>\n              <FormControl>\n                <Checkbox\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                  disabled={isLoading}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={profileForm.control}\n          name=\"securitySettings.sessionTimeout\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                Session Timeout\n              </FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value} disabled={isLoading}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select timeout duration\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {SESSION_TIMEOUT_OPTIONS.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                Automatically sign out after this period of inactivity\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </div>\n    </div>\n  )\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-2xl font-bold\">Profile Management</CardTitle>\n        <CardDescription>\n          Manage your personal information, dietary preferences, and security settings\n        </CardDescription>\n      </CardHeader>\n\n      <CardContent>\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {success && (\n          <Alert className=\"mb-4\">\n            <Check className=\"h-4 w-4\" />\n            <AlertDescription>{success}</AlertDescription>\n          </Alert>\n        )}\n\n        <Form {...profileForm}>\n          <form onSubmit={profileForm.handleSubmit(handleProfileSubmit)}>\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"personal\" className=\"flex items-center gap-1\">\n                  <User className=\"h-3 w-3\" />\n                  Personal\n                </TabsTrigger>\n                <TabsTrigger value=\"dietary\" className=\"flex items-center gap-1\">\n                  <Utensils className=\"h-3 w-3\" />\n                  Dietary\n                </TabsTrigger>\n                <TabsTrigger value=\"rfid\" className=\"flex items-center gap-1\">\n                  <CreditCard className=\"h-3 w-3\" />\n                  RFID Card\n                </TabsTrigger>\n                <TabsTrigger value=\"notifications\" className=\"flex items-center gap-1\">\n                  <Bell className=\"h-3 w-3\" />\n                  Settings\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"personal\" className=\"space-y-4\">\n                {renderPersonalInfoTab()}\n              </TabsContent>\n\n              <TabsContent value=\"dietary\" className=\"space-y-4\">\n                {renderDietaryPreferencesTab()}\n              </TabsContent>\n\n              <TabsContent value=\"rfid\" className=\"space-y-4\">\n                {renderRfidCardTab()}\n              </TabsContent>\n\n              <TabsContent value=\"notifications\" className=\"space-y-4\">\n                {renderNotificationTab()}\n              </TabsContent>\n            </Tabs>\n\n            <div className=\"flex justify-end space-x-3 mt-6 pt-6 border-t\">\n              <Button\n                type=\"submit\"\n                disabled={isLoading}\n                className=\"min-w-[120px]\"\n              >\n                {isLoading ? (\n                  <>\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                    Saving...\n                  </>\n                ) : (\n                  <>\n                    <Save className=\"w-4 h-4 mr-2\" />\n                    Save Changes\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/ProtectedRoute.tsx",["1734","1735"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter } from \"next/navigation\"\nimport { Loader2, Shield, AlertTriangle, Lock } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { cn } from \"@/lib/utils\"\n\nimport type { User, UserRole, Permission } from \"@/types/auth\"\nimport { ROLE_PERMISSIONS, PermissionChecker } from \"@/types/auth\"\nimport { useAuth as useAuthContext } from \"@/contexts/auth-context\"\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode\n  \n  // Authentication requirements\n  requireAuth?: boolean\n  \n  // Role-based access\n  allowedRoles?: UserRole[]\n  \n  // Permission-based access\n  requiredPermissions?: Permission[]\n  \n  // Email verification requirement\n  requireEmailVerification?: boolean\n  \n  // Redirect options\n  redirectTo?: string\n  redirectOnSuccess?: string\n  \n  // Loading and error customization\n  loadingComponent?: React.ReactNode\n  unauthorizedComponent?: React.ReactNode\n  \n  // Layout options\n  fallbackLayout?: boolean\n  \n  className?: string\n}\n\ninterface AuthContextType {\n  user: User | null\n  isLoading: boolean\n  isAuthenticated: boolean\n  checkPermission: (permission: Permission) => boolean\n  checkRole: (role: UserRole) => boolean\n}\n\n// Use the actual auth context\nconst useAuth = (): AuthContextType => {\n  const { user, isLoading, isAuthenticated } = useAuthContext()\n\n  const checkPermission = (permission: Permission): boolean => {\n    return PermissionChecker.hasPermission(user, permission)\n  }\n\n  const checkRole = (role: UserRole): boolean => {\n    return PermissionChecker.hasRole(user, role)\n  }\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    checkPermission,\n    checkRole,\n  }\n}\n\nexport function ProtectedRoute({\n  children,\n  requireAuth = true,\n  allowedRoles = [],\n  requiredPermissions = [],\n  requireEmailVerification = false,\n  redirectTo = \"/auth/login\",\n  redirectOnSuccess,\n  loadingComponent,\n  unauthorizedComponent,\n  fallbackLayout = true,\n  className\n}: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated, checkPermission, checkRole } = useAuth()\n  const router = useRouter()\n\n  // Handle redirection\n  React.useEffect(() => {\n    if (!isLoading) {\n      if (requireAuth && !isAuthenticated) {\n        const currentPath = window.location.pathname\n        const redirectPath = `${redirectTo}?redirect=${encodeURIComponent(currentPath)}`\n        router.replace(redirectPath)\n        return\n      }\n\n      if (redirectOnSuccess && isAuthenticated) {\n        router.replace(redirectOnSuccess)\n        return\n      }\n    }\n  }, [isLoading, isAuthenticated, requireAuth, redirectTo, redirectOnSuccess, router])\n\n  // Show loading state\n  if (isLoading) {\n    if (loadingComponent) {\n      return <>{loadingComponent}</>\n    }\n\n    return (\n      <LoadingScreen \n        fallbackLayout={fallbackLayout}\n        className={className}\n      />\n    )\n  }\n\n  // Check authentication\n  if (requireAuth && !isAuthenticated) {\n    return null // Redirect will handle this\n  }\n\n  // Check email verification\n  if (requireEmailVerification && user && !user.emailVerified) {\n    return (\n      <UnauthorizedScreen\n        type=\"email-verification\"\n        user={user}\n        fallbackLayout={fallbackLayout}\n        className={className}\n      />\n    )\n  }\n\n  // Check role-based access\n  if (allowedRoles.length > 0 && user) {\n    const hasAllowedRole = allowedRoles.some(role => checkRole(role))\n    if (!hasAllowedRole) {\n      if (unauthorizedComponent) {\n        return <>{unauthorizedComponent}</>\n      }\n      \n      return (\n        <UnauthorizedScreen\n          type=\"role\"\n          user={user}\n          allowedRoles={allowedRoles}\n          fallbackLayout={fallbackLayout}\n          className={className}\n        />\n      )\n    }\n  }\n\n  // Check permission-based access\n  if (requiredPermissions.length > 0 && user) {\n    const hasAllPermissions = requiredPermissions.every(permission => \n      checkPermission(permission)\n    )\n    \n    if (!hasAllPermissions) {\n      if (unauthorizedComponent) {\n        return <>{unauthorizedComponent}</>\n      }\n      \n      return (\n        <UnauthorizedScreen\n          type=\"permission\"\n          user={user}\n          requiredPermissions={requiredPermissions}\n          fallbackLayout={fallbackLayout}\n          className={className}\n        />\n      )\n    }\n  }\n\n  // All checks passed - render children\n  return <>{children}</>\n}\n\n// Loading Screen Component\ninterface LoadingScreenProps {\n  fallbackLayout?: boolean\n  className?: string\n}\n\nfunction LoadingScreen({ fallbackLayout = true, className }: LoadingScreenProps) {\n  const content = (\n    <div className=\"flex flex-col items-center justify-center space-y-4\">\n      <div className=\"w-16 h-16 bg-primary-100 rounded-full flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 text-primary-600 animate-spin\" />\n      </div>\n      <div className=\"text-center\">\n        <h3 className=\"text-lg font-medium text-gray-900\">Loading...</h3>\n        <p className=\"text-gray-600\">Please wait while we load your content</p>\n      </div>\n    </div>\n  )\n\n  if (!fallbackLayout) {\n    return <div className={className}>{content}</div>\n  }\n\n  return (\n    <div className={cn(\"min-h-screen flex items-center justify-center bg-gray-50\", className)}>\n      <Card className=\"w-full max-w-md\">\n        <CardContent className=\"pt-6\">\n          {content}\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Unauthorized Screen Component\ninterface UnauthorizedScreenProps {\n  type: \"role\" | \"permission\" | \"email-verification\"\n  user?: User | null\n  allowedRoles?: UserRole[]\n  requiredPermissions?: Permission[]\n  fallbackLayout?: boolean\n  className?: string\n}\n\nfunction UnauthorizedScreen({\n  type,\n  user,\n  allowedRoles = [],\n  requiredPermissions = [],\n  fallbackLayout = true,\n  className\n}: UnauthorizedScreenProps) {\n  const router = useRouter()\n\n  const getContent = () => {\n    switch (type) {\n      case \"email-verification\":\n        return {\n          icon: <Shield className=\"w-8 h-8 text-warning-600\" />,\n          title: \"Email Verification Required\",\n          description: \"Please verify your email address to access this page.\",\n          action: (\n            <Button \n              onClick={() => router.push(\"/auth/verify-email\")}\n              className=\"bg-primary-600 hover:bg-primary-700\"\n            >\n              Verify Email\n            </Button>\n          )\n        }\n      \n      case \"role\":\n        return {\n          icon: <Lock className=\"w-8 h-8 text-error-600\" />,\n          title: \"Access Denied\",\n          description: `This page requires ${allowedRoles.length > 1 ? 'one of the following roles' : 'the following role'}: ${allowedRoles.join(', ')}.`,\n          action: (\n            <Button \n              variant=\"outline\"\n              onClick={() => router.push(\"/dashboard\")}\n            >\n              Go to Dashboard\n            </Button>\n          )\n        }\n      \n      case \"permission\":\n        return {\n          icon: <AlertTriangle className=\"w-8 h-8 text-error-600\" />,\n          title: \"Insufficient Permissions\",\n          description: \"You don't have the required permissions to access this page.\",\n          action: (\n            <Button \n              variant=\"outline\"\n              onClick={() => router.push(\"/dashboard\")}\n            >\n              Go to Dashboard\n            </Button>\n          )\n        }\n      \n      default:\n        return {\n          icon: <Lock className=\"w-8 h-8 text-error-600\" />,\n          title: \"Access Denied\",\n          description: \"You don't have permission to access this page.\",\n          action: (\n            <Button \n              variant=\"outline\"\n              onClick={() => router.push(\"/\")}\n            >\n              Go Home\n            </Button>\n          )\n        }\n    }\n  }\n\n  const { icon, title, description, action } = getContent()\n\n  const content = (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader className=\"text-center\">\n        <div className=\"mx-auto w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n          {icon}\n        </div>\n        <CardTitle className=\"text-xl\">{title}</CardTitle>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n      \n      {user && (\n        <CardContent className=\"text-center\">\n          <div className=\"p-3 bg-gray-50 rounded-md\">\n            <p className=\"text-sm text-gray-600\">\n              Signed in as: <span className=\"font-medium\">{user.email}</span>\n            </p>\n            <p className=\"text-sm text-gray-600\">\n              Role: <span className=\"font-medium capitalize\">{user.role}</span>\n            </p>\n          </div>\n        </CardContent>\n      )}\n      \n      <CardFooter className=\"flex flex-col space-y-2\">\n        {action}\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={() => router.push(\"/auth/logout\")}\n          className=\"text-gray-600\"\n        >\n          Sign out\n        </Button>\n      </CardFooter>\n    </Card>\n  )\n\n  if (!fallbackLayout) {\n    return <div className={className}>{content}</div>\n  }\n\n  return (\n    <div className={cn(\"min-h-screen flex items-center justify-center bg-gray-50 p-4\", className)}>\n      {content}\n    </div>\n  )\n}\n\n// Higher-order component for protecting pages\nexport function withAuth<P extends object>(\n  Component: React.ComponentType<P>,\n  options: Omit<ProtectedRouteProps, 'children'> = {}\n) {\n  const WrappedComponent = (props: P) => (\n    <ProtectedRoute {...options}>\n      <Component {...props} />\n    </ProtectedRoute>\n  )\n\n  WrappedComponent.displayName = `withAuth(${Component.displayName || Component.name})`\n  \n  return WrappedComponent\n}\n\n// Hook for checking permissions in components\nexport function usePermissions() {\n  const { checkPermission, checkRole, user } = useAuth()\n  \n  return {\n    checkPermission,\n    checkRole,\n    hasRole: (role: UserRole) => checkRole(role),\n    hasPermission: (permission: Permission) => checkPermission(permission),\n    hasAnyRole: (roles: UserRole[]) => roles.some(role => checkRole(role)),\n    hasAllPermissions: (permissions: Permission[]) => \n      permissions.every(permission => checkPermission(permission)),\n    user,\n  }\n}\n\n// Utility components for conditional rendering\ninterface ConditionalRenderProps {\n  children: React.ReactNode\n  fallback?: React.ReactNode\n}\n\nexport function RequireAuth({ children, fallback = null }: ConditionalRenderProps) {\n  const { isAuthenticated } = useAuth()\n  return isAuthenticated ? <>{children}</> : <>{fallback}</>\n}\n\nexport function RequireRole({ \n  children, \n  roles, \n  fallback = null \n}: ConditionalRenderProps & { roles: UserRole[] }) {\n  const { hasAnyRole } = usePermissions()\n  return hasAnyRole(roles) ? <>{children}</> : <>{fallback}</>\n}\n\nexport function RequirePermission({ \n  children, \n  permissions, \n  fallback = null \n}: ConditionalRenderProps & { permissions: Permission[] }) {\n  const { hasAllPermissions } = usePermissions()\n  return hasAllPermissions(permissions) ? <>{children}</> : <>{fallback}</>\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/RegisterForm.tsx",["1736","1737"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Eye, EyeOff, Loader2, Mail, Lock, User, Phone, UserPlus, Building2 } from \"lucide-react\"\nimport Link from \"next/link\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\"\nimport { Separator } from \"@/components/ui/separator\"\n\nimport { registerSchema, type RegisterFormData } from \"./schemas\"\nimport type { UserRole } from \"@/types/auth\"\n\ninterface RegisterFormProps {\n  onSubmit: (data: RegisterFormData) => Promise<void>\n  onSocialLogin?: (provider: \"google\" | \"facebook\") => Promise<void>\n  isLoading?: boolean\n  error?: string | null\n  showSocialLogin?: boolean\n  availableRoles?: UserRole[]\n  className?: string\n}\n\nconst roleLabels: Record<UserRole, string> = {\n  student: \"Student\",\n  parent: \"Parent/Guardian\",\n  teacher: \"Teacher\",\n  vendor: \"Vendor/Caterer\",\n  delivery_partner: \"Delivery Partner\",\n  school_admin: \"School Administrator\",\n  admin: \"Administrator\",\n  super_admin: \"Super Administrator\"\n}\n\nexport function RegisterForm({\n  onSubmit,\n  onSocialLogin,\n  isLoading = false,\n  error,\n  showSocialLogin = true,\n  availableRoles = [\"student\", \"parent\", \"teacher\"],\n  className\n}: RegisterFormProps) {\n  const [showPassword, setShowPassword] = React.useState(false)\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false)\n\n  const form = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      role: \"student\",\n      schoolId: \"\",\n      termsAccepted: false,\n    },\n  })\n\n  const selectedRole = form.watch(\"role\")\n  const needsSchoolId = [\"student\", \"parent\", \"teacher\", \"school_admin\"].includes(selectedRole)\n\n  const handleSubmit = async (data: RegisterFormData) => {\n    try {\n      await onSubmit(data)\n    } catch (error) {\n      console.error(\"Registration error:\", error)\n    }\n  }\n\n  const handleSocialLogin = async (provider: \"google\" | \"facebook\") => {\n    if (onSocialLogin) {\n      try {\n        await onSocialLogin(provider)\n      } catch (error) {\n        console.error(`${provider} registration error:`, error)\n      }\n    }\n  }\n\n  return (\n    <Card className={className} aria-label=\"Registration form\">\n      <CardHeader className=\"space-y-1 text-center\">\n        <CardTitle className=\"text-3xl font-bold text-primary-600\">\n          Create Account\n        </CardTitle>\n        <CardDescription className=\"text-gray-600\">\n          Join HASIVU platform and start your journey\n        </CardDescription>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {error && (\n          <div \n            className=\"p-3 rounded-md bg-error-50 border border-error-200 text-error-700 text-sm\"\n            role=\"alert\"\n            aria-live=\"polite\"\n          >\n            {error}\n          </div>\n        )}\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            {/* Name Fields */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"firstName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">First Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          placeholder=\"John\"\n                          className=\"pl-10\"\n                          autoComplete=\"given-name\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"lastName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">Last Name</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          placeholder=\"Doe\"\n                          className=\"pl-10\"\n                          autoComplete=\"family-name\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Email Field */}\n            <FormField\n              control={form.control}\n              name=\"email\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-gray-700\">Email Address</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                      <Input\n                        {...field}\n                        type=\"email\"\n                        placeholder=\"you@example.com\"\n                        className=\"pl-10\"\n                        autoComplete=\"email\"\n                        disabled={isLoading}\n                      />\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Password Fields */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          type={showPassword ? \"text\" : \"password\"}\n                          placeholder=\"Create password\"\n                          className=\"pl-10 pr-10\"\n                          autoComplete=\"new-password\"\n                          disabled={isLoading}\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowPassword(!showPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                          aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n                        >\n                          {showPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"confirmPassword\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">Confirm Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          type={showConfirmPassword ? \"text\" : \"password\"}\n                          placeholder=\"Confirm password\"\n                          className=\"pl-10 pr-10\"\n                          autoComplete=\"new-password\"\n                          disabled={isLoading}\n                        />\n                        <button\n                          type=\"button\"\n                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 focus:outline-none\"\n                          aria-label={showConfirmPassword ? \"Hide password\" : \"Show password\"}\n                        >\n                          {showConfirmPassword ? (\n                            <EyeOff className=\"h-4 w-4\" />\n                          ) : (\n                            <Eye className=\"h-4 w-4\" />\n                          )}\n                        </button>\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Phone and Role */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">Phone Number (Optional)</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          type=\"tel\"\n                          placeholder=\"+91 98765 43210\"\n                          className=\"pl-10\"\n                          autoComplete=\"tel\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">Role</FormLabel>\n                    <FormControl>\n                      <select\n                        {...field}\n                        className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                        disabled={isLoading}\n                      >\n                        {availableRoles.map((role) => (\n                          <option key={role} value={role}>\n                            {roleLabels[role]}\n                          </option>\n                        ))}\n                      </select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* School ID for specific roles */}\n            {needsSchoolId && (\n              <FormField\n                control={form.control}\n                name=\"schoolId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-gray-700\">\n                      School ID {[\"student\", \"teacher\", \"school_admin\"].includes(selectedRole) ? \"(Required)\" : \"(Optional)\"}\n                    </FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Building2 className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                        <Input\n                          {...field}\n                          placeholder=\"Enter your school ID\"\n                          className=\"pl-10\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n            {/* Terms and Conditions */}\n            <FormField\n              control={form.control}\n              name=\"termsAccepted\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                  <FormControl>\n                    <input\n                      type=\"checkbox\"\n                      checked={field.value}\n                      onChange={field.onChange}\n                      className=\"mt-1 h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded\"\n                      disabled={isLoading}\n                    />\n                  </FormControl>\n                  <div className=\"space-y-1 leading-none\">\n                    <Label className=\"text-sm text-gray-600\">\n                      I agree to the{\" \"}\n                      <Link\n                        href=\"/legal/terms\"\n                        className=\"text-primary-600 hover:text-primary-500 underline\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        Terms of Service\n                      </Link>{\" \"}\n                      and{\" \"}\n                      <Link\n                        href=\"/legal/privacy\"\n                        className=\"text-primary-600 hover:text-primary-500 underline\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        Privacy Policy\n                      </Link>\n                    </Label>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              className=\"w-full bg-primary-600 hover:bg-primary-700 text-white font-medium py-2.5\"\n              disabled={isLoading}\n              size=\"lg\"\n            >\n              {isLoading ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Creating account...\n                </>\n              ) : (\n                <>\n                  <UserPlus className=\"mr-2 h-4 w-4\" />\n                  Create Account\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {showSocialLogin && (\n          <>\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 flex items-center\">\n                <Separator className=\"w-full\" />\n              </div>\n              <div className=\"relative flex justify-center text-xs uppercase\">\n                <span className=\"bg-white px-2 text-gray-500\">Or sign up with</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"google\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n                  />\n                  <path\n                    fill=\"currentColor\"\n                    d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n                  />\n                </svg>\n                Google\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={() => handleSocialLogin(\"facebook\")}\n                disabled={isLoading}\n                className=\"border-gray-300 text-gray-700 hover:bg-gray-50\"\n              >\n                <svg className=\"h-4 w-4 mr-2\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n                </svg>\n                Facebook\n              </Button>\n            </div>\n          </>\n        )}\n      </CardContent>\n\n      <CardFooter className=\"flex flex-col space-y-2 text-center text-sm text-gray-600\">\n        <p>\n          Already have an account?{\" \"}\n          <Link\n            href=\"/auth/login\"\n            className=\"text-primary-600 hover:text-primary-500 font-medium focus:outline-none focus:underline\"\n          >\n            Sign in here\n          </Link>\n        </p>\n      </CardFooter>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/SocialLoginButtons.tsx",["1738","1739"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { Loader2, Github } from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { cn } from \"@/lib/utils\"\n\ninterface SocialLoginButtonsProps {\n  onSocialLogin: (provider: \"google\" | \"facebook\" | \"github\" | \"apple\") => Promise<void>\n  isLoading?: boolean\n  disabled?: boolean\n  providers?: (\"google\" | \"facebook\" | \"github\" | \"apple\")[]\n  orientation?: \"horizontal\" | \"vertical\"\n  showSeparator?: boolean\n  separatorText?: string\n  className?: string\n}\n\nconst providerConfig = {\n  google: {\n    name: \"Google\",\n    icon: (\n      <svg className=\"h-4 w-4\" viewBox=\"0 0 24 24\">\n        <path\n          fill=\"currentColor\"\n          d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"\n        />\n        <path\n          fill=\"currentColor\"\n          d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"\n        />\n        <path\n          fill=\"currentColor\"\n          d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"\n        />\n        <path\n          fill=\"currentColor\"\n          d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"\n        />\n      </svg>\n    ),\n    bgColor: \"bg-white\",\n    textColor: \"text-gray-700\",\n    borderColor: \"border-gray-300\",\n    hoverColor: \"hover:bg-gray-50\",\n  },\n  facebook: {\n    name: \"Facebook\",\n    icon: (\n      <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\" />\n      </svg>\n    ),\n    bgColor: \"bg-[#1877F2]\",\n    textColor: \"text-white\",\n    borderColor: \"border-[#1877F2]\",\n    hoverColor: \"hover:bg-[#166FE5]\",\n  },\n  github: {\n    name: \"GitHub\",\n    icon: <Github className=\"h-4 w-4\" />,\n    bgColor: \"bg-gray-900\",\n    textColor: \"text-white\",\n    borderColor: \"border-gray-900\",\n    hoverColor: \"hover:bg-gray-800\",\n  },\n  apple: {\n    name: \"Apple\",\n    icon: (\n      <svg className=\"h-4 w-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\" />\n      </svg>\n    ),\n    bgColor: \"bg-black\",\n    textColor: \"text-white\",\n    borderColor: \"border-black\",\n    hoverColor: \"hover:bg-gray-900\",\n  },\n}\n\nexport function SocialLoginButtons({\n  onSocialLogin,\n  isLoading = false,\n  disabled = false,\n  providers = [\"google\", \"facebook\"],\n  orientation = \"horizontal\",\n  showSeparator = true,\n  separatorText = \"Or continue with\",\n  className\n}: SocialLoginButtonsProps) {\n  const [loadingProvider, setLoadingProvider] = React.useState<string | null>(null)\n\n  const handleSocialLogin = async (provider: keyof typeof providerConfig) => {\n    if (disabled || isLoading) return\n    \n    setLoadingProvider(provider)\n    try {\n      await onSocialLogin(provider)\n    } catch (error) {\n      console.error(`${provider} login error:`, error)\n    } finally {\n      setLoadingProvider(null)\n    }\n  }\n\n  const gridCols = orientation === \"horizontal\" \n    ? providers.length === 1 \n      ? \"grid-cols-1\" \n      : providers.length === 2 \n        ? \"grid-cols-2\" \n        : providers.length === 3 \n          ? \"grid-cols-3\" \n          : \"grid-cols-4\"\n    : \"grid-cols-1\"\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {showSeparator && (\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 flex items-center\">\n            <Separator className=\"w-full\" />\n          </div>\n          <div className=\"relative flex justify-center text-xs uppercase\">\n            <span className=\"bg-white px-2 text-gray-500\">{separatorText}</span>\n          </div>\n        </div>\n      )}\n\n      <div className={cn(\"grid gap-3\", gridCols)}>\n        {providers.map((provider) => {\n          const config = providerConfig[provider]\n          const isProviderLoading = loadingProvider === provider\n          \n          return (\n            <Button\n              key={provider}\n              variant=\"outline\"\n              onClick={() => handleSocialLogin(provider)}\n              disabled={disabled || isLoading || isProviderLoading}\n              className={cn(\n                \"relative\",\n                config.bgColor,\n                config.textColor,\n                config.borderColor,\n                config.hoverColor,\n                \"transition-colors duration-200\"\n              )}\n              size=\"lg\"\n            >\n              {isProviderLoading ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                <span className=\"mr-2\">{config.icon}</span>\n              )}\n              {orientation === \"vertical\" || providers.length === 1 \n                ? `Continue with ${config.name}`\n                : config.name\n              }\n            </Button>\n          )\n        })}\n      </div>\n\n      {/* Privacy notice for social logins */}\n      <div className=\"text-center\">\n        <p className=\"text-xs text-gray-500\">\n          By continuing, you agree to our{\" \"}\n          <a\n            href=\"/legal/terms\"\n            className=\"text-primary-600 hover:text-primary-500 underline\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Terms\n          </a>{\" \"}\n          and{\" \"}\n          <a\n            href=\"/legal/privacy\"\n            className=\"text-primary-600 hover:text-primary-500 underline\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Privacy Policy\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\n// Individual Social Login Button Component\ninterface SocialLoginButtonProps {\n  provider: keyof typeof providerConfig\n  onClick: () => Promise<void>\n  isLoading?: boolean\n  disabled?: boolean\n  fullWidth?: boolean\n  size?: \"sm\" | \"default\" | \"lg\"\n  className?: string\n}\n\nexport function SocialLoginButton({\n  provider,\n  onClick,\n  isLoading = false,\n  disabled = false,\n  fullWidth = false,\n  size = \"default\",\n  className\n}: SocialLoginButtonProps) {\n  const config = providerConfig[provider]\n\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={onClick}\n      disabled={disabled || isLoading}\n      size={size}\n      className={cn(\n        \"relative\",\n        config.bgColor,\n        config.textColor,\n        config.borderColor,\n        config.hoverColor,\n        \"transition-colors duration-200\",\n        fullWidth && \"w-full\",\n        className\n      )}\n    >\n      {isLoading ? (\n        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n      ) : (\n        <span className=\"mr-2\">{config.icon}</span>\n      )}\n      Continue with {config.name}\n    </Button>\n  )\n}\n\n// Social Login Grid Component for more complex layouts\ninterface SocialLoginGridProps {\n  onSocialLogin: (provider: keyof typeof providerConfig) => Promise<void>\n  isLoading?: boolean\n  disabled?: boolean\n  providers?: (keyof typeof providerConfig)[]\n  columns?: 1 | 2 | 3 | 4\n  showLabels?: boolean\n  className?: string\n}\n\nexport function SocialLoginGrid({\n  onSocialLogin,\n  isLoading = false,\n  disabled = false,\n  providers = [\"google\", \"facebook\"],\n  columns = 2,\n  showLabels = true,\n  className\n}: SocialLoginGridProps) {\n  return (\n    <div className={cn(`grid grid-cols-${columns} gap-3`, className)}>\n      {providers.map((provider) => (\n        <SocialLoginButton\n          key={provider}\n          provider={provider}\n          onClick={() => onSocialLogin(provider)}\n          isLoading={isLoading}\n          disabled={disabled}\n          fullWidth\n        />\n      ))}\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/auth/schemas.ts",["1740","1741","1742","1743","1744","1745","1746","1747","1748","1749"],[],"import { z } from 'zod';\n\n// Common validation patterns\nconst emailSchema = z.string().email('Please enter a valid email address');\nconst passwordSchema = z.string()\n  .min(8, 'Password must be at least 8 characters')\n  .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/, \n    'Password must contain uppercase, lowercase, number, and special character');\n\n// Role detection utility\nexport const detectRoleFromEmail = (email: string): string => {\n  const domain = email.split('@')[1]?.toLowerCase();\n  \n  if (!domain) return 'student';\n  \n  // School staff patterns\n  if (domain.includes('school') || domain.includes('edu') || domain.includes('admin')) {\n    if (email.includes('admin') || email.includes('principal')) return 'admin';\n    if (email.includes('teacher') || email.includes('staff')) return 'teacher';\n    if (email.includes('kitchen') || email.includes('food')) return 'kitchen';\n    return 'staff';\n  }\n  \n  // Parent patterns\n  if (email.includes('parent') || email.includes('guardian')) return 'parent';\n  \n  // Default to student for school domains, parent otherwise\n  return domain.includes('student') ? 'student' : 'parent';\n};\n\n// Enhanced login schema\nexport const enhancedLoginSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(1, 'Password is required'),\n  rememberMe: z.boolean().optional().default(false),\n  role: z.enum(['student', 'parent', 'teacher', 'kitchen', 'admin']).optional(),\n});\n\n// Original login schema for backward compatibility\nexport const loginSchema = z.object({\n  email: emailSchema,\n  password: z.string().min(8, 'Password must be at least 8 characters'),\n  rememberMe: z.boolean().optional(),\n});\n\n// Forgot password schema\nexport const forgotPasswordSchema = z.object({\n  email: emailSchema,\n  recoveryMethod: z.enum(['email', 'sms', 'security_questions']).default('email'),\n});\n\n// Security questions schema\nexport const securityQuestionsSchema = z.object({\n  question1: z.string().min(1, 'Please select a security question'),\n  answer1: z.string().min(3, 'Answer must be at least 3 characters'),\n  question2: z.string().min(1, 'Please select a second security question'),\n  answer2: z.string().min(3, 'Answer must be at least 3 characters'),\n  question3: z.string().min(1, 'Please select a third security question'),\n  answer3: z.string().min(3, 'Answer must be at least 3 characters'),\n});\n\n// Parent verification schema\nexport const parentVerificationSchema = z.object({\n  parentEmail: emailSchema,\n  studentId: z.string().min(1, 'Student ID is required'),\n  relationshipType: z.enum(['parent', 'guardian', 'emergency_contact']),\n  verificationCode: z.string().length(6, 'Verification code must be 6 digits'),\n  phoneNumber: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number'),\n});\n\n// Multi-step registration schemas\nexport const registrationStep1Schema = z.object({\n  email: emailSchema,\n  password: passwordSchema,\n  confirmPassword: z.string(),\n  role: z.enum(['student', 'parent', 'teacher', 'kitchen', 'admin']),\n  acceptTerms: z.boolean().refine(val => val === true, {\n    message: 'You must accept the terms and conditions'\n  }),\n}).refine(data => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: ['confirmPassword'],\n});\n\nexport const registrationStep2Schema = z.object({\n  firstName: z.string().min(2, 'First name must be at least 2 characters'),\n  lastName: z.string().min(2, 'Last name must be at least 2 characters'),\n  phoneNumber: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number'),\n  dateOfBirth: z.string().refine(date => {\n    const parsed = new Date(date);\n    const now = new Date();\n    return parsed <= now && parsed.getFullYear() > 1900;\n  }, 'Please enter a valid date of birth'),\n  grade: z.string().optional(),\n  studentId: z.string().optional(),\n});\n\nexport const registrationStep3Schema = z.object({\n  emergencyContactName: z.string().min(2, 'Emergency contact name is required'),\n  emergencyContactPhone: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number'),\n  emergencyContactRelation: z.string().min(1, 'Please specify relationship'),\n  medicalConditions: z.string().optional(),\n  allergies: z.array(z.string()).optional(),\n  dietaryRestrictions: z.array(z.string()).optional(),\n  notificationPreferences: z.object({\n    email: z.boolean().default(true),\n    sms: z.boolean().default(false),\n    push: z.boolean().default(true),\n  }).optional(),\n});\n\n// Original registration schema for backward compatibility\nexport const registrationSchema = z.object({\n  firstName: z.string().min(2, \"First name must be at least 2 characters\"),\n  lastName: z.string().min(2, \"Last name must be at least 2 characters\"),\n  email: emailSchema,\n  password: passwordSchema,\n  confirmPassword: z.string(),\n  grade: z.string().optional(),\n  section: z.string().optional(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Reset password schema\nexport const resetPasswordSchema = z.object({\n  token: z.string().min(1, 'Reset token is required'),\n  password: passwordSchema,\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// MFA schemas\nexport const mfaSchema = z.object({\n  code: z.string().length(6, 'Verification code must be 6 digits'),\n  trustDevice: z.boolean().optional().default(false),\n});\n\nexport const mfaSetupSchema = z.object({\n  method: z.enum(['totp', 'sms', 'email']),\n  phoneNumber: z.string().optional(),\n  backupEmail: z.string().email().optional(),\n}).refine(data => {\n  if (data.method === 'sms' && !data.phoneNumber) {\n    return false;\n  }\n  return true;\n}, {\n  message: 'Phone number is required for SMS verification',\n  path: ['phoneNumber'],\n});\n\nexport const recoveryCodesSchema = z.object({\n  codes: z.array(z.string()).min(8, 'Must have at least 8 recovery codes'),\n  acknowledged: z.boolean().refine(val => val === true, {\n    message: 'You must acknowledge that you have saved your recovery codes'\n  }),\n});\n\n// Profile management schema\nexport const profileManagementSchema = z.object({\n  firstName: z.string().min(2, 'First name must be at least 2 characters'),\n  lastName: z.string().min(2, 'Last name must be at least 2 characters'),\n  email: emailSchema,\n  phoneNumber: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number'),\n  dateOfBirth: z.string().optional(),\n  grade: z.string().optional(),\n  studentId: z.string().optional(),\n  emergencyContacts: z.array(z.object({\n    name: z.string().min(2, 'Contact name is required'),\n    phone: z.string().regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number'),\n    relation: z.string().min(1, 'Please specify relationship'),\n  })).optional(),\n  medicalInfo: z.object({\n    conditions: z.string().optional(),\n    medications: z.string().optional(),\n    allergies: z.array(z.string()).optional(),\n    dietaryRestrictions: z.array(z.string()).optional(),\n  }).optional(),\n  preferences: z.object({\n    notifications: z.object({\n      email: z.boolean().default(true),\n      sms: z.boolean().default(false),\n      push: z.boolean().default(true),\n    }).optional(),\n    language: z.string().default('en'),\n    timezone: z.string().default('UTC'),\n  }).optional(),\n});\n\n// RFID linking schema\nexport const rfidLinkingSchema = z.object({\n  rfidTag: z.string().min(8, 'RFID tag must be at least 8 characters'),\n  studentId: z.string().min(1, 'Student ID is required'),\n  verificationMethod: z.enum(['pin', 'biometric', 'admin_approval']),\n  pin: z.string().optional(),\n}).refine(data => {\n  if (data.verificationMethod === 'pin' && !data.pin) {\n    return false;\n  }\n  return true;\n}, {\n  message: 'PIN is required when using PIN verification',\n  path: ['pin'],\n});\n\n// Original RFID schema for backward compatibility\nexport const rfidSchema = z.object({\n  rfidTag: z.string().min(1, \"RFID tag is required\"),\n  studentId: z.string().optional(),\n});\n\n// Dietary restrictions and allergens constants\nexport const DIETARY_RESTRICTIONS = [\n  'Vegetarian',\n  'Vegan',\n  'Gluten-Free',\n  'Dairy-Free',\n  'Kosher',\n  'Halal',\n  'Low-Sodium',\n  'Low-Sugar',\n  'Nut-Free',\n  'Organic Only',\n] as const;\n\nexport const COMMON_ALLERGENS = [\n  'Peanuts',\n  'Tree Nuts',\n  'Milk',\n  'Eggs',\n  'Fish',\n  'Shellfish',\n  'Soy',\n  'Wheat',\n  'Sesame',\n  'Sulphites',\n] as const;\n\n// Type exports for TypeScript\nexport type EnhancedLoginFormData = z.infer<typeof enhancedLoginSchema>;\nexport type LoginFormData = z.infer<typeof loginSchema>;\nexport type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>;\nexport type SecurityQuestionsFormData = z.infer<typeof securityQuestionsSchema>;\nexport type ParentVerificationFormData = z.infer<typeof parentVerificationSchema>;\nexport type RegistrationStep1FormData = z.infer<typeof registrationStep1Schema>;\nexport type RegistrationStep2FormData = z.infer<typeof registrationStep2Schema>;\nexport type RegistrationStep3FormData = z.infer<typeof registrationStep3Schema>;\nexport type RegistrationFormData = z.infer<typeof registrationSchema>;\nexport type MfaFormData = z.infer<typeof mfaSchema>;\nexport type MfaSetupFormData = z.infer<typeof mfaSetupSchema>;\nexport type RecoveryCodesFormData = z.infer<typeof recoveryCodesSchema>;\nexport type ProfileManagementFormData = z.infer<typeof profileManagementSchema>;\nexport type RfidLinkingFormData = z.infer<typeof rfidLinkingSchema>;\nexport type RFIDFormData = z.infer<typeof rfidSchema>;\nexport type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\n// Backward compatibility aliases\nexport { registrationSchema as registerSchema };","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ComponentTest.tsx",["1750"],[],"/**\n * HASIVU Platform - Component Integration Test\n * Test file to verify all common components work together correctly\n * Can be used for development and testing purposes\n */\n\nimport React, { useState } from 'react';\nimport {\n  Box,\n  Button,\n  Stack,\n  Typography,\n  Container,\n  Paper,\n} from '@mui/material';\nimport {\n  LoadingScreen,\n  ErrorBoundary,\n  ProgressBarProvider,\n  useProgressBar,\n} from '@/components/common';\n\n/**\n * Error throwing component for testing ErrorBoundary\n */\nconst ErrorThrowingComponent: React.FC<{ shouldThrow: boolean }> = ({ shouldThrow }) => {\n  if (shouldThrow) {\n    throw new Error('Test error thrown for ErrorBoundary demonstration');\n  }\n  return (\n    <Typography color=\"success.main\">\n      ✅ No errors - ErrorBoundary is working correctly!\n    </Typography>\n  );\n};\n\n/**\n * Progress bar demonstration component\n */\nconst ProgressBarDemo: React.FC = () => {\n  const progressBar = useProgressBar();\n  \n  const handleStartProgress = () => {\n    progressBar.start(3000); // 3 second simulation\n    \n    // Simulate finishing after delay\n    setTimeout(() => {\n      progressBar.finish();\n    }, 3000);\n  };\n\n  const handleSetProgress = (value: number) => {\n    progressBar.set(value);\n  };\n\n  const handleIncrement = () => {\n    progressBar.increment(10);\n  };\n\n  return (\n    <Stack spacing={2}>\n      <Typography variant=\"h6\">Progress Bar Demo</Typography>\n      <Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">\n        <Button variant=\"contained\" onClick={handleStartProgress}>\n          Start Auto Progress\n        </Button>\n        <Button variant=\"outlined\" onClick={() => handleSetProgress(25)}>\n          Set 25%\n        </Button>\n        <Button variant=\"outlined\" onClick={() => handleSetProgress(50)}>\n          Set 50%\n        </Button>\n        <Button variant=\"outlined\" onClick={() => handleSetProgress(75)}>\n          Set 75%\n        </Button>\n        <Button variant=\"outlined\" onClick={handleIncrement}>\n          Increment +10%\n        </Button>\n        <Button color=\"success\" onClick={() => progressBar.finish()}>\n          Finish\n        </Button>\n      </Stack>\n      <Typography variant=\"body2\" color=\"text.secondary\">\n        Current progress: {Math.round(progressBar.progress)}% | \n        Visible: {progressBar.isVisible ? 'Yes' : 'No'}\n      </Typography>\n    </Stack>\n  );\n};\n\n/**\n * Main component test page\n */\nconst ComponentTest: React.FC = () => {\n  const [showLoadingScreen, setShowLoadingScreen] = useState(false);\n  const [loadingProgress, setLoadingProgress] = useState(0);\n  const [throwError, setThrowError] = useState(false);\n\n  const simulateLoading = () => {\n    setShowLoadingScreen(true);\n    setLoadingProgress(0);\n\n    const interval = setInterval(() => {\n      setLoadingProgress((prev) => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setTimeout(() => setShowLoadingScreen(false), 1000);\n          return 100;\n        }\n        return prev + 10;\n      });\n    }, 200);\n  };\n\n  const resetErrorBoundary = () => {\n    setThrowError(false);\n    // Force re-render\n    setTimeout(() => {\n      window.location.reload();\n    }, 100);\n  };\n\n  return (\n    <ProgressBarProvider>\n      <Container maxWidth=\"lg\" sx={{ py: 4 }}>\n        <Typography variant=\"h3\" gutterBottom align=\"center\">\n          HASIVU Common Components Test\n        </Typography>\n        \n        <Typography variant=\"body1\" paragraph align=\"center\" color=\"text.secondary\">\n          This page demonstrates all the common components working together.\n        </Typography>\n\n        <Stack spacing={4}>\n          {/* Loading Screen Demo */}\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h5\" gutterBottom>\n              🔄 LoadingScreen Component\n            </Typography>\n            \n            <Stack spacing={2}>\n              <Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">\n                <Button \n                  variant=\"contained\" \n                  onClick={simulateLoading}\n                  disabled={showLoadingScreen}\n                >\n                  {showLoadingScreen ? 'Loading...' : 'Test Loading Screen'}\n                </Button>\n                \n                <Button \n                  variant=\"outlined\"\n                  onClick={() => setShowLoadingScreen(!showLoadingScreen)}\n                >\n                  Toggle Loading Screen\n                </Button>\n              </Stack>\n\n              <Typography variant=\"body2\" color=\"text.secondary\">\n                Current progress: {loadingProgress}%\n              </Typography>\n            </Stack>\n\n            {/* Show loading screen when active */}\n            {showLoadingScreen && (\n              <LoadingScreen\n                variant=\"inline\"\n                message=\"Testing HASIVU loading...\"\n                progress={loadingProgress}\n                details=\"Simulating data loading process\"\n                showLogo={true}\n                size=\"large\"\n              />\n            )}\n          </Paper>\n\n          {/* Error Boundary Demo */}\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h5\" gutterBottom>\n              🛡️ ErrorBoundary Component\n            </Typography>\n            \n            <Stack spacing={2}>\n              <Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">\n                <Button \n                  variant=\"contained\" \n                  color=\"error\"\n                  onClick={() => setThrowError(true)}\n                  disabled={throwError}\n                >\n                  {throwError ? 'Error Thrown' : 'Test Error Boundary'}\n                </Button>\n                \n                <Button \n                  variant=\"outlined\"\n                  onClick={resetErrorBoundary}\n                >\n                  Reset Error State\n                </Button>\n              </Stack>\n\n              <ErrorBoundary\n                showDetails={true}\n                showRetry={true}\n                errorMessages={{\n                  title: \"Test Error Boundary\",\n                  description: \"This is a controlled error for testing purposes.\",\n                  actionText: \"Try Again\"\n                }}\n                onError={(error, errorInfo) => {\n                  console.log('ErrorBoundary caught error:', { error, errorInfo });\n                }}\n              >\n                <ErrorThrowingComponent shouldThrow={throwError} />\n              </ErrorBoundary>\n            </Stack>\n          </Paper>\n\n          {/* Progress Bar Demo */}\n          <Paper sx={{ p: 3 }}>\n            <Typography variant=\"h5\" gutterBottom>\n              📊 ProgressBar Component\n            </Typography>\n            <ProgressBarDemo />\n          </Paper>\n\n          {/* Integration Status */}\n          <Paper sx={{ p: 3, bgcolor: 'success.light' }}>\n            <Typography variant=\"h6\" gutterBottom color=\"success.dark\">\n              ✅ Integration Status\n            </Typography>\n            \n            <Typography variant=\"body1\" paragraph>\n              All HASIVU common components have been successfully integrated:\n            </Typography>\n            \n            <Box component=\"ul\" sx={{ color: 'success.dark' }}>\n              <li>LoadingScreen - ✅ Working with animations and progress tracking</li>\n              <li>ErrorBoundary - ✅ Catching errors with user-friendly fallbacks</li>\n              <li>ProgressBar - ✅ Provider context and router integration ready</li>\n              <li>TypeScript - ✅ Full type safety and IntelliSense support</li>\n              <li>Theme Integration - ✅ HASIVU brand colors and styling</li>\n              <li>Accessibility - ✅ ARIA labels and keyboard navigation</li>\n              <li>Mobile Responsive - ✅ Optimized for all screen sizes</li>\n            </Box>\n          </Paper>\n        </Stack>\n      </Container>\n    </ProgressBarProvider>\n  );\n};\n\nexport default ComponentTest;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ErrorBoundary.tsx",["1751","1752","1753","1754","1755","1756","1757","1758"],[],"/**\n * HASIVU Platform - Error Boundary Component\n * React error boundary with fallback UI, error reporting, and retry functionality\n * Generated by SuperClaude Frontend Implementation\n */\n\nimport React, { Component, ReactNode, ErrorInfo as ReactErrorInfo } from 'react';\nimport {\n  Box,\n  Typography,\n  Button,\n  Paper,\n  Container,\n  Alert,\n  AlertTitle,\n  Collapse,\n  IconButton,\n  Chip,\n  Stack,\n  useTheme,\n  Fade,\n} from '@mui/material';\nimport {\n  ErrorOutline,\n  Refresh,\n  ExpandMore,\n  ExpandLess,\n  BugReport,\n  Home,\n  ContactSupport,\n} from '@mui/icons-material';\nimport { keyframes } from '@mui/system';\n\n// Animation for error appearance\nconst errorShake = keyframes`\n  0%, 20%, 40%, 60%, 80%, 100% {\n    transform: translateX(0);\n  }\n  10%, 30%, 50%, 70%, 90% {\n    transform: translateX(-2px);\n  }\n`;\n\nconst fadeInScale = keyframes`\n  0% {\n    opacity: 0;\n    transform: scale(0.9);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n`;\n\n/**\n * Custom error information interface\n */\nexport interface CustomErrorInfo {\n  message: string;\n  stack?: string;\n  componentStack?: string;\n  timestamp: number;\n  userAgent: string;\n  url: string;\n  userId?: string;\n}\n\n/**\n * Error Boundary Props Interface\n */\nexport interface ErrorBoundaryProps {\n  /** Child components to render */\n  children: ReactNode;\n  /** Custom fallback component */\n  fallback?: React.ComponentType<ErrorFallbackProps>;\n  /** Error reporting callback */\n  onError?: (error: Error, errorInfo: CustomErrorInfo) => void;\n  /** Show detailed error information */\n  showDetails?: boolean;\n  /** Allow users to retry */\n  showRetry?: boolean;\n  /** Custom error messages */\n  errorMessages?: {\n    title?: string;\n    description?: string;\n    actionText?: string;\n  };\n  /** Isolation level - prevents error propagation */\n  isolate?: boolean;\n}\n\n/**\n * Error Boundary State Interface\n */\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ReactErrorInfo | null;\n  errorId: string;\n  retryCount: number;\n  showDetails: boolean;\n}\n\n/**\n * Error Fallback Props Interface\n */\nexport interface ErrorFallbackProps {\n  error: Error | null;\n  errorInfo: ReactErrorInfo | null;\n  errorId: string;\n  retryCount: number;\n  showDetails: boolean;\n  onRetry: () => void;\n  onToggleDetails: () => void;\n  onReportError: () => void;\n  onGoHome: () => void;\n  customMessages?: {\n    title?: string;\n    description?: string;\n    actionText?: string;\n  };\n}\n\n/**\n * Default Error Fallback Component\n */\nconst DefaultErrorFallback: React.FC<ErrorFallbackProps> = ({\n  error,\n  errorInfo,\n  errorId,\n  retryCount,\n  showDetails,\n  onRetry,\n  onToggleDetails,\n  onReportError,\n  onGoHome,\n  customMessages,\n}) => {\n  const theme = useTheme();\n\n  const errorTitle = customMessages?.title || 'Oops! Something went wrong';\n  const errorDescription = customMessages?.description || \n    \"We're sorry, but something unexpected happened. Don't worry, our team has been notified and we're working on fixing this issue.\";\n  const actionText = customMessages?.actionText || 'Try Again';\n\n  // Generate user-friendly error message\n  const getUserFriendlyMessage = (error: Error | null): string => {\n    if (!error) return 'An unknown error occurred';\n    \n    const message = error.message?.toLowerCase() || '';\n    \n    if (message.includes('network') || message.includes('fetch')) {\n      return 'Network connection issue. Please check your internet connection.';\n    }\n    if (message.includes('timeout')) {\n      return 'The request timed out. Please try again.';\n    }\n    if (message.includes('unauthorized') || message.includes('403') || message.includes('401')) {\n      return 'Authentication required. Please log in again.';\n    }\n    if (message.includes('not found') || message.includes('404')) {\n      return 'The requested resource was not found.';\n    }\n    if (message.includes('server') || message.includes('500')) {\n      return 'Server error. Please try again later.';\n    }\n    \n    return 'An unexpected error occurred. Please try again.';\n  };\n\n  const friendlyMessage = getUserFriendlyMessage(error);\n  const isNetworkError = error?.message?.toLowerCase().includes('network') || \n                        error?.message?.toLowerCase().includes('fetch');\n\n  return (\n    <Container maxWidth=\"md\" sx={{ py: 4 }}>\n      <Fade in={true} timeout={600}>\n        <Paper\n          elevation={3}\n          sx={{\n            p: { xs: 3, sm: 4, md: 6 },\n            textAlign: 'center',\n            borderRadius: 3,\n            background: `linear-gradient(135deg, ${theme.palette.error.light}15, ${theme.palette.background.paper})`,\n            border: `1px solid ${theme.palette.error.light}30`,\n            animation: `${fadeInScale} 0.6s ease-out`,\n            position: 'relative',\n            overflow: 'hidden',\n            '&::before': {\n              content: '\"\"',\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              right: 0,\n              height: 4,\n              background: `linear-gradient(90deg, ${theme.palette.error.main}, ${theme.palette.error.light})`,\n            },\n          }}\n        >\n          {/* Error Icon */}\n          <Box\n            sx={{\n              display: 'inline-flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n              width: 80,\n              height: 80,\n              borderRadius: '50%',\n              backgroundColor: `${theme.palette.error.light}20`,\n              mb: 3,\n              animation: retryCount > 0 ? `${errorShake} 0.5s ease-in-out` : undefined,\n            }}\n          >\n            <ErrorOutline\n              sx={{\n                fontSize: 40,\n                color: theme.palette.error.main,\n              }}\n            />\n          </Box>\n\n          {/* Error Title */}\n          <Typography\n            variant=\"h4\"\n            gutterBottom\n            sx={{\n              fontWeight: 600,\n              color: theme.palette.text.primary,\n              mb: 2,\n              fontSize: { xs: '1.5rem', sm: '2rem', md: '2.25rem' },\n            }}\n          >\n            {errorTitle}\n          </Typography>\n\n          {/* User-friendly Error Message */}\n          <Typography\n            variant=\"h6\"\n            sx={{\n              color: theme.palette.error.main,\n              mb: 2,\n              fontWeight: 500,\n              fontSize: { xs: '1rem', sm: '1.125rem' },\n            }}\n          >\n            {friendlyMessage}\n          </Typography>\n\n          {/* Error Description */}\n          <Typography\n            variant=\"body1\"\n            sx={{\n              color: theme.palette.text.secondary,\n              mb: 4,\n              maxWidth: 600,\n              mx: 'auto',\n              lineHeight: 1.6,\n            }}\n          >\n            {errorDescription}\n          </Typography>\n\n          {/* Error ID and Retry Count */}\n          <Stack\n            direction={{ xs: 'column', sm: 'row' }}\n            spacing={1}\n            justifyContent=\"center\"\n            sx={{ mb: 4 }}\n          >\n            <Chip\n              label={`Error ID: ${errorId}`}\n              size=\"small\"\n              variant=\"outlined\"\n              color=\"error\"\n              sx={{ fontFamily: 'monospace' }}\n            />\n            {retryCount > 0 && (\n              <Chip\n                label={`Retry attempts: ${retryCount}`}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"warning\"\n              />\n            )}\n            {isNetworkError && (\n              <Chip\n                label=\"Network Issue\"\n                size=\"small\"\n                color=\"warning\"\n                icon={<ContactSupport fontSize=\"small\" />}\n              />\n            )}\n          </Stack>\n\n          {/* Action Buttons */}\n          <Stack\n            direction={{ xs: 'column', sm: 'row' }}\n            spacing={2}\n            justifyContent=\"center\"\n            sx={{ mb: 3 }}\n          >\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              startIcon={<Refresh />}\n              onClick={onRetry}\n              disabled={retryCount >= 3}\n              sx={{\n                minWidth: 140,\n                borderRadius: 2,\n                '&:hover': {\n                  transform: 'translateY(-1px)',\n                },\n              }}\n            >\n              {retryCount >= 3 ? 'Max Retries Reached' : actionText}\n            </Button>\n\n            <Button\n              variant=\"outlined\"\n              size=\"large\"\n              startIcon={<Home />}\n              onClick={onGoHome}\n              sx={{\n                minWidth: 140,\n                borderRadius: 2,\n                '&:hover': {\n                  transform: 'translateY(-1px)',\n                },\n              }}\n            >\n              Go Home\n            </Button>\n\n            <Button\n              variant=\"text\"\n              size=\"large\"\n              startIcon={<BugReport />}\n              onClick={onReportError}\n              sx={{\n                minWidth: 140,\n                borderRadius: 2,\n              }}\n            >\n              Report Issue\n            </Button>\n          </Stack>\n\n          {/* Toggle Details Button */}\n          <Button\n            variant=\"text\"\n            size=\"small\"\n            endIcon={showDetails ? <ExpandLess /> : <ExpandMore />}\n            onClick={onToggleDetails}\n            sx={{\n              mb: 2,\n              color: theme.palette.text.secondary,\n              textTransform: 'none',\n            }}\n          >\n            {showDetails ? 'Hide' : 'Show'} Error Details\n          </Button>\n\n          {/* Error Details Collapse */}\n          <Collapse in={showDetails}>\n            <Alert\n              severity=\"error\"\n              sx={{\n                textAlign: 'left',\n                mt: 2,\n                '& .MuiAlert-message': {\n                  width: '100%',\n                },\n              }}\n            >\n              <AlertTitle>Technical Details</AlertTitle>\n              \n              <Box sx={{ mb: 2 }}>\n                <Typography variant=\"subtitle2\" gutterBottom>\n                  Error Message:\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  component=\"pre\"\n                  sx={{\n                    fontFamily: 'monospace',\n                    backgroundColor: theme.palette.grey[100],\n                    p: 1,\n                    borderRadius: 1,\n                    fontSize: '0.75rem',\n                    overflow: 'auto',\n                    maxHeight: 100,\n                  }}\n                >\n                  {error?.message || 'No error message available'}\n                </Typography>\n              </Box>\n\n              {error?.stack && (\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Stack Trace:\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    component=\"pre\"\n                    sx={{\n                      fontFamily: 'monospace',\n                      backgroundColor: theme.palette.grey[100],\n                      p: 1,\n                      borderRadius: 1,\n                      fontSize: '0.75rem',\n                      overflow: 'auto',\n                      maxHeight: 200,\n                    }}\n                  >\n                    {error.stack}\n                  </Typography>\n                </Box>\n              )}\n\n              {errorInfo?.componentStack && (\n                <Box>\n                  <Typography variant=\"subtitle2\" gutterBottom>\n                    Component Stack:\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    component=\"pre\"\n                    sx={{\n                      fontFamily: 'monospace',\n                      backgroundColor: theme.palette.grey[100],\n                      p: 1,\n                      borderRadius: 1,\n                      fontSize: '0.75rem',\n                      overflow: 'auto',\n                      maxHeight: 200,\n                    }}\n                  >\n                    {errorInfo.componentStack}\n                  </Typography>\n                </Box>\n              )}\n            </Alert>\n          </Collapse>\n\n          {/* School-friendly encouragement */}\n          <Typography\n            variant=\"caption\"\n            sx={{\n            color: theme.palette.text.disabled,\n            mt: 3,\n            display: 'block',\n            fontStyle: 'italic',\n          }}\n        >\n          🍎 Don't worry! Every great meal starts with a little preparation. We'll get this sorted out!\n        </Typography>\n        </Paper>\n      </Fade>\n    </Container>\n  );\n};\n\n/**\n * HASIVU Error Boundary Component\n * \n * Features:\n * - Catches JavaScript errors in child components\n * - Displays user-friendly error messages\n * - Provides retry functionality with limits\n * - Error reporting capabilities\n * - Mobile-responsive design\n * - Accessibility compliant\n * - School-friendly messaging\n * - Detailed error information for debugging\n */\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  private retryTimeoutId: NodeJS.Timeout | null = null;\n\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      errorId: '',\n      retryCount: 0,\n      showDetails: props.showDetails || false,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    // Generate unique error ID\n    const errorId = `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    return {\n      hasError: true,\n      error,\n      errorId,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ReactErrorInfo) {\n    // Update state with error info\n    this.setState({\n      errorInfo,\n    });\n\n    // Prepare error information for reporting\n    const errorData: CustomErrorInfo = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: Date.now(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      // userId could be retrieved from context/store\n    };\n\n    // Report error\n    if (this.props.onError) {\n      this.props.onError(error, errorData);\n    } else {\n      // Default error logging\n      console.error('ErrorBoundary caught an error:', error, errorInfo);\n      \n      // Send to error reporting service (implement your preferred service)\n      this.reportErrorToService(error, errorData);\n    }\n  }\n\n  private reportErrorToService = async (error: Error, errorData: CustomErrorInfo) => {\n    try {\n      // Implement your error reporting service here\n      // Examples: Sentry, LogRocket, Bugsnag, custom endpoint\n      \n      // For now, we'll just log to console in development\n      if (process.env.NODE_ENV === 'development') {\n        console.group('🐛 Error Report');\n        console.error('Error:', error);\n        console.info('Error Data:', errorData);\n        console.groupEnd();\n      }\n      \n      // Example API call (uncomment and modify as needed):\n      /*\n      await fetch('/api/errors', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(errorData),\n      });\n      */\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n    }\n  };\n\n  private handleRetry = () => {\n    if (this.state.retryCount >= 3) return;\n\n    this.setState(prevState => ({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      retryCount: prevState.retryCount + 1,\n      showDetails: false,\n    }));\n\n    // Clear any existing timeout\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n\n    // Set a timeout to prevent immediate re-error in case of persistent issues\n    this.retryTimeoutId = setTimeout(() => {\n      // Additional retry logic could go here\n    }, 1000);\n  };\n\n  private handleToggleDetails = () => {\n    this.setState(prevState => ({\n      showDetails: !prevState.showDetails,\n    }));\n  };\n\n  private handleReportError = () => {\n    if (this.state.error && this.state.errorInfo) {\n      const errorData: CustomErrorInfo = {\n        message: this.state.error.message,\n        stack: this.state.error.stack,\n        componentStack: this.state.errorInfo.componentStack,\n        timestamp: Date.now(),\n        userAgent: navigator.userAgent,\n        url: window.location.href,\n      };\n\n      // Open email client with error details\n      const subject = encodeURIComponent(`HASIVU Error Report - ${this.state.errorId}`);\n      const body = encodeURIComponent(\n        `Error Report for HASIVU Platform\\n\\n` +\n        `Error ID: ${this.state.errorId}\\n` +\n        `Timestamp: ${new Date().toISOString()}\\n` +\n        `URL: ${window.location.href}\\n\\n` +\n        `Error Message: ${this.state.error.message}\\n\\n` +\n        `Please describe what you were doing when this error occurred:\\n\\n` +\n        `[Please describe your actions here]\\n\\n` +\n        `Technical Details:\\n${this.state.error.stack}\\n\\n` +\n        `Component Stack:\\n${this.state.errorInfo.componentStack}`\n      );\n\n      window.open(`mailto:support@hasivu.com?subject=${subject}&body=${body}`);\n    }\n  };\n\n  private handleGoHome = () => {\n    // Reset error state and navigate to home\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      retryCount: 0,\n      showDetails: false,\n    });\n\n    // Navigate to home page\n    window.location.href = '/';\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const FallbackComponent = this.props.fallback || DefaultErrorFallback;\n      \n      return (\n        <FallbackComponent\n          error={this.state.error}\n          errorInfo={this.state.errorInfo}\n          errorId={this.state.errorId}\n          retryCount={this.state.retryCount}\n          showDetails={this.state.showDetails}\n          onRetry={this.handleRetry}\n          onToggleDetails={this.handleToggleDetails}\n          onReportError={this.handleReportError}\n          onGoHome={this.handleGoHome}\n          customMessages={this.props.errorMessages}\n        />\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/LoadingScreen.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/ProgressBar.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/common/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/ParentDashboard.tsx",["1759","1760","1761","1762","1763","1764","1765","1766","1767"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Users,\n  CreditCard,\n  ShoppingCart,\n  TrendingUp,\n  Clock,\n  MapPin,\n  Bell,\n  Star,\n  CheckCircle,\n  AlertTriangle,\n  Heart,\n  Utensils,\n  Calendar,\n  Settings,\n  Plus,\n  Eye,\n  Download,\n  Filter,\n  Search,\n  ChevronDown,\n  ArrowRight,\n  Activity,\n  Target,\n  Shield,\n  Trophy,\n  Zap\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Separator } from '@/components/ui/separator';\n\n// Enhanced TypeScript interfaces for parent dashboard\ninterface Child {\n  id: string;\n  name: string;\n  grade: string;\n  school: string;\n  avatar: string;\n  dietaryRestrictions: string[];\n  favoriteItems: string[];\n  nutritionScore: number;\n  weeklyStreak: number;\n  allergies: string[];\n  preferences: {\n    spiceLevel: 'mild' | 'medium' | 'hot';\n    cuisineType: string[];\n    mealTime: string;\n  };\n}\n\ninterface Order {\n  id: string;\n  childId: string;\n  childName: string;\n  items: OrderItem[];\n  status: 'ordered' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n  orderTime: string;\n  deliveryTime?: string;\n  totalAmount: number;\n  nutritionScore: number;\n  rfidVerified: boolean;\n  photoProof?: string;\n}\n\ninterface OrderItem {\n  id: string;\n  name: string;\n  quantity: number;\n  price: number;\n  category: string;\n  nutritionInfo: {\n    calories: number;\n    protein: number;\n    carbs: number;\n    fat: number;\n  };\n}\n\ninterface Transaction {\n  id: string;\n  type: 'payment' | 'refund' | 'topup';\n  amount: number;\n  description: string;\n  timestamp: string;\n  status: 'success' | 'pending' | 'failed';\n  fraudScore?: number;\n}\n\ninterface NutritionInsight {\n  period: string;\n  totalMeals: number;\n  averageScore: number;\n  topNutrients: string[];\n  recommendations: string[];\n}\n\n// Mock data for demonstration\nconst mockChildren: Child[] = [\n  {\n    id: '1',\n    name: 'Priya Sharma',\n    grade: '7th Grade',\n    school: 'DPS Bangalore East',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',\n    dietaryRestrictions: ['Vegetarian'],\n    favoriteItems: ['Masala Dosa', 'Sambar Rice', 'Coconut Chutney'],\n    nutritionScore: 87,\n    weeklyStreak: 5,\n    allergies: ['Nuts'],\n    preferences: {\n      spiceLevel: 'mild',\n      cuisineType: ['South Indian', 'North Indian'],\n      mealTime: '12:30 PM'\n    }\n  },\n  {\n    id: '2', \n    name: 'Arjun Sharma',\n    grade: '4th Grade',\n    school: 'DPS Bangalore East',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n    dietaryRestrictions: [],\n    favoriteItems: ['Chicken Biryani', 'Roti', 'Dal Makhani'],\n    nutritionScore: 92,\n    weeklyStreak: 7,\n    allergies: [],\n    preferences: {\n      spiceLevel: 'medium',\n      cuisineType: ['North Indian', 'Continental'],\n      mealTime: '1:00 PM'\n    }\n  }\n];\n\nconst mockOrders: Order[] = [\n  {\n    id: 'ORD-001',\n    childId: '1',\n    childName: 'Priya Sharma',\n    items: [\n      {\n        id: '1',\n        name: 'Masala Dosa with Sambar',\n        quantity: 1,\n        price: 85,\n        category: 'South Indian',\n        nutritionInfo: { calories: 320, protein: 12, carbs: 58, fat: 8 }\n      }\n    ],\n    status: 'delivered',\n    orderTime: '2024-01-15T11:30:00Z',\n    deliveryTime: '2024-01-15T12:45:00Z',\n    totalAmount: 85,\n    nutritionScore: 88,\n    rfidVerified: true,\n    photoProof: 'https://images.unsplash.com/photo-1589301760014-d929f3979dbc?w=200&h=150&fit=crop'\n  },\n  {\n    id: 'ORD-002',\n    childId: '2',\n    childName: 'Arjun Sharma',\n    items: [\n      {\n        id: '2',\n        name: 'Chicken Biryani',\n        quantity: 1,\n        price: 120,\n        category: 'North Indian',\n        nutritionInfo: { calories: 450, protein: 25, carbs: 65, fat: 15 }\n      }\n    ],\n    status: 'preparing',\n    orderTime: '2024-01-15T12:00:00Z',\n    totalAmount: 120,\n    nutritionScore: 85,\n    rfidVerified: false\n  }\n];\n\n// Multi-child selector component\nconst ChildSelector = ({ children, selectedChild, onSelect }: {\n  children: Child[];\n  selectedChild: Child | null;\n  onSelect: (child: Child) => void;\n}) => {\n  return (\n    <div className=\"flex flex-wrap gap-3 mb-6\">\n      {children.map((child) => (\n        <motion.button\n          key={child.id}\n          onClick={() => onSelect(child)}\n          className={`flex items-center space-x-3 p-4 rounded-2xl border-2 transition-all duration-200 ${\n            selectedChild?.id === child.id\n              ? 'border-hasivu-orange-500 bg-hasivu-orange-50 shadow-glow-orange'\n              : 'border-gray-200 bg-white hover:border-hasivu-orange-300 hover:bg-hasivu-orange-25'\n          }`}\n          whileHover={{ scale: 1.02 }}\n          whileTap={{ scale: 0.98 }}\n        >\n          <Avatar className=\"w-12 h-12\">\n            <AvatarImage src={child.avatar} alt={child.name} />\n            <AvatarFallback>{child.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n          </Avatar>\n          <div className=\"text-left\">\n            <div className=\"font-semibold text-gray-900\">{child.name}</div>\n            <div className=\"text-sm text-gray-500\">{child.grade}</div>\n            <div className=\"text-xs text-hasivu-green-600 font-medium\">\n              {child.weeklyStreak} day streak\n            </div>\n          </div>\n          {selectedChild?.id === child.id && (\n            <CheckCircle className=\"w-5 h-5 text-hasivu-orange-500\" />\n          )}\n        </motion.button>\n      ))}\n      \n      <motion.button\n        className=\"flex items-center justify-center p-4 rounded-2xl border-2 border-dashed border-gray-300 bg-gray-50 hover:border-hasivu-orange-300 hover:bg-hasivu-orange-25 transition-all duration-200 min-w-[120px]\"\n        whileHover={{ scale: 1.02 }}\n        whileTap={{ scale: 0.98 }}\n      >\n        <div className=\"text-center\">\n          <Plus className=\"w-6 h-6 text-gray-400 mx-auto mb-1\" />\n          <div className=\"text-sm font-medium text-gray-600\">Add Child</div>\n        </div>\n      </motion.button>\n    </div>\n  );\n};\n\n// Order status component with real-time updates\nconst OrderTracker = ({ order }: { order: Order }) => {\n  const getStatusColor = (status: Order['status']) => {\n    switch (status) {\n      case 'ordered': return 'text-blue-600 bg-blue-100';\n      case 'preparing': return 'text-yellow-600 bg-yellow-100';\n      case 'ready': return 'text-orange-600 bg-orange-100';\n      case 'delivered': return 'text-green-600 bg-green-100';\n      case 'cancelled': return 'text-red-600 bg-red-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getStatusSteps = () => {\n    const steps = [\n      { key: 'ordered', label: 'Order Placed', icon: ShoppingCart },\n      { key: 'preparing', label: 'Preparing', icon: Utensils },\n      { key: 'ready', label: 'Ready', icon: Bell },\n      { key: 'delivered', label: 'Delivered', icon: CheckCircle }\n    ];\n    \n    return steps;\n  };\n\n  return (\n    <Card className=\"hover:shadow-soft transition-shadow\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg\">{order.childName}</CardTitle>\n            <CardDescription>Order #{order.id}</CardDescription>\n          </div>\n          <Badge className={getStatusColor(order.status)}>\n            {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {/* Order Items */}\n        <div className=\"space-y-2\">\n          {order.items.map((item) => (\n            <div key={item.id} className=\"flex justify-between items-center\">\n              <div>\n                <span className=\"font-medium\">{item.name}</span>\n                <span className=\"text-sm text-gray-500 ml-2\">×{item.quantity}</span>\n              </div>\n              <span className=\"font-semibold\">Rs.{item.price}</span>\n            </div>\n          ))}\n        </div>\n        \n        <Separator />\n        \n        {/* Status Timeline */}\n        <div className=\"space-y-2\">\n          {getStatusSteps().map((step, index) => {\n            const isActive = order.status === step.key;\n            const isCompleted = ['ordered', 'preparing', 'ready', 'delivered'].indexOf(order.status) >= \n                              ['ordered', 'preparing', 'ready', 'delivered'].indexOf(step.key);\n            \n            return (\n              <div key={step.key} className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  isCompleted ? 'bg-hasivu-green-100 text-hasivu-green-600' : 'bg-gray-100 text-gray-400'\n                }`}>\n                  <step.icon className=\"w-4 h-4\" />\n                </div>\n                <span className={`text-sm ${isActive ? 'font-semibold text-hasivu-orange-600' : 'text-gray-600'}`}>\n                  {step.label}\n                </span>\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* RFID Verification */}\n        {order.rfidVerified && (\n          <div className=\"flex items-center space-x-2 p-3 bg-hasivu-green-50 rounded-lg border border-hasivu-green-200\">\n            <Shield className=\"w-4 h-4 text-hasivu-green-600\" />\n            <span className=\"text-sm font-medium text-hasivu-green-700\">RFID Verified</span>\n            {order.photoProof && (\n              <Button variant=\"outline\" size=\"sm\" className=\"ml-auto\">\n                <Eye className=\"w-3 h-3 mr-1\" />\n                Photo\n              </Button>\n            )}\n          </div>\n        )}\n        \n        {/* Nutrition Score */}\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Nutrition Score</span>\n          <div className=\"flex items-center space-x-2\">\n            <Progress value={order.nutritionScore} className=\"w-16 h-2\" />\n            <span className=\"text-sm font-semibold text-hasivu-green-600\">{order.nutritionScore}%</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Nutrition insights component with gamification\nconst NutritionInsights = ({ child }: { child: Child }) => {\n  const weeklyData = [\n    { day: 'Mon', score: 85, meals: 1 },\n    { day: 'Tue', score: 90, meals: 1 },\n    { day: 'Wed', score: 88, meals: 1 },\n    { day: 'Thu', score: 92, meals: 1 },\n    { day: 'Fri', score: 87, meals: 1 },\n    { day: 'Sat', score: 0, meals: 0 },\n    { day: 'Sun', score: 0, meals: 0 }\n  ];\n  \n  const achievements = [\n    { id: 1, name: 'Healthy Week', description: '5 days of balanced meals', icon: Trophy, unlocked: true },\n    { id: 2, name: 'Protein Power', description: 'Met protein goals 3 days in a row', icon: Target, unlocked: true },\n    { id: 3, name: 'Variety Explorer', description: 'Tried 3 new dishes this week', icon: Star, unlocked: false }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Weekly Streak */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Activity className=\"w-5 h-5 mr-2 text-hasivu-orange-500\" />\n            Weekly Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <div className=\"text-2xl font-bold text-hasivu-green-600\">{child.weeklyStreak}</div>\n              <div className=\"text-sm text-gray-600\">Day Streak</div>\n            </div>\n            <div className=\"flex space-x-1\">\n              {weeklyData.map((day, index) => (\n                <div key={index} className=\"text-center\">\n                  <div className=\"text-xs text-gray-500 mb-1\">{day.day}</div>\n                  <div className={`w-8 h-8 rounded-full flex items-center justify-center text-xs font-semibold ${\n                    day.meals > 0 ? 'bg-hasivu-green-500 text-white' : 'bg-gray-200 text-gray-400'\n                  }`}>\n                    {day.score || '-'}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          <Progress value={(child.weeklyStreak / 7) * 100} className=\"h-2\" />\n        </CardContent>\n      </Card>\n\n      {/* Achievements */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Trophy className=\"w-5 h-5 mr-2 text-yellow-500\" />\n            Achievements\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {achievements.map((achievement) => (\n              <div key={achievement.id} className={`flex items-center space-x-3 p-3 rounded-lg transition-all ${\n                achievement.unlocked \n                  ? 'bg-hasivu-green-50 border border-hasivu-green-200' \n                  : 'bg-gray-50 border border-gray-200 opacity-60'\n              }`}>\n                <achievement.icon className={`w-6 h-6 ${\n                  achievement.unlocked ? 'text-hasivu-green-600' : 'text-gray-400'\n                }`} />\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{achievement.name}</div>\n                  <div className=\"text-sm text-gray-600\">{achievement.description}</div>\n                </div>\n                {achievement.unlocked && (\n                  <CheckCircle className=\"w-5 h-5 text-hasivu-green-600\" />\n                )}\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Nutritional Preferences */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Dietary Profile</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Dietary Restrictions</label>\n            <div className=\"flex flex-wrap gap-2 mt-1\">\n              {child.dietaryRestrictions.length > 0 ? child.dietaryRestrictions.map((restriction) => (\n                <Badge key={restriction} variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                  {restriction}\n                </Badge>\n              )) : (\n                <span className=\"text-sm text-gray-500\">None</span>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Allergies</label>\n            <div className=\"flex flex-wrap gap-2 mt-1\">\n              {child.allergies.length > 0 ? child.allergies.map((allergy) => (\n                <Badge key={allergy} variant=\"destructive\" className=\"bg-red-100 text-red-800\">\n                  {allergy}\n                </Badge>\n              )) : (\n                <span className=\"text-sm text-gray-500\">None reported</span>\n              )}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Preferred Cuisines</label>\n            <div className=\"flex flex-wrap gap-2 mt-1\">\n              {child.preferences.cuisineType.map((cuisine) => (\n                <Badge key={cuisine} className=\"bg-hasivu-orange-100 text-hasivu-orange-800\">\n                  {cuisine}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          \n          <div>\n            <label className=\"text-sm font-medium text-gray-700\">Spice Preference</label>\n            <Badge className=\"ml-2 bg-yellow-100 text-yellow-800\">\n              {child.preferences.spiceLevel.charAt(0).toUpperCase() + child.preferences.spiceLevel.slice(1)}\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Main dashboard component\nexport const ParentDashboard: React.FC = () => {\n  const [selectedChild, setSelectedChild] = useState<Child | null>(mockChildren[0]);\n  const [activeTab, setActiveTab] = useState('overview');\n  const [orders] = useState<Order[]>(mockOrders);\n\n  const todaysOrders = orders.filter(order => {\n    const orderDate = new Date(order.orderTime).toDateString();\n    const today = new Date().toDateString();\n    return orderDate === today;\n  });\n\n  const childOrders = selectedChild \n    ? orders.filter(order => order.childId === selectedChild.id)\n    : [];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white shadow-sm border-b\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Parent Dashboard</h1>\n              <p className=\"text-gray-600\">Manage your children's meal plans and nutrition</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" className=\"flex items-center\">\n                <Download className=\"w-4 h-4 mr-2\" />\n                Export Data\n              </Button>\n              <Button className=\"flex items-center bg-hasivu-orange-600 hover:bg-hasivu-orange-700\">\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Quick Order\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Child Selection */}\n        <ChildSelector \n          children={mockChildren}\n          selectedChild={selectedChild}\n          onSelect={setSelectedChild}\n        />\n\n        {/* Dashboard Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"orders\">Orders & Tracking</TabsTrigger>\n            <TabsTrigger value=\"nutrition\">Nutrition & Goals</TabsTrigger>\n            <TabsTrigger value=\"payments\">Payments & Wallet</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {selectedChild && (\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Quick Stats */}\n                <div className=\"lg:col-span-2 space-y-6\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"flex items-center\">\n                          <div className=\"p-2 bg-hasivu-green-100 rounded-full\">\n                            <Utensils className=\"w-6 h-6 text-hasivu-green-600\" />\n                          </div>\n                          <div className=\"ml-4\">\n                            <p className=\"text-2xl font-bold\">{todaysOrders.length}</p>\n                            <p className=\"text-gray-600\">Today's Orders</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"flex items-center\">\n                          <div className=\"p-2 bg-hasivu-orange-100 rounded-full\">\n                            <Star className=\"w-6 h-6 text-hasivu-orange-600\" />\n                          </div>\n                          <div className=\"ml-4\">\n                            <p className=\"text-2xl font-bold\">{selectedChild.nutritionScore}%</p>\n                            <p className=\"text-gray-600\">Nutrition Score</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                    \n                    <Card>\n                      <CardContent className=\"pt-6\">\n                        <div className=\"flex items-center\">\n                          <div className=\"p-2 bg-hasivu-blue-100 rounded-full\">\n                            <Trophy className=\"w-6 h-6 text-hasivu-blue-600\" />\n                          </div>\n                          <div className=\"ml-4\">\n                            <p className=\"text-2xl font-bold\">{selectedChild.weeklyStreak}</p>\n                            <p className=\"text-gray-600\">Day Streak</p>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n\n                  {/* Recent Orders */}\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex justify-between items-center\">\n                        <CardTitle>Recent Orders</CardTitle>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          View All <ArrowRight className=\"w-4 h-4 ml-1\" />\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {childOrders.slice(0, 3).map((order) => (\n                          <OrderTracker key={order.id} order={order} />\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Nutrition Insights Sidebar */}\n                <div>\n                  <NutritionInsights child={selectedChild} />\n                </div>\n              </div>\n            )}\n          </TabsContent>\n\n          {/* Orders & Tracking Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Orders & Tracking</h2>\n                <p className=\"text-gray-600\">Monitor all meal orders and delivery status</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Select defaultValue=\"all\">\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue placeholder=\"Filter orders\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Orders</SelectItem>\n                    <SelectItem value=\"today\">Today</SelectItem>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Select defaultValue=\"all-status\">\n                  <SelectTrigger className=\"w-40\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all-status\">All Status</SelectItem>\n                    <SelectItem value=\"ordered\">Ordered</SelectItem>\n                    <SelectItem value=\"preparing\">Preparing</SelectItem>\n                    <SelectItem value=\"ready\">Ready</SelectItem>\n                    <SelectItem value=\"delivered\">Delivered</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button className=\"bg-hasivu-orange-600 hover:bg-hasivu-orange-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  New Order\n                </Button>\n              </div>\n            </div>\n\n            {/* Order Statistics */}\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-blue-100 rounded-full\">\n                      <ShoppingCart className=\"w-5 h-5 text-blue-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">24</p>\n                      <p className=\"text-sm text-gray-600\">Total Orders</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-yellow-100 rounded-full\">\n                      <Clock className=\"w-5 h-5 text-yellow-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">3</p>\n                      <p className=\"text-sm text-gray-600\">In Progress</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-green-100 rounded-full\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">21</p>\n                      <p className=\"text-sm text-gray-600\">Completed</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-center\">\n                    <div className=\"p-2 bg-purple-100 rounded-full\">\n                      <TrendingUp className=\"w-5 h-5 text-purple-600\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-2xl font-bold\">Rs.2,340</p>\n                      <p className=\"text-sm text-gray-600\">Total Spent</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Orders List */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  Recent Orders\n                  <div className=\"flex items-center space-x-2\">\n                    <Input \n                      placeholder=\"Search orders...\" \n                      className=\"w-64\"\n                      prefix={<Search className=\"w-4 h-4\" />}\n                    />\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {orders.map((order) => (\n                    <OrderTracker key={order.id} order={order} />\n                  ))}\n                  \n                  {/* Enhanced Order Cards */}\n                  <div className=\"grid gap-4\">\n                    {[\n                      {\n                        id: 'ORD-003',\n                        childName: 'Priya Sharma',\n                        items: [{ name: 'Paneer Butter Masala with Rice', quantity: 1, price: 95 }],\n                        status: 'ready' as const,\n                        orderTime: '2024-01-15T12:15:00Z',\n                        estimatedDelivery: '12:45 PM',\n                        nutritionScore: 91,\n                        specialInstructions: 'Less spicy, extra rice'\n                      },\n                      {\n                        id: 'ORD-004', \n                        childName: 'Arjun Sharma',\n                        items: [{ name: 'Chicken Fried Rice', quantity: 1, price: 110 }],\n                        status: 'ordered' as const,\n                        orderTime: '2024-01-15T12:20:00Z',\n                        estimatedDelivery: '1:15 PM',\n                        nutritionScore: 88,\n                        specialInstructions: 'No vegetables'\n                      }\n                    ].map((order) => (\n                      <Card key={order.id} className=\"border-l-4 border-l-hasivu-orange-500 hover:shadow-lg transition-shadow\">\n                        <CardContent className=\"pt-6\">\n                          <div className=\"flex justify-between items-start\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <div className=\"flex items-center space-x-3\">\n                                  <Avatar className=\"w-8 h-8\">\n                                    <AvatarFallback>{order.childName.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n                                  </Avatar>\n                                  <div>\n                                    <h4 className=\"font-semibold\">{order.childName}</h4>\n                                    <p className=\"text-sm text-gray-600\">Order #{order.id}</p>\n                                  </div>\n                                </div>\n                                <Badge className={`${\n                                  order.status === 'ready' ? 'bg-orange-100 text-orange-800' :\n                                  order.status === 'ordered' ? 'bg-blue-100 text-blue-800' :\n                                  'bg-gray-100 text-gray-800'\n                                }`}>\n                                  {order.status === 'ready' ? 'Ready for Pickup' : order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                                </Badge>\n                              </div>\n                              \n                              <div className=\"space-y-2 mb-4\">\n                                {order.items.map((item, idx) => (\n                                  <div key={idx} className=\"flex justify-between items-center\">\n                                    <span className=\"font-medium\">{item.name}</span>\n                                    <span className=\"text-gray-600\">Rs.{item.price}</span>\n                                  </div>\n                                ))}\n                              </div>\n                              \n                              <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\n                                <span>Ordered: {new Date(order.orderTime).toLocaleTimeString()}</span>\n                                <span className=\"flex items-center\">\n                                  <Clock className=\"w-4 h-4 mr-1\" />\n                                  ETA: {order.estimatedDelivery}\n                                </span>\n                              </div>\n                              \n                              {order.specialInstructions && (\n                                <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3 mb-3\">\n                                  <p className=\"text-sm text-amber-800\">\n                                    <strong>Special Instructions:</strong> {order.specialInstructions}\n                                  </p>\n                                </div>\n                              )}\n                              \n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <span className=\"text-sm text-gray-600\">Nutrition Score:</span>\n                                  <Progress value={order.nutritionScore} className=\"w-20 h-2\" />\n                                  <span className=\"text-sm font-semibold text-hasivu-green-600\">{order.nutritionScore}%</span>\n                                </div>\n                                \n                                <div className=\"flex items-center space-x-2\">\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <MapPin className=\"w-4 h-4 mr-1\" />\n                                    Track\n                                  </Button>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Bell className=\"w-4 h-4 mr-1\" />\n                                    Notify\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"nutrition\" className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Nutrition & Goals</h2>\n                <p className=\"text-gray-600\">AI-powered nutrition insights and personalized goals</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Select defaultValue=\"week\">\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"week\">This Week</SelectItem>\n                    <SelectItem value=\"month\">This Month</SelectItem>\n                    <SelectItem value=\"quarter\">3 Months</SelectItem>\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n\n            {selectedChild && (() => {\n              const weeklyData = [\n                { day: 'Mon', score: 85, meals: 1 },\n                { day: 'Tue', score: 90, meals: 1 },\n                { day: 'Wed', score: 88, meals: 1 },\n                { day: 'Thu', score: 92, meals: 1 },\n                { day: 'Fri', score: 87, meals: 1 },\n                { day: 'Sat', score: 0, meals: 0 },\n                { day: 'Sun', score: 0, meals: 0 }\n              ];\n              \n              return (\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  {/* Main Nutrition Analytics */}\n                  <div className=\"lg:col-span-2 space-y-6\">\n                    {/* Nutrition Score Trends */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <TrendingUp className=\"w-5 h-5 mr-2 text-hasivu-green-600\" />\n                          Nutrition Score Trends\n                        </CardTitle>\n                        <CardDescription>Weekly nutrition performance for {selectedChild.name}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"h-64 flex items-end justify-between space-x-2\">\n                          {weeklyData.map((day, index) => {\n                          const height = day.meals > 0 ? (day.score / 100) * 200 : 0;\n                          return (\n                            <div key={index} className=\"flex flex-col items-center flex-1\">\n                              <div className=\"w-full bg-gray-200 rounded-t-lg relative overflow-hidden\" style={{ height: '200px' }}>\n                                <motion.div \n                                  className={`absolute bottom-0 w-full rounded-t-lg ${\n                                    day.score >= 90 ? 'bg-gradient-to-t from-green-500 to-green-400' :\n                                    day.score >= 80 ? 'bg-gradient-to-t from-yellow-500 to-yellow-400' :\n                                    day.score >= 70 ? 'bg-gradient-to-t from-orange-500 to-orange-400' :\n                                    day.meals > 0 ? 'bg-gradient-to-t from-red-500 to-red-400' : ''\n                                  }`}\n                                  initial={{ height: 0 }}\n                                  animate={{ height: `${height}px` }}\n                                  transition={{ delay: index * 0.1, duration: 0.5 }}\n                                />\n                              </div>\n                              <div className=\"text-center mt-2\">\n                                <div className=\"text-xs text-gray-500\">{day.day}</div>\n                                <div className=\"text-sm font-semibold\">{day.score || '-'}</div>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Nutritional Breakdown */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Weekly Nutritional Breakdown</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        {[\n                          { label: 'Protein', value: 24, unit: 'g', target: 30, color: 'bg-red-500' },\n                          { label: 'Carbs', value: 180, unit: 'g', target: 200, color: 'bg-blue-500' },\n                          { label: 'Fat', value: 45, unit: 'g', target: 50, color: 'bg-yellow-500' },\n                          { label: 'Fiber', value: 18, unit: 'g', target: 25, color: 'bg-green-500' }\n                        ].map((nutrient) => (\n                          <div key={nutrient.label} className=\"text-center\">\n                            <div className=\"relative w-20 h-20 mx-auto mb-2\">\n                              <svg className=\"w-20 h-20 transform -rotate-90\">\n                                <circle \n                                  cx=\"40\" cy=\"40\" r=\"36\" \n                                  stroke=\"currentColor\" \n                                  strokeWidth=\"4\" \n                                  fill=\"none\" \n                                  className=\"text-gray-200\" \n                                />\n                                <circle \n                                  cx=\"40\" cy=\"40\" r=\"36\" \n                                  stroke=\"currentColor\" \n                                  strokeWidth=\"4\" \n                                  fill=\"none\" \n                                  strokeDasharray={`${2 * Math.PI * 36}`} \n                                  strokeDashoffset={`${2 * Math.PI * 36 * (1 - nutrient.value / nutrient.target)}`}\n                                  className={nutrient.color.replace('bg-', 'text-')}\n                                />\n                              </svg>\n                              <div className=\"absolute inset-0 flex items-center justify-center\">\n                                <span className=\"text-sm font-bold\">{Math.round((nutrient.value / nutrient.target) * 100)}%</span>\n                              </div>\n                            </div>\n                            <div className=\"font-medium\">{nutrient.label}</div>\n                            <div className=\"text-sm text-gray-600\">{nutrient.value}{nutrient.unit} / {nutrient.target}{nutrient.unit}</div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* AI Recommendations */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Zap className=\"w-5 h-5 mr-2 text-purple-600\" />\n                        AI Nutrition Recommendations\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {[\n                          {\n                            type: 'success',\n                            icon: CheckCircle,\n                            title: 'Great Protein Intake!',\n                            description: 'Priya is meeting her protein goals consistently. Keep including dal and paneer.',\n                            color: 'text-green-600 bg-green-50 border-green-200'\n                          },\n                          {\n                            type: 'warning',\n                            icon: AlertTriangle,\n                            title: 'Increase Fiber Intake',\n                            description: 'Consider adding more vegetables and fruits. Try mixed vegetable curry or fresh fruit sides.',\n                            color: 'text-amber-600 bg-amber-50 border-amber-200'\n                          },\n                          {\n                            type: 'info',\n                            icon: Target,\n                            title: 'Balanced Meal Suggestion',\n                            description: 'Tomorrow, try: Rajma Rice + Mixed Veg + Curd + Apple for optimal nutrition balance.',\n                            color: 'text-blue-600 bg-blue-50 border-blue-200'\n                          }\n                        ].map((rec, index) => {\n                          const IconComponent = rec.icon;\n                          return (\n                            <div key={index} className={`flex items-start space-x-3 p-4 rounded-lg border ${rec.color}`}>\n                              <IconComponent className=\"w-5 h-5 mt-0.5 flex-shrink-0\" />\n                              <div>\n                                <h4 className=\"font-semibold mb-1\">{rec.title}</h4>\n                                <p className=\"text-sm opacity-90\">{rec.description}</p>\n                              </div>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Sidebar - Goals & Achievements */}\n                <div className=\"space-y-6\">\n                  {/* Weekly Goals */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Weekly Goals</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {[\n                        { label: 'Healthy Meals', current: 5, target: 7, icon: Utensils },\n                        { label: 'Nutrition Score', current: 87, target: 90, icon: Star },\n                        { label: 'Variety Score', current: 8, target: 10, icon: Heart }\n                      ].map((goal, index) => {\n                        const IconComponent = goal.icon;\n                        const progress = (goal.current / goal.target) * 100;\n                        return (\n                          <div key={index} className=\"space-y-2\">\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center space-x-2\">\n                                <IconComponent className=\"w-4 h-4 text-hasivu-orange-600\" />\n                                <span className=\"font-medium text-sm\">{goal.label}</span>\n                              </div>\n                              <span className=\"text-sm text-gray-600\">{goal.current}/{goal.target}</span>\n                            </div>\n                            <Progress value={progress} className=\"h-2\" />\n                          </div>\n                        );\n                      })}\n                    </CardContent>\n                  </Card>\n\n                  {/* Recent Achievements */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg flex items-center\">\n                        <Trophy className=\"w-5 h-5 mr-2 text-yellow-500\" />\n                        Recent Achievements\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {[\n                          {\n                            title: 'Protein Champion',\n                            description: 'Met protein goals 5 days straight!',\n                            date: '2 days ago',\n                            icon: '🏆'\n                          },\n                          {\n                            title: 'Variety Explorer', \n                            description: 'Tried 3 new healthy dishes',\n                            date: '1 week ago', \n                            icon: '🌟'\n                          },\n                          {\n                            title: 'Consistent Eater',\n                            description: 'No missed meals this week',\n                            date: '3 days ago',\n                            icon: '💪'\n                          }\n                        ].map((achievement, index) => (\n                          <div key={index} className=\"flex items-start space-x-3 p-3 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                            <div className=\"text-2xl\">{achievement.icon}</div>\n                            <div className=\"flex-1\">\n                              <h4 className=\"font-semibold text-sm\">{achievement.title}</h4>\n                              <p className=\"text-xs text-gray-600 mb-1\">{achievement.description}</p>\n                              <p className=\"text-xs text-gray-500\">{achievement.date}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  {/* Health Insights */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"text-lg\">Health Insights</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"p-3 bg-green-50 border border-green-200 rounded-lg\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Heart className=\"w-4 h-4 text-green-600\" />\n                          <span className=\"font-medium text-sm text-green-800\">Overall Health</span>\n                        </div>\n                        <p className=\"text-xs text-green-700\">Excellent nutrition balance. Keep up the good work!</p>\n                      </div>\n                      \n                      <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <Activity className=\"w-4 h-4 text-blue-600\" />\n                          <span className=\"font-medium text-sm text-blue-800\">Growth Tracking</span>\n                        </div>\n                        <p className=\"text-xs text-blue-700\">Nutrition supporting healthy growth patterns</p>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n              );\n            })()}\n          </TabsContent>\n\n          <TabsContent value=\"payments\" className=\"space-y-6\">\n            <div className=\"flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-6\">\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-900\">Payments & Wallet</h2>\n                <p className=\"text-gray-600\">Manage payments, wallet balance, and security</p>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Button variant=\"outline\">\n                  <Download className=\"w-4 h-4 mr-2\" />\n                  Transaction History\n                </Button>\n                <Button className=\"bg-hasivu-green-600 hover:bg-hasivu-green-700\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add Money\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Main Payment Section */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Wallet Overview */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <CreditCard className=\"w-5 h-5 mr-2 text-hasivu-blue-600\" />\n                      Wallet Overview\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"bg-gradient-to-r from-hasivu-green-500 to-hasivu-blue-500 text-white p-6 rounded-2xl\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p className=\"text-hasivu-green-100 text-sm\">Available Balance</p>\n                            <p className=\"text-2xl font-bold\">Rs.1,250</p>\n                          </div>\n                          <CreditCard className=\"w-8 h-8 text-hasivu-green-100\" />\n                        </div>\n                        <div className=\"mt-4 flex items-center justify-between\">\n                          <span className=\"text-xs text-hasivu-green-100\">Wallet ID: WAL-2024-001</span>\n                          <Button size=\"sm\" variant=\"secondary\" className=\"bg-white/20 hover:bg-white/30 text-white border-0\">\n                            Top Up\n                          </Button>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"text-center p-4 border-2 border-dashed border-gray-300 rounded-lg\">\n                          <TrendingUp className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-gray-600\">Monthly Spending</p>\n                          <p className=\"text-xl font-bold text-gray-900\">Rs.3,240</p>\n                          <p className=\"text-xs text-green-600\">↓ 12% from last month</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        <div className=\"text-center p-4 border-2 border-dashed border-gray-300 rounded-lg\">\n                          <Shield className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                          <p className=\"text-sm text-gray-600\">Fraud Protection</p>\n                          <p className=\"text-xl font-bold text-green-600\">Active</p>\n                          <p className=\"text-xs text-gray-500\">99.7% accuracy</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recent Transactions */}\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex justify-between items-center\">\n                      <CardTitle>Recent Transactions</CardTitle>\n                      <div className=\"flex items-center space-x-2\">\n                        <Select defaultValue=\"all\">\n                          <SelectTrigger className=\"w-32\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"all\">All Types</SelectItem>\n                            <SelectItem value=\"payment\">Payments</SelectItem>\n                            <SelectItem value=\"refund\">Refunds</SelectItem>\n                            <SelectItem value=\"topup\">Top-ups</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {[\n                        {\n                          id: 'TXN-001',\n                          type: 'payment' as const,\n                          description: 'Lunch - Masala Dosa & Sambar',\n                          amount: -85,\n                          status: 'success' as const,\n                          timestamp: '2024-01-15T12:45:00Z',\n                          child: 'Priya Sharma',\n                          fraudScore: 0.1\n                        },\n                        {\n                          id: 'TXN-002',\n                          type: 'payment' as const,\n                          description: 'Lunch - Chicken Biryani',\n                          amount: -120,\n                          status: 'success' as const,\n                          timestamp: '2024-01-15T13:00:00Z',\n                          child: 'Arjun Sharma',\n                          fraudScore: 0.05\n                        },\n                        {\n                          id: 'TXN-003',\n                          type: 'topup' as const,\n                          description: 'Wallet Top-up via UPI',\n                          amount: 1000,\n                          status: 'success' as const,\n                          timestamp: '2024-01-14T10:30:00Z',\n                          child: '',\n                          fraudScore: 0\n                        },\n                        {\n                          id: 'TXN-004',\n                          type: 'refund' as const,\n                          description: 'Cancelled Order Refund',\n                          amount: 95,\n                          status: 'pending' as const,\n                          timestamp: '2024-01-14T16:20:00Z',\n                          child: 'Priya Sharma',\n                          fraudScore: 0\n                        }\n                      ].map((transaction) => (\n                        <div key={transaction.id} className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div className={`p-2 rounded-full ${\n                              transaction.type === 'payment' ? 'bg-red-100' :\n                              transaction.type === 'topup' ? 'bg-green-100' :\n                              transaction.type === 'refund' ? 'bg-blue-100' : 'bg-gray-100'\n                            }`}>\n                              {transaction.type === 'payment' && <ArrowRight className=\"w-4 h-4 text-red-600 rotate-90\" />}\n                              {transaction.type === 'topup' && <ArrowRight className=\"w-4 h-4 text-green-600 -rotate-90\" />}\n                              {transaction.type === 'refund' && <ArrowRight className=\"w-4 h-4 text-blue-600 -rotate-90\" />}\n                            </div>\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center space-x-2\">\n                                <h4 className=\"font-medium\">{transaction.description}</h4>\n                                {transaction.fraudScore > 0.5 && (\n                                  <Badge variant=\"destructive\" className=\"text-xs\">\n                                    <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                    Flagged\n                                  </Badge>\n                                )}\n                              </div>\n                              <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                                <span>#{transaction.id}</span>\n                                {transaction.child && <span>{transaction.child}</span>}\n                                <span>{new Date(transaction.timestamp).toLocaleString()}</span>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className={`font-semibold ${\n                              transaction.amount > 0 ? 'text-green-600' : 'text-red-600'\n                            }`}>\n                              {transaction.amount > 0 ? '+' : ''}Rs.{Math.abs(transaction.amount)}\n                            </div>\n                            <Badge className={`text-xs ${\n                              transaction.status === 'success' ? 'bg-green-100 text-green-800' :\n                              transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-red-100 text-red-800'\n                            }`}>\n                              {transaction.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Fraud Detection Dashboard */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Shield className=\"w-5 h-5 mr-2 text-purple-600\" />\n                      AI Fraud Detection\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                      <div className=\"text-center p-4 bg-green-50 border border-green-200 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-green-600\">99.7%</div>\n                        <div className=\"text-sm text-green-700\">Detection Accuracy</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-blue-600\">Rs.15,420</div>\n                        <div className=\"text-sm text-blue-700\">Protected This Year</div>\n                      </div>\n                      <div className=\"text-center p-4 bg-orange-50 border border-orange-200 rounded-lg\">\n                        <div className=\"text-2xl font-bold text-orange-600\">0</div>\n                        <div className=\"text-sm text-orange-700\">Suspicious Activities</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                        <div>\n                          <h4 className=\"font-semibold text-green-800\">All Systems Protected</h4>\n                          <p className=\"text-sm text-green-700\">Your account is fully secured with real-time fraud monitoring</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Sidebar - Quick Actions & Settings */}\n              <div className=\"space-y-6\">\n                {/* Quick Actions */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Quick Actions</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Plus className=\"w-4 h-4 mr-2\" />\n                      Add Payment Method\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Settings className=\"w-4 h-4 mr-2\" />\n                      Auto-reload Settings\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download Statements\n                    </Button>\n                    <Button className=\"w-full justify-start\" variant=\"outline\">\n                      <Bell className=\"w-4 h-4 mr-2\" />\n                      Notification Settings\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Payment Methods */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Saved Payment Methods</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    {[\n                      { type: 'UPI', details: 'parent@upi', primary: true },\n                      { type: 'Card', details: '**** **** **** 1234', primary: false },\n                      { type: 'Net Banking', details: 'SBI ****5678', primary: false }\n                    ].map((method, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"p-2 bg-blue-100 rounded\">\n                            <CreditCard className=\"w-4 h-4 text-blue-600\" />\n                          </div>\n                          <div>\n                            <div className=\"font-medium text-sm\">{method.type}</div>\n                            <div className=\"text-xs text-gray-600\">{method.details}</div>\n                          </div>\n                        </div>\n                        {method.primary && (\n                          <Badge className=\"bg-hasivu-orange-100 text-hasivu-orange-800 text-xs\">\n                            Primary\n                          </Badge>\n                        )}\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n\n                {/* Security Settings */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Security Settings</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Two-Factor Auth</div>\n                        <div className=\"text-xs text-gray-600\">SMS verification for transactions</div>\n                      </div>\n                      <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Transaction Limits</div>\n                        <div className=\"text-xs text-gray-600\">Rs.500 per transaction</div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">Edit</Button>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"font-medium text-sm\">Auto-reload</div>\n                        <div className=\"text-xs text-gray-600\">When balance &lt; Rs. 100</div>\n                      </div>\n                      <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default ParentDashboard;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/admin-dashboard.tsx",["1768","1769","1770","1771","1772"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Table, TableBody, TableCell, TableHead, TableHeader, TableRow \n} from \"@/components/ui/table\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart\n} from 'recharts';\nimport { \n  Users, DollarSign, TrendingUp, ChefHat, AlertCircle,\n  CheckCircle2, Clock, Filter, Download, School\n} from 'lucide-react';\nimport { cn, formatCurrency, formatDate } from '@/lib/utils';\nimport { MealOrder, Student, SchoolAnalytics, NutritionalInfo } from './types';\n\ninterface AdminDashboardProps {\n  className?: string;\n}\n\n// Mock data - replace with actual data fetching\nconst mockSchoolAnalytics: SchoolAnalytics = {\n  totalStudents: 1250,\n  totalOrders: 3450,\n  totalRevenue: 156750,\n  averageOrderValue: 45.5,\n  popularMeals: [\n    { name: 'Vegetable Biryani', orders: 450, revenue: 20250 },\n    { name: 'Dal Rice Bowl', orders: 380, revenue: 15200 },\n    { name: 'Healthy Breakfast Bowl', orders: 320, revenue: 11200 },\n    { name: 'Fruit Salad', orders: 280, revenue: 8400 },\n    { name: 'Sandwich Combo', orders: 250, revenue: 10000 },\n  ],\n  nutritionCompliance: 92,\n  wasteReduction: 15\n};\n\nconst mockRecentOrders: (MealOrder & { \n  checked?: boolean; \n  estimatedTime?: string;\n  kitchenNotes?: string;\n})[] = [\n  {\n    id: '1',\n    studentId: 'student-1',\n    studentName: 'Arjun Sharma',\n    class: '8A',\n    section: 'A',\n    mealType: 'lunch',\n    items: [\n      { \n        id: '1', \n        name: 'Vegetable Biryani', \n        category: 'main', \n        price: 45, \n        quantity: 1, \n        nutritionalInfo: { calories: 420, protein: 12, carbs: 65, fat: 15, fiber: 6, sodium: 650, sugar: 8 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'pending',\n    orderDate: '2024-01-12',\n    totalAmount: 45,\n    priority: 'high',\n    checked: false,\n    estimatedTime: '15 min',\n    kitchenNotes: 'Extra vegetables requested'\n  },\n  {\n    id: '2',\n    studentId: 'student-2',\n    studentName: 'Priya Singh',\n    class: '7B',\n    section: 'B',\n    mealType: 'lunch',\n    items: [\n      { \n        id: '2', \n        name: 'Dal Rice Bowl', \n        category: 'main', \n        price: 40, \n        quantity: 1, \n        nutritionalInfo: { calories: 380, protein: 14, carbs: 60, fat: 12, fiber: 8, sodium: 580, sugar: 5 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'preparing',\n    orderDate: '2024-01-12',\n    totalAmount: 40,\n    priority: 'medium',\n    checked: false,\n    estimatedTime: '10 min'\n  },\n  {\n    id: '3',\n    studentId: 'student-3',\n    studentName: 'Raj Patel',\n    class: '9A',\n    section: 'A',\n    mealType: 'snack',\n    items: [\n      { \n        id: '3', \n        name: 'Fruit Salad', \n        category: 'dessert', \n        price: 30, \n        quantity: 2, \n        nutritionalInfo: { calories: 120, protein: 2, carbs: 25, fat: 1, fiber: 4, sodium: 10, sugar: 20 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'ready',\n    orderDate: '2024-01-12',\n    totalAmount: 60,\n    priority: 'low',\n    checked: false\n  },\n  {\n    id: '4',\n    studentId: 'student-4',\n    studentName: 'Ananya Kumar',\n    class: '6C',\n    section: 'C',\n    mealType: 'breakfast',\n    items: [\n      { \n        id: '4', \n        name: 'Healthy Breakfast Bowl', \n        category: 'main', \n        price: 35, \n        quantity: 1, \n        nutritionalInfo: { calories: 320, protein: 15, carbs: 45, fat: 10, fiber: 8, sodium: 400, sugar: 12 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'completed',\n    orderDate: '2024-01-12',\n    totalAmount: 35,\n    priority: 'medium',\n    checked: true\n  }\n];\n\nconst mockRevenueData = [\n  { month: 'Jul', revenue: 125000, orders: 2800 },\n  { month: 'Aug', revenue: 132000, orders: 2950 },\n  { month: 'Sep', revenue: 145000, orders: 3200 },\n  { month: 'Oct', revenue: 138000, orders: 3100 },\n  { month: 'Nov', revenue: 152000, orders: 3350 },\n  { month: 'Dec', revenue: 156750, orders: 3450 }\n];\n\nconst mockNutritionReports = [\n  {\n    class: '6th Grade',\n    students: 180,\n    averageCalories: 1650,\n    proteinGoal: 88,\n    nutritionScore: 85,\n    compliance: 92\n  },\n  {\n    class: '7th Grade',\n    students: 200,\n    averageCalories: 1720,\n    proteinGoal: 90,\n    nutritionScore: 89,\n    compliance: 94\n  },\n  {\n    class: '8th Grade',\n    students: 190,\n    averageCalories: 1800,\n    proteinGoal: 95,\n    nutritionScore: 91,\n    compliance: 96\n  },\n  {\n    class: '9th Grade',\n    students: 220,\n    averageCalories: 1900,\n    proteinGoal: 98,\n    nutritionScore: 87,\n    compliance: 89\n  },\n  {\n    class: '10th Grade',\n    students: 210,\n    averageCalories: 1950,\n    proteinGoal: 100,\n    nutritionScore: 93,\n    compliance: 95\n  }\n];\n\nconst mockOperationalMetrics = {\n  kitchenEfficiency: 94,\n  orderFulfillmentTime: 12.5, // minutes\n  customerSatisfaction: 4.6, // out of 5\n  wasteReduction: 15, // percentage\n  energyConsumption: 85, // percentage of optimal\n};\n\nconst COLORS = {\n  primary: '#4CAF50',\n  secondary: '#9C27B0',\n  accent: '#FF9800',\n  success: '#4CAF50',\n  warning: '#FFC107',\n  error: '#F44336',\n  info: '#2196F3'\n};\n\nexport function AdminDashboard({ className }: AdminDashboardProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [orders, setOrders] = useState(mockRecentOrders);\n\n  useEffect(() => {\n    // Simulate data loading\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const handleOrderSelect = (orderId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedOrders([...selectedOrders, orderId]);\n    } else {\n      setSelectedOrders(selectedOrders.filter(id => id !== orderId));\n    }\n    \n    setOrders(orders.map(order => \n      order.id === orderId ? { ...order, checked } : order\n    ));\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    const visibleOrderIds = orders.filter(order => order.status !== 'completed').map(order => order.id);\n    setSelectedOrders(checked ? visibleOrderIds : []);\n    setOrders(orders.map(order => ({ ...order, checked: checked && order.status !== 'completed' })));\n  };\n\n  const revenueGrowth = mockRevenueData.length > 1 ? \n    ((mockRevenueData[mockRevenueData.length - 1].revenue - mockRevenueData[mockRevenueData.length - 2].revenue) / \n     mockRevenueData[mockRevenueData.length - 2].revenue * 100) : 0;\n\n  const popularMealsData = mockSchoolAnalytics.popularMeals.map((meal, index) => ({\n    ...meal,\n    fill: `hsl(${120 + index * 60}, 70%, 50%)`\n  }));\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-6 w-16\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary-500 to-primary-600 rounded-lg p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Admin Dashboard</h1>\n            <p className=\"text-primary-100 mt-1\">School Meal Program Management</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-right\">\n              <p className=\"text-sm text-primary-100\">This Month</p>\n              <p className=\"text-2xl font-bold\">{formatCurrency(mockSchoolAnalytics.totalRevenue)}</p>\n            </div>\n            <School className=\"h-8 w-8 text-primary-200\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Students</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockSchoolAnalytics.totalStudents.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Active in meal program\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Monthly Revenue</CardTitle>\n            <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrency(mockSchoolAnalytics.totalRevenue)}\n            </div>\n            <p className={cn(\n              \"text-xs\",\n              revenueGrowth >= 0 ? \"text-success-600\" : \"text-error-600\"\n            )}>\n              {revenueGrowth >= 0 ? '+' : ''}{revenueGrowth.toFixed(1)}% from last month\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Total Orders</CardTitle>\n            <ChefHat className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockSchoolAnalytics.totalOrders.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Avg {formatCurrency(mockSchoolAnalytics.averageOrderValue)} per order\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Nutrition Compliance</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success-600\">\n              {mockSchoolAnalytics.nutritionCompliance}%\n            </div>\n            <Progress \n              value={mockSchoolAnalytics.nutritionCompliance} \n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"orders\">Order Management</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          <TabsTrigger value=\"nutrition\">Nutrition Reports</TabsTrigger>\n          <TabsTrigger value=\"operations\">Operations</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Revenue Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Revenue Trend</CardTitle>\n                <CardDescription>Monthly revenue and order volume</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={mockRevenueData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value, name) => [\n                        name === 'revenue' ? formatCurrency(Number(value)) : value,\n                        name === 'revenue' ? 'Revenue' : 'Orders'\n                      ]}\n                    />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"revenue\" \n                      stroke={COLORS.primary} \n                      fill={COLORS.primary} \n                      fillOpacity={0.6}\n                      name=\"revenue\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Popular Meals */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Popular Meals</CardTitle>\n                <CardDescription>Top 5 most ordered items this month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={popularMealsData} layout=\"horizontal\">\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis type=\"number\" />\n                    <YAxis dataKey=\"name\" type=\"category\" width={100} />\n                    <Tooltip formatter={(value) => [value, 'Orders']} />\n                    <Bar dataKey=\"orders\" fill={COLORS.primary} />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Kitchen Efficiency</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"text-2xl font-bold text-success-600\">\n                    {mockOperationalMetrics.kitchenEfficiency}%\n                  </div>\n                  <CheckCircle2 className=\"h-5 w-5 text-success-500\" />\n                </div>\n                <Progress value={mockOperationalMetrics.kitchenEfficiency} className=\"mt-2\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Avg Fulfillment Time</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-info-600\">\n                  {mockOperationalMetrics.orderFulfillmentTime} min\n                </div>\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Target: &lt; 15 min\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Customer Satisfaction</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-warning-600\">\n                  {mockOperationalMetrics.customerSatisfaction}/5\n                </div>\n                <div className=\"flex text-warning-500 mt-1\">\n                  {'★'.repeat(Math.floor(mockOperationalMetrics.customerSatisfaction))}\n                  {'☆'.repeat(5 - Math.floor(mockOperationalMetrics.customerSatisfaction))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Waste Reduction</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold text-success-600\">\n                  {mockOperationalMetrics.wasteReduction}%\n                </div>\n                <p className=\"text-xs text-success-600 mt-1\">\n                  vs last month\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Order Management</span>\n                <div className=\"flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    {selectedOrders.length} selected\n                  </span>\n                </div>\n              </CardTitle>\n              <CardDescription>\n                Manage and track meal orders across the school\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">\n                        <Checkbox\n                          checked={selectedOrders.length === orders.filter(o => o.status !== 'completed').length}\n                          onCheckedChange={handleSelectAll}\n                        />\n                      </TableHead>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Meal</TableHead>\n                      <TableHead>Items</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Time</TableHead>\n                      <TableHead>Amount</TableHead>\n                      <TableHead>Priority</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {orders.map((order) => (\n                      <TableRow key={order.id}>\n                        <TableCell>\n                          <Checkbox\n                            checked={order.checked || false}\n                            onCheckedChange={(checked) => handleOrderSelect(order.id, !!checked)}\n                            disabled={order.status === 'completed'}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          {order.studentName}\n                        </TableCell>\n                        <TableCell>{order.class}</TableCell>\n                        <TableCell className=\"capitalize\">{order.mealType}</TableCell>\n                        <TableCell>\n                          <div className=\"max-w-32 truncate\">\n                            {order.items.map(item => item.name).join(', ')}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className={cn(\n                            \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                            order.status === 'pending' && \"bg-info-100 text-info-800\",\n                            order.status === 'preparing' && \"bg-warning-100 text-warning-800\",\n                            order.status === 'ready' && \"bg-success-100 text-success-800\",\n                            order.status === 'completed' && \"bg-gray-100 text-gray-800\"\n                          )}>\n                            {order.status === 'pending' && <Clock className=\"w-3 h-3 mr-1\" />}\n                            {order.status === 'preparing' && <ChefHat className=\"w-3 h-3 mr-1\" />}\n                            {order.status === 'ready' && <CheckCircle2 className=\"w-3 h-3 mr-1\" />}\n                            <span className=\"capitalize\">{order.status}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {order.estimatedTime || formatDate(new Date(order.orderDate), 'short')}\n                        </TableCell>\n                        <TableCell>{formatCurrency(order.totalAmount)}</TableCell>\n                        <TableCell>\n                          <div className={cn(\n                            \"inline-flex items-center px-2 py-1 rounded text-xs font-medium\",\n                            order.priority === 'high' && \"bg-error-100 text-error-700\",\n                            order.priority === 'medium' && \"bg-warning-100 text-warning-700\",\n                            order.priority === 'low' && \"bg-success-100 text-success-700\"\n                          )}>\n                            {order.priority === 'high' && <AlertCircle className=\"w-3 h-3 mr-1\" />}\n                            <span className=\"capitalize\">{order.priority}</span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n              \n              {selectedOrders.length > 0 && (\n                <div className=\"flex items-center justify-between mt-4 p-3 bg-blue-50 rounded-lg\">\n                  <span className=\"text-sm text-blue-800\">\n                    {selectedOrders.length} orders selected\n                  </span>\n                  <div className=\"flex gap-2\">\n                    <button className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700\">\n                      Mark as Preparing\n                    </button>\n                    <button className=\"px-3 py-1 bg-success-600 text-white rounded text-sm hover:bg-success-700\">\n                      Mark as Ready\n                    </button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Volume by Time</CardTitle>\n                <CardDescription>Peak hours and meal distribution</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={[\n                    { time: '7:00', breakfast: 45, lunch: 0, snack: 0 },\n                    { time: '8:00', breakfast: 120, lunch: 0, snack: 0 },\n                    { time: '9:00', breakfast: 80, lunch: 0, snack: 15 },\n                    { time: '10:00', breakfast: 20, lunch: 0, snack: 45 },\n                    { time: '11:00', breakfast: 5, lunch: 30, snack: 25 },\n                    { time: '12:00', breakfast: 0, lunch: 200, snack: 10 },\n                    { time: '13:00', breakfast: 0, lunch: 350, snack: 5 },\n                    { time: '14:00', breakfast: 0, lunch: 180, snack: 20 },\n                    { time: '15:00', breakfast: 0, lunch: 45, snack: 60 },\n                    { time: '16:00', breakfast: 0, lunch: 10, snack: 80 }\n                  ]}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"time\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"breakfast\" stroke={COLORS.warning} name=\"Breakfast\" />\n                    <Line type=\"monotone\" dataKey=\"lunch\" stroke={COLORS.primary} name=\"Lunch\" />\n                    <Line type=\"monotone\" dataKey=\"snack\" stroke={COLORS.info} name=\"Snack\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Financial Summary</CardTitle>\n                <CardDescription>Revenue breakdown and trends</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-primary-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-primary-600\">\n                      {formatCurrency(mockSchoolAnalytics.totalRevenue)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Total Revenue</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-info-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-info-600\">\n                      {formatCurrency(mockSchoolAnalytics.averageOrderValue)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Avg Order Value</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Lunch Orders</span>\n                    <span className=\"text-sm font-medium\">65%</span>\n                  </div>\n                  <Progress value={65} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Breakfast Orders</span>\n                    <span className=\"text-sm font-medium\">25%</span>\n                  </div>\n                  <Progress value={25} className=\"h-2\" />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Snack Orders</span>\n                    <span className=\"text-sm font-medium\">10%</span>\n                  </div>\n                  <Progress value={10} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"nutrition\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Nutrition Reports by Grade</CardTitle>\n              <CardDescription>Student nutrition compliance and health metrics</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Class</TableHead>\n                      <TableHead>Students</TableHead>\n                      <TableHead>Avg Daily Calories</TableHead>\n                      <TableHead>Protein Goal %</TableHead>\n                      <TableHead>Nutrition Score</TableHead>\n                      <TableHead>Compliance</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {mockNutritionReports.map((report) => (\n                      <TableRow key={report.class}>\n                        <TableCell className=\"font-medium\">{report.class}</TableCell>\n                        <TableCell>{report.students}</TableCell>\n                        <TableCell>{report.averageCalories} cal</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Progress value={report.proteinGoal} className=\"flex-1\" />\n                            <span className=\"text-sm\">{report.proteinGoal}%</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className={cn(\n                            \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                            report.nutritionScore >= 90 && \"bg-success-100 text-success-800\",\n                            report.nutritionScore >= 80 && report.nutritionScore < 90 && \"bg-warning-100 text-warning-800\",\n                            report.nutritionScore < 80 && \"bg-error-100 text-error-800\"\n                          )}>\n                            {report.nutritionScore}/100\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Progress value={report.compliance} className=\"flex-1\" />\n                            <span className={cn(\n                              \"text-sm font-medium\",\n                              report.compliance >= 95 && \"text-success-600\",\n                              report.compliance >= 85 && report.compliance < 95 && \"text-warning-600\",\n                              report.compliance < 85 && \"text-error-600\"\n                            )}>\n                              {report.compliance}%\n                            </span>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"operations\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Kitchen Operations</CardTitle>\n                <CardDescription>Real-time kitchen performance metrics</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Kitchen Efficiency</span>\n                    <span className=\"text-sm text-success-600 font-bold\">\n                      {mockOperationalMetrics.kitchenEfficiency}%\n                    </span>\n                  </div>\n                  <Progress value={mockOperationalMetrics.kitchenEfficiency} />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Energy Consumption</span>\n                    <span className=\"text-sm text-info-600 font-bold\">\n                      {mockOperationalMetrics.energyConsumption}%\n                    </span>\n                  </div>\n                  <Progress value={mockOperationalMetrics.energyConsumption} />\n                  \n                  <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                      <p className=\"text-lg font-bold text-blue-600\">\n                        {mockOperationalMetrics.orderFulfillmentTime}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">Avg. Time (min)</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                      <p className=\"text-lg font-bold text-green-600\">\n                        {mockOperationalMetrics.wasteReduction}%\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">Waste Reduction</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Export Reports</CardTitle>\n                <CardDescription>Download detailed reports and analytics</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <button className=\"w-full flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                  <div className=\"flex items-center gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">Daily Orders Report</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">CSV</span>\n                </button>\n                \n                <button className=\"w-full flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                  <div className=\"flex items-center gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">Nutrition Analysis</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">PDF</span>\n                </button>\n                \n                <button className=\"w-full flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                  <div className=\"flex items-center gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">Financial Summary</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">XLSX</span>\n                </button>\n                \n                <button className=\"w-full flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\">\n                  <div className=\"flex items-center gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">Student Reports</span>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">PDF</span>\n                </button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/advanced-features.tsx",["1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785","1786","1787","1788","1789","1790"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig } from \"@/components/ui/chart\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, ComposedChart,\n  RadialBarChart, RadialBar, ScatterChart, Scatter\n} from 'recharts';\nimport { \n  Zap, TrendingUp, Users, Clock, MapPin, CheckCircle2, \n  AlertTriangle, Wifi, Radio, Eye, Activity, Target,\n  ThermometerSun, Droplets, Wind, Sun, Smartphone,\n  CreditCard, Scan, UserCheck, Package, Truck\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface AdvancedFeaturesProps {\n  className?: string;\n}\n\n// Advanced analytics data for demonstration\nconst mockAdvancedAnalytics = {\n  realTimeMetrics: {\n    currentLoad: 78,\n    peakCapacity: 95,\n    efficiency: 89,\n    lastUpdate: new Date(),\n    trends: [\n      { time: '08:00', load: 45, efficiency: 85, orders: 23 },\n      { time: '09:00', load: 62, efficiency: 88, orders: 45 },\n      { time: '10:00', load: 58, efficiency: 87, orders: 38 },\n      { time: '11:00', load: 78, efficiency: 89, orders: 67 },\n      { time: '12:00', load: 95, efficiency: 85, orders: 89 },\n      { time: '13:00', load: 82, efficiency: 91, orders: 72 },\n      { time: '14:00', load: 56, efficiency: 88, orders: 41 }\n    ]\n  },\n  \n  smartPredictions: {\n    nextPeakTime: '12:45 PM',\n    expectedOrders: 95,\n    confidenceLevel: 87,\n    recommendedActions: [\n      { action: 'Add 2 kitchen staff', priority: 'high', impact: '+15% efficiency' },\n      { action: 'Pre-prepare popular items', priority: 'medium', impact: '-3min wait time' },\n      { action: 'Open secondary counter', priority: 'low', impact: '+10% capacity' }\n    ]\n  },\n\n  paymentAnalytics: {\n    methods: [\n      { name: 'RFID Card', value: 65, amount: 49200, transactions: 1240 },\n      { name: 'UPI', value: 25, amount: 18900, transactions: 475 },\n      { name: 'Cash', value: 8, amount: 6080, transactions: 152 },\n      { name: 'Prepaid', value: 2, amount: 1520, transactions: 38 }\n    ],\n    fraudDetection: {\n      suspicious: 3,\n      blocked: 1,\n      investigated: 7\n    }\n  },\n\n  deviceHealth: [\n    { \n      id: 'RFID-001', \n      name: 'Main Counter Scanner', \n      status: 'active', \n      batteryLevel: 87, \n      signalStrength: 95,\n      lastPing: '2 seconds ago',\n      dailyScans: 1247,\n      errorRate: 0.2\n    },\n    { \n      id: 'RFID-002', \n      name: 'Secondary Scanner', \n      status: 'active', \n      batteryLevel: 92, \n      signalStrength: 88,\n      lastPing: '5 seconds ago',\n      dailyScans: 892,\n      errorRate: 0.1\n    },\n    { \n      id: 'POS-001', \n      name: 'Main Payment Terminal', \n      status: 'active', \n      batteryLevel: 76, \n      signalStrength: 92,\n      lastPing: '1 second ago',\n      dailyScans: 567,\n      errorRate: 0.3\n    },\n    { \n      id: 'RFID-003', \n      name: 'Mobile Cart Scanner', \n      status: 'warning', \n      batteryLevel: 45, \n      signalStrength: 72,\n      lastPing: '2 minutes ago',\n      dailyScans: 234,\n      errorRate: 1.2\n    }\n  ],\n\n  environmentalData: {\n    temperature: 28,\n    humidity: 65,\n    airQuality: 'Good',\n    crowdDensity: 'Moderate',\n    noiseLevel: 52, // dB\n    impact: {\n      orderFrequency: '+12%',\n      avgOrderValue: '+₹8',\n      waitTime: '+1.2min'\n    }\n  }\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\nexport const AdvancedFeatures: React.FC<AdvancedFeaturesProps> = ({ className }) => {\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true);\n  const [selectedMetric, setSelectedMetric] = useState('load');\n  const [lastUpdate, setLastUpdate] = useState(new Date());\n\n  // Simulate real-time updates\n  useEffect(() => {\n    if (realTimeEnabled) {\n      const interval = setInterval(() => {\n        setLastUpdate(new Date());\n      }, 5000); // Update every 5 seconds\n      return () => clearInterval(interval);\n    }\n  }, [realTimeEnabled]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'text-green-600 bg-green-50';\n      case 'warning': return 'text-yellow-600 bg-yellow-50';\n      case 'error': return 'text-red-600 bg-red-50';\n      default: return 'text-gray-600 bg-gray-50';\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 60) return 'text-green-600';\n    if (level > 30) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const chartConfig: ChartConfig = {\n    load: {\n      label: \"System Load\",\n      color: \"hsl(var(--chart-1))\",\n    },\n    efficiency: {\n      label: \"Efficiency\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    orders: {\n      label: \"Orders\",\n      color: \"hsl(var(--chart-3))\",\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Real-time System Health Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">Advanced System Analytics</h2>\n          <p className=\"text-muted-foreground\">Real-time monitoring and intelligent insights</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"flex items-center space-x-2 text-sm\">\n            <div className={cn(\n              \"h-2 w-2 rounded-full\",\n              realTimeEnabled ? \"bg-green-500 animate-pulse\" : \"bg-gray-400\"\n            )}></div>\n            <span className=\"text-muted-foreground\">\n              {realTimeEnabled ? `Live • ${lastUpdate.toLocaleTimeString()}` : 'Offline'}\n            </span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setRealTimeEnabled(!realTimeEnabled)}\n          >\n            <Eye className=\"h-4 w-4 mr-2\" />\n            {realTimeEnabled ? 'Pause' : 'Resume'} Live\n          </Button>\n        </div>\n      </div>\n\n      {/* Real-time Metrics Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">System Load</p>\n                <p className=\"text-2xl font-bold\">{mockAdvancedAnalytics.realTimeMetrics.currentLoad}%</p>\n                <Progress \n                  value={mockAdvancedAnalytics.realTimeMetrics.currentLoad} \n                  className=\"mt-2 h-1 bg-blue-400/30\"\n                />\n              </div>\n              <Activity className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm\">Efficiency</p>\n                <p className=\"text-2xl font-bold\">{mockAdvancedAnalytics.realTimeMetrics.efficiency}%</p>\n                <p className=\"text-xs text-green-200 mt-1\">↑ 2.3% from yesterday</p>\n              </div>\n              <Target className=\"h-8 w-8 text-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-100 text-sm\">Peak Capacity</p>\n                <p className=\"text-2xl font-bold\">{mockAdvancedAnalytics.realTimeMetrics.peakCapacity}%</p>\n                <p className=\"text-xs text-orange-200 mt-1\">Max today: 98%</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-orange-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm\">Connected Devices</p>\n                <p className=\"text-2xl font-bold\">{mockAdvancedAnalytics.deviceHealth.filter(d => d.status === 'active').length}/{mockAdvancedAnalytics.deviceHealth.length}</p>\n                <p className=\"text-xs text-purple-200 mt-1\">All systems operational</p>\n              </div>\n              <Wifi className=\"h-8 w-8 text-purple-200\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Advanced Analytics Tabs */}\n      <Tabs defaultValue=\"realtime\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"realtime\">Real-time Monitoring</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Smart Predictions</TabsTrigger>\n          <TabsTrigger value=\"devices\">Device Health</TabsTrigger>\n          <TabsTrigger value=\"payments\">Payment Analytics</TabsTrigger>\n          <TabsTrigger value=\"environment\">Environmental</TabsTrigger>\n        </TabsList>\n\n        {/* Real-time Monitoring */}\n        <TabsContent value=\"realtime\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Live System Performance\n                </div>\n                {realTimeEnabled && (\n                  <Badge variant=\"outline\" className=\"animate-pulse\">\n                    <Zap className=\"h-3 w-3 mr-1\" />\n                    Live Updates\n                  </Badge>\n                )}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {/* Metric Selector */}\n                <div className=\"flex space-x-2\">\n                  {['load', 'efficiency', 'orders'].map((metric) => (\n                    <Button\n                      key={metric}\n                      variant={selectedMetric === metric ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setSelectedMetric(metric)}\n                    >\n                      {metric.charAt(0).toUpperCase() + metric.slice(1)}\n                    </Button>\n                  ))}\n                </div>\n\n                {/* Real-time Chart */}\n                <ChartContainer config={chartConfig} className=\"h-[300px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart data={mockAdvancedAnalytics.realTimeMetrics.trends}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"time\" />\n                      <YAxis />\n                      <ChartTooltip content={<ChartTooltipContent />} />\n                      <Area \n                        type=\"monotone\" \n                        dataKey={selectedMetric} \n                        stroke={`var(--color-${selectedMetric})`}\n                        fill={`var(--color-${selectedMetric})`}\n                        fillOpacity={0.3}\n                        strokeWidth={2}\n                      />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </ChartContainer>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Current Status Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">Current Performance</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">System Load</span>\n                  <span className=\"font-bold text-blue-600\">{mockAdvancedAnalytics.realTimeMetrics.currentLoad}%</span>\n                </div>\n                <Progress value={mockAdvancedAnalytics.realTimeMetrics.currentLoad} className=\"h-2\" />\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Efficiency</span>\n                  <span className=\"font-bold text-green-600\">{mockAdvancedAnalytics.realTimeMetrics.efficiency}%</span>\n                </div>\n                <Progress value={mockAdvancedAnalytics.realTimeMetrics.efficiency} className=\"h-2\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">System Health</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Network Status</span>\n                  <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\n                    <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                    Excellent\n                  </Badge>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Server Response</span>\n                  <span className=\"text-sm font-medium text-green-600\">12ms</span>\n                </div>\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">Uptime</span>\n                  <span className=\"text-sm font-medium\">99.98%</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">Alert Status</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-600\">0</div>\n                  <div className=\"text-sm text-muted-foreground\">Critical Alerts</div>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-lg font-semibold text-yellow-600\">1</div>\n                  <div className=\"text-xs text-muted-foreground\">Warning</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Smart Predictions */}\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"h-5 w-5 mr-2\" />\n                  Peak Prediction\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg border\">\n                  <div className=\"text-2xl font-bold text-yellow-600\">\n                    {mockAdvancedAnalytics.smartPredictions.nextPeakTime}\n                  </div>\n                  <div className=\"text-sm text-yellow-700\">Next Peak Expected</div>\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    {mockAdvancedAnalytics.smartPredictions.confidenceLevel}% confidence\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Expected Orders:</span>\n                    <span className=\"font-medium\">{mockAdvancedAnalytics.smartPredictions.expectedOrders}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Confidence Level:</span>\n                    <span className=\"font-medium\">{mockAdvancedAnalytics.smartPredictions.confidenceLevel}%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recommended Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockAdvancedAnalytics.smartPredictions.recommendedActions.map((action, index) => (\n                    <div key={index} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium text-sm\">{action.action}</div>\n                        <div className=\"text-xs text-muted-foreground\">Impact: {action.impact}</div>\n                      </div>\n                      <Badge \n                        variant={action.priority === 'high' ? 'destructive' : action.priority === 'medium' ? 'secondary' : 'outline'}\n                        className=\"ml-2\"\n                      >\n                        {action.priority}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Device Health */}\n        <TabsContent value=\"devices\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Radio className=\"h-5 w-5 mr-2\" />\n                Device Health Monitor\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockAdvancedAnalytics.deviceHealth.map((device) => (\n                  <div key={device.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className={cn(\n                        \"h-3 w-3 rounded-full\",\n                        device.status === 'active' ? 'bg-green-500' : \n                        device.status === 'warning' ? 'bg-yellow-500' : 'bg-red-500'\n                      )}></div>\n                      <div>\n                        <div className=\"font-medium\">{device.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">{device.id}</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-6 text-sm\">\n                      <div className=\"text-center\">\n                        <div className={cn(\"font-medium\", getBatteryColor(device.batteryLevel))}>\n                          {device.batteryLevel}%\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Battery</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{device.signalStrength}%</div>\n                        <div className=\"text-xs text-muted-foreground\">Signal</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className=\"font-medium\">{device.dailyScans}</div>\n                        <div className=\"text-xs text-muted-foreground\">Daily Scans</div>\n                      </div>\n                      \n                      <div className=\"text-center\">\n                        <div className={cn(\n                          \"font-medium\",\n                          device.errorRate < 0.5 ? 'text-green-600' : \n                          device.errorRate < 1.0 ? 'text-yellow-600' : 'text-red-600'\n                        )}>\n                          {device.errorRate}%\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">Error Rate</div>\n                      </div>\n                      \n                      <Badge className={getStatusColor(device.status)}>\n                        {device.status}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Payment Analytics */}\n        <TabsContent value=\"payments\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  Payment Methods Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                      <Pie\n                        data={mockAdvancedAnalytics.paymentAnalytics.methods}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={100}\n                        fill=\"#8884d8\"\n                        dataKey=\"value\"\n                        label={({ name, value }) => `${name} ${value}%`}\n                      >\n                        {mockAdvancedAnalytics.paymentAnalytics.methods.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value, name, props) => [\n                        `${value}% (₹${props.payload.amount.toLocaleString()})`,\n                        name\n                      ]} />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Payment Security</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\n                  <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">\n                      {mockAdvancedAnalytics.paymentAnalytics.fraudDetection.suspicious}\n                    </div>\n                    <div className=\"text-sm text-yellow-700\">Suspicious</div>\n                  </div>\n                  <div className=\"p-3 bg-red-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {mockAdvancedAnalytics.paymentAnalytics.fraudDetection.blocked}\n                    </div>\n                    <div className=\"text-sm text-red-700\">Blocked</div>\n                  </div>\n                  <div className=\"p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {mockAdvancedAnalytics.paymentAnalytics.fraudDetection.investigated}\n                    </div>\n                    <div className=\"text-sm text-blue-700\">Investigated</div>\n                  </div>\n                </div>\n\n                <Alert>\n                  <CheckCircle2 className=\"h-4 w-4\" />\n                  <AlertTitle>Security Status: Good</AlertTitle>\n                  <AlertDescription>\n                    All payment systems are secure. No critical security issues detected in the last 24 hours.\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Environmental Monitoring */}\n        <TabsContent value=\"environment\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Sun className=\"h-8 w-8 mx-auto mb-2 text-orange-500\" />\n                <div className=\"text-2xl font-bold\">{mockAdvancedAnalytics.environmentalData.temperature}°C</div>\n                <div className=\"text-sm text-muted-foreground\">Temperature</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Droplets className=\"h-8 w-8 mx-auto mb-2 text-blue-500\" />\n                <div className=\"text-2xl font-bold\">{mockAdvancedAnalytics.environmentalData.humidity}%</div>\n                <div className=\"text-sm text-muted-foreground\">Humidity</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Wind className=\"h-8 w-8 mx-auto mb-2 text-green-500\" />\n                <div className=\"text-lg font-bold\">{mockAdvancedAnalytics.environmentalData.airQuality}</div>\n                <div className=\"text-sm text-muted-foreground\">Air Quality</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4 text-center\">\n                <Users className=\"h-8 w-8 mx-auto mb-2 text-purple-500\" />\n                <div className=\"text-lg font-bold\">{mockAdvancedAnalytics.environmentalData.crowdDensity}</div>\n                <div className=\"text-sm text-muted-foreground\">Crowd Density</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Environmental Impact on Operations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <div className=\"text-lg font-bold text-blue-600\">\n                    {mockAdvancedAnalytics.environmentalData.impact.orderFrequency}\n                  </div>\n                  <div className=\"text-sm text-blue-700\">Order Frequency</div>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <div className=\"text-lg font-bold text-green-600\">\n                    {mockAdvancedAnalytics.environmentalData.impact.avgOrderValue}\n                  </div>\n                  <div className=\"text-sm text-green-700\">Avg Order Value</div>\n                </div>\n                <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                  <div className=\"text-lg font-bold text-yellow-600\">\n                    {mockAdvancedAnalytics.environmentalData.impact.waitTime}\n                  </div>\n                  <div className=\"text-sm text-yellow-700\">Wait Time Impact</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/dashboard-demo.tsx",["1791"],[],"\"use client\"\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  StudentDashboard, \n  ParentDashboard, \n  AdminDashboard, \n  KitchenDashboard \n} from './index';\nimport { Student } from './types';\nimport { Users, UserCheck, Shield, ChefHat, School } from 'lucide-react';\n\n// Mock data for demo\nconst mockStudent: Student = {\n  id: 'student-1',\n  name: 'Arjun Sharma',\n  class: '8',\n  section: 'A',\n  rollNumber: '15',\n  avatar: '/avatars/arjun.jpg',\n  rfidCode: 'HSV8A015'\n};\n\nconst mockChildren: Student[] = [\n  {\n    id: 'child-1',\n    name: 'Arjun Sharma',\n    class: '8',\n    section: 'A',\n    rollNumber: '15',\n    avatar: '/avatars/arjun.jpg'\n  },\n  {\n    id: 'child-2',\n    name: 'Priya Sharma',\n    class: '5',\n    section: 'B',\n    rollNumber: '22',\n    avatar: '/avatars/priya.jpg'\n  }\n];\n\nexport function DashboardDemo() {\n  const [currentRole, setCurrentRole] = useState<'student' | 'parent' | 'admin' | 'kitchen'>('student');\n\n  const roleInfo = {\n    student: {\n      title: 'Student Dashboard',\n      description: 'Personal nutrition tracking, meal orders, achievements, and RFID pickup system',\n      icon: UserCheck,\n      color: 'text-blue-600'\n    },\n    parent: {\n      title: 'Parent Dashboard', \n      description: 'Monitor children\\'s meal orders, nutrition, spending, and receive real-time notifications',\n      icon: Users,\n      color: 'text-green-600'\n    },\n    admin: {\n      title: 'Admin Dashboard',\n      description: 'School-wide analytics, order management, nutrition reports, and operational insights',\n      icon: Shield,\n      color: 'text-purple-600'\n    },\n    kitchen: {\n      title: 'Kitchen Dashboard',\n      description: 'Real-time order processing, inventory management, and kitchen operations tracking',\n      icon: ChefHat,\n      color: 'text-orange-600'\n    }\n  };\n\n  const currentInfo = roleInfo[currentRole];\n  const CurrentIcon = currentInfo.icon;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"p-3 bg-primary-100 rounded-lg\">\n                <School className=\"h-8 w-8 text-primary-600\" />\n              </div>\n              <div>\n                <h1 className=\"text-3xl font-bold text-gray-900\">HASIVU Dashboard Demo</h1>\n                <p className=\"text-gray-600 mt-1\">Role-based dashboard components for school meal platform</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Role Selection */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CurrentIcon className={`h-5 w-5 ${currentInfo.color}`} />\n              {currentInfo.title}\n            </CardTitle>\n            <CardDescription>{currentInfo.description}</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={currentRole} onValueChange={(value) => setCurrentRole(value as any)} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"student\" className=\"flex items-center gap-2\">\n                  <UserCheck className=\"h-4 w-4\" />\n                  Student\n                </TabsTrigger>\n                <TabsTrigger value=\"parent\" className=\"flex items-center gap-2\">\n                  <Users className=\"h-4 w-4\" />\n                  Parent\n                </TabsTrigger>\n                <TabsTrigger value=\"admin\" className=\"flex items-center gap-2\">\n                  <Shield className=\"h-4 w-4\" />\n                  Admin\n                </TabsTrigger>\n                <TabsTrigger value=\"kitchen\" className=\"flex items-center gap-2\">\n                  <ChefHat className=\"h-4 w-4\" />\n                  Kitchen\n                </TabsTrigger>\n              </TabsList>\n\n              <div className=\"mt-6\">\n                <TabsContent value=\"student\" className=\"space-y-4\">\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n                    <h3 className=\"font-semibold text-blue-900 mb-2\">Student Dashboard Features:</h3>\n                    <ul className=\"text-blue-800 text-sm space-y-1\">\n                      <li>• Nutrition tracking with daily/weekly progress charts</li>\n                      <li>• Meal order history with status updates</li>\n                      <li>• Achievement system with progress indicators</li>\n                      <li>• RFID pickup code display for contactless collection</li>\n                      <li>• Favorite meals carousel and wallet balance</li>\n                    </ul>\n                  </div>\n                  <StudentDashboard student={mockStudent} />\n                </TabsContent>\n\n                <TabsContent value=\"parent\" className=\"space-y-4\">\n                  <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n                    <h3 className=\"font-semibold text-green-900 mb-2\">Parent Dashboard Features:</h3>\n                    <ul className=\"text-green-800 text-sm space-y-1\">\n                      <li>• Multi-child management with individual tracking</li>\n                      <li>• Real-time order status and pickup notifications</li>\n                      <li>• Spending analytics with weekly/monthly trends</li>\n                      <li>• Wallet balance monitoring with low balance alerts</li>\n                      <li>• Payment history and nutrition oversight</li>\n                    </ul>\n                  </div>\n                  <ParentDashboard children={mockChildren} />\n                </TabsContent>\n\n                <TabsContent value=\"admin\" className=\"space-y-4\">\n                  <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4 mb-6\">\n                    <h3 className=\"font-semibold text-purple-900 mb-2\">Admin Dashboard Features:</h3>\n                    <ul className=\"text-purple-800 text-sm space-y-1\">\n                      <li>• School-wide analytics with revenue and order metrics</li>\n                      <li>• Order management table with bulk operations</li>\n                      <li>• Student nutrition compliance reports by grade</li>\n                      <li>• Kitchen operations overview and performance tracking</li>\n                      <li>• Financial summaries and export capabilities</li>\n                    </ul>\n                  </div>\n                  <AdminDashboard />\n                </TabsContent>\n\n                <TabsContent value=\"kitchen\" className=\"space-y-4\">\n                  <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6\">\n                    <h3 className=\"font-semibold text-orange-900 mb-2\">Kitchen Dashboard Features:</h3>\n                    <ul className=\"text-orange-800 text-sm space-y-1\">\n                      <li>• Real-time order queue with priority sorting</li>\n                      <li>• Inventory management with low stock alerts</li>\n                      <li>• Kitchen operations tracking and task assignment</li>\n                      <li>• Preparation time analytics and performance metrics</li>\n                      <li>• Daily meal count planning and completion tracking</li>\n                    </ul>\n                  </div>\n                  <KitchenDashboard />\n                </TabsContent>\n              </div>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Technical Information */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Technical Implementation</CardTitle>\n            <CardDescription>Built with modern React patterns and ShadCN UI components</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Components Used</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• ShadCN Cards</li>\n                  <li>• Recharts Analytics</li>\n                  <li>• Data Tables</li>\n                  <li>• Progress Indicators</li>\n                  <li>• Tabs Navigation</li>\n                </ul>\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Features</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Mobile Responsive</li>\n                  <li>• TypeScript Interfaces</li>\n                  <li>• Real-time Updates</li>\n                  <li>• Interactive Charts</li>\n                  <li>• Role-based Access</li>\n                </ul>\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">School Context</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• RFID Integration</li>\n                  <li>• Nutrition Tracking</li>\n                  <li>• Meal Programs</li>\n                  <li>• Multi-role Support</li>\n                  <li>• Real-time Alerts</li>\n                </ul>\n              </div>\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-gray-900 mb-2\">Performance</h4>\n                <ul className=\"text-sm text-gray-600 space-y-1\">\n                  <li>• Optimized Loading</li>\n                  <li>• Skeleton States</li>\n                  <li>• Efficient Rendering</li>\n                  <li>• Data Caching</li>\n                  <li>• Error Boundaries</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-admin-dashboard-v2.tsx",["1792"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { io, Socket } from \"socket.io-client\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from \"@/components/ui/breadcrumb\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Toggle } from \"@/components/ui/toggle\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, ComposedChart,\n  RadialBarChart, RadialBar, Treemap, ScatterChart, Scatter, ReferenceLine\n} from 'recharts';\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig } from \"@/components/ui/chart\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport { \n  Sidebar, SidebarContent, SidebarFooter, SidebarGroup, SidebarGroupContent, \n  SidebarGroupLabel, SidebarHeader, SidebarMenu, SidebarMenuButton, \n  SidebarMenuItem, SidebarProvider, SidebarTrigger, SidebarInset\n} from \"@/components/ui/sidebar\";\nimport { MealOrderDrawer, type MealItem } from \"@/components/ui/meal-order-drawer\";\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Crown, Users, DollarSign, TrendingUp, AlertCircle, CheckCircle,\n  Calendar, Settings, BarChart3, PieChart as PieChartIcon, Activity,\n  School, Clock, Target, Award, Bell, MessageSquare, FileText,\n  Download, Filter, Search, RefreshCw, Send, Shield, AlertTriangle,\n  Utensils, Heart, Coffee, Apple, ChefHat, Package, Truck,\n  Wifi, Radio, Zap, TrendingDown, Eye, EyeOff, Plus, X,\n  Home, CreditCard, Smartphone, Scan, UserCheck, MapPin,\n  BookOpen, GraduationCap, TrendingUpDown, MoreHorizontal,\n  Star, Clock3, Users2, Loader, CheckCircle2, XCircle,\n  AlertOctagon, ThermometerSun, Droplets, Wind, Sun\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface AdminData {\n  id: string;\n  name: string;\n  role: string;\n  email: string;\n  avatar?: string;\n  permissions: string[];\n}\n\ninterface EnhancedAdminDashboardV2Props {\n  adminData: AdminData;\n  className?: string;\n}\n\n// Enhanced mock data for comprehensive admin dashboard\nconst mockRFIDAnalytics = {\n  activeStudents: 1186,\n  scanSuccess: 97.3,\n  averageQueueTime: 2.8, // minutes\n  peakHours: [\n    { hour: '8:00 AM', scans: 145, queueTime: 1.2 },\n    { hour: '10:30 AM', scans: 89, queueTime: 0.8 },\n    { hour: '12:00 PM', scans: 567, queueTime: 4.2 },\n    { hour: '1:00 PM', scans: 423, queueTime: 3.1 },\n    { hour: '3:30 PM', scans: 156, queueTime: 1.5 }\n  ],\n  deviceStatus: [\n    { id: 'RFID-001', location: 'Main Canteen', status: 'active', lastScan: '2 minutes ago', batteryLevel: 87 },\n    { id: 'RFID-002', location: 'Secondary Cafeteria', status: 'active', lastScan: '5 minutes ago', batteryLevel: 92 },\n    { id: 'RFID-003', location: 'Staff Kitchen', status: 'maintenance', lastScan: '1 hour ago', batteryLevel: 45 },\n    { id: 'RFID-004', location: 'Mobile Cart 1', status: 'active', lastScan: '1 minute ago', batteryLevel: 78 }\n  ]\n};\n\nconst mockMealRecommendations = [\n  {\n    id: 'meal-001',\n    name: 'Paneer Tikka Bowl',\n    description: 'Grilled paneer with aromatic spices, quinoa, and fresh vegetables',\n    price: 85,\n    image: '/api/placeholder/300/200',\n    category: 'Main Course',\n    preparationTime: 15,\n    rating: 4.8,\n    nutrition: { calories: 420, protein: 22, carbs: 35, fats: 18, fiber: 8 },\n    allergens: ['Dairy'],\n    dietaryTags: ['vegetarian', 'gluten-free'] as const,\n    ingredients: ['Paneer', 'Quinoa', 'Bell Peppers', 'Onions', 'Yogurt', 'Spices'],\n    popularity: 94,\n    healthScore: 89\n  },\n  {\n    id: 'meal-002', \n    name: 'Mediterranean Wrap',\n    description: 'Whole wheat wrap with hummus, grilled vegetables, and feta cheese',\n    price: 75,\n    image: '/api/placeholder/300/200',\n    category: 'Wraps & Rolls',\n    preparationTime: 10,\n    rating: 4.6,\n    nutrition: { calories: 380, protein: 16, carbs: 45, fats: 14, fiber: 12 },\n    allergens: ['Gluten', 'Dairy'],\n    dietaryTags: ['vegetarian'] as const,\n    ingredients: ['Whole Wheat Tortilla', 'Hummus', 'Zucchini', 'Eggplant', 'Feta'],\n    popularity: 87,\n    healthScore: 92\n  },\n  {\n    id: 'meal-003',\n    name: 'Masala Dosa Combo',\n    description: 'Traditional South Indian dosa with sambar and coconut chutney',\n    price: 65,\n    image: '/api/placeholder/300/200',\n    category: 'South Indian',\n    preparationTime: 20,\n    rating: 4.9,\n    nutrition: { calories: 350, protein: 12, carbs: 58, fats: 8, fiber: 6 },\n    allergens: [],\n    dietaryTags: ['vegan', 'gluten-free'] as const,\n    ingredients: ['Rice', 'Urad Dal', 'Coconut', 'Tomatoes', 'Lentils'],\n    popularity: 96,\n    healthScore: 85\n  }\n];\n\nconst mockRealTimeData = {\n  liveOrders: 23,\n  kitchenLoad: 78,\n  deliveryQueue: 12,\n  avgWaitTime: 8.5,\n  customerSatisfaction: 4.7,\n  revenueToday: 28450,\n  ordersToday: 187,\n  peakPrediction: {\n    nextPeak: '12:45 PM',\n    estimatedOrders: 85,\n    recommendedStaff: 8\n  }\n};\n\nconst mockStudentAnalytics = {\n  dietaryPreferences: [\n    { preference: 'Vegetarian', count: 456, percentage: 36.5, trend: '+2.3%' },\n    { preference: 'Non-Vegetarian', count: 523, percentage: 41.9, trend: '-1.1%' },\n    { preference: 'Vegan', count: 156, percentage: 12.5, trend: '+5.8%' },\n    { preference: 'Jain', count: 113, percentage: 9.1, trend: '+0.7%' }\n  ],\n  spendingPatterns: [\n    { grade: '6th', avgDaily: 35, avgMonthly: 750, trend: 'up' },\n    { grade: '7th', avgDaily: 42, avgMonthly: 920, trend: 'up' },\n    { grade: '8th', avgDaily: 48, avgMonthly: 1050, trend: 'stable' },\n    { grade: '9th', avgDaily: 55, avgMonthly: 1200, trend: 'up' },\n    { grade: '10th', avgDaily: 58, avgMonthly: 1280, trend: 'down' },\n    { grade: '11th', avgDaily: 62, avgMonthly: 1350, trend: 'up' },\n    { grade: '12th', avgDaily: 65, avgMonthly: 1420, trend: 'stable' }\n  ],\n  healthMetrics: {\n    bmiCompliance: 82.4,\n    nutritionGoals: 89.1,\n    allergyAlerts: 12,\n    specialDiets: 67\n  }\n};\n\nconst mockWeatherData = {\n  current: {\n    temperature: 28,\n    condition: 'Partly Cloudy',\n    humidity: 65,\n    windSpeed: 12\n  },\n  impact: {\n    expectedOrderIncrease: 15,\n    recommendedMenuAdjustments: ['Cold Beverages', 'Light Meals', 'Ice Creams'],\n    outdoorServiceViability: 'Good'\n  }\n};\n\nconst mockSchoolAnalytics = {\n  overview: {\n    totalStudents: 1248,\n    activeOrders: 156,\n    totalRevenue: 45780,\n    monthlyGrowth: 12.5,\n    nutritionCompliance: 89.4,\n    customerSatisfaction: 4.7,\n    operationalEfficiency: 92.1,\n    wasteReduction: 15.3\n  },\n  \n  orderTrends: [\n    { month: 'Aug', orders: 3420, revenue: 38950, satisfaction: 4.5 },\n    { month: 'Sep', orders: 3680, revenue: 42100, satisfaction: 4.6 },\n    { month: 'Oct', orders: 3920, revenue: 44200, satisfaction: 4.7 },\n    { month: 'Nov', orders: 4150, revenue: 47800, satisfaction: 4.8 },\n    { month: 'Dec', orders: 3890, revenue: 43600, satisfaction: 4.6 },\n    { month: 'Jan', orders: 2450, revenue: 28900, satisfaction: 4.7 }\n  ],\n\n  mealDistribution: [\n    { name: 'Lunch', value: 45, count: 2890, revenue: 28900 },\n    { name: 'Breakfast', value: 25, count: 1608, revenue: 12864 },\n    { name: 'Snacks', value: 20, count: 1286, revenue: 6430 },\n    { name: 'Dinner', value: 10, count: 643, revenue: 4501 }\n  ],\n\n  gradeDistribution: [\n    { grade: '1st-2nd', students: 180, orders: 1260, avgSpending: 850 },\n    { grade: '3rd-4th', students: 200, orders: 1580, avgSpending: 950 },\n    { grade: '5th-6th', students: 220, orders: 1890, avgSpending: 1050 },\n    { grade: '7th-8th', students: 240, orders: 2180, avgSpending: 1150 },\n    { grade: '9th-10th', students: 208, orders: 2090, avgSpending: 1250 },\n    { grade: '11th-12th', students: 200, orders: 2200, avgSpending: 1350 }\n  ],\n\n  nutritionCompliance: [\n    { week: 'W1', calories: 92, protein: 88, vegetables: 85, fruits: 79 },\n    { week: 'W2', calories: 89, protein: 91, vegetables: 87, fruits: 82 },\n    { week: 'W3', calories: 94, protein: 86, vegetables: 89, fruits: 85 },\n    { week: 'W4', calories: 87, protein: 93, vegetables: 91, fruits: 88 }\n  ],\n\n  realTimeMetrics: [\n    { time: '09:00', orders: 12, revenue: 850, satisfaction: 4.8 },\n    { time: '10:00', orders: 23, revenue: 1650, satisfaction: 4.7 },\n    { time: '11:00', orders: 45, revenue: 3200, satisfaction: 4.6 },\n    { time: '12:00', orders: 89, revenue: 6400, satisfaction: 4.8 },\n    { time: '13:00', orders: 67, revenue: 4800, satisfaction: 4.9 },\n    { time: '14:00', orders: 34, revenue: 2400, satisfaction: 4.7 },\n    { time: '15:00', orders: 28, revenue: 1950, satisfaction: 4.8 }\n  ]\n};\n\nconst mockActiveOrders = [\n  {\n    id: 'ORD-001',\n    studentName: 'Emma Wilson',\n    grade: '8th',\n    section: 'A',\n    mealType: 'lunch',\n    items: ['Grilled Chicken', 'Rice Bowl', 'Salad'],\n    amount: 65,\n    status: 'preparing',\n    orderTime: '12:15 PM',\n    estimatedReady: '12:45 PM',\n    priority: 'high',\n    allergies: ['Nuts'],\n    specialRequests: 'Extra vegetables'\n  },\n  {\n    id: 'ORD-002',\n    studentName: 'James Martinez',\n    grade: '5th',\n    section: 'B',\n    mealType: 'snack',\n    items: ['Fruit Bowl', 'Juice'],\n    amount: 25,\n    status: 'ready',\n    orderTime: '11:30 AM',\n    estimatedReady: '11:45 AM',\n    priority: 'medium',\n    allergies: [],\n    specialRequests: null\n  },\n  {\n    id: 'ORD-003',\n    studentName: 'Sophia Chen',\n    grade: '10th',\n    section: 'C',\n    mealType: 'lunch',\n    items: ['Vegetarian Pasta', 'Garlic Bread', 'Smoothie'],\n    amount: 55,\n    status: 'pending',\n    orderTime: '12:20 PM',\n    estimatedReady: '12:50 PM',\n    priority: 'low',\n    allergies: ['Dairy'],\n    specialRequests: 'Vegan alternative'\n  }\n];\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\nexport const EnhancedAdminDashboardV2: React.FC<EnhancedAdminDashboardV2Props> = ({\n  adminData,\n  className\n}) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<'daily' | 'weekly' | 'monthly'>('monthly');\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [broadcastMessage, setBroadcastMessage] = useState('');\n  const [emergencyMode, setEmergencyMode] = useState(false);\n  const [selectedMeal, setSelectedMeal] = useState<MealItem | null>(null);\n  const [isMealDrawerOpen, setIsMealDrawerOpen] = useState(false);\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true);\n  const [activeView, setActiveView] = useState('overview');\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [isLoadingAnalytics, setIsLoadingAnalytics] = useState(false);\n  const [analyticsError, setAnalyticsError] = useState(null);\n  const [ordersData, setOrdersData] = useState(null);\n  const [isLoadingOrders, setIsLoadingOrders] = useState(false);\n  const [ordersError, setOrdersError] = useState(null);\n  const [rfidData, setRfidData] = useState(null);\n  const [isLoadingRfid, setIsLoadingRfid] = useState(false);\n  const [rfidError, setRfidError] = useState(null);\n  const [realTimeData, setRealTimeData] = useState(mockRealTimeData);\n  \n  useEffect(() => {\n    const socket: Socket = io(\"http://localhost:3002\");\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to WebSocket server\");\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from WebSocket server\");\n    });\n\n    socket.on(\"realtime_stats\", (data) => {\n      console.log(\"Received real-time stats:\", data);\n      setRealTimeData(prevData => ({ ...prevData, ...data }));\n    });\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (activeView === 'analytics') {\n      const fetchAnalyticsData = async () => {\n        setIsLoadingAnalytics(true);\n        setAnalyticsError(null);\n        try {\n          // Assuming the backend runs on port 3002\n          const response = await fetch('http://localhost:3002/api/v1/analytics/dashboard');\n          if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n          }\n          const data = await response.json();\n          setAnalyticsData(data);\n        } catch (error) {\n          setAnalyticsError(error.message);\n        } finally {\n          setIsLoadingAnalytics(false);\n        }\n      };\n      fetchAnalyticsData();\n    }\n  }, [activeView]);\n\n  React.useEffect(() => {\n    if (activeView === 'orders') {\n      const fetchOrdersData = async () => {\n        setIsLoadingOrders(true);\n        setOrdersError(null);\n        try {\n          const response = await fetch('http://localhost:3002/api/v1/orders');\n          if (!response.ok) {\n            throw new Error('Failed to fetch orders data');\n          }\n          const data = await response.json();\n          setOrdersData(data);\n        } catch (error) {\n          setOrdersError(error.message);\n        } finally {\n          setIsLoadingOrders(false);\n        }\n      };\n      fetchOrdersData();\n    }\n  }, [activeView]);\n\n  React.useEffect(() => {\n    if (activeView === 'rfid') {\n      const fetchRfidData = async () => {\n        setIsLoadingRfid(true);\n        setRfidError(null);\n        try {\n          const response = await fetch('http://localhost:3002/api/v1/rfid/analytics');\n          if (!response.ok) {\n            throw new Error('Failed to fetch RFID data');\n          }\n          const data = await response.json();\n          setRfidData(data);\n        } catch (error) {\n          setRfidError(error.message);\n        } finally {\n          setIsLoadingRfid(false);\n        }\n      };\n      fetchRfidData();\n    }\n  }, [activeView]);\n\n  const handleOrderSelect = (orderId: string) => {\n    setSelectedOrders(prev => \n      prev.includes(orderId) \n        ? prev.filter(id => id !== orderId)\n        : [...prev, orderId]\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ready': return 'bg-green-500';\n      case 'preparing': return 'bg-yellow-500';\n      case 'pending': return 'bg-blue-500';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const handleMealSelect = (meal: typeof mockMealRecommendations[0]) => {\n    const mealItem: MealItem = {\n      ...meal,\n      customizations: {\n        portion: { small: meal.price - 10, regular: meal.price, large: meal.price + 15 },\n        addOns: [\n          { id: 'extra-portion', name: 'Extra Portion', price: 25 },\n          { id: 'extra-veggies', name: 'Extra Vegetables', price: 15 },\n          { id: 'extra-protein', name: 'Extra Protein', price: 35 }\n        ],\n        modifications: ['Less Spicy', 'Extra Spicy', 'No Onions', 'Extra Sauce']\n      }\n    };\n    setSelectedMeal(mealItem);\n    setIsMealDrawerOpen(true);\n  };\n\n  const handleAddToCart = (meal: MealItem, customizations: any) => {\n    console.log('Added to cart:', meal.name, customizations);\n    // Implementation for adding to cart\n  };\n\n  const getHealthScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-50';\n    if (score >= 75) return 'text-yellow-600 bg-yellow-50';\n    return 'text-red-600 bg-red-50';\n  };\n\n  const chartConfig: ChartConfig = {\n    orders: {\n      label: \"Orders\",\n      color: \"hsl(var(--chart-1))\",\n    },\n    revenue: {\n      label: \"Revenue\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    satisfaction: {\n      label: \"Satisfaction\",\n      color: \"hsl(var(--chart-3))\",\n    }\n  };\n\n  return (\n    <SidebarProvider>\n      <div className={cn(\"min-h-screen flex w-full\", className)}>\n        {/* Enhanced Sidebar */}\n        <Sidebar className=\"border-r\">\n          <SidebarHeader className=\"border-b px-6 py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n                <School className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"font-semibold text-sm\">HASIVU Admin</span>\n                <span className=\"text-xs text-muted-foreground\">v2.1.0</span>\n              </div>\n            </div>\n          </SidebarHeader>\n          \n          <SidebarContent className=\"px-4 py-2\">\n            {/* Quick Stats */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Quick Overview</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <div className=\"grid grid-cols-2 gap-2 mb-4\">\n                  <div className=\"p-3 rounded-lg bg-primary/10\">\n                    <div className=\"text-lg font-bold text-primary\">{realTimeData.liveOrders}</div>\n                    <div className=\"text-xs text-muted-foreground\">Live Orders</div>\n                  </div>\n                  <div className=\"p-3 rounded-lg bg-green-50\">\n                    <div className=\"text-lg font-bold text-green-600\">₹{realTimeData.revenueToday.toLocaleString()}</div>\n                    <div className=\"text-xs text-muted-foreground\">Today's Revenue</div>\n                  </div>\n                </div>\n              </SidebarGroupContent>\n            </SidebarGroup>\n\n            {/* Navigation Menu */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('overview')}\n                      isActive={activeView === 'overview'}\n                    >\n                      <Home className=\"h-4 w-4\" />\n                      <span>Overview</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('analytics')}\n                      isActive={activeView === 'analytics'}\n                    >\n                      <BarChart3 className=\"h-4 w-4\" />\n                      <span>Analytics</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('orders')}\n                      isActive={activeView === 'orders'}\n                    >\n                      <Utensils className=\"h-4 w-4\" />\n                      <span>Orders</span>\n                      <Badge className=\"ml-auto\" variant=\"secondary\">\n                        {mockActiveOrders.length}\n                      </Badge>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('rfid')}\n                      isActive={activeView === 'rfid'}\n                      data-testid=\"rfid-nav\"\n                    >\n                      <Radio className=\"h-4 w-4\" />\n                      <span>RFID System</span>\n                      <Badge className=\"ml-auto\" variant=\"outline\">\n                        {mockRFIDAnalytics.deviceStatus.filter(d => d.status === 'active').length}\n                      </Badge>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('meals')}\n                      isActive={activeView === 'meals'}\n                    >\n                      <ChefHat className=\"h-4 w-4\" />\n                      <span>Meal Management</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('students')}\n                      isActive={activeView === 'students'}\n                    >\n                      <Users2 className=\"h-4 w-4\" />\n                      <span>Student Analytics</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('kitchen')}\n                      isActive={activeView === 'kitchen'}\n                    >\n                      <Package className=\"h-4 w-4\" />\n                      <span>Kitchen Operations</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n\n            {/* Weather Impact */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Today's Weather Impact</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <div className=\"p-3 rounded-lg bg-blue-50 border\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Sun className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium\">{mockWeatherData.current.temperature}°C</span>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">{mockWeatherData.current.condition}</span>\n                  </div>\n                  <div className=\"text-xs text-blue-600\">\n                    Expected +{mockWeatherData.impact.expectedOrderIncrease}% orders\n                  </div>\n                </div>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n          \n          <SidebarFooter className=\"border-t p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n                <span className=\"text-xs text-muted-foreground\">System Online</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-6 w-6\"\n                  onClick={() => setRealTimeEnabled(!realTimeEnabled)}\n                >\n                  {realTimeEnabled ? \n                    <Eye className=\"h-3 w-3 text-green-600\" /> : \n                    <EyeOff className=\"h-3 w-3 text-gray-400\" />\n                  }\n                </Button>\n                <SidebarTrigger />\n              </div>\n            </div>\n          </SidebarFooter>\n        </Sidebar>\n\n        {/* Main Content */}\n        <SidebarInset className=\"flex-1\">\n          <div className=\"p-6 space-y-6\">\n            {/* Header with Real-time Status */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Breadcrumb>\n                  <BreadcrumbList>\n                    <BreadcrumbItem>\n                      <BreadcrumbLink href=\"/dashboard\">Dashboard</BreadcrumbLink>\n                    </BreadcrumbItem>\n                    <BreadcrumbSeparator />\n                    <BreadcrumbItem>\n                      <BreadcrumbPage>Enhanced Admin Panel</BreadcrumbPage>\n                    </BreadcrumbItem>\n                  </BreadcrumbList>\n                </Breadcrumb>\n                <h1 className=\"text-2xl font-bold mt-2\">Welcome back, {adminData.name}</h1>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                {realTimeEnabled && (\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <div className=\"h-2 w-2 rounded-full bg-green-500 animate-pulse\"></div>\n                    <span>Live • Updated {new Date().toLocaleTimeString()}</span>\n                  </div>\n                )}\n                <Button size=\"sm\" variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n\n            {/* Emergency Broadcast Section */}\n            {emergencyMode && (\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertTitle className=\"text-red-800\">Emergency Mode Active</AlertTitle>\n                <AlertDescription className=\"text-red-700\">\n                  Emergency protocols are enabled. All communications will be marked as urgent.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* Overview View */}\n            {activeView === 'overview' && (\n              <div className=\"space-y-6\">\n                {/* Real-time Overview Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-blue-100 text-sm\">Live Orders</p>\n                          <p className=\"text-2xl font-bold\">{realTimeData.liveOrders}</p>\n                          <p className=\"text-xs text-blue-200 mt-1\">Avg wait: {realTimeData.avgWaitTime}min</p>\n                        </div>\n                        <div className=\"relative\">\n                          <Utensils className=\"h-8 w-8 text-blue-200\" />\n                          {realTimeEnabled && (\n                            <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-400 rounded-full animate-pulse\"></div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-green-100 text-sm\">Today's Revenue</p>\n                          <p className=\"text-2xl font-bold\">₹{realTimeData.revenueToday.toLocaleString()}</p>\n                          <p className=\"text-xs text-green-200 mt-1\">{realTimeData.ordersToday} orders</p>\n                        </div>\n                        <DollarSign className=\"h-8 w-8 text-green-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-purple-100 text-sm\">Kitchen Load</p>\n                          <p className=\"text-2xl font-bold\">{realTimeData.kitchenLoad}%</p>\n                          <p className=\"text-xs text-purple-200 mt-1\">{realTimeData.deliveryQueue} in queue</p>\n                        </div>\n                        <ChefHat className=\"h-8 w-8 text-purple-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-orange-100 text-sm\">Satisfaction</p>\n                          <p className=\"text-2xl font-bold\">{realTimeData.customerSatisfaction}/5</p>\n                          <p className=\"text-xs text-orange-200 mt-1\">Customer rating</p>\n                        </div>\n                        <Award className=\"h-8 w-8 text-orange-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Real-time Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <Activity className=\"h-5 w-5 mr-2\" />\n                        Real-time Performance\n                      </div>\n                      {realTimeEnabled && (\n                        <Badge variant=\"secondary\" className=\"animate-pulse\">\n                          <Zap className=\"h-3 w-3 mr-1\" />Live\n                        </Badge>\n                      )}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ChartContainer config={chartConfig} className=\"h-[300px]\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={mockSchoolAnalytics.realTimeMetrics}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"time\" />\n                          <YAxis yAxisId=\"left\" />\n                          <YAxis yAxisId=\"right\" orientation=\"right\" />\n                          <ChartTooltip content={<ChartTooltipContent />} />\n                          <Line \n                            yAxisId=\"left\" \n                            type=\"monotone\" \n                            dataKey=\"orders\" \n                            stroke=\"var(--color-orders)\" \n                            strokeWidth={3}\n                            dot={{ fill: \"var(--color-orders)\", strokeWidth: 2 }}\n                          />\n                          <Line \n                            yAxisId=\"right\" \n                            type=\"monotone\" \n                            dataKey=\"satisfaction\" \n                            stroke=\"var(--color-satisfaction)\" \n                            strokeWidth={2}\n                            strokeDasharray=\"5 5\"\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </ChartContainer>\n                  </CardContent>\n                </Card>\n\n                {/* Peak Prediction and Insights */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Clock3 className=\"h-5 w-5 mr-2\" />\n                        Peak Prediction\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-yellow-600\">\n                            {realTimeData.peakPrediction.nextPeak}\n                          </div>\n                          <div className=\"text-sm text-yellow-700\">Next Peak Expected</div>\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n                          <div>\n                            <span className=\"text-muted-foreground\">Est. Orders:</span>\n                            <span className=\"font-medium ml-2\">{realTimeData.peakPrediction.estimatedOrders}</span>\n                          </div>\n                          <div>\n                            <span className=\"text-muted-foreground\">Staff Needed:</span>\n                            <span className=\"font-medium ml-2\">{realTimeData.peakPrediction.recommendedStaff}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <ThermometerSun className=\"h-5 w-5 mr-2\" />\n                        Weather Impact\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">Temperature</span>\n                          <span className=\"font-medium\">{mockWeatherData.current.temperature}°C</span>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm\">Condition</span>\n                          <span className=\"font-medium\">{mockWeatherData.current.condition}</span>\n                        </div>\n                        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                          <div className=\"text-lg font-bold text-blue-600\">\n                            +{mockWeatherData.impact.expectedOrderIncrease}%\n                          </div>\n                          <div className=\"text-xs text-blue-700\">Expected increase</div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <Users2 className=\"h-5 w-5 mr-2\" />\n                        Active Students\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                          <div className=\"text-2xl font-bold text-green-600\">\n                            {mockRFIDAnalytics.activeStudents}\n                          </div>\n                          <div className=\"text-sm text-green-700\">Active Today</div>\n                        </div>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">RFID Success:</span>\n                            <span className=\"font-medium\">{mockRFIDAnalytics.scanSuccess}%</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-muted-foreground\">Avg Queue:</span>\n                            <span className=\"font-medium\">{mockRFIDAnalytics.averageQueueTime}min</span>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Meal Management View */}\n            {activeView === 'meals' && (\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-xl font-semibold\">Smart Meal Recommendations</h2>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add Meal\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\">\n                      <Filter className=\"h-4 w-4 mr-2\" />\n                      Filter\n                    </Button>\n                  </div>\n                </div>\n\n                <Carousel className=\"w-full\">\n                  <CarouselContent>\n                    {mockMealRecommendations.map((meal) => (\n                      <CarouselItem key={meal.id} className=\"md:basis-1/2 lg:basis-1/3\">\n                        <Card className=\"h-full hover:shadow-lg transition-shadow cursor-pointer\" onClick={() => handleMealSelect(meal)}>\n                          <div className=\"aspect-video relative overflow-hidden rounded-t-lg\">\n                            <img \n                              src={meal.image} \n                              alt={meal.name}\n                              className=\"object-cover w-full h-full\"\n                            />\n                            <div className=\"absolute top-2 right-2 flex space-x-1\">\n                              <Badge className={getHealthScoreColor(meal.healthScore)}>\n                                ❤️ {meal.healthScore}\n                              </Badge>\n                              <Badge variant=\"secondary\">\n                                ⭐ {meal.rating}\n                              </Badge>\n                            </div>\n                            <div className=\"absolute bottom-2 left-2\">\n                              <Badge variant=\"outline\" className=\"bg-white/90\">\n                                <Clock className=\"h-3 w-3 mr-1\" />\n                                {meal.preparationTime}min\n                              </Badge>\n                            </div>\n                          </div>\n                          <CardContent className=\"p-4\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex items-center justify-between\">\n                                <h3 className=\"font-semibold text-lg\">{meal.name}</h3>\n                                <span className=\"text-lg font-bold text-primary\">₹{meal.price}</span>\n                              </div>\n                              <p className=\"text-sm text-muted-foreground line-clamp-2\">{meal.description}</p>\n                              <div className=\"flex flex-wrap gap-1\">\n                                {meal.dietaryTags.map((tag) => (\n                                  <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                                    {tag === 'vegan' && '🌱'}\n                                    {tag === 'vegetarian' && '🥬'}\n                                    {tag === 'gluten-free' && '🌾'}\n                                    {tag}\n                                  </Badge>\n                                ))}\n                              </div>\n                              <div className=\"flex items-center justify-between pt-2\">\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {meal.nutrition.calories} cal • {meal.nutrition.protein}g protein\n                                </div>\n                                <div className=\"flex items-center text-sm\">\n                                  <TrendingUp className=\"h-3 w-3 mr-1 text-green-600\" />\n                                  {meal.popularity}% popular\n                                </div>\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </CarouselItem>\n                    ))}\n                  </CarouselContent>\n                  <CarouselPrevious />\n                  <CarouselNext />\n                </Carousel>\n\n                {/* Meal Analytics */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Top Performing Meals</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {mockMealRecommendations.map((meal, index) => (\n                          <div key={meal.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center text-primary font-bold\">\n                                {index + 1}\n                              </div>\n                              <div>\n                                <div className=\"font-medium\">{meal.name}</div>\n                                <div className=\"text-sm text-muted-foreground\">{meal.category}</div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"font-medium text-green-600\">{meal.popularity}%</div>\n                              <div className=\"text-xs text-muted-foreground\">Popularity</div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Nutritional Balance</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ResponsiveContainer width=\"100%\" height={250}>\n                        <RadialBarChart cx=\"50%\" cy=\"50%\" innerRadius=\"20%\" outerRadius=\"90%\" data={[\n                          { name: 'Protein', value: 85, fill: '#3b82f6' },\n                          { name: 'Carbs', value: 75, fill: '#10b981' },\n                          { name: 'Fats', value: 65, fill: '#f59e0b' },\n                          { name: 'Fiber', value: 80, fill: '#ef4444' }\n                        ]}>\n                          <RadialBar dataKey=\"value\" cornerRadius={10} fill=\"#8884d8\" />\n                          <Tooltip />\n                        </RadialBarChart>\n                      </ResponsiveContainer>\n                    </CardContent>\n                  </Card>\n                </div>\n              </div>\n            )}\n\n            {/* Other views can be added here with similar patterns */}\n            {activeView === 'orders' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Order Management</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {isLoadingOrders ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader className=\"h-8 w-8 animate-spin text-primary\" />\n                        <p className=\"ml-4 text-muted-foreground\">Loading orders...</p>\n                      </div>\n                    ) : ordersError ? (\n                      <div className=\"text-center py-8 text-red-600\">\n                        <AlertCircle className=\"h-8 w-8 mx-auto mb-2\" />\n                        <p>Error loading orders: {ordersError}</p>\n                      </div>\n                    ) : ordersData ? (\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Orders Data</h3>\n                        <pre className=\"p-4 bg-gray-100 rounded-md overflow-x-auto\">\n                          {JSON.stringify(ordersData, null, 2)}\n                        </pre>\n                      </div>\n                    ) : null}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeView === 'rfid' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>RFID System Dashboard</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {isLoadingRfid ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader className=\"h-8 w-8 animate-spin text-primary\" />\n                        <p className=\"ml-4 text-muted-foreground\">Loading RFID data...</p>\n                      </div>\n                    ) : rfidError ? (\n                      <div className=\"text-center py-8 text-red-600\">\n                        <AlertCircle className=\"h-8 w-8 mx-auto mb-2\" />\n                        <p>Error loading RFID data: {rfidError}</p>\n                      </div>\n                    ) : rfidData ? (\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">RFID Analytics Data</h3>\n                        <pre className=\"p-4 bg-gray-100 rounded-md overflow-x-auto\">\n                          {JSON.stringify(rfidData, null, 2)}\n                        </pre>\n                      </div>\n                    ) : null}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeView === 'students' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Student Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Student analytics and insights will be displayed here\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeView === 'analytics' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>School Analytics</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {isLoadingAnalytics ? (\n                      <div className=\"flex items-center justify-center py-8\">\n                        <Loader className=\"h-8 w-8 animate-spin text-primary\" />\n                        <p className=\"ml-4 text-muted-foreground\">Loading analytics...</p>\n                      </div>\n                    ) : analyticsError ? (\n                      <div className=\"text-center py-8 text-red-600\">\n                        <AlertCircle className=\"h-8 w-8 mx-auto mb-2\" />\n                        <p>Error loading analytics: {analyticsError}</p>\n                      </div>\n                    ) : analyticsData ? (\n                      <div>\n                        <h3 className=\"text-lg font-semibold mb-4\">Order Trends</h3>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <BarChart data={analyticsData.orderTrends}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"month\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Bar dataKey=\"orders\" fill=\"#8884d8\" />\n                            <Bar dataKey=\"revenue\" fill=\"#82ca9d\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n\n                        <h3 className=\"text-lg font-semibold mb-4 mt-8\">Meal Distribution</h3>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <PieChart>\n                            <Pie data={analyticsData.mealDistribution} dataKey=\"value\" nameKey=\"name\" cx=\"50%\" cy=\"50%\" outerRadius={100} fill=\"#8884d8\" label>\n                              {analyticsData.mealDistribution.map((entry, index) => (\n                                <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                              ))}\n                            </Pie>\n                            <Tooltip />\n                          </PieChart>\n                        </ResponsiveContainer>\n\n                        <h3 className=\"text-lg font-semibold mb-4 mt-8\">Grade Distribution</h3>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <BarChart data={analyticsData.gradeDistribution}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"grade\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Bar dataKey=\"students\" fill=\"#8884d8\" />\n                            <Bar dataKey=\"orders\" fill=\"#82ca9d\" />\n                            <Bar dataKey=\"avgSpending\" fill=\"#ffc658\" />\n                          </BarChart>\n                        </ResponsiveContainer>\n\n                        <h3 className=\"text-lg font-semibold mb-4 mt-8\">Nutrition Compliance</h3>\n                        <ResponsiveContainer width=\"100%\" height={300}>\n                          <LineChart data={analyticsData.nutritionCompliance}>\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"week\" />\n                            <YAxis />\n                            <Tooltip />\n                            <Line type=\"monotone\" dataKey=\"calories\" stroke=\"#8884d8\" />\n                            <Line type=\"monotone\" dataKey=\"protein\" stroke=\"#82ca9d\" />\n                            <Line type=\"monotone\" dataKey=\"vegetables\" stroke=\"#ffc658\" />\n                            <Line type=\"monotone\" dataKey=\"fruits\" stroke=\"#ff8042\" />\n                          </LineChart>\n                        </ResponsiveContainer>\n                      </div>\n                    ) : null}\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {activeView === 'kitchen' && (\n              <div className=\"space-y-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Kitchen Operations</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      Kitchen operations dashboard will be implemented here\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n          </div>\n        </SidebarInset>\n      </div>\n      \n      {/* Meal Order Drawer */}\n      {selectedMeal && (\n        <MealOrderDrawer\n          meal={selectedMeal}\n          isOpen={isMealDrawerOpen}\n          onClose={() => setIsMealDrawerOpen(false)}\n          onAddToCart={handleAddToCart}\n        />\n      )}\n    </SidebarProvider>\n  );\n}; );\n};\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-admin-dashboard.tsx",["1793"],[],"\"use client\"\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from \"@/components/ui/accordion\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Breadcrumb, BreadcrumbItem, BreadcrumbLink, BreadcrumbList, BreadcrumbPage, BreadcrumbSeparator } from \"@/components/ui/breadcrumb\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Toggle } from \"@/components/ui/toggle\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, ComposedChart,\n  RadialBarChart, RadialBar, Treemap, ScatterChart, Scatter, ReferenceLine\n} from 'recharts';\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartConfig } from \"@/components/ui/chart\";\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from \"@/components/ui/carousel\";\nimport { \n  Sidebar, SidebarContent, SidebarFooter, SidebarGroup, SidebarGroupContent, \n  SidebarGroupLabel, SidebarHeader, SidebarMenu, SidebarMenuButton, \n  SidebarMenuItem, SidebarProvider, SidebarTrigger, SidebarInset\n} from \"@/components/ui/sidebar\";\nimport { MealOrderDrawer, type MealItem } from \"@/components/ui/meal-order-drawer\";\nimport { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  Crown, Users, DollarSign, TrendingUp, AlertCircle, CheckCircle,\n  Calendar, Settings, BarChart3, PieChart as PieChartIcon, Activity,\n  School, Clock, Target, Award, Bell, MessageSquare, FileText,\n  Download, Filter, Search, RefreshCw, Send, Shield, AlertTriangle,\n  Utensils, Heart, Coffee, Apple, ChefHat, Package, Truck,\n  Wifi, Radio, Zap, TrendingDown, Eye, EyeOff, Plus, X,\n  Home, CreditCard, Smartphone, Scan, UserCheck, MapPin,\n  BookOpen, GraduationCap, TrendingUpDown, MoreHorizontal,\n  Star, Clock3, Users2, Loader, CheckCircle2, XCircle,\n  AlertOctagon, ThermometerSun, Droplets, Wind, Sun\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface AdminData {\n  id: string;\n  name: string;\n  role: string;\n  email: string;\n  avatar?: string;\n  permissions: string[];\n}\n\ninterface EnhancedAdminDashboardProps {\n  adminData: AdminData;\n  className?: string;\n}\n\n// Enhanced mock data for comprehensive admin dashboard\nconst mockRFIDAnalytics = {\n  activeStudents: 1186,\n  scanSuccess: 97.3,\n  averageQueueTime: 2.8, // minutes\n  peakHours: [\n    { hour: '8:00 AM', scans: 145, queueTime: 1.2 },\n    { hour: '10:30 AM', scans: 89, queueTime: 0.8 },\n    { hour: '12:00 PM', scans: 567, queueTime: 4.2 },\n    { hour: '1:00 PM', scans: 423, queueTime: 3.1 },\n    { hour: '3:30 PM', scans: 156, queueTime: 1.5 }\n  ],\n  deviceStatus: [\n    { id: 'RFID-001', location: 'Main Canteen', status: 'active', lastScan: '2 minutes ago', batteryLevel: 87 },\n    { id: 'RFID-002', location: 'Secondary Cafeteria', status: 'active', lastScan: '5 minutes ago', batteryLevel: 92 },\n    { id: 'RFID-003', location: 'Staff Kitchen', status: 'maintenance', lastScan: '1 hour ago', batteryLevel: 45 },\n    { id: 'RFID-004', location: 'Mobile Cart 1', status: 'active', lastScan: '1 minute ago', batteryLevel: 78 }\n  ]\n};\n\nconst mockMealRecommendations = [\n  {\n    id: 'meal-001',\n    name: 'Paneer Tikka Bowl',\n    description: 'Grilled paneer with aromatic spices, quinoa, and fresh vegetables',\n    price: 85,\n    image: '/api/placeholder/300/200',\n    category: 'Main Course',\n    preparationTime: 15,\n    rating: 4.8,\n    nutrition: { calories: 420, protein: 22, carbs: 35, fats: 18, fiber: 8 },\n    allergens: ['Dairy'],\n    dietaryTags: ['vegetarian', 'gluten-free'] as const,\n    ingredients: ['Paneer', 'Quinoa', 'Bell Peppers', 'Onions', 'Yogurt', 'Spices'],\n    popularity: 94,\n    healthScore: 89\n  },\n  {\n    id: 'meal-002', \n    name: 'Mediterranean Wrap',\n    description: 'Whole wheat wrap with hummus, grilled vegetables, and feta cheese',\n    price: 75,\n    image: '/api/placeholder/300/200',\n    category: 'Wraps & Rolls',\n    preparationTime: 10,\n    rating: 4.6,\n    nutrition: { calories: 380, protein: 16, carbs: 45, fats: 14, fiber: 12 },\n    allergens: ['Gluten', 'Dairy'],\n    dietaryTags: ['vegetarian'] as const,\n    ingredients: ['Whole Wheat Tortilla', 'Hummus', 'Zucchini', 'Eggplant', 'Feta'],\n    popularity: 87,\n    healthScore: 92\n  },\n  {\n    id: 'meal-003',\n    name: 'Masala Dosa Combo',\n    description: 'Traditional South Indian dosa with sambar and coconut chutney',\n    price: 65,\n    image: '/api/placeholder/300/200',\n    category: 'South Indian',\n    preparationTime: 20,\n    rating: 4.9,\n    nutrition: { calories: 350, protein: 12, carbs: 58, fats: 8, fiber: 6 },\n    allergens: [],\n    dietaryTags: ['vegan', 'gluten-free'] as const,\n    ingredients: ['Rice', 'Urad Dal', 'Coconut', 'Tomatoes', 'Lentils'],\n    popularity: 96,\n    healthScore: 85\n  }\n];\n\nconst mockRealTimeData = {\n  liveOrders: 23,\n  kitchenLoad: 78,\n  deliveryQueue: 12,\n  avgWaitTime: 8.5,\n  customerSatisfaction: 4.7,\n  revenueToday: 28450,\n  ordersToday: 187,\n  peakPrediction: {\n    nextPeak: '12:45 PM',\n    estimatedOrders: 85,\n    recommendedStaff: 8\n  }\n};\n\nconst mockStudentAnalytics = {\n  dietaryPreferences: [\n    { preference: 'Vegetarian', count: 456, percentage: 36.5, trend: '+2.3%' },\n    { preference: 'Non-Vegetarian', count: 523, percentage: 41.9, trend: '-1.1%' },\n    { preference: 'Vegan', count: 156, percentage: 12.5, trend: '+5.8%' },\n    { preference: 'Jain', count: 113, percentage: 9.1, trend: '+0.7%' }\n  ],\n  spendingPatterns: [\n    { grade: '6th', avgDaily: 35, avgMonthly: 750, trend: 'up' },\n    { grade: '7th', avgDaily: 42, avgMonthly: 920, trend: 'up' },\n    { grade: '8th', avgDaily: 48, avgMonthly: 1050, trend: 'stable' },\n    { grade: '9th', avgDaily: 55, avgMonthly: 1200, trend: 'up' },\n    { grade: '10th', avgDaily: 58, avgMonthly: 1280, trend: 'down' },\n    { grade: '11th', avgDaily: 62, avgMonthly: 1350, trend: 'up' },\n    { grade: '12th', avgDaily: 65, avgMonthly: 1420, trend: 'stable' }\n  ],\n  healthMetrics: {\n    bmiCompliance: 82.4,\n    nutritionGoals: 89.1,\n    allergyAlerts: 12,\n    specialDiets: 67\n  }\n};\n\nconst mockWeatherData = {\n  current: {\n    temperature: 28,\n    condition: 'Partly Cloudy',\n    humidity: 65,\n    windSpeed: 12\n  },\n  impact: {\n    expectedOrderIncrease: 15,\n    recommendedMenuAdjustments: ['Cold Beverages', 'Light Meals', 'Ice Creams'],\n    outdoorServiceViability: 'Good'\n  }\n};\n\n// Comprehensive mock data for admin dashboard\nconst mockSchoolAnalytics = {\n  overview: {\n    totalStudents: 1248,\n    activeOrders: 156,\n    totalRevenue: 45780,\n    monthlyGrowth: 12.5,\n    nutritionCompliance: 89.4,\n    customerSatisfaction: 4.7,\n    operationalEfficiency: 92.1,\n    wasteReduction: 15.3\n  },\n  \n  orderTrends: [\n    { month: 'Aug', orders: 3420, revenue: 38950, satisfaction: 4.5 },\n    { month: 'Sep', orders: 3680, revenue: 42100, satisfaction: 4.6 },\n    { month: 'Oct', orders: 3920, revenue: 44200, satisfaction: 4.7 },\n    { month: 'Nov', orders: 4150, revenue: 47800, satisfaction: 4.8 },\n    { month: 'Dec', orders: 3890, revenue: 43600, satisfaction: 4.6 },\n    { month: 'Jan', orders: 2450, revenue: 28900, satisfaction: 4.7 }\n  ],\n\n  mealDistribution: [\n    { name: 'Lunch', value: 45, count: 2890, revenue: 28900 },\n    { name: 'Breakfast', value: 25, count: 1608, revenue: 12864 },\n    { name: 'Snacks', value: 20, count: 1286, revenue: 6430 },\n    { name: 'Dinner', value: 10, count: 643, revenue: 4501 }\n  ],\n\n  gradeDistribution: [\n    { grade: '1st-2nd', students: 180, orders: 1260, avgSpending: 850 },\n    { grade: '3rd-4th', students: 200, orders: 1580, avgSpending: 950 },\n    { grade: '5th-6th', students: 220, orders: 1890, avgSpending: 1050 },\n    { grade: '7th-8th', students: 240, orders: 2180, avgSpending: 1150 },\n    { grade: '9th-10th', students: 208, orders: 2090, avgSpending: 1250 },\n    { grade: '11th-12th', students: 200, orders: 2200, avgSpending: 1350 }\n  ],\n\n  nutritionCompliance: [\n    { week: 'W1', calories: 92, protein: 88, vegetables: 85, fruits: 79 },\n    { week: 'W2', calories: 89, protein: 91, vegetables: 87, fruits: 82 },\n    { week: 'W3', calories: 94, protein: 86, vegetables: 89, fruits: 85 },\n    { week: 'W4', calories: 87, protein: 93, vegetables: 91, fruits: 88 }\n  ],\n\n  realTimeMetrics: [\n    { time: '09:00', orders: 12, revenue: 850, satisfaction: 4.8 },\n    { time: '10:00', orders: 23, revenue: 1650, satisfaction: 4.7 },\n    { time: '11:00', orders: 45, revenue: 3200, satisfaction: 4.6 },\n    { time: '12:00', orders: 89, revenue: 6400, satisfaction: 4.8 },\n    { time: '13:00', orders: 67, revenue: 4800, satisfaction: 4.9 },\n    { time: '14:00', orders: 34, revenue: 2400, satisfaction: 4.7 },\n    { time: '15:00', orders: 28, revenue: 1950, satisfaction: 4.8 }\n  ]\n};\n\nconst mockActiveOrders = [\n  {\n    id: 'ORD-001',\n    studentName: 'Emma Wilson',\n    grade: '8th',\n    section: 'A',\n    mealType: 'lunch',\n    items: ['Grilled Chicken', 'Rice Bowl', 'Salad'],\n    amount: 65,\n    status: 'preparing',\n    orderTime: '12:15 PM',\n    estimatedReady: '12:45 PM',\n    priority: 'high',\n    allergies: ['Nuts'],\n    specialRequests: 'Extra vegetables'\n  },\n  {\n    id: 'ORD-002',\n    studentName: 'James Martinez',\n    grade: '5th',\n    section: 'B',\n    mealType: 'snack',\n    items: ['Fruit Bowl', 'Juice'],\n    amount: 25,\n    status: 'ready',\n    orderTime: '11:30 AM',\n    estimatedReady: '11:45 AM',\n    priority: 'medium',\n    allergies: [],\n    specialRequests: null\n  },\n  {\n    id: 'ORD-003',\n    studentName: 'Sophia Chen',\n    grade: '10th',\n    section: 'C',\n    mealType: 'lunch',\n    items: ['Vegetarian Pasta', 'Garlic Bread', 'Smoothie'],\n    amount: 55,\n    status: 'pending',\n    orderTime: '12:20 PM',\n    estimatedReady: '12:50 PM',\n    priority: 'low',\n    allergies: ['Dairy'],\n    specialRequests: 'Vegan alternative'\n  }\n];\n\nconst mockFinancialSummary = {\n  daily: { revenue: 2850, orders: 89, avgOrderValue: 32 },\n  weekly: { revenue: 18950, orders: 642, avgOrderValue: 29.5 },\n  monthly: { revenue: 76800, orders: 2580, avgOrderValue: 29.8 },\n  paymentMethods: [\n    { method: 'Digital Wallet', percentage: 65, amount: 49920 },\n    { method: 'UPI', percentage: 25, amount: 19200 },\n    { method: 'Cash', percentage: 10, amount: 7680 }\n  ]\n};\n\nconst mockKitchenOperations = {\n  activeStaff: 12,\n  totalStaff: 15,\n  currentCapacity: 78,\n  maxCapacity: 200,\n  avgPreparationTime: 18, // minutes\n  qualityScore: 4.6,\n  efficiency: 89,\n  inventory: [\n    { item: 'Rice', stock: 85, threshold: 20, status: 'good' },\n    { item: 'Chicken', stock: 15, threshold: 25, status: 'low' },\n    { item: 'Vegetables', stock: 92, threshold: 30, status: 'good' },\n    { item: 'Milk', stock: 8, threshold: 15, status: 'critical' }\n  ]\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\nexport const EnhancedAdminDashboard: React.FC<EnhancedAdminDashboardProps> = ({\n  adminData,\n  className\n}) => {\n  const [selectedPeriod, setSelectedPeriod] = useState<'daily' | 'weekly' | 'monthly'>('monthly');\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [broadcastMessage, setBroadcastMessage] = useState('');\n  const [emergencyMode, setEmergencyMode] = useState(false);\n  const [selectedMeal, setSelectedMeal] = useState<MealItem | null>(null);\n  const [isMealDrawerOpen, setIsMealDrawerOpen] = useState(false);\n  const [realTimeEnabled, setRealTimeEnabled] = useState(true);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [activeView, setActiveView] = useState('overview');\n  \n  // Real-time data refresh\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  React.useEffect(() => {\n    if (realTimeEnabled) {\n      const interval = setInterval(() => {\n        setLastRefresh(new Date());\n      }, 30000); // Refresh every 30 seconds\n      return () => clearInterval(interval);\n    }\n  }, [realTimeEnabled]);\n\n  const handleOrderSelect = (orderId: string) => {\n    setSelectedOrders(prev => \n      prev.includes(orderId) \n        ? prev.filter(id => id !== orderId)\n        : [...prev, orderId]\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ready': return 'bg-green-500';\n      case 'preparing': return 'bg-yellow-500';\n      case 'pending': return 'bg-blue-500';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const handleMealSelect = (meal: typeof mockMealRecommendations[0]) => {\n    const mealItem: MealItem = {\n      ...meal,\n      customizations: {\n        portion: { small: meal.price - 10, regular: meal.price, large: meal.price + 15 },\n        addOns: [\n          { id: 'extra-portion', name: 'Extra Portion', price: 25 },\n          { id: 'extra-veggies', name: 'Extra Vegetables', price: 15 },\n          { id: 'extra-protein', name: 'Extra Protein', price: 35 }\n        ],\n        modifications: ['Less Spicy', 'Extra Spicy', 'No Onions', 'Extra Sauce']\n      }\n    };\n    setSelectedMeal(mealItem);\n    setIsMealDrawerOpen(true);\n  };\n\n  const handleAddToCart = (meal: MealItem, customizations: any) => {\n    console.log('Added to cart:', meal.name, customizations);\n    // Implementation for adding to cart\n  };\n\n  const getHealthScoreColor = (score: number) => {\n    if (score >= 90) return 'text-green-600 bg-green-50';\n    if (score >= 75) return 'text-yellow-600 bg-yellow-50';\n    return 'text-red-600 bg-red-50';\n  };\n\n  const chartConfig: ChartConfig = {\n    orders: {\n      label: \"Orders\",\n      color: \"hsl(var(--chart-1))\",\n    },\n    revenue: {\n      label: \"Revenue\",\n      color: \"hsl(var(--chart-2))\",\n    },\n    satisfaction: {\n      label: \"Satisfaction\",\n      color: \"hsl(var(--chart-3))\",\n    }\n  };\n\n  return (\n    <SidebarProvider>\n      <div className={cn(\"min-h-screen flex w-full\", className)}>\n        {/* Enhanced Sidebar */}\n        <Sidebar className=\"border-r\">\n          <SidebarHeader className=\"border-b px-6 py-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"h-8 w-8 rounded-lg bg-primary flex items-center justify-center\">\n                <School className=\"h-5 w-5 text-primary-foreground\" />\n              </div>\n              <div className=\"flex flex-col\">\n                <span className=\"font-semibold text-sm\">HASIVU Admin</span>\n                <span className=\"text-xs text-muted-foreground\">v2.1.0</span>\n              </div>\n            </div>\n          </SidebarHeader>\n          \n          <SidebarContent className=\"px-4 py-2\">\n            {/* Quick Stats */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Quick Overview</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <div className=\"grid grid-cols-2 gap-2 mb-4\">\n                  <div className=\"p-3 rounded-lg bg-primary/10\">\n                    <div className=\"text-lg font-bold text-primary\">{mockRealTimeData.liveOrders}</div>\n                    <div className=\"text-xs text-muted-foreground\">Live Orders</div>\n                  </div>\n                  <div className=\"p-3 rounded-lg bg-green-50\">\n                    <div className=\"text-lg font-bold text-green-600\">₹{mockRealTimeData.revenueToday.toLocaleString()}</div>\n                    <div className=\"text-xs text-muted-foreground\">Today's Revenue</div>\n                  </div>\n                </div>\n              </SidebarGroupContent>\n            </SidebarGroup>\n\n            {/* Navigation Menu */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('overview')}\n                      isActive={activeView === 'overview'}\n                    >\n                      <Home className=\"h-4 w-4\" />\n                      <span>Overview</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('analytics')}\n                      isActive={activeView === 'analytics'}\n                    >\n                      <BarChart3 className=\"h-4 w-4\" />\n                      <span>Analytics</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('orders')}\n                      isActive={activeView === 'orders'}\n                    >\n                      <Utensils className=\"h-4 w-4\" />\n                      <span>Orders</span>\n                      <Badge className=\"ml-auto\" variant=\"secondary\">\n                        {mockActiveOrders.length}\n                      </Badge>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('rfid')}\n                      isActive={activeView === 'rfid'}\n                    >\n                      <Radio className=\"h-4 w-4\" />\n                      <span>RFID System</span>\n                      <Badge className=\"ml-auto\" variant=\"outline\">\n                        {mockRFIDAnalytics.deviceStatus.filter(d => d.status === 'active').length}\n                      </Badge>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('meals')}\n                      isActive={activeView === 'meals'}\n                    >\n                      <ChefHat className=\"h-4 w-4\" />\n                      <span>Meal Management</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('students')}\n                      isActive={activeView === 'students'}\n                    >\n                      <Users2 className=\"h-4 w-4\" />\n                      <span>Student Analytics</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                  <SidebarMenuItem>\n                    <SidebarMenuButton \n                      onClick={() => setActiveView('kitchen')}\n                      isActive={activeView === 'kitchen'}\n                    >\n                      <Package className=\"h-4 w-4\" />\n                      <span>Kitchen Operations</span>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n\n            {/* Weather Impact */}\n            <SidebarGroup>\n              <SidebarGroupLabel>Today's Weather Impact</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <div className=\"p-3 rounded-lg bg-blue-50 border\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Sun className=\"h-4 w-4 text-blue-600\" />\n                      <span className=\"text-sm font-medium\">{mockWeatherData.current.temperature}°C</span>\n                    </div>\n                    <span className=\"text-xs text-muted-foreground\">{mockWeatherData.current.condition}</span>\n                  </div>\n                  <div className=\"text-xs text-blue-600\">\n                    Expected +{mockWeatherData.impact.expectedOrderIncrease}% orders\n                  </div>\n                </div>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n          \n          <SidebarFooter className=\"border-t p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"h-2 w-2 rounded-full bg-green-500\"></div>\n                <span className=\"text-xs text-muted-foreground\">System Online</span>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-6 w-6\"\n                  onClick={() => setRealTimeEnabled(!realTimeEnabled)}\n                >\n                  {realTimeEnabled ? \n                    <Eye className=\"h-3 w-3 text-green-600\" /> : \n                    <EyeOff className=\"h-3 w-3 text-gray-400\" />\n                  }\n                </Button>\n                <SidebarTrigger />\n              </div>\n            </div>\n          </SidebarFooter>\n        </Sidebar>\n\n        {/* Main Content */}\n        <SidebarInset className=\"flex-1\">\n          <div className=\"p-6 space-y-6\">\n            {/* Header with Real-time Status */}\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <Breadcrumb>\n                  <BreadcrumbList>\n                    <BreadcrumbItem>\n                      <BreadcrumbLink href=\"/dashboard\">Dashboard</BreadcrumbLink>\n                    </BreadcrumbItem>\n                    <BreadcrumbSeparator />\n                    <BreadcrumbItem>\n                      <BreadcrumbPage>Enhanced Admin Panel</BreadcrumbPage>\n                    </BreadcrumbItem>\n                  </BreadcrumbList>\n                </Breadcrumb>\n                <h1 className=\"text-2xl font-bold mt-2\">Welcome back, {adminData.name}</h1>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                {realTimeEnabled && (\n                  <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                    <div className=\"h-2 w-2 rounded-full bg-green-500 animate-pulse\"></div>\n                    <span>Live • Updated {lastRefresh.toLocaleTimeString()}</span>\n                  </div>\n                )}\n                <Button size=\"sm\" variant=\"outline\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export Report\n                </Button>\n              </div>\n            </div>\n\n      {/* Admin Overview Header */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">Total Students</p>\n                <p className=\"text-2xl font-bold\">{mockSchoolAnalytics.overview.totalStudents}</p>\n                <p className=\"text-xs text-blue-200 mt-1\">+{mockSchoolAnalytics.overview.monthlyGrowth}% this month</p>\n              </div>\n              <School className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm\">Monthly Revenue</p>\n                <p className=\"text-2xl font-bold\">₹{mockSchoolAnalytics.overview.totalRevenue.toLocaleString()}</p>\n                <p className=\"text-xs text-green-200 mt-1\">+{mockSchoolAnalytics.overview.monthlyGrowth}% growth</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm\">Active Orders</p>\n                <p className=\"text-2xl font-bold\">{mockSchoolAnalytics.overview.activeOrders}</p>\n                <p className=\"text-xs text-purple-200 mt-1\">Currently processing</p>\n              </div>\n              <Utensils className=\"h-8 w-8 text-purple-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-100 text-sm\">Satisfaction</p>\n                <p className=\"text-2xl font-bold\">{mockSchoolAnalytics.overview.customerSatisfaction}/5</p>\n                <p className=\"text-xs text-orange-200 mt-1\">Customer rating</p>\n              </div>\n              <Award className=\"h-8 w-8 text-orange-200\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n            {/* Emergency Broadcast Section */}\n            {emergencyMode && (\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertTitle className=\"text-red-800\">Emergency Mode Active</AlertTitle>\n                <AlertDescription className=\"text-red-700\">\n                  Emergency protocols are enabled. All communications will be marked as urgent.\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* Conditional content based on active view */}\n            {activeView === 'overview' && (\n              <div className=\"space-y-6\">\n                {/* Real-time Overview Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-blue-100 text-sm\">Live Orders</p>\n                          <p className=\"text-2xl font-bold\">{mockRealTimeData.liveOrders}</p>\n                          <p className=\"text-xs text-blue-200 mt-1\">Avg wait: {mockRealTimeData.avgWaitTime}min</p>\n                        </div>\n                        <div className=\"relative\">\n                          <Utensils className=\"h-8 w-8 text-blue-200\" />\n                          {realTimeEnabled && (\n                            <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-400 rounded-full animate-pulse\"></div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-green-100 text-sm\">Today's Revenue</p>\n                          <p className=\"text-2xl font-bold\">₹{mockRealTimeData.revenueToday.toLocaleString()}</p>\n                          <p className=\"text-xs text-green-200 mt-1\">{mockRealTimeData.ordersToday} orders</p>\n                        </div>\n                        <DollarSign className=\"h-8 w-8 text-green-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-purple-100 text-sm\">Kitchen Load</p>\n                          <p className=\"text-2xl font-bold\">{mockRealTimeData.kitchenLoad}%</p>\n                          <p className=\"text-xs text-purple-200 mt-1\">{mockRealTimeData.deliveryQueue} in queue</p>\n                        </div>\n                        <ChefHat className=\"h-8 w-8 text-purple-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <p className=\"text-orange-100 text-sm\">Satisfaction</p>\n                          <p className=\"text-2xl font-bold\">{mockRealTimeData.customerSatisfaction}/5</p>\n                          <p className=\"text-xs text-orange-200 mt-1\">Customer rating</p>\n                        </div>\n                        <Award className=\"h-8 w-8 text-orange-200\" />\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Real-time Chart */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <Activity className=\"h-5 w-5 mr-2\" />\n                        Real-time Performance\n                      </div>\n                      {realTimeEnabled && (\n                        <Badge variant=\"secondary\" className=\"animate-pulse\">\n                          <Zap className=\"h-3 w-3 mr-1\" />Live\n                        </Badge>\n                      )}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ChartContainer config={chartConfig} className=\"h-[300px]\">\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={mockSchoolAnalytics.realTimeMetrics}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"time\" />\n                          <YAxis yAxisId=\"left\" />\n                          <YAxis yAxisId=\"right\" orientation=\"right\" />\n                          <ChartTooltip content={<ChartTooltipContent />} />\n                          <Line \n                            yAxisId=\"left\" \n                            type=\"monotone\" \n                            dataKey=\"orders\" \n                            stroke=\"var(--color-orders)\" \n                            strokeWidth={3}\n                            dot={{ fill: \"var(--color-orders)\", strokeWidth: 2 }}\n                          />\n                          <Line \n                            yAxisId=\"right\" \n                            type=\"monotone\" \n                            dataKey=\"satisfaction\" \n                            stroke=\"var(--color-satisfaction)\" \n                            strokeWidth={2}\n                            strokeDasharray=\"5 5\"\n                          />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </ChartContainer>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            {/* Analytics View */}\n            {activeView === 'analytics' && (\n              <Tabs defaultValue=\"analytics\" className=\"space-y-6\">\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"analytics\">School Analytics</TabsTrigger>\n                  <TabsTrigger value=\"nutrition\">Nutrition Reports</TabsTrigger>\n                  <TabsTrigger value=\"financial\">Financial Summary</TabsTrigger>\n                  <TabsTrigger value=\"broadcast\">Emergency Broadcast</TabsTrigger>\n                </TabsList>\n\n                {/* Analytics Tab */}\n                <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">School-wide Analytics</h3>\n            <div className=\"flex items-center space-x-2\">\n              <Select value={selectedPeriod} onValueChange={(value) => setSelectedPeriod(value as any)}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"daily\">Daily</SelectItem>\n                  <SelectItem value=\"weekly\">Weekly</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button size=\"sm\" variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\n                Refresh\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Order Trends */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"h-5 w-5 mr-2\" />\n                  Order & Revenue Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={mockSchoolAnalytics.orderTrends}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis yAxisId=\"left\" />\n                    <YAxis yAxisId=\"right\" orientation=\"right\" />\n                    <Tooltip />\n                    <Bar yAxisId=\"left\" dataKey=\"orders\" fill=\"#3b82f6\" name=\"Orders\" />\n                    <Line yAxisId=\"right\" type=\"monotone\" dataKey=\"revenue\" stroke=\"#10b981\" strokeWidth={2} name=\"Revenue (₹)\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Meal Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <PieChartIcon className=\"h-5 w-5 mr-2\" />\n                  Meal Type Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={mockSchoolAnalytics.mealDistribution}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={100}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, value }) => `${name} ${value}%`}\n                    >\n                      {mockSchoolAnalytics.mealDistribution.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value, name, props) => [\n                      `${value}% (${props.payload.count} orders)`,\n                      name\n                    ]} />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Grade-wise Analysis */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"h-5 w-5 mr-2\" />\n                  Grade-wise Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={mockSchoolAnalytics.gradeDistribution}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"grade\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"students\" fill=\"#3b82f6\" name=\"Students\" />\n                    <Bar dataKey=\"orders\" fill=\"#10b981\" name=\"Orders\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Key Metrics */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Key Performance Indicators\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Nutrition Compliance</span>\n                    <span className=\"text-sm\">{mockSchoolAnalytics.overview.nutritionCompliance}%</span>\n                  </div>\n                  <Progress value={mockSchoolAnalytics.overview.nutritionCompliance} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Operational Efficiency</span>\n                    <span className=\"text-sm\">{mockSchoolAnalytics.overview.operationalEfficiency}%</span>\n                  </div>\n                  <Progress value={mockSchoolAnalytics.overview.operationalEfficiency} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Customer Satisfaction</span>\n                    <span className=\"text-sm\">{(mockSchoolAnalytics.overview.customerSatisfaction / 5 * 100).toFixed(1)}%</span>\n                  </div>\n                  <Progress value={mockSchoolAnalytics.overview.customerSatisfaction / 5 * 100} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Waste Reduction</span>\n                    <span className=\"text-sm\">{mockSchoolAnalytics.overview.wasteReduction}%</span>\n                  </div>\n                  <Progress value={mockSchoolAnalytics.overview.wasteReduction} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n                {/* Nutrition Reports Tab */}\n                <TabsContent value=\"nutrition\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">Active Order Management</h3>\n            <div className=\"flex items-center space-x-2\">\n              <Button size=\"sm\" variant=\"outline\">\n                <Filter className=\"h-4 w-4 mr-1\" />\n                Filter\n              </Button>\n              <Button size=\"sm\" variant=\"outline\" disabled={selectedOrders.length === 0}>\n                Bulk Actions ({selectedOrders.length})\n              </Button>\n            </div>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Utensils className=\"h-5 w-5 mr-2\" />\n                  Current Orders Queue\n                </div>\n                <Badge variant=\"secondary\">{mockActiveOrders.length} active orders</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox \n                        checked={selectedOrders.length === mockActiveOrders.length}\n                        onCheckedChange={(checked) => {\n                          if (checked) {\n                            setSelectedOrders(mockActiveOrders.map(order => order.id));\n                          } else {\n                            setSelectedOrders([]);\n                          }\n                        }}\n                      />\n                    </TableHead>\n                    <TableHead>Order ID</TableHead>\n                    <TableHead>Student</TableHead>\n                    <TableHead>Grade</TableHead>\n                    <TableHead>Meal Type</TableHead>\n                    <TableHead>Items</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Special Notes</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {mockActiveOrders.map((order) => (\n                    <TableRow key={order.id}>\n                      <TableCell>\n                        <Checkbox \n                          checked={selectedOrders.includes(order.id)}\n                          onCheckedChange={() => handleOrderSelect(order.id)}\n                        />\n                      </TableCell>\n                      <TableCell className=\"font-medium\">{order.id}</TableCell>\n                      <TableCell>{order.studentName}</TableCell>\n                      <TableCell>{order.grade}{order.section}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\" className=\"capitalize\">\n                          {order.mealType}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-32 truncate\">\n                          {order.items.join(', ')}\n                        </div>\n                      </TableCell>\n                      <TableCell>₹{order.amount}</TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={order.status === 'ready' ? 'default' : 'secondary'}\n                          className=\"capitalize\"\n                        >\n                          {order.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <span className={cn(\"capitalize font-medium\", getPriorityColor(order.priority))}>\n                          {order.priority}\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"max-w-32\">\n                          {order.allergies.length > 0 && (\n                            <Badge variant=\"destructive\" className=\"text-xs mb-1 mr-1\">\n                              Allergies: {order.allergies.join(', ')}\n                            </Badge>\n                          )}\n                          {order.specialRequests && (\n                            <p className=\"text-xs text-gray-600 truncate\">\n                              {order.specialRequests}\n                            </p>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-1\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            View\n                          </Button>\n                          <AlertDialog>\n                            <AlertDialogTrigger asChild>\n                              <Button size=\"sm\" variant=\"default\">\n                                Update\n                              </Button>\n                            </AlertDialogTrigger>\n                            <AlertDialogContent>\n                              <AlertDialogHeader>\n                                <AlertDialogTitle>Update Order Status</AlertDialogTitle>\n                                <AlertDialogDescription>\n                                  Are you sure you want to update the status of order {order.id} for {order.studentName}?\n                                </AlertDialogDescription>\n                              </AlertDialogHeader>\n                              <AlertDialogFooter>\n                                <AlertDialogCancel>Cancel</AlertDialogCancel>\n                                <AlertDialogAction>Update Status</AlertDialogAction>\n                              </AlertDialogFooter>\n                            </AlertDialogContent>\n                          </AlertDialog>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n                {/* Financial Summary Tab */}\n                <TabsContent value=\"financial\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"h-5 w-5 mr-2\" />\n                  Weekly Nutrition Compliance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={mockSchoolAnalytics.nutritionCompliance}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"week\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"calories\" stackId=\"1\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.6} />\n                    <Area type=\"monotone\" dataKey=\"protein\" stackId=\"1\" stroke=\"#10b981\" fill=\"#10b981\" fillOpacity={0.6} />\n                    <Area type=\"monotone\" dataKey=\"vegetables\" stackId=\"1\" stroke=\"#f59e0b\" fill=\"#f59e0b\" fillOpacity={0.6} />\n                    <Area type=\"monotone\" dataKey=\"fruits\" stackId=\"1\" stroke=\"#ef4444\" fill=\"#ef4444\" fillOpacity={0.6} />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 mr-2\" />\n                  Nutrition Compliance Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <Apple className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                    <p className=\"text-2xl font-bold\">89.4%</p>\n                    <p className=\"text-sm text-gray-600\">Overall Compliance</p>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <Heart className=\"h-6 w-6 mx-auto mb-1 text-green-600\" />\n                    <p className=\"text-2xl font-bold\">94.2%</p>\n                    <p className=\"text-sm text-gray-600\">Calorie Targets</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Alert>\n                    <CheckCircle className=\"h-4 w-4\" />\n                    <AlertTitle>Protein Intake</AlertTitle>\n                    <AlertDescription>\n                      92% of students are meeting daily protein requirements.\n                    </AlertDescription>\n                  </Alert>\n                  <Alert>\n                    <AlertCircle className=\"h-4 w-4\" />\n                    <AlertTitle>Vegetable Consumption</AlertTitle>\n                    <AlertDescription>\n                      Need to improve vegetable intake - currently at 78% compliance.\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Detailed Nutrition Reports</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Accordion type=\"multiple\" className=\"w-full\">\n                <AccordionItem value=\"reports\">\n                  <AccordionTrigger>\n                    <div className=\"flex items-center\">\n                      <Download className=\"h-4 w-4 mr-2\" />\n                      Download Reports\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"flex space-x-4 mt-2\">\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Weekly Report\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Monthly Summary\n                      </Button>\n                      <Button variant=\"outline\">\n                        <Download className=\"h-4 w-4 mr-2\" />\n                        Grade-wise Analysis\n                      </Button>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n                \n                <AccordionItem value=\"settings\">\n                  <AccordionTrigger>\n                    <div className=\"flex items-center\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Nutrition Targets & Settings\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"space-y-4 mt-2\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Daily Calorie Target</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-2xl font-bold\">2200</span>\n                            <span className=\"text-sm text-gray-600\">kcal</span>\n                            <Toggle size=\"sm\" variant=\"outline\">Edit</Toggle>\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <label className=\"text-sm font-medium\">Protein Requirement</label>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-2xl font-bold\">45</span>\n                            <span className=\"text-sm text-gray-600\">grams</span>\n                            <Toggle size=\"sm\" variant=\"outline\">Edit</Toggle>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              </Accordion>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n                {/* Emergency Broadcast Tab */}\n                <TabsContent value=\"broadcast\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ChefHat className=\"h-5 w-5 mr-2\" />\n                  Kitchen Status Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <Users className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                    <p className=\"text-2xl font-bold\">{mockKitchenOperations.activeStaff}/{mockKitchenOperations.totalStaff}</p>\n                    <p className=\"text-sm text-gray-600\">Active Staff</p>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <Clock className=\"h-6 w-6 mx-auto mb-1 text-green-600\" />\n                    <p className=\"text-2xl font-bold\">{mockKitchenOperations.avgPreparationTime}m</p>\n                    <p className=\"text-sm text-gray-600\">Avg Prep Time</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Current Capacity</span>\n                    <span className=\"text-sm\">{mockKitchenOperations.currentCapacity}/{mockKitchenOperations.maxCapacity}</span>\n                  </div>\n                  <Progress value={(mockKitchenOperations.currentCapacity / mockKitchenOperations.maxCapacity) * 100} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Quality Score</span>\n                    <span className=\"text-sm\">{mockKitchenOperations.qualityScore}/5</span>\n                  </div>\n                  <Progress value={(mockKitchenOperations.qualityScore / 5) * 100} className=\"h-2\" />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm font-medium\">Efficiency</span>\n                    <span className=\"text-sm\">{mockKitchenOperations.efficiency}%</span>\n                  </div>\n                  <Progress value={mockKitchenOperations.efficiency} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Inventory Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockKitchenOperations.inventory.map((item) => (\n                    <Alert \n                      key={item.item}\n                      className={\n                        item.status === 'critical' \n                          ? 'border-red-200 bg-red-50' \n                          : item.status === 'low' \n                          ? 'border-yellow-200 bg-yellow-50'\n                          : 'border-green-200 bg-green-50'\n                      }\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <AlertTitle className={\n                            item.status === 'critical' \n                              ? 'text-red-800' \n                              : item.status === 'low' \n                              ? 'text-yellow-800'\n                              : 'text-green-800'\n                          }>\n                            {item.item}\n                          </AlertTitle>\n                          <AlertDescription className={\n                            item.status === 'critical' \n                              ? 'text-red-700' \n                              : item.status === 'low' \n                              ? 'text-yellow-700'\n                              : 'text-green-700'\n                          }>\n                            Stock: {item.stock}% (Threshold: {item.threshold}%)\n                          </AlertDescription>\n                        </div>\n                        <Badge \n                          variant={\n                            item.status === 'critical' \n                              ? 'destructive' \n                              : item.status === 'low' \n                              ? 'secondary'\n                              : 'default'\n                          }\n                        >\n                          {item.status}\n                        </Badge>\n                      </div>\n                    </Alert>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n                </TabsContent>\n              </Tabs>\n            )}\n\n            {/* Order Management View - New Structure */}\n            {activeView === 'orders' && (\n              <div className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <DollarSign className=\"h-5 w-5 mr-2\" />\n                  Daily Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-green-600\">₹{mockFinancialSummary.daily.revenue}</p>\n                  <p className=\"text-gray-600\">Revenue</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Orders: {mockFinancialSummary.daily.orders}</div>\n                  <div>Avg: ₹{mockFinancialSummary.daily.avgOrderValue}</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Weekly Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-blue-600\">₹{mockFinancialSummary.weekly.revenue}</p>\n                  <p className=\"text-gray-600\">Revenue</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Orders: {mockFinancialSummary.weekly.orders}</div>\n                  <div>Avg: ₹{mockFinancialSummary.weekly.avgOrderValue}</div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"h-5 w-5 mr-2\" />\n                  Monthly Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-purple-600\">₹{mockFinancialSummary.monthly.revenue}</p>\n                  <p className=\"text-gray-600\">Revenue</p>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>Orders: {mockFinancialSummary.monthly.orders}</div>\n                  <div>Avg: ₹{mockFinancialSummary.monthly.avgOrderValue}</div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Payment Methods Distribution</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockFinancialSummary.paymentMethods.map((method) => (\n                  <div key={method.method} className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"font-medium\">{method.method}</span>\n                      <span>₹{method.amount} ({method.percentage}%)</span>\n                    </div>\n                    <Progress value={method.percentage} className=\"h-2\" />\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n              </div>\n            )}\n\n            {/* Kitchen Operations View */}\n            {activeView === 'kitchen' && (\n              <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"h-5 w-5 mr-2\" />\n                Emergency Broadcast System\n              </CardTitle>\n              <CardDescription>\n                Send urgent communications to all users of the HASIVU platform\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Collapsible>\n                <CollapsibleTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch \n                        checked={emergencyMode}\n                        onCheckedChange={setEmergencyMode}\n                      />\n                      <span className=\"font-medium\">Emergency Mode</span>\n                      {emergencyMode && (\n                        <Badge variant=\"destructive\">ACTIVE</Badge>\n                      )}\n                    </div>\n                  </Button>\n                </CollapsibleTrigger>\n                <CollapsibleContent className=\"space-y-4 mt-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium\">Message</label>\n                    <textarea \n                      className=\"w-full p-3 border rounded-lg resize-none\"\n                      rows={4}\n                      placeholder=\"Enter your broadcast message...\"\n                      value={broadcastMessage}\n                      onChange={(e) => setBroadcastMessage(e.target.value)}\n                    />\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    <AlertDialog>\n                      <AlertDialogTrigger asChild>\n                        <Button \n                          className=\"flex-1\"\n                          variant={emergencyMode ? \"destructive\" : \"default\"}\n                          disabled={!broadcastMessage.trim()}\n                        >\n                          <Send className=\"h-4 w-4 mr-2\" />\n                          Send to All Users\n                        </Button>\n                      </AlertDialogTrigger>\n                      <AlertDialogContent>\n                        <AlertDialogHeader>\n                          <AlertDialogTitle>Confirm Broadcast</AlertDialogTitle>\n                          <AlertDialogDescription>\n                            This will send an {emergencyMode ? 'emergency' : 'urgent'} message to all active users. This action cannot be undone.\n                          </AlertDialogDescription>\n                        </AlertDialogHeader>\n                        <AlertDialogFooter>\n                          <AlertDialogCancel>Cancel</AlertDialogCancel>\n                          <AlertDialogAction>Send Broadcast</AlertDialogAction>\n                        </AlertDialogFooter>\n                      </AlertDialogContent>\n                    </AlertDialog>\n                    <Button variant=\"outline\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Target Groups\n                    </Button>\n                  </div>\n                </CollapsibleContent>\n              </Collapsible>\n\n              <Alert>\n                <Shield className=\"h-4 w-4\" />\n                <AlertTitle>Broadcast Guidelines</AlertTitle>\n                <AlertDescription>\n                  Emergency broadcasts are logged and sent immediately to all active users. \n                  Use responsibly and only for urgent school-wide communications.\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Broadcasts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"font-medium\">Weather Alert</p>\n                      <p className=\"text-sm text-gray-600\">Due to heavy rain, meal service timings have been adjusted...</p>\n                    </div>\n                    <Badge variant=\"secondary\">2h ago</Badge>\n                  </div>\n                </div>\n                <div className=\"p-3 border rounded-lg\">\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <p className=\"font-medium\">Menu Update</p>\n                      <p className=\"text-sm text-gray-600\">Special Republic Day menu available today with traditional items...</p>\n                    </div>\n                    <Badge variant=\"secondary\">1d ago</Badge>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n              </div>\n            )}\n          </div>\n        </SidebarInset>\n      </div>\n      \n      {/* Meal Order Drawer */}\n      {selectedMeal && (\n        <MealOrderDrawer\n          meal={selectedMeal}\n          isOpen={isMealDrawerOpen}\n          onClose={() => setIsMealDrawerOpen(false)}\n          onAddToCart={handleAddToCart}\n        />\n      )}\n    </SidebarProvider>\n  );\n};\n\nexport { EnhancedAdminDashboard };","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-kitchen-dashboard.tsx",["1794","1795","1796","1797","1798","1799","1800","1801","1802","1803","1804","1805","1806","1807","1808","1809","1810","1811","1812","1813","1814","1815","1816","1817","1818","1819","1820","1821","1822","1823","1824","1825","1826","1827"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, RadialBarChart, RadialBar\n} from 'recharts';\nimport { \n  ChefHat, Clock, Users, Activity, AlertCircle, CheckCircle,\n  Timer, Package, Truck, TrendingUp, Target, Bell, Settings,\n  PlayCircle, PauseCircle, RotateCcw, AlertTriangle, Zap,\n  Thermometer, Scale, Utensils, Coffee, Apple, Beef, Fish,\n  Wheat, Milk, Plus, Minus, RefreshCw, Filter, Search\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface KitchenData {\n  id: string;\n  name: string;\n  role: string;\n  email: string;\n  avatar?: string;\n  shift: string;\n  specializations: string[];\n}\n\ninterface EnhancedKitchenDashboardProps {\n  kitchenData: KitchenData;\n  className?: string;\n}\n\n// Comprehensive mock data for kitchen operations\nconst mockOrderQueue = [\n  {\n    id: 'ORD-001',\n    studentName: 'Emma Wilson',\n    grade: '8th',\n    section: 'A',\n    mealType: 'lunch',\n    items: [\n      { name: 'Grilled Chicken', prepTime: 15, status: 'cooking', station: 'grill' },\n      { name: 'Rice Bowl', prepTime: 5, status: 'ready', station: 'prep' },\n      { name: 'Garden Salad', prepTime: 3, status: 'preparing', station: 'cold' }\n    ],\n    totalPrepTime: 18,\n    startTime: '12:15 PM',\n    estimatedReady: '12:33 PM',\n    actualStartTime: '12:16 PM',\n    priority: 'high',\n    allergies: ['Nuts'],\n    specialRequests: 'Extra vegetables, less oil',\n    assignedChef: 'Chef Maria',\n    status: 'in_progress',\n    timeElapsed: 8\n  },\n  {\n    id: 'ORD-002',\n    studentName: 'James Martinez',\n    grade: '5th',\n    section: 'B',\n    mealType: 'snack',\n    items: [\n      { name: 'Fresh Fruit Bowl', prepTime: 2, status: 'ready', station: 'prep' },\n      { name: 'Orange Juice', prepTime: 1, status: 'ready', station: 'beverage' }\n    ],\n    totalPrepTime: 3,\n    startTime: '11:30 AM',\n    estimatedReady: '11:33 AM',\n    actualStartTime: '11:30 AM',\n    priority: 'medium',\n    allergies: [],\n    specialRequests: null,\n    assignedChef: 'Chef Roberto',\n    status: 'ready',\n    timeElapsed: 3\n  },\n  {\n    id: 'ORD-003',\n    studentName: 'Sophia Chen',\n    grade: '10th',\n    section: 'C',\n    mealType: 'lunch',\n    items: [\n      { name: 'Vegetarian Pasta', prepTime: 12, status: 'queued', station: 'main' },\n      { name: 'Garlic Bread', prepTime: 5, status: 'queued', station: 'oven' },\n      { name: 'Green Smoothie', prepTime: 2, status: 'queued', station: 'beverage' }\n    ],\n    totalPrepTime: 15,\n    startTime: '12:20 PM',\n    estimatedReady: '12:35 PM',\n    actualStartTime: null,\n    priority: 'low',\n    allergies: ['Dairy'],\n    specialRequests: 'Vegan cheese substitute',\n    assignedChef: 'Chef David',\n    status: 'queued',\n    timeElapsed: 0\n  }\n];\n\nconst mockKitchenStations = [\n  {\n    id: 'grill',\n    name: 'Grill Station',\n    chef: 'Chef Maria Santos',\n    status: 'active',\n    currentOrders: 3,\n    maxCapacity: 6,\n    avgTime: 12,\n    efficiency: 92,\n    temperature: 180,\n    lastCleaned: '10:30 AM'\n  },\n  {\n    id: 'prep',\n    name: 'Prep Station',\n    chef: 'Chef Roberto Martinez',\n    status: 'active',\n    currentOrders: 5,\n    maxCapacity: 8,\n    avgTime: 6,\n    efficiency: 88,\n    temperature: 22,\n    lastCleaned: '11:00 AM'\n  },\n  {\n    id: 'main',\n    name: 'Main Course',\n    chef: 'Chef David Kim',\n    status: 'busy',\n    currentOrders: 7,\n    maxCapacity: 8,\n    avgTime: 18,\n    efficiency: 85,\n    temperature: 165,\n    lastCleaned: '09:45 AM'\n  },\n  {\n    id: 'cold',\n    name: 'Cold Station',\n    chef: 'Chef Sarah Johnson',\n    status: 'active',\n    currentOrders: 2,\n    maxCapacity: 10,\n    avgTime: 4,\n    efficiency: 95,\n    temperature: 4,\n    lastCleaned: '11:30 AM'\n  },\n  {\n    id: 'beverage',\n    name: 'Beverage Station',\n    chef: 'Chef Alex Turner',\n    status: 'maintenance',\n    currentOrders: 0,\n    maxCapacity: 12,\n    avgTime: 3,\n    efficiency: 0,\n    temperature: 15,\n    lastCleaned: '08:00 AM'\n  }\n];\n\nconst mockInventoryStatus = [\n  {\n    id: 'chicken',\n    name: 'Chicken Breast',\n    category: 'protein',\n    currentStock: 25,\n    minThreshold: 15,\n    maxCapacity: 50,\n    unit: 'kg',\n    supplier: 'Fresh Farms Ltd',\n    lastDelivery: '2024-01-10',\n    nextDelivery: '2024-01-14',\n    costPerUnit: 320,\n    expiryDate: '2024-01-16',\n    status: 'good',\n    dailyUsage: 8\n  },\n  {\n    id: 'rice',\n    name: 'Basmati Rice',\n    category: 'grains',\n    currentStock: 45,\n    minThreshold: 20,\n    maxCapacity: 100,\n    unit: 'kg',\n    supplier: 'Grain Masters',\n    lastDelivery: '2024-01-08',\n    nextDelivery: '2024-01-15',\n    costPerUnit: 85,\n    expiryDate: '2024-03-15',\n    status: 'good',\n    dailyUsage: 12\n  },\n  {\n    id: 'vegetables',\n    name: 'Mixed Vegetables',\n    category: 'produce',\n    currentStock: 8,\n    minThreshold: 15,\n    maxCapacity: 30,\n    unit: 'kg',\n    supplier: 'Green Valley Farms',\n    lastDelivery: '2024-01-11',\n    nextDelivery: '2024-01-13',\n    costPerUnit: 65,\n    expiryDate: '2024-01-15',\n    status: 'low',\n    dailyUsage: 6\n  },\n  {\n    id: 'milk',\n    name: 'Fresh Milk',\n    category: 'dairy',\n    currentStock: 3,\n    minThreshold: 10,\n    maxCapacity: 40,\n    unit: 'liters',\n    supplier: 'Dairy Best',\n    lastDelivery: '2024-01-10',\n    nextDelivery: '2024-01-13',\n    costPerUnit: 55,\n    expiryDate: '2024-01-14',\n    status: 'critical',\n    dailyUsage: 8\n  }\n];\n\nconst mockPerformanceMetrics = {\n  daily: {\n    ordersCompleted: 156,\n    avgPrepTime: 14.5,\n    onTimeDelivery: 94.2,\n    wastePercentage: 4.8,\n    qualityScore: 4.7,\n    efficiency: 89.3\n  },\n  weekly: [\n    { day: 'Mon', orders: 180, avgTime: 15.2, onTime: 92.1, waste: 5.2, quality: 4.6 },\n    { day: 'Tue', orders: 165, avgTime: 14.8, onTime: 93.8, waste: 4.9, quality: 4.7 },\n    { day: 'Wed', orders: 190, avgTime: 16.1, onTime: 90.5, waste: 5.8, quality: 4.5 },\n    { day: 'Thu', orders: 175, avgTime: 14.2, onTime: 95.1, waste: 4.1, quality: 4.8 },\n    { day: 'Fri', orders: 200, avgTime: 15.7, onTime: 89.2, waste: 6.2, quality: 4.4 },\n    { day: 'Sat', orders: 120, avgTime: 13.5, onTime: 96.8, waste: 3.9, quality: 4.9 },\n    { day: 'Today', orders: 156, avgTime: 14.5, onTime: 94.2, waste: 4.8, quality: 4.7 }\n  ],\n  hourlyLoad: [\n    { hour: '8AM', orders: 45, capacity: 50 },\n    { hour: '9AM', orders: 12, capacity: 50 },\n    { hour: '10AM', orders: 8, capacity: 50 },\n    { hour: '11AM', orders: 25, capacity: 50 },\n    { hour: '12PM', orders: 78, capacity: 80 },\n    { hour: '1PM', orders: 95, capacity: 80 },\n    { hour: '2PM', orders: 42, capacity: 50 },\n    { hour: '3PM', orders: 35, capacity: 50 }\n  ]\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\nexport const EnhancedKitchenDashboard: React.FC<EnhancedKitchenDashboardProps> = ({\n  kitchenData,\n  className\n}) => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [selectedStation, setSelectedStation] = useState<string | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [sortBy, setSortBy] = useState<'priority' | 'time' | 'station'>('priority');\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    if (autoRefresh) {\n      const refreshTimer = setInterval(() => {\n        // In a real app, this would fetch fresh data\n        console.log('Auto-refreshing kitchen data...');\n      }, 30000); // Refresh every 30 seconds\n      \n      return () => clearInterval(refreshTimer);\n    }\n  }, [autoRefresh]);\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'ready': return 'bg-green-500';\n      case 'in_progress': case 'cooking': case 'preparing': return 'bg-yellow-500';\n      case 'queued': return 'bg-blue-500';\n      case 'maintenance': return 'bg-red-500';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'text-red-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getInventoryStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'text-green-600';\n      case 'low': return 'text-yellow-600';\n      case 'critical': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const formatTime = (timeString: string) => {\n    return new Date(`2024-01-12 ${timeString}`).toLocaleTimeString('en-US', {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: true\n    });\n  };\n\n  const calculateProgress = (order: any) => {\n    if (order.status === 'ready') return 100;\n    if (order.status === 'queued') return 0;\n    return Math.min((order.timeElapsed / order.totalPrepTime) * 100, 100);\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Kitchen Overview Header */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-100 text-sm\">Active Orders</p>\n                <p className=\"text-2xl font-bold\">{mockOrderQueue.length}</p>\n                <p className=\"text-xs text-orange-200 mt-1\">In queue</p>\n              </div>\n              <Utensils className=\"h-8 w-8 text-orange-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">Avg Prep Time</p>\n                <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.avgPrepTime}m</p>\n                <p className=\"text-xs text-blue-200 mt-1\">Today's average</p>\n              </div>\n              <Timer className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm\">On-Time Delivery</p>\n                <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.onTimeDelivery}%</p>\n                <p className=\"text-xs text-green-200 mt-1\">Performance score</p>\n              </div>\n              <Target className=\"h-8 w-8 text-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm\">Quality Score</p>\n                <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.qualityScore}/5</p>\n                <p className=\"text-xs text-purple-200 mt-1\">Customer rating</p>\n              </div>\n              <CheckCircle className=\"h-8 w-8 text-purple-200\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Auto-refresh controls */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Switch \n                  checked={autoRefresh}\n                  onCheckedChange={setAutoRefresh}\n                />\n                <span className=\"text-sm font-medium\">Auto Refresh</span>\n              </div>\n              <Select value={sortBy} onValueChange={(value) => setSortBy(value as any)}>\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"priority\">Priority</SelectItem>\n                  <SelectItem value=\"time\">Time</SelectItem>\n                  <SelectItem value=\"station\">Station</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"px-3 py-1\">\n                <Clock className=\"h-4 w-4 mr-1\" />\n                {currentTime.toLocaleTimeString()}\n              </Badge>\n              <Button size=\"sm\" variant=\"outline\">\n                <RefreshCw className=\"h-4 w-4 mr-1\" />\n                Refresh Now\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"orders\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"orders\">Order Queue</TabsTrigger>\n          <TabsTrigger value=\"stations\">Kitchen Stations</TabsTrigger>\n          <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\n        </TabsList>\n\n        {/* Order Queue Tab */}\n        <TabsContent value=\"orders\" className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            {mockOrderQueue\n              .sort((a, b) => {\n                if (sortBy === 'priority') {\n                  const priorityOrder = { high: 3, medium: 2, low: 1 };\n                  return priorityOrder[b.priority as keyof typeof priorityOrder] - priorityOrder[a.priority as keyof typeof priorityOrder];\n                } else if (sortBy === 'time') {\n                  return a.totalPrepTime - b.totalPrepTime;\n                }\n                return a.id.localeCompare(b.id);\n              })\n              .map((order) => (\n                <Card key={order.id} className={`transition-all duration-200 ${order.status === 'ready' ? 'border-green-500 bg-green-50' : ''}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`p-2 rounded-full ${getStatusColor(order.status)}`}>\n                          {order.status === 'ready' ? (\n                            <CheckCircle className=\"h-5 w-5 text-white\" />\n                          ) : order.status === 'in_progress' ? (\n                            <PlayCircle className=\"h-5 w-5 text-white\" />\n                          ) : (\n                            <Clock className=\"h-5 w-5 text-white\" />\n                          )}\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{order.id}</h3>\n                          <p className=\"text-sm text-gray-600\">\n                            {order.studentName} • {order.grade}{order.section} • {order.mealType}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right space-y-1\">\n                        <Badge \n                          variant={order.status === 'ready' ? 'default' : 'secondary'}\n                          className=\"capitalize\"\n                        >\n                          {order.status.replace('_', ' ')}\n                        </Badge>\n                        <p className={cn(\"text-sm font-medium\", getPriorityColor(order.priority))}>\n                          {order.priority.toUpperCase()} PRIORITY\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          Est: {order.estimatedReady}\n                        </p>\n                      </div>\n                    </div>\n\n                    {/* Progress Bar */}\n                    <div className=\"mb-4\">\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"text-sm font-medium\">Preparation Progress</span>\n                        <span className=\"text-sm text-gray-600\">\n                          {order.timeElapsed}m / {order.totalPrepTime}m\n                        </span>\n                      </div>\n                      <Progress value={calculateProgress(order)} className=\"h-2\" />\n                    </div>\n\n                    {/* Order Items */}\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Items & Status:</p>\n                        <div className=\"space-y-2\">\n                          {order.items.map((item, index) => (\n                            <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                              <span className=\"text-sm\">{item.name}</span>\n                              <div className=\"flex items-center space-x-2\">\n                                <Badge \n                                  variant={item.status === 'ready' ? 'default' : 'secondary'}\n                                  className=\"text-xs capitalize\"\n                                >\n                                  {item.status}\n                                </Badge>\n                                <span className=\"text-xs text-gray-500\">{item.station}</span>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Details:</p>\n                        <div className=\"space-y-2 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Assigned Chef:</span>\n                            <span className=\"font-medium\">{order.assignedChef}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Start Time:</span>\n                            <span>{order.actualStartTime || order.startTime}</span>\n                          </div>\n                          {order.allergies.length > 0 && (\n                            <div>\n                              <span className=\"text-red-600 font-medium\">Allergies:</span>\n                              <div className=\"flex flex-wrap gap-1 mt-1\">\n                                {order.allergies.map((allergy) => (\n                                  <Badge key={allergy} variant=\"destructive\" className=\"text-xs\">\n                                    {allergy}\n                                  </Badge>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                          {order.specialRequests && (\n                            <div>\n                              <span className=\"font-medium\">Special Requests:</span>\n                              <p className=\"text-gray-600 mt-1\">{order.specialRequests}</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex space-x-2\">\n                      {order.status === 'queued' && (\n                        <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700\">\n                          <PlayCircle className=\"h-4 w-4 mr-1\" />\n                          Start Cooking\n                        </Button>\n                      )}\n                      {order.status === 'in_progress' && (\n                        <>\n                          <Button size=\"sm\" variant=\"outline\">\n                            <PauseCircle className=\"h-4 w-4 mr-1\" />\n                            Pause\n                          </Button>\n                          <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                            <CheckCircle className=\"h-4 w-4 mr-1\" />\n                            Mark Ready\n                          </Button>\n                        </>\n                      )}\n                      {order.status === 'ready' && (\n                        <Button size=\"sm\" className=\"bg-purple-600 hover:bg-purple-700\">\n                          <Bell className=\"h-4 w-4 mr-1\" />\n                          Notify Pickup\n                        </Button>\n                      )}\n                      <Button size=\"sm\" variant=\"outline\">\n                        <Settings className=\"h-4 w-4 mr-1\" />\n                        Edit\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n          </div>\n        </TabsContent>\n\n        {/* Kitchen Stations Tab */}\n        <TabsContent value=\"stations\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n            {mockKitchenStations.map((station) => (\n              <Card \n                key={station.id} \n                className={`transition-all duration-200 ${\n                  station.status === 'maintenance' \n                    ? 'border-red-300 bg-red-50' \n                    : station.status === 'busy' \n                    ? 'border-yellow-300 bg-yellow-50'\n                    : 'border-green-300 bg-green-50'\n                }`}\n              >\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">{station.name}</CardTitle>\n                    <Badge \n                      variant={\n                        station.status === 'maintenance' \n                          ? 'destructive' \n                          : station.status === 'busy' \n                          ? 'secondary'\n                          : 'default'\n                      }\n                      className=\"capitalize\"\n                    >\n                      {station.status}\n                    </Badge>\n                  </div>\n                  <CardDescription>{station.chef}</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-3 bg-white rounded-lg\">\n                      <Clock className=\"h-5 w-5 mx-auto mb-1 text-blue-600\" />\n                      <p className=\"text-sm text-gray-600\">Avg Time</p>\n                      <p className=\"font-semibold\">{station.avgTime}m</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-white rounded-lg\">\n                      <Thermometer className=\"h-5 w-5 mx-auto mb-1 text-red-600\" />\n                      <p className=\"text-sm text-gray-600\">Temperature</p>\n                      <p className=\"font-semibold\">{station.temperature}°C</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">Capacity</span>\n                      <span className=\"text-sm\">{station.currentOrders}/{station.maxCapacity}</span>\n                    </div>\n                    <Progress value={(station.currentOrders / station.maxCapacity) * 100} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">Efficiency</span>\n                      <span className=\"text-sm\">{station.efficiency}%</span>\n                    </div>\n                    <Progress value={station.efficiency} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"text-xs text-gray-500\">\n                    Last cleaned: {station.lastCleaned}\n                  </div>\n\n                  <div className=\"flex space-x-2\">\n                    {station.status === 'maintenance' ? (\n                      <Button size=\"sm\" className=\"flex-1 bg-green-600 hover:bg-green-700\">\n                        <PlayCircle className=\"h-4 w-4 mr-1\" />\n                        Resume\n                      </Button>\n                    ) : (\n                      <>\n                        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                          <Settings className=\"h-4 w-4 mr-1\" />\n                          Settings\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                          <RotateCcw className=\"h-4 w-4 mr-1\" />\n                          Clean\n                        </Button>\n                      </>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Inventory Tab */}\n        <TabsContent value=\"inventory\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Package className=\"h-5 w-5 mr-2\" />\n                  Current Stock Levels\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockInventoryStatus.map((item) => (\n                    <div key={item.id} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center space-x-2\">\n                          {item.category === 'protein' && <Beef className=\"h-4 w-4 text-red-500\" />}\n                          {item.category === 'grains' && <Wheat className=\"h-4 w-4 text-yellow-500\" />}\n                          {item.category === 'produce' && <Apple className=\"h-4 w-4 text-green-500\" />}\n                          {item.category === 'dairy' && <Milk className=\"h-4 w-4 text-blue-500\" />}\n                          <span className=\"font-medium\">{item.name}</span>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={cn(\"font-semibold\", getInventoryStatusColor(item.status))}>\n                            {item.currentStock} {item.unit}\n                          </span>\n                          <p className=\"text-xs text-gray-500\">Min: {item.minThreshold}</p>\n                        </div>\n                      </div>\n                      <Progress \n                        value={(item.currentStock / item.maxCapacity) * 100}\n                        className={cn(\n                          \"h-2\",\n                          item.status === 'critical' ? 'bg-red-100' : \n                          item.status === 'low' ? 'bg-yellow-100' : 'bg-green-100'\n                        )}\n                      />\n                      <div className=\"flex justify-between text-xs text-gray-500\">\n                        <span>Daily usage: {item.dailyUsage} {item.unit}</span>\n                        <span>Expires: {item.expiryDate}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Truck className=\"h-5 w-5 mr-2\" />\n                  Delivery Schedule\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockInventoryStatus\n                    .filter(item => item.status === 'low' || item.status === 'critical')\n                    .map((item) => (\n                      <Alert \n                        key={item.id}\n                        className={\n                          item.status === 'critical' \n                            ? 'border-red-200 bg-red-50' \n                            : 'border-yellow-200 bg-yellow-50'\n                        }\n                      >\n                        <AlertTriangle className=\"h-4 w-4\" />\n                        <AlertTitle className={\n                          item.status === 'critical' ? 'text-red-800' : 'text-yellow-800'\n                        }>\n                          {item.name} - {item.status.toUpperCase()}\n                        </AlertTitle>\n                        <AlertDescription className={\n                          item.status === 'critical' ? 'text-red-700' : 'text-yellow-700'\n                        }>\n                          Next delivery: {item.nextDelivery} from {item.supplier}\n                          <div className=\"mt-2 flex space-x-2\">\n                            <Button size=\"sm\" variant=\"outline\">\n                              Contact Supplier\n                            </Button>\n                            <Button size=\"sm\" variant=\"default\">\n                              Rush Order\n                            </Button>\n                          </div>\n                        </AlertDescription>\n                      </Alert>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Weekly Performance Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={mockPerformanceMetrics.weekly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"day\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Line type=\"monotone\" dataKey=\"orders\" stroke=\"#3b82f6\" strokeWidth={2} name=\"Orders\" />\n                    <Line type=\"monotone\" dataKey=\"avgTime\" stroke=\"#10b981\" strokeWidth={2} name=\"Avg Time (min)\" />\n                    <Line type=\"monotone\" dataKey=\"onTime\" stroke=\"#f59e0b\" strokeWidth={2} name=\"On Time %\" />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Hourly Order Load\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={mockPerformanceMetrics.hourlyLoad}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"hour\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"orders\" fill=\"#3b82f6\" name=\"Orders\" />\n                    <Bar dataKey=\"capacity\" fill=\"#e5e7eb\" name=\"Capacity\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Performance Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <Utensils className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.ordersCompleted}</p>\n                  <p className=\"text-sm text-gray-600\">Orders Completed</p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <CheckCircle className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n                  <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.efficiency}%</p>\n                  <p className=\"text-sm text-gray-600\">Overall Efficiency</p>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <Scale className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n                  <p className=\"text-2xl font-bold\">{mockPerformanceMetrics.daily.wastePercentage}%</p>\n                  <p className=\"text-sm text-gray-600\">Waste Percentage</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Alerts Tab */}\n        <TabsContent value=\"alerts\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"h-5 w-5 mr-2\" />\n                Active Kitchen Alerts\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Alert className=\"border-red-200 bg-red-50\">\n                <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                <AlertTitle className=\"text-red-800\">Critical Stock Alert</AlertTitle>\n                <AlertDescription className=\"text-red-700\">\n                  Fresh Milk stock critically low (3 liters remaining). Immediate restocking required.\n                  <Button size=\"sm\" className=\"mt-2 bg-red-600 hover:bg-red-700\">\n                    Order Now\n                  </Button>\n                </AlertDescription>\n              </Alert>\n\n              <Alert className=\"border-yellow-200 bg-yellow-50\">\n                <AlertCircle className=\"h-4 w-4 text-yellow-600\" />\n                <AlertTitle className=\"text-yellow-800\">Station Maintenance</AlertTitle>\n                <AlertDescription className=\"text-yellow-700\">\n                  Beverage Station is currently under maintenance. Est. completion: 2:00 PM.\n                  <Button size=\"sm\" variant=\"outline\" className=\"mt-2\">\n                    View Details\n                  </Button>\n                </AlertDescription>\n              </Alert>\n\n              <Alert className=\"border-blue-200 bg-blue-50\">\n                <Clock className=\"h-4 w-4 text-blue-600\" />\n                <AlertTitle className=\"text-blue-800\">Peak Hour Approaching</AlertTitle>\n                <AlertDescription className=\"text-blue-700\">\n                  Lunch rush expected in 30 minutes. Current queue: 3 orders. Recommend prepping popular items.\n                  <Button size=\"sm\" variant=\"outline\" className=\"mt-2\">\n                    View Prep Suggestions\n                  </Button>\n                </AlertDescription>\n              </Alert>\n\n              <Alert className=\"border-green-200 bg-green-50\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                <AlertTitle className=\"text-green-800\">Quality Achievement</AlertTitle>\n                <AlertDescription className=\"text-green-700\">\n                  Congratulations! Your team achieved a 4.7/5 quality rating today - exceeding the target!\n                </AlertDescription>\n              </Alert>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Alert Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Low Stock Alerts</p>\n                  <p className=\"text-sm text-gray-600\">Get notified when inventory falls below threshold</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Queue Overload Warnings</p>\n                  <p className=\"text-sm text-gray-600\">Alert when order queue exceeds capacity</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Quality Score Notifications</p>\n                  <p className=\"text-sm text-gray-600\">Daily quality performance updates</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Maintenance Reminders</p>\n                  <p className=\"text-sm text-gray-600\">Scheduled maintenance and cleaning alerts</p>\n                </div>\n                <Switch defaultChecked />\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport { EnhancedKitchenDashboard };","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-parent-dashboard.tsx",["1828","1829","1830","1831","1832","1833","1834","1835","1836","1837","1838"],[],"\"use client\"\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, ComposedChart\n} from 'recharts';\nimport { \n  Users, CreditCard, Bell, TrendingUp, Calendar, Settings,\n  AlertCircle, CheckCircle, Clock, DollarSign, Activity, Heart,\n  ShoppingCart, MessageSquare, FileText, Download, Eye,\n  Plus, Minus, Star, Target, Award, Utensils, Apple\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Child {\n  id: string;\n  name: string;\n  class: string;\n  section: string;\n  avatar?: string;\n  grade: string;\n  age: number;\n  allergies: string[];\n  preferences: string[];\n}\n\ninterface ParentData {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  avatar?: string;\n  children: Child[];\n}\n\ninterface EnhancedParentDashboardProps {\n  parentData: ParentData;\n  className?: string;\n}\n\n// Mock data for comprehensive parent dashboard\nconst mockChildrenData = [\n  {\n    id: 'child-001',\n    name: 'Sarah Johnson',\n    class: '8th Grade',\n    section: 'A',\n    grade: '8',\n    age: 13,\n    avatar: '/avatars/sarah.jpg',\n    allergies: ['Nuts', 'Dairy'],\n    preferences: ['Vegetarian', 'Low Sugar'],\n    walletBalance: 245.50,\n    monthlySpending: 1250,\n    monthlyBudget: 1500,\n    nutritionScore: 85,\n    attendanceRate: 96,\n    recentOrders: [\n      { id: '1', meal: 'Vegetable Biryani', date: '2024-01-12', status: 'delivered', amount: 45 },\n      { id: '2', meal: 'Fruit Salad', date: '2024-01-12', status: 'preparing', amount: 25 }\n    ],\n    notifications: [\n      { id: '1', type: 'approval', message: 'New meal order requires approval', urgent: true },\n      { id: '2', type: 'nutrition', message: 'Daily nutrition goal achieved!', urgent: false }\n    ]\n  },\n  {\n    id: 'child-002',\n    name: 'David Johnson',\n    class: '5th Grade',\n    section: 'B',\n    grade: '5',\n    age: 10,\n    avatar: '/avatars/david.jpg',\n    allergies: ['Shellfish'],\n    preferences: ['No Spicy Food'],\n    walletBalance: 156.75,\n    monthlySpending: 980,\n    monthlyBudget: 1200,\n    nutritionScore: 78,\n    attendanceRate: 92,\n    recentOrders: [\n      { id: '1', meal: 'Chicken Sandwich', date: '2024-01-12', status: 'delivered', amount: 35 },\n      { id: '2', meal: 'Chocolate Milk', date: '2024-01-11', status: 'delivered', amount: 15 }\n    ],\n    notifications: [\n      { id: '1', type: 'wallet', message: 'Wallet balance below ₹200', urgent: true }\n    ]\n  }\n];\n\nconst mockSpendingAnalytics = {\n  monthly: [\n    { month: 'Aug', sarah: 1320, david: 1050, total: 2370 },\n    { month: 'Sep', sarah: 1280, david: 1120, total: 2400 },\n    { month: 'Oct', sarah: 1450, david: 980, total: 2430 },\n    { month: 'Nov', sarah: 1380, david: 1200, total: 2580 },\n    { month: 'Dec', sarah: 1250, david: 980, total: 2230 },\n    { month: 'Jan', sarah: 890, david: 654, total: 1544 }\n  ],\n  categories: [\n    { name: 'Lunch', value: 60, amount: 1540 },\n    { name: 'Breakfast', value: 25, amount: 640 },\n    { name: 'Snacks', value: 10, amount: 256 },\n    { name: 'Drinks', value: 5, amount: 128 }\n  ]\n};\n\nconst mockNutritionReports = {\n  sarah: {\n    weeklyCalories: [\n      { day: 'Mon', target: 1800, consumed: 1720, variance: -80 },\n      { day: 'Tue', target: 1800, consumed: 1950, variance: 150 },\n      { day: 'Wed', target: 1800, consumed: 1680, variance: -120 },\n      { day: 'Thu', target: 1800, consumed: 1820, variance: 20 },\n      { day: 'Fri', target: 1800, consumed: 1780, variance: -20 },\n      { day: 'Sat', target: 1800, consumed: 1890, variance: 90 },\n      { day: 'Sun', target: 1800, consumed: 1750, variance: -50 }\n    ],\n    macros: [\n      { name: 'Protein', value: 25, target: 30, color: '#3b82f6' },\n      { name: 'Carbs', value: 45, target: 50, color: '#10b981' },\n      { name: 'Fat', value: 30, target: 20, color: '#f59e0b' }\n    ]\n  },\n  david: {\n    weeklyCalories: [\n      { day: 'Mon', target: 1600, consumed: 1520, variance: -80 },\n      { day: 'Tue', target: 1600, consumed: 1650, variance: 50 },\n      { day: 'Wed', target: 1600, consumed: 1480, variance: -120 },\n      { day: 'Thu', target: 1600, consumed: 1620, variance: 20 },\n      { day: 'Fri', target: 1600, consumed: 1580, variance: -20 },\n      { day: 'Sat', target: 1600, consumed: 1690, variance: 90 },\n      { day: 'Sun', target: 1600, consumed: 1550, variance: -50 }\n    ],\n    macros: [\n      { name: 'Protein', value: 22, target: 25, color: '#3b82f6' },\n      { name: 'Carbs', value: 48, target: 55, color: '#10b981' },\n      { name: 'Fat', value: 30, target: 20, color: '#f59e0b' }\n    ]\n  }\n};\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444'];\n\nexport const EnhancedParentDashboard: React.FC<EnhancedParentDashboardProps> = ({\n  parentData,\n  className\n}) => {\n  const [selectedChild, setSelectedChild] = useState(mockChildrenData[0]);\n  const [viewMode, setViewMode] = useState<'individual' | 'comparative'>('individual');\n  const [notificationSettings, setNotificationSettings] = useState({\n    orderApprovals: true,\n    lowBalance: true,\n    nutritionAlerts: true,\n    weeklyReports: true\n  });\n\n  const totalSpending = mockChildrenData.reduce((sum, child) => sum + child.monthlySpending, 0);\n  const totalBudget = mockChildrenData.reduce((sum, child) => sum + child.monthlyBudget, 0);\n  const totalBalance = mockChildrenData.reduce((sum, child) => sum + child.walletBalance, 0);\n\n  const allNotifications = mockChildrenData.flatMap(child => \n    child.notifications.map(notif => ({ ...notif, childName: child.name, childId: child.id }))\n  );\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Parent Overview Header */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">Total Children</p>\n                <p className=\"text-2xl font-bold\">{mockChildrenData.length}</p>\n              </div>\n              <Users className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm\">Total Balance</p>\n                <p className=\"text-2xl font-bold\">₹{totalBalance.toFixed(2)}</p>\n              </div>\n              <CreditCard className=\"h-8 w-8 text-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm\">Monthly Spending</p>\n                <p className=\"text-2xl font-bold\">₹{totalSpending}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-purple-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-100 text-sm\">Notifications</p>\n                <p className=\"text-2xl font-bold\">{allNotifications.length}</p>\n              </div>\n              <Bell className=\"h-8 w-8 text-orange-200\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Child Selection */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center\">\n              <Users className=\"h-5 w-5 mr-2\" />\n              Children Management\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Select value={viewMode} onValueChange={(value) => setViewMode(value as any)}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"individual\">Individual View</SelectItem>\n                  <SelectItem value=\"comparative\">Compare All</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {mockChildrenData.map((child) => (\n              <Card \n                key={child.id}\n                className={`cursor-pointer transition-all duration-200 ${\n                  selectedChild.id === child.id && viewMode === 'individual'\n                    ? 'ring-2 ring-blue-500 bg-blue-50' \n                    : 'hover:shadow-md'\n                }`}\n                onClick={() => {\n                  if (viewMode === 'individual') setSelectedChild(child);\n                }}\n              >\n                <CardContent className=\"p-4\">\n                  <div className=\"flex items-center space-x-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src={child.avatar} />\n                      <AvatarFallback>\n                        {child.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-semibold\">{child.name}</h3>\n                      <p className=\"text-sm text-gray-600\">{child.class} - Section {child.section}</p>\n                      \n                      <div className=\"flex items-center space-x-2 mt-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Balance: ₹{child.walletBalance}\n                        </Badge>\n                        <Badge \n                          variant={child.nutritionScore >= 80 ? \"default\" : \"secondary\"}\n                          className=\"text-xs\"\n                        >\n                          Nutrition: {child.nutritionScore}%\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    {child.notifications.length > 0 && (\n                      <div className=\"flex items-center\">\n                        <Bell className=\"h-4 w-4 text-orange-500\" />\n                        <span className=\"text-xs bg-red-500 text-white rounded-full px-1 ml-1\">\n                          {child.notifications.length}\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"spending\">Spending</TabsTrigger>\n          <TabsTrigger value=\"nutrition\">Nutrition</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"payments\">Payments</TabsTrigger>\n          <TabsTrigger value=\"settings\">Settings</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          {viewMode === 'individual' ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Individual Child Overview */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Avatar className=\"h-8 w-8 mr-2\">\n                      <AvatarImage src={selectedChild.avatar} />\n                      <AvatarFallback>\n                        {selectedChild.name.split(' ').map(n => n[0]).join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    {selectedChild.name} - Quick Stats\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                      <CreditCard className=\"h-6 w-6 mx-auto mb-1 text-blue-600\" />\n                      <p className=\"text-sm text-gray-600\">Wallet Balance</p>\n                      <p className=\"font-semibold\">₹{selectedChild.walletBalance}</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                      <Heart className=\"h-6 w-6 mx-auto mb-1 text-green-600\" />\n                      <p className=\"text-sm text-gray-600\">Nutrition Score</p>\n                      <p className=\"font-semibold\">{selectedChild.nutritionScore}%</p>\n                    </div>\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div>\n                    <p className=\"font-medium mb-2\">Monthly Budget Progress</p>\n                    <Progress \n                      value={(selectedChild.monthlySpending / selectedChild.monthlyBudget) * 100}\n                      className=\"h-2\"\n                    />\n                    <p className=\"text-sm text-gray-600 mt-1\">\n                      ₹{selectedChild.monthlySpending} / ₹{selectedChild.monthlyBudget}\n                    </p>\n                  </div>\n\n                  <div>\n                    <p className=\"font-medium mb-2\">Dietary Information</p>\n                    <div className=\"space-y-2\">\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Allergies:</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {selectedChild.allergies.map((allergy) => (\n                            <Badge key={allergy} variant=\"destructive\" className=\"text-xs\">\n                              {allergy}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Preferences:</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {selectedChild.preferences.map((pref) => (\n                            <Badge key={pref} variant=\"secondary\" className=\"text-xs\">\n                              {pref}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Recent Orders */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                    Recent Orders - {selectedChild.name}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {selectedChild.recentOrders.map((order) => (\n                      <div key={order.id} className=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\">\n                        <div>\n                          <p className=\"font-medium\">{order.meal}</p>\n                          <p className=\"text-sm text-gray-600\">{order.date}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            variant={order.status === 'delivered' ? 'default' : 'secondary'}\n                            className=\"mb-1\"\n                          >\n                            {order.status}\n                          </Badge>\n                          <p className=\"text-sm font-medium\">₹{order.amount}</p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            /* Comparative View */\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Children Comparison</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <h4 className=\"font-medium mb-3\">Wallet Balances</h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <BarChart data={mockChildrenData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"walletBalance\" fill=\"#3b82f6\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-3\">Nutrition Scores</h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <BarChart data={mockChildrenData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"nutritionScore\" fill=\"#10b981\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"font-medium mb-3\">Monthly Spending</h4>\n                      <ResponsiveContainer width=\"100%\" height={200}>\n                        <BarChart data={mockChildrenData}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"monthlySpending\" fill=\"#f59e0b\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Spending Tab */}\n        <TabsContent value=\"spending\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Monthly Spending Trend\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={mockSpendingAnalytics.monthly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"sarah\" stackId=\"stack\" fill=\"#3b82f6\" name=\"Sarah\" />\n                    <Bar dataKey=\"david\" stackId=\"stack\" fill=\"#10b981\" name=\"David\" />\n                    <Line type=\"monotone\" dataKey=\"total\" stroke=\"#f59e0b\" strokeWidth={2} name=\"Total\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Spending by Category\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={mockSpendingAnalytics.categories}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                      label={({ name, value }) => `${name} ${value}%`}\n                    >\n                      {mockSpendingAnalytics.categories.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Spending Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\n                  <DollarSign className=\"h-8 w-8 mx-auto mb-2 text-blue-600\" />\n                  <p className=\"text-2xl font-bold\">₹{totalSpending}</p>\n                  <p className=\"text-sm text-gray-600\">Total Monthly Spending</p>\n                </div>\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\n                  <Target className=\"h-8 w-8 mx-auto mb-2 text-green-600\" />\n                  <p className=\"text-2xl font-bold\">₹{totalBudget}</p>\n                  <p className=\"text-sm text-gray-600\">Monthly Budget</p>\n                </div>\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\n                  <TrendingUp className=\"h-8 w-8 mx-auto mb-2 text-purple-600\" />\n                  <p className=\"text-2xl font-bold\">₹{(totalSpending / mockSpendingAnalytics.monthly.length).toFixed(0)}</p>\n                  <p className=\"text-sm text-gray-600\">Average Monthly</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Nutrition Tab */}\n        <TabsContent value=\"nutrition\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Apple className=\"h-5 w-5 mr-2\" />\n                  Weekly Calorie Tracking - {selectedChild.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <ComposedChart data={mockNutritionReports[selectedChild.id === 'child-001' ? 'sarah' : 'david'].weeklyCalories}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"day\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"target\" fill=\"#e5e7eb\" name=\"Target\" />\n                    <Bar dataKey=\"consumed\" fill=\"#3b82f6\" name=\"Consumed\" />\n                    <Line type=\"monotone\" dataKey=\"variance\" stroke=\"#ef4444\" name=\"Variance\" />\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Heart className=\"h-5 w-5 mr-2\" />\n                  Macro Distribution - {selectedChild.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockNutritionReports[selectedChild.id === 'child-001' ? 'sarah' : 'david'].macros.map((macro) => (\n                    <div key={macro.name}>\n                      <div className=\"flex justify-between items-center mb-2\">\n                        <span className=\"font-medium\">{macro.name}</span>\n                        <span className=\"text-sm text-gray-600\">{macro.value}% / {macro.target}%</span>\n                      </div>\n                      <Progress value={(macro.value / macro.target) * 100} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Nutrition Insights</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Alert>\n                  <CheckCircle className=\"h-4 w-4\" />\n                  <AlertTitle>Great Progress</AlertTitle>\n                  <AlertDescription>\n                    {selectedChild.name} has maintained excellent nutrition this week!\n                  </AlertDescription>\n                </Alert>\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertTitle>Protein Intake</AlertTitle>\n                  <AlertDescription>\n                    Consider adding more protein-rich meals to reach daily targets.\n                  </AlertDescription>\n                </Alert>\n                <Alert>\n                  <Heart className=\"h-4 w-4\" />\n                  <AlertTitle>Balanced Diet</AlertTitle>\n                  <AlertDescription>\n                    Overall macro balance is within healthy ranges for {selectedChild.age}-year-olds.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"h-5 w-5 mr-2\" />\n                Active Notifications\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {allNotifications.map((notification) => (\n                  <Alert key={notification.id} className={notification.urgent ? 'border-red-200 bg-red-50' : ''}>\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        {notification.urgent ? (\n                          <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                        ) : (\n                          <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n                        )}\n                        <div className=\"ml-3\">\n                          <AlertTitle className=\"text-sm font-medium\">\n                            {notification.childName} - {notification.type}\n                          </AlertTitle>\n                          <AlertDescription className=\"text-sm\">\n                            {notification.message}\n                          </AlertDescription>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button size=\"sm\" variant={notification.urgent ? 'default' : 'secondary'}>\n                          {notification.type === 'approval' ? 'Approve' : 'Acknowledge'}\n                        </Button>\n                      </div>\n                    </div>\n                  </Alert>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Payments Tab */}\n        <TabsContent value=\"payments\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  Wallet Management\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {mockChildrenData.map((child) => (\n                  <div key={child.id} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={child.avatar} />\n                        <AvatarFallback>\n                          {child.name.split(' ').map(n => n[0]).join('')}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-medium\">{child.name}</p>\n                        <p className=\"text-sm text-gray-600\">Balance: ₹{child.walletBalance}</p>\n                      </div>\n                    </div>\n                    <Button size=\"sm\">\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Top Up\n                    </Button>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FileText className=\"h-5 w-5 mr-2\" />\n                  Payment History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">Wallet Top-up - Sarah</p>\n                      <p className=\"text-sm text-gray-600\">2024-01-12 • 08:00 AM</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-green-600\">+₹100</p>\n                      <Badge variant=\"outline\" className=\"text-xs\">Completed</Badge>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                    <div>\n                      <p className=\"font-medium\">Wallet Top-up - David</p>\n                      <p className=\"text-sm text-gray-600\">2024-01-10 • 02:30 PM</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-semibold text-green-600\">+₹150</p>\n                      <Badge variant=\"outline\" className=\"text-xs\">Completed</Badge>\n                    </div>\n                  </div>\n                </div>\n                \n                <Button variant=\"outline\" className=\"w-full mt-4\">\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download Full Statement\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Settings Tab */}\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Settings className=\"h-5 w-5 mr-2\" />\n                Notification Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Order Approval Notifications</p>\n                  <p className=\"text-sm text-gray-600\">Get notified when children place orders requiring approval</p>\n                </div>\n                <Switch \n                  checked={notificationSettings.orderApprovals}\n                  onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, orderApprovals: checked}))}\n                />\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Low Balance Alerts</p>\n                  <p className=\"text-sm text-gray-600\">Receive alerts when wallet balance is low</p>\n                </div>\n                <Switch \n                  checked={notificationSettings.lowBalance}\n                  onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, lowBalance: checked}))}\n                />\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Nutrition Alerts</p>\n                  <p className=\"text-sm text-gray-600\">Daily nutrition goals and recommendations</p>\n                </div>\n                <Switch \n                  checked={notificationSettings.nutritionAlerts}\n                  onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, nutritionAlerts: checked}))}\n                />\n              </div>\n              \n              <Separator />\n              \n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"font-medium\">Weekly Reports</p>\n                  <p className=\"text-sm text-gray-600\">Comprehensive weekly nutrition and spending reports</p>\n                </div>\n                <Switch \n                  checked={notificationSettings.weeklyReports}\n                  onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, weeklyReports: checked}))}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <MessageSquare className=\"h-5 w-5 mr-2\" />\n                Communication Center\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <Button className=\"w-full\" variant=\"outline\">\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  Contact School Administration\n                </Button>\n                <Button className=\"w-full\" variant=\"outline\">\n                  <Utensils className=\"h-4 w-4 mr-2\" />\n                  Request Special Meal Arrangements\n                </Button>\n                <Button className=\"w-full\" variant=\"outline\">\n                  <Heart className=\"h-4 w-4 mr-2\" />\n                  Update Dietary Restrictions\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport { EnhancedParentDashboard };","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/enhanced-student-dashboard.tsx",["1839","1840","1841","1842","1843","1844","1845","1846","1847","1848","1849","1850","1851","1852","1853","1854","1855","1856","1857","1858","1859","1860","1861","1862"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart, RadialBarChart, RadialBar\n} from 'recharts';\nimport { \n  Apple, Utensils, Trophy, Clock, QrCode, Heart, Wallet,\n  TrendingUp, Calendar, Target, Award, Star, Timer, CheckCircle,\n  AlertCircle, Plus, Minus, ShoppingCart, CreditCard, Gift,\n  Zap, Flame, Droplets, Activity, TrendingDown, Bell\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Student {\n  id: string;\n  name: string;\n  class: string;\n  section: string;\n  rollNumber: string;\n  avatar?: string;\n  rfidCode?: string;\n}\n\ninterface EnhancedStudentDashboardProps {\n  student: Student;\n  className?: string;\n}\n\n// Enhanced mock data with comprehensive features\nconst mockTodayMeals = [\n  {\n    id: 'breakfast-1',\n    type: 'breakfast',\n    name: 'Healthy Breakfast Combo',\n    time: '08:30 AM',\n    status: 'completed',\n    items: ['Oatmeal with Berries', 'Orange Juice', 'Banana'],\n    nutrition: { calories: 320, protein: 12, carbs: 58, fat: 6 },\n    cost: 25,\n    timeLeft: 0\n  },\n  {\n    id: 'lunch-1',\n    type: 'lunch',\n    name: 'Nutritious Lunch Plate',\n    time: '12:30 PM',\n    status: 'preparing',\n    items: ['Grilled Chicken', 'Brown Rice', 'Green Salad', 'Yogurt'],\n    nutrition: { calories: 485, protein: 32, carbs: 45, fat: 15 },\n    cost: 55,\n    timeLeft: 45 // minutes\n  },\n  {\n    id: 'snack-1',\n    type: 'snack',\n    name: 'Afternoon Energy Boost',\n    time: '03:00 PM',\n    status: 'pending',\n    items: ['Mixed Nuts', 'Apple Slices', 'Water'],\n    nutrition: { calories: 180, protein: 6, carbs: 22, fat: 8 },\n    cost: 15,\n    timeLeft: 180\n  }\n];\n\nconst mockNutritionProgress = {\n  daily: {\n    calories: { consumed: 825, target: 1800, percentage: 46 },\n    protein: { consumed: 50, target: 65, percentage: 77 },\n    carbs: { consumed: 125, target: 225, percentage: 56 },\n    fat: { consumed: 29, target: 60, percentage: 48 },\n    fiber: { consumed: 18, target: 25, percentage: 72 },\n    water: { consumed: 1200, target: 2000, percentage: 60 }\n  },\n  weekly: [\n    { day: 'Mon', calories: 95, nutrition: 88 },\n    { day: 'Tue', calories: 92, nutrition: 85 },\n    { day: 'Wed', calories: 88, nutrition: 90 },\n    { day: 'Thu', calories: 91, nutrition: 87 },\n    { day: 'Fri', calories: 89, nutrition: 92 },\n    { day: 'Sat', calories: 94, nutrition: 89 },\n    { day: 'Today', calories: 46, nutrition: 65 }\n  ]\n};\n\nconst mockAchievements = [\n  {\n    id: 'healthy-week',\n    title: 'Healthy Week Warrior',\n    description: 'Maintained balanced nutrition for 7 days',\n    icon: '🏆',\n    progress: 6,\n    maxProgress: 7,\n    category: 'nutrition',\n    points: 100,\n    earnedDate: null,\n    status: 'in_progress'\n  },\n  {\n    id: 'variety-master',\n    title: 'Variety Master',\n    description: 'Tried 15 different meal items this month',\n    icon: '🌟',\n    progress: 15,\n    maxProgress: 15,\n    category: 'variety',\n    points: 75,\n    earnedDate: '2024-01-10',\n    status: 'completed'\n  },\n  {\n    id: 'early-bird',\n    title: 'Early Bird',\n    description: 'Never missed breakfast for 10 days',\n    icon: '🌅',\n    progress: 8,\n    maxProgress: 10,\n    category: 'consistency',\n    points: 50,\n    earnedDate: null,\n    status: 'in_progress'\n  }\n];\n\nconst mockWalletData = {\n  balance: 245.50,\n  monthlyBudget: 800,\n  spent: 354.50,\n  transactions: [\n    { id: '1', type: 'debit', amount: 55, description: 'Lunch - Grilled Chicken Plate', date: '2024-01-12', time: '12:30 PM' },\n    { id: '2', type: 'credit', amount: 100, description: 'Parent Top-up', date: '2024-01-12', time: '08:00 AM' },\n    { id: '3', type: 'debit', amount: 25, description: 'Breakfast - Healthy Combo', date: '2024-01-12', time: '08:30 AM' },\n    { id: '4', type: 'debit', amount: 45, description: 'Lunch - Vegetable Biryani', date: '2024-01-11', time: '12:30 PM' },\n    { id: '5', type: 'debit', amount: 15, description: 'Snack - Energy Boost', date: '2024-01-11', time: '03:00 PM' }\n  ]\n};\n\nconst mockQuickOrderItems = [\n  { id: '1', name: 'Today\\'s Special', price: 45, image: '🍛', category: 'lunch', popular: true },\n  { id: '2', name: 'Healthy Salad Bowl', price: 35, image: '🥗', category: 'lunch', new: true },\n  { id: '3', name: 'Energy Smoothie', price: 25, image: '🥤', category: 'drink', popular: true },\n  { id: '4', name: 'Protein Bar', price: 20, image: '🍫', category: 'snack', healthy: true }\n];\n\nexport const EnhancedStudentDashboard: React.FC<EnhancedStudentDashboardProps> = ({\n  student,\n  className\n}) => {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedMeal, setSelectedMeal] = useState<string | null>(null);\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const formatCountdown = (minutes: number) => {\n    if (minutes <= 0) return 'Available now';\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed': return 'bg-green-500';\n      case 'preparing': return 'bg-yellow-500';\n      case 'ready': return 'bg-blue-500';\n      default: return 'bg-gray-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return CheckCircle;\n      case 'preparing': return Timer;\n      case 'ready': return Bell;\n      default: return Clock;\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Quick Stats Header */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-100 text-sm\">RFID Code</p>\n                <p className=\"text-2xl font-bold\">{student.rfidCode || 'RF-789123'}</p>\n              </div>\n              <QrCode className=\"h-8 w-8 text-blue-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-100 text-sm\">Wallet Balance</p>\n                <p className=\"text-2xl font-bold\">₹{mockWalletData.balance}</p>\n              </div>\n              <Wallet className=\"h-8 w-8 text-green-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-500 to-purple-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-100 text-sm\">Today's Nutrition</p>\n                <p className=\"text-2xl font-bold\">{mockNutritionProgress.daily.calories.percentage}%</p>\n              </div>\n              <Activity className=\"h-8 w-8 text-purple-200\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-orange-500 to-orange-600 text-white\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-orange-100 text-sm\">Achievement Points</p>\n                <p className=\"text-2xl font-bold\">225</p>\n              </div>\n              <Trophy className=\"h-8 w-8 text-orange-200\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"today\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"today\">Today's Meals</TabsTrigger>\n          <TabsTrigger value=\"nutrition\">Nutrition</TabsTrigger>\n          <TabsTrigger value=\"order\">Quick Order</TabsTrigger>\n          <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n          <TabsTrigger value=\"wallet\">Wallet</TabsTrigger>\n        </TabsList>\n\n        {/* Today's Meals Tab */}\n        <TabsContent value=\"today\" className=\"space-y-4\">\n          <div className=\"grid gap-4\">\n            {mockTodayMeals.map((meal) => {\n              const StatusIcon = getStatusIcon(meal.status);\n              \n              return (\n                <Card key={meal.id} className={`transition-all duration-200 ${selectedMeal === meal.id ? 'ring-2 ring-blue-500' : ''}`}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`p-2 rounded-full ${getStatusColor(meal.status)}`}>\n                          <StatusIcon className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{meal.name}</h3>\n                          <p className=\"text-sm text-gray-600\">{meal.time} • ₹{meal.cost}</p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"text-right\">\n                        <Badge \n                          variant={meal.status === 'completed' ? 'default' : 'secondary'}\n                          className=\"mb-2\"\n                        >\n                          {meal.status}\n                        </Badge>\n                        {meal.timeLeft > 0 && (\n                          <p className=\"text-sm font-medium text-blue-600\">\n                            <Timer className=\"h-4 w-4 inline mr-1\" />\n                            {formatCountdown(meal.timeLeft)}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Items:</p>\n                        <div className=\"space-y-1\">\n                          {meal.items.map((item, index) => (\n                            <div key={index} className=\"flex items-center\">\n                              <span className=\"w-1.5 h-1.5 bg-blue-500 rounded-full mr-2\" />\n                              <span className=\"text-sm text-gray-600\">{item}</span>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium text-gray-700 mb-2\">Nutrition:</p>\n                        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                          <div className=\"flex items-center\">\n                            <Flame className=\"h-3 w-3 mr-1 text-red-500\" />\n                            {meal.nutrition.calories} cal\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Zap className=\"h-3 w-3 mr-1 text-blue-500\" />\n                            {meal.nutrition.protein}g protein\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Apple className=\"h-3 w-3 mr-1 text-green-500\" />\n                            {meal.nutrition.carbs}g carbs\n                          </div>\n                          <div className=\"flex items-center\">\n                            <Droplets className=\"h-3 w-3 mr-1 text-yellow-500\" />\n                            {meal.nutrition.fat}g fat\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {meal.status === 'ready' && (\n                      <Alert className=\"mt-4 border-green-200 bg-green-50\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <AlertTitle className=\"text-green-800\">Ready for Pickup!</AlertTitle>\n                        <AlertDescription className=\"text-green-700\">\n                          Your meal is ready. Please use your RFID card at the pickup counter.\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        {/* Nutrition Tab */}\n        <TabsContent value=\"nutrition\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Daily Progress */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Target className=\"h-5 w-5 mr-2\" />\n                  Today's Nutrition Goals\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(mockNutritionProgress.daily).map(([key, data]) => (\n                  <div key={key} className=\"space-y-2\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium capitalize\">{key}</span>\n                      <span className=\"text-sm text-gray-600\">\n                        {data.consumed} / {data.target} {key === 'water' ? 'ml' : key === 'calories' ? 'cal' : 'g'}\n                      </span>\n                    </div>\n                    <Progress value={data.percentage} className=\"h-2\" />\n                    <p className=\"text-xs text-gray-500\">{data.percentage}% of daily goal</p>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Weekly Trend */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <TrendingUp className=\"h-5 w-5 mr-2\" />\n                  Weekly Nutrition Trend\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={mockNutritionProgress.weekly}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"day\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area type=\"monotone\" dataKey=\"calories\" stackId=\"1\" stroke=\"#3b82f6\" fill=\"#3b82f6\" fillOpacity={0.6} />\n                    <Area type=\"monotone\" dataKey=\"nutrition\" stackId=\"1\" stroke=\"#10b981\" fill=\"#10b981\" fillOpacity={0.6} />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Nutrition Tips */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Heart className=\"h-5 w-5 mr-2\" />\n                Personalized Nutrition Tips\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Alert>\n                  <Droplets className=\"h-4 w-4\" />\n                  <AlertTitle>Hydration</AlertTitle>\n                  <AlertDescription>\n                    You're 40% behind your water goal. Try drinking a glass every hour.\n                  </AlertDescription>\n                </Alert>\n                <Alert>\n                  <Apple className=\"h-4 w-4\" />\n                  <AlertTitle>Fiber Intake</AlertTitle>\n                  <AlertDescription>\n                    Great job on fiber! You've reached 72% of your daily target.\n                  </AlertDescription>\n                </Alert>\n                <Alert>\n                  <Zap className=\"h-4 w-4\" />\n                  <AlertTitle>Protein</AlertTitle>\n                  <AlertDescription>\n                    Excellent protein intake today! You're exceeding your goals.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quick Order Tab */}\n        <TabsContent value=\"order\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                Quick Order Menu\n              </CardTitle>\n              <CardDescription>\n                Order your favorite meals with just a few clicks\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                {mockQuickOrderItems.map((item) => (\n                  <Card key={item.id} className=\"hover:shadow-lg transition-shadow cursor-pointer\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-4xl mb-2\">{item.image}</div>\n                        <h3 className=\"font-semibold\">{item.name}</h3>\n                        <p className=\"text-lg font-bold text-green-600\">₹{item.price}</p>\n                        \n                        <div className=\"flex justify-center space-x-1 mt-2\">\n                          {item.popular && <Badge variant=\"secondary\" className=\"text-xs\">Popular</Badge>}\n                          {item.new && <Badge variant=\"destructive\" className=\"text-xs\">New</Badge>}\n                          {item.healthy && <Badge variant=\"outline\" className=\"text-xs\">Healthy</Badge>}\n                        </div>\n                        \n                        <Button className=\"w-full mt-3\" size=\"sm\">\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          Add to Cart\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Achievements Tab */}\n        <TabsContent value=\"achievements\" className=\"space-y-6\">\n          <div className=\"grid gap-4\">\n            {mockAchievements.map((achievement) => (\n              <Card key={achievement.id} className={achievement.status === 'completed' ? 'bg-gradient-to-r from-yellow-50 to-yellow-100 border-yellow-200' : ''}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-4xl\">{achievement.icon}</div>\n                      <div>\n                        <h3 className=\"font-semibold text-lg\">{achievement.title}</h3>\n                        <p className=\"text-gray-600\">{achievement.description}</p>\n                        <Badge variant=\"outline\" className=\"mt-1\">\n                          {achievement.points} points\n                        </Badge>\n                      </div>\n                    </div>\n                    \n                    <div className=\"text-right\">\n                      <div className=\"mb-2\">\n                        <span className=\"text-2xl font-bold\">{achievement.progress}</span>\n                        <span className=\"text-gray-500\">/{achievement.maxProgress}</span>\n                      </div>\n                      <Progress \n                        value={(achievement.progress / achievement.maxProgress) * 100} \n                        className=\"w-32\"\n                      />\n                      {achievement.status === 'completed' && (\n                        <p className=\"text-xs text-green-600 mt-1\">\n                          Earned {achievement.earnedDate}\n                        </p>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Wallet Tab */}\n        <TabsContent value=\"wallet\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Balance Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <CreditCard className=\"h-5 w-5 mr-2\" />\n                  Balance Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-3xl font-bold text-green-600\">₹{mockWalletData.balance}</p>\n                  <p className=\"text-gray-600\">Available Balance</p>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Monthly Budget</span>\n                    <span>₹{mockWalletData.monthlyBudget}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Spent This Month</span>\n                    <span className=\"text-red-600\">₹{mockWalletData.spent}</span>\n                  </div>\n                  <div className=\"flex justify-between font-semibold\">\n                    <span>Remaining</span>\n                    <span className=\"text-green-600\">₹{mockWalletData.monthlyBudget - mockWalletData.spent}</span>\n                  </div>\n                </div>\n                \n                <Progress \n                  value={(mockWalletData.spent / mockWalletData.monthlyBudget) * 100} \n                  className=\"h-2\"\n                />\n              </CardContent>\n            </Card>\n\n            {/* Recent Transactions */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Activity className=\"h-5 w-5 mr-2\" />\n                  Recent Transactions\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {mockWalletData.transactions.map((transaction) => (\n                    <div key={transaction.id} className=\"flex items-center justify-between p-3 rounded-lg bg-gray-50\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`p-2 rounded-full ${transaction.type === 'credit' ? 'bg-green-100' : 'bg-red-100'}`}>\n                          {transaction.type === 'credit' ? (\n                            <Plus className={`h-4 w-4 text-green-600`} />\n                          ) : (\n                            <Minus className={`h-4 w-4 text-red-600`} />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{transaction.description}</p>\n                          <p className=\"text-sm text-gray-600\">{transaction.date} • {transaction.time}</p>\n                        </div>\n                      </div>\n                      <div className={`font-semibold ${transaction.type === 'credit' ? 'text-green-600' : 'text-red-600'}`}>\n                        {transaction.type === 'credit' ? '+' : '-'}₹{transaction.amount}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport { EnhancedStudentDashboard };","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/kitchen-dashboard.tsx",["1863","1864","1865","1866","1867","1868"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  Table, TableBody, TableCell, TableHead, TableHeader, TableRow \n} from \"@/components/ui/table\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell\n} from 'recharts';\nimport { \n  ChefHat, Clock, Package, AlertTriangle, CheckCircle2, \n  Flame, Users, TrendingUp, ArrowUp, ArrowDown, Filter\n} from 'lucide-react';\nimport { cn, formatCurrency, formatDate } from '@/lib/utils';\nimport { MealOrder, InventoryItem, KitchenOperation } from './types';\n\ninterface KitchenDashboardProps {\n  className?: string;\n}\n\n// Mock data - replace with actual data fetching\nconst mockActiveOrders: (MealOrder & { \n  prepTime?: number;\n  ingredients?: string[];\n  allergens?: string[];\n  specialInstructions?: string;\n})[] = [\n  {\n    id: '1',\n    studentId: 'student-1',\n    studentName: 'Arjun Sharma',\n    class: '8A',\n    mealType: 'lunch',\n    items: [\n      { \n        id: '1', \n        name: 'Vegetable Biryani', \n        category: 'main', \n        price: 45, \n        quantity: 1, \n        nutritionalInfo: { calories: 420, protein: 12, carbs: 65, fat: 15, fiber: 6, sodium: 650, sugar: 8 }, \n        isVegetarian: true,\n        allergens: ['gluten']\n      }\n    ],\n    status: 'pending',\n    orderDate: '2024-01-12T11:30:00Z',\n    totalAmount: 45,\n    priority: 'high',\n    prepTime: 25,\n    ingredients: ['Basmati Rice', 'Mixed Vegetables', 'Spices', 'Ghee'],\n    specialInstructions: 'Extra vegetables, less spicy'\n  },\n  {\n    id: '2',\n    studentId: 'student-2',\n    studentName: 'Priya Singh',\n    class: '7B',\n    mealType: 'lunch',\n    items: [\n      { \n        id: '2', \n        name: 'Dal Rice Bowl', \n        category: 'main', \n        price: 40, \n        quantity: 2, \n        nutritionalInfo: { calories: 380, protein: 14, carbs: 60, fat: 12, fiber: 8, sodium: 580, sugar: 5 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'preparing',\n    orderDate: '2024-01-12T11:45:00Z',\n    totalAmount: 80,\n    priority: 'medium',\n    prepTime: 15,\n    ingredients: ['Dal', 'Rice', 'Turmeric', 'Cumin']\n  },\n  {\n    id: '3',\n    studentId: 'student-3',\n    studentName: 'Raj Patel',\n    class: '9A',\n    mealType: 'lunch',\n    items: [\n      { \n        id: '3', \n        name: 'Paneer Curry', \n        category: 'main', \n        price: 50, \n        quantity: 1, \n        nutritionalInfo: { calories: 450, protein: 18, carbs: 25, fat: 28, fiber: 4, sodium: 720, sugar: 8 }, \n        isVegetarian: true,\n        allergens: ['dairy']\n      }\n    ],\n    status: 'ready',\n    orderDate: '2024-01-12T11:00:00Z',\n    totalAmount: 50,\n    priority: 'low',\n    prepTime: 30\n  },\n  {\n    id: '4',\n    studentId: 'student-4',\n    studentName: 'Ananya Kumar',\n    class: '6C',\n    mealType: 'breakfast',\n    items: [\n      { \n        id: '4', \n        name: 'Poha', \n        category: 'main', \n        price: 25, \n        quantity: 1, \n        nutritionalInfo: { calories: 250, protein: 8, carbs: 35, fat: 8, fiber: 3, sodium: 400, sugar: 5 }, \n        isVegetarian: true \n      }\n    ],\n    status: 'preparing',\n    orderDate: '2024-01-12T08:30:00Z',\n    totalAmount: 25,\n    priority: 'medium',\n    prepTime: 10,\n    ingredients: ['Poha', 'Onions', 'Peanuts', 'Curry Leaves']\n  }\n];\n\nconst mockInventory: InventoryItem[] = [\n  {\n    id: '1',\n    name: 'Basmati Rice',\n    category: 'Grains',\n    currentStock: 45,\n    minThreshold: 50,\n    unit: 'kg',\n    supplier: 'Local Farm Co-op',\n    cost: 120,\n    status: 'low_stock'\n  },\n  {\n    id: '2',\n    name: 'Dal (Toor)',\n    category: 'Legumes',\n    currentStock: 28,\n    minThreshold: 20,\n    unit: 'kg',\n    supplier: 'Organic Supplies',\n    cost: 180,\n    status: 'in_stock'\n  },\n  {\n    id: '3',\n    name: 'Paneer',\n    category: 'Dairy',\n    currentStock: 8,\n    minThreshold: 15,\n    unit: 'kg',\n    supplier: 'Fresh Dairy',\n    expiryDate: '2024-01-15',\n    cost: 320,\n    status: 'low_stock'\n  },\n  {\n    id: '4',\n    name: 'Mixed Vegetables',\n    category: 'Vegetables',\n    currentStock: 0,\n    minThreshold: 25,\n    unit: 'kg',\n    supplier: 'Green Mart',\n    cost: 80,\n    status: 'out_of_stock'\n  },\n  {\n    id: '5',\n    name: 'Cooking Oil',\n    category: 'Oils',\n    currentStock: 15,\n    minThreshold: 10,\n    unit: 'L',\n    supplier: 'Oil Mills',\n    cost: 150,\n    status: 'in_stock'\n  }\n];\n\nconst mockKitchenOperations: KitchenOperation[] = [\n  {\n    id: '1',\n    operationType: 'prep',\n    description: 'Chop vegetables for lunch orders',\n    assignedTo: 'Ravi Kumar',\n    startTime: '2024-01-12T10:00:00Z',\n    estimatedDuration: 45,\n    status: 'in_progress',\n    priority: 'high'\n  },\n  {\n    id: '2',\n    operationType: 'cook',\n    description: 'Prepare Dal for lunch service',\n    assignedTo: 'Sunita Devi',\n    startTime: '2024-01-12T11:00:00Z',\n    estimatedDuration: 30,\n    status: 'pending',\n    priority: 'high'\n  },\n  {\n    id: '3',\n    operationType: 'clean',\n    description: 'Deep clean prep area',\n    assignedTo: 'Mohan Singh',\n    startTime: '2024-01-12T14:00:00Z',\n    estimatedDuration: 60,\n    status: 'pending',\n    priority: 'medium'\n  }\n];\n\nconst mockMealCountData = [\n  { mealType: 'Breakfast', planned: 180, prepared: 165, remaining: 15 },\n  { mealType: 'Lunch', planned: 450, prepared: 320, remaining: 130 },\n  { mealType: 'Snacks', planned: 200, prepared: 85, remaining: 115 }\n];\n\nconst mockPreparationTimes = [\n  { dish: 'Dal Rice', avgTime: 15, todayTime: 12 },\n  { dish: 'Biryani', avgTime: 30, todayTime: 35 },\n  { dish: 'Poha', avgTime: 10, todayTime: 8 },\n  { dish: 'Paneer Curry', avgTime: 25, todayTime: 28 }\n];\n\nconst COLORS = {\n  primary: '#4CAF50',\n  secondary: '#9C27B0',\n  accent: '#FF9800',\n  success: '#4CAF50',\n  warning: '#FFC107',\n  error: '#F44336',\n  info: '#2196F3'\n};\n\nexport function KitchenDashboard({ className }: KitchenDashboardProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedOrders, setSelectedOrders] = useState<string[]>([]);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    // Simulate data loading\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n\n    // Update current time every minute\n    const timeTimer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 60000);\n\n    return () => {\n      clearTimeout(timer);\n      clearInterval(timeTimer);\n    };\n  }, []);\n\n  const handleOrderSelect = (orderId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedOrders([...selectedOrders, orderId]);\n    } else {\n      setSelectedOrders(selectedOrders.filter(id => id !== orderId));\n    }\n  };\n\n  const pendingOrders = mockActiveOrders.filter(order => order.status === 'pending');\n  const preparingOrders = mockActiveOrders.filter(order => order.status === 'preparing');\n  const readyOrders = mockActiveOrders.filter(order => order.status === 'ready');\n\n  const totalPlannedMeals = mockMealCountData.reduce((sum, meal) => sum + meal.planned, 0);\n  const totalPreparedMeals = mockMealCountData.reduce((sum, meal) => sum + meal.prepared, 0);\n  const completionRate = (totalPreparedMeals / totalPlannedMeals) * 100;\n\n  const lowStockItems = mockInventory.filter(item => \n    item.status === 'low_stock' || item.status === 'out_of_stock'\n  );\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-6 w-16\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary-500 to-primary-600 rounded-lg p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Kitchen Dashboard</h1>\n            <p className=\"text-primary-100 mt-1\">Real-time kitchen operations</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <div className=\"text-right\">\n              <p className=\"text-sm text-primary-100\">Current Time</p>\n              <p className=\"text-xl font-bold\">\n                {currentTime.toLocaleTimeString('en-IN', { \n                  hour: '2-digit', \n                  minute: '2-digit' \n                })}\n              </p>\n            </div>\n            <ChefHat className=\"h-8 w-8 text-primary-200\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Alert for Low Stock */}\n      {lowStockItems.length > 0 && (\n        <Card className=\"border-warning-200 bg-warning-50\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-warning-600\" />\n              <CardTitle className=\"text-warning-800\">Inventory Alert</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-1\">\n              {lowStockItems.slice(0, 3).map((item) => (\n                <p key={item.id} className=\"text-warning-700 text-sm\">\n                  {item.name}: {item.status === 'out_of_stock' ? 'Out of stock' : `${item.currentStock} ${item.unit} remaining`}\n                </p>\n              ))}\n              {lowStockItems.length > 3 && (\n                <p className=\"text-warning-600 text-sm font-medium\">\n                  +{lowStockItems.length - 3} more items need attention\n                </p>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Orders</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-warning-600\">\n              {pendingOrders.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Avg prep time: 20 min\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Preparing</CardTitle>\n            <Flame className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-info-600\">\n              {preparingOrders.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Currently cooking\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Ready for Pickup</CardTitle>\n            <CheckCircle2 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success-600\">\n              {readyOrders.length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Awaiting collection\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Completion Rate</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success-600\">\n              {completionRate.toFixed(0)}%\n            </div>\n            <Progress value={completionRate} className=\"mt-2\" />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {totalPreparedMeals}/{totalPlannedMeals} meals\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"orders\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"orders\">Active Orders</TabsTrigger>\n          <TabsTrigger value=\"operations\">Operations</TabsTrigger>\n          <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Active Orders</span>\n                <div className=\"flex items-center gap-2\">\n                  <Filter className=\"h-4 w-4\" />\n                  <span className=\"text-sm text-muted-foreground\">\n                    Sort by priority\n                  </span>\n                </div>\n              </CardTitle>\n              <CardDescription>\n                Orders requiring kitchen attention, sorted by priority and time\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead className=\"w-12\">\n                        <Checkbox />\n                      </TableHead>\n                      <TableHead>Order #</TableHead>\n                      <TableHead>Student</TableHead>\n                      <TableHead>Items</TableHead>\n                      <TableHead>Prep Time</TableHead>\n                      <TableHead>Special Notes</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Priority</TableHead>\n                      <TableHead>Order Time</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {mockActiveOrders\n                      .filter(order => order.status !== 'completed')\n                      .sort((a, b) => {\n                        // Sort by priority first (high > medium > low)\n                        const priorityOrder = { high: 3, medium: 2, low: 1 };\n                        if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {\n                          return priorityOrder[b.priority] - priorityOrder[a.priority];\n                        }\n                        // Then by order time (oldest first)\n                        return new Date(a.orderDate).getTime() - new Date(b.orderDate).getTime();\n                      })\n                      .map((order) => (\n                        <TableRow key={order.id}>\n                          <TableCell>\n                            <Checkbox\n                              checked={selectedOrders.includes(order.id)}\n                              onCheckedChange={(checked) => handleOrderSelect(order.id, !!checked)}\n                            />\n                          </TableCell>\n                          <TableCell className=\"font-medium\">\n                            #{order.id}\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <p className=\"font-medium\">{order.studentName}</p>\n                              <p className=\"text-xs text-muted-foreground\">{order.class}</p>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"space-y-1\">\n                              {order.items.map((item, index) => (\n                                <div key={index} className=\"text-sm\">\n                                  <span className=\"font-medium\">{item.quantity}x</span> {item.name}\n                                  {item.allergens && item.allergens.length > 0 && (\n                                    <div className=\"text-xs text-warning-600\">\n                                      ⚠️ {item.allergens.join(', ')}\n                                    </div>\n                                  )}\n                                </div>\n                              ))}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-1\">\n                              <Clock className=\"h-3 w-3\" />\n                              <span className=\"text-sm\">{order.prepTime} min</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"max-w-32 text-xs text-muted-foreground\">\n                              {order.specialInstructions || 'None'}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className={cn(\n                              \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                              order.status === 'pending' && \"bg-warning-100 text-warning-800\",\n                              order.status === 'preparing' && \"bg-info-100 text-info-800\",\n                              order.status === 'ready' && \"bg-success-100 text-success-800\"\n                            )}>\n                              {order.status === 'pending' && <Clock className=\"w-3 h-3 mr-1\" />}\n                              {order.status === 'preparing' && <Flame className=\"w-3 h-3 mr-1\" />}\n                              {order.status === 'ready' && <CheckCircle2 className=\"w-3 h-3 mr-1\" />}\n                              <span className=\"capitalize\">{order.status}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className={cn(\n                              \"inline-flex items-center px-2 py-1 rounded text-xs font-medium\",\n                              order.priority === 'high' && \"bg-error-100 text-error-700\",\n                              order.priority === 'medium' && \"bg-warning-100 text-warning-700\",\n                              order.priority === 'low' && \"bg-success-100 text-success-700\"\n                            )}>\n                              {order.priority === 'high' && <ArrowUp className=\"w-3 h-3 mr-1\" />}\n                              {order.priority === 'low' && <ArrowDown className=\"w-3 h-3 mr-1\" />}\n                              <span className=\"capitalize\">{order.priority}</span>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              {new Date(order.orderDate).toLocaleTimeString('en-IN', { \n                                hour: '2-digit', \n                                minute: '2-digit' \n                              })}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                  </TableBody>\n                </Table>\n              </div>\n              \n              {selectedOrders.length > 0 && (\n                <div className=\"flex items-center justify-between mt-4 p-3 bg-blue-50 rounded-lg\">\n                  <span className=\"text-sm text-blue-800\">\n                    {selectedOrders.length} orders selected\n                  </span>\n                  <div className=\"flex gap-2\">\n                    <button className=\"px-3 py-1 bg-info-600 text-white rounded text-sm hover:bg-info-700\">\n                      Start Preparation\n                    </button>\n                    <button className=\"px-3 py-1 bg-success-600 text-white rounded text-sm hover:bg-success-700\">\n                      Mark as Ready\n                    </button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"operations\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Kitchen Operations</CardTitle>\n                <CardDescription>Current tasks and assignments</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {mockKitchenOperations.map((operation) => (\n                  <div key={operation.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={cn(\n                        \"w-8 h-8 rounded-full flex items-center justify-center\",\n                        operation.status === 'pending' && \"bg-warning-100\",\n                        operation.status === 'in_progress' && \"bg-info-100\",\n                        operation.status === 'completed' && \"bg-success-100\"\n                      )}>\n                        {operation.operationType === 'prep' && <Package className=\"h-4 w-4 text-warning-600\" />}\n                        {operation.operationType === 'cook' && <Flame className=\"h-4 w-4 text-info-600\" />}\n                        {operation.operationType === 'clean' && <CheckCircle2 className=\"h-4 w-4 text-success-600\" />}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">{operation.description}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          Assigned to: {operation.assignedTo}\n                        </p>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Duration: {operation.estimatedDuration} min\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={cn(\n                        \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                        operation.status === 'pending' && \"bg-warning-100 text-warning-800\",\n                        operation.status === 'in_progress' && \"bg-info-100 text-info-800\",\n                        operation.status === 'completed' && \"bg-success-100 text-success-800\"\n                      )}>\n                        <span className=\"capitalize\">{operation.status.replace('_', ' ')}</span>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        Start: {new Date(operation.startTime).toLocaleTimeString('en-IN', { \n                          hour: '2-digit', \n                          minute: '2-digit' \n                        })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Daily Meal Count</CardTitle>\n                <CardDescription>Planned vs prepared meals</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={mockMealCountData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"mealType\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Bar dataKey=\"planned\" fill={COLORS.info} name=\"Planned\" />\n                    <Bar dataKey=\"prepared\" fill={COLORS.success} name=\"Prepared\" />\n                    <Bar dataKey=\"remaining\" fill={COLORS.warning} name=\"Remaining\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"inventory\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Package className=\"h-5 w-5\" />\n                Inventory Status\n              </CardTitle>\n              <CardDescription>Current stock levels and alerts</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Item</TableHead>\n                      <TableHead>Category</TableHead>\n                      <TableHead>Current Stock</TableHead>\n                      <TableHead>Min Threshold</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Supplier</TableHead>\n                      <TableHead>Unit Cost</TableHead>\n                      <TableHead>Expiry</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {mockInventory.map((item) => (\n                      <TableRow key={item.id}>\n                        <TableCell className=\"font-medium\">{item.name}</TableCell>\n                        <TableCell>{item.category}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <span>{item.currentStock} {item.unit}</span>\n                            {item.currentStock <= item.minThreshold && (\n                              <AlertTriangle className=\"h-4 w-4 text-warning-500\" />\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>{item.minThreshold} {item.unit}</TableCell>\n                        <TableCell>\n                          <div className={cn(\n                            \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\",\n                            item.status === 'in_stock' && \"bg-success-100 text-success-800\",\n                            item.status === 'low_stock' && \"bg-warning-100 text-warning-800\",\n                            item.status === 'out_of_stock' && \"bg-error-100 text-error-800\"\n                          )}>\n                            {item.status === 'in_stock' && <CheckCircle2 className=\"w-3 h-3 mr-1\" />}\n                            {item.status === 'low_stock' && <AlertTriangle className=\"w-3 h-3 mr-1\" />}\n                            {item.status === 'out_of_stock' && <AlertTriangle className=\"w-3 h-3 mr-1\" />}\n                            <span>{item.status.replace('_', ' ')}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm\">{item.supplier}</TableCell>\n                        <TableCell>{formatCurrency(item.cost)}</TableCell>\n                        <TableCell>\n                          {item.expiryDate ? (\n                            <span className={cn(\n                              \"text-sm\",\n                              new Date(item.expiryDate) < new Date(Date.now() + 3 * 24 * 60 * 60 * 1000) \n                                ? \"text-error-600 font-medium\" \n                                : \"text-muted-foreground\"\n                            )}>\n                              {formatDate(new Date(item.expiryDate), 'short')}\n                            </span>\n                          ) : (\n                            <span className=\"text-muted-foreground\">-</span>\n                          )}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Preparation Time Analysis</CardTitle>\n                <CardDescription>Average vs today's preparation times</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={mockPreparationTimes}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"dish\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`${value} min`, '']} />\n                    <Bar dataKey=\"avgTime\" fill={COLORS.info} name=\"Average Time\" />\n                    <Bar dataKey=\"todayTime\" fill={COLORS.primary} name=\"Today's Time\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Kitchen Performance</CardTitle>\n                <CardDescription>Today's operational metrics</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Order Fulfillment Rate</span>\n                    <span className=\"text-sm text-success-600 font-bold\">94%</span>\n                  </div>\n                  <Progress value={94} />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">On-Time Delivery</span>\n                    <span className=\"text-sm text-success-600 font-bold\">87%</span>\n                  </div>\n                  <Progress value={87} />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium\">Kitchen Efficiency</span>\n                    <span className=\"text-sm text-info-600 font-bold\">91%</span>\n                  </div>\n                  <Progress value={91} />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                  <div className=\"text-center p-3 bg-success-50 rounded-lg\">\n                    <p className=\"text-lg font-bold text-success-600\">\n                      {totalPreparedMeals}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Meals Prepared</p>\n                  </div>\n                  <div className=\"text-center p-3 bg-info-50 rounded-lg\">\n                    <p className=\"text-lg font-bold text-info-600\">\n                      12.5\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">Avg Time (min)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/ParentDashboard.tsx",["1869","1870","1871","1872","1873","1874","1875","1876","1877","1878","1879","1880","1881","1882","1883","1884","1885","1886"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { \n  Card, \n  CardContent, \n  CardDescription, \n  CardHeader, \n  CardTitle,\n  Button,\n  Badge,\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from '@/components/ui';\nimport { \n  ShoppingCart, \n  Clock, \n  CreditCard, \n  Bell, \n  User, \n  TrendingUp,\n  Calendar,\n  AlertCircle,\n  CheckCircle,\n  Plus,\n  RefreshCw\n} from 'lucide-react';\nimport { Child, Order, DashboardAnalytics } from '@/types/dashboard';\n\n// Import child components\nimport { ChildManagement } from './components/ChildManagement';\nimport { OrderHistory } from './components/OrderHistory';\nimport { OrderTracking } from './components/OrderTracking';\nimport { PaymentMethods } from './components/PaymentMethods';\nimport { NotificationCenter } from './components/NotificationCenter';\nimport { SubscriptionManagement } from './components/SubscriptionManagement';\nimport { NutritionDashboard } from './components/NutritionDashboard';\n\ninterface DashboardOverviewProps {\n  children: Child[];\n  recentOrders: Order[];\n  analytics: DashboardAnalytics | null;\n  onQuickAction: (action: string, data?: any) => void;\n}\n\nconst DashboardOverview: React.FC<DashboardOverviewProps> = ({ \n  children, \n  recentOrders, \n  analytics,\n  onQuickAction \n}) => {\n  const getStatusColor = (status: Order['status']) => {\n    const colors = {\n      pending: 'bg-yellow-100 text-yellow-800',\n      confirmed: 'bg-blue-100 text-blue-800',\n      preparing: 'bg-orange-100 text-orange-800',\n      ready: 'bg-green-100 text-green-800',\n      delivered: 'bg-gray-100 text-gray-800',\n      cancelled: 'bg-red-100 text-red-800',\n    };\n    return colors[status] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getStatusIcon = (status: Order['status']) => {\n    switch (status) {\n      case 'delivered':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'cancelled':\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      case 'ready':\n        return <Clock className=\"h-4 w-4 text-green-600\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Welcome Section */}\n      <div className=\"bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-lg p-6\">\n        <h1 className=\"text-2xl font-bold mb-2\">Welcome back!</h1>\n        <p className=\"text-blue-100\">\n          Manage your children's meals and track their nutrition journey\n        </p>\n      </div>\n\n      {/* Quick Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Children</p>\n                <p className=\"text-2xl font-bold\">{children.filter(c => c.isActive).length}</p>\n              </div>\n              <User className=\"h-8 w-8 text-blue-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Orders This Month</p>\n                <p className=\"text-2xl font-bold\">{analytics?.totalOrders || 0}</p>\n              </div>\n              <ShoppingCart className=\"h-8 w-8 text-green-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Spent</p>\n                <p className=\"text-2xl font-bold\">₹{analytics?.totalSpent?.toFixed(2) || '0.00'}</p>\n              </div>\n              <CreditCard className=\"h-8 w-8 text-purple-600\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Avg Order Value</p>\n                <p className=\"text-2xl font-bold\">₹{analytics?.averageOrderValue?.toFixed(2) || '0.00'}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Children Summary */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Your Children</CardTitle>\n            <CardDescription>Manage profiles and preferences</CardDescription>\n          </div>\n          <Button onClick={() => onQuickAction('add_child')} size=\"sm\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Child\n          </Button>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {children.slice(0, 6).map((child) => (\n              <div key={child.id} className=\"flex items-center space-x-3 p-3 border rounded-lg\">\n                <Avatar>\n                  <AvatarImage src={child.avatar} alt={child.firstName} />\n                  <AvatarFallback>\n                    {child.firstName[0]}{child.lastName[0]}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium truncate\">\n                    {child.firstName} {child.lastName}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">\n                    Grade {child.grade}, Class {child.class}\n                  </p>\n                  {child.allergies.length > 0 && (\n                    <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                      {child.allergies.length} allergi{child.allergies.length === 1 ? 'y' : 'es'}\n                    </Badge>\n                  )}\n                </div>\n                {child.isActive ? (\n                  <Badge className=\"bg-green-100 text-green-800\">Active</Badge>\n                ) : (\n                  <Badge variant=\"outline\">Inactive</Badge>\n                )}\n              </div>\n            ))}\n          </div>\n          {children.length > 6 && (\n            <div className=\"mt-4 text-center\">\n              <Button variant=\"outline\" onClick={() => onQuickAction('view_all_children')}>\n                View All Children ({children.length})\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Orders */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <CardTitle>Recent Orders</CardTitle>\n            <CardDescription>Latest meal orders and their status</CardDescription>\n          </div>\n          <Button variant=\"outline\" size=\"sm\" onClick={() => onQuickAction('refresh_orders')}>\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\n            Refresh\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {recentOrders.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <ShoppingCart className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No recent orders</p>\n              <Button className=\"mt-4\" onClick={() => onQuickAction('create_order')}>\n                Place Your First Order\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {recentOrders.slice(0, 5).map((order) => {\n                const child = children.find(c => c.id === order.childId);\n                return (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex-shrink-0\">\n                        {getStatusIcon(order.status)}\n                      </div>\n                      <div>\n                        <p className=\"font-medium\">Order #{order.id.slice(-8)}</p>\n                        <p className=\"text-sm text-gray-600\">\n                          {child?.firstName} {child?.lastName} • {order.items.length} item{order.items.length !== 1 ? 's' : ''}\n                        </p>\n                        <p className=\"text-xs text-gray-500\">\n                          {new Date(order.createdAt).toLocaleDateString()} • ₹{order.totalAmount.toFixed(2)}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge className={getStatusColor(order.status)}>\n                        {order.status.charAt(0).toUpperCase() + order.status.slice(1)}\n                      </Badge>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => onQuickAction('track_order', order.id)}\n                      >\n                        Track\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n              {recentOrders.length > 5 && (\n                <div className=\"text-center\">\n                  <Button variant=\"outline\" onClick={() => onQuickAction('view_all_orders')}>\n                    View All Orders\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Quick Actions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Quick Actions</CardTitle>\n          <CardDescription>Commonly used features</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex flex-col space-y-2\"\n              onClick={() => onQuickAction('create_order')}\n            >\n              <ShoppingCart className=\"h-6 w-6\" />\n              <span className=\"text-sm\">New Order</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex flex-col space-y-2\"\n              onClick={() => onQuickAction('view_menu')}\n            >\n              <Calendar className=\"h-6 w-6\" />\n              <span className=\"text-sm\">View Menu</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex flex-col space-y-2\"\n              onClick={() => onQuickAction('view_nutrition')}\n            >\n              <TrendingUp className=\"h-6 w-6\" />\n              <span className=\"text-sm\">Nutrition</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex flex-col space-y-2\"\n              onClick={() => onQuickAction('manage_payments')}\n            >\n              <CreditCard className=\"h-6 w-6\" />\n              <span className=\"text-sm\">Payments</span>\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport const ParentDashboard: React.FC = () => {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Mock data - replace with actual Redux selectors\n  const children: Child[] = [];\n  const recentOrders: Order[] = [];\n  const analytics: DashboardAnalytics | null = null;\n\n  useEffect(() => {\n    // Load dashboard data\n    const loadDashboardData = async () => {\n      setIsLoading(true);\n      try {\n        // Fetch data from API\n        // dispatch(fetchChildren());\n        // dispatch(fetchRecentOrders());\n        // dispatch(fetchAnalytics());\n      } catch (error) {\n        console.error('Failed to load dashboard data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadDashboardData();\n  }, []);\n\n  const handleQuickAction = (action: string, data?: any) => {\n    switch (action) {\n      case 'add_child':\n        setActiveTab('children');\n        break;\n      case 'view_all_orders':\n        setActiveTab('orders');\n        break;\n      case 'track_order':\n        setActiveTab('tracking');\n        break;\n      case 'manage_payments':\n        setActiveTab('payments');\n        break;\n      case 'view_nutrition':\n        setActiveTab('nutrition');\n        break;\n      case 'refresh_orders':\n        // Refresh orders data\n        break;\n      default:\n        console.log('Unknown action:', action, data);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Parent Dashboard</h1>\n          <p className=\"text-gray-600\">Manage your children's meals and nutrition</p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Bell className=\"h-4 w-4 mr-2\" />\n            Notifications\n          </Button>\n          <Avatar>\n            <AvatarFallback>\n              P\n            </AvatarFallback>\n          </Avatar>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4 lg:grid-cols-8\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"children\">Children</TabsTrigger>\n          <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n          <TabsTrigger value=\"tracking\">Tracking</TabsTrigger>\n          <TabsTrigger value=\"payments\">Payments</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Alerts</TabsTrigger>\n          <TabsTrigger value=\"subscriptions\">Plans</TabsTrigger>\n          <TabsTrigger value=\"nutrition\">Nutrition</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <DashboardOverview\n            children={children}\n            recentOrders={recentOrders}\n            analytics={analytics}\n            onQuickAction={handleQuickAction}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"children\">\n          <ChildManagement \n            children={children}\n            onAddChild={() => console.log('Add child')}\n            onEditChild={(id) => console.log('Edit child', id)}\n            onDeleteChild={(id) => console.log('Delete child', id)}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"orders\">\n          <OrderHistory \n            orders={recentOrders}\n            onViewOrder={(id) => console.log('View order', id)}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"tracking\">\n          <OrderTracking \n            currentOrder={null}\n            onRefresh={() => console.log('Refresh tracking')}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"payments\">\n          <PaymentMethods \n            paymentMethods={[]}\n            onAddPaymentMethod={() => console.log('Add payment method')}\n            onRemovePaymentMethod={(id) => console.log('Remove payment method', id)}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"notifications\">\n          <NotificationCenter \n            notifications={[]}\n            onMarkAsRead={(id) => console.log('Mark as read', id)}\n            onClearAll={() => console.log('Clear all notifications')}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"subscriptions\">\n          <SubscriptionManagement \n            subscription={null}\n            onChangePlan={() => console.log('Change plan')}\n            onCancelSubscription={() => console.log('Cancel subscription')}\n          />\n        </TabsContent>\n\n        <TabsContent value=\"nutrition\">\n          <NutritionDashboard \n            nutritionData={null}\n            onDownloadReport={() => console.log('Download report')}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/ChildManagement.tsx",["1887","1888","1889","1890"],[],"// Placeholder ChildManagement component\nimport React from 'react';\n\ninterface ChildManagementProps {\n  children: any[];\n  onAddChild?: () => void;\n  onEditChild?: (childId: string) => void;\n  onDeleteChild?: (childId: string) => void;\n}\n\nexport const ChildManagement: React.FC<ChildManagementProps> = ({ \n  children = [],\n  onAddChild,\n  onEditChild,\n  onDeleteChild\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Child Management</h2>\n        <button \n          onClick={onAddChild}\n          className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n        >\n          Add Child\n        </button>\n      </div>\n      <p className=\"text-gray-600\">Manage your children's profiles and preferences.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/NotificationCenter.tsx",["1891","1892","1893"],[],"// Placeholder NotificationCenter component\nimport React from 'react';\n\ninterface NotificationCenterProps {\n  notifications: any[];\n  onMarkAsRead?: (id: string) => void;\n  onClearAll?: () => void;\n}\n\nexport const NotificationCenter: React.FC<NotificationCenterProps> = ({ \n  notifications = [],\n  onMarkAsRead,\n  onClearAll\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Notifications</h2>\n        <button \n          onClick={onClearAll}\n          className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded\"\n        >\n          Clear All\n        </button>\n      </div>\n      <p className=\"text-gray-600\">Stay updated with important announcements and order status.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/NutritionDashboard.tsx",["1894","1895"],[],"// Placeholder NutritionDashboard component\nimport React from 'react';\n\ninterface NutritionDashboardProps {\n  nutritionData: any | null;\n  onDownloadReport?: () => void;\n}\n\nexport const NutritionDashboard: React.FC<NutritionDashboardProps> = ({ \n  nutritionData = null,\n  onDownloadReport\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Nutrition Dashboard</h2>\n        <button \n          onClick={onDownloadReport}\n          className=\"bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded\"\n        >\n          Download Report\n        </button>\n      </div>\n      <p className=\"text-gray-600\">Track nutritional intake and dietary preferences for your children.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/OrderHistory.tsx",["1896","1897","1898"],[],"// Placeholder OrderHistory component\nimport React from 'react';\n\ninterface OrderHistoryProps {\n  orders: any[];\n  onViewOrder?: (orderId: string) => void;\n}\n\nexport const OrderHistory: React.FC<OrderHistoryProps> = ({ \n  orders = [],\n  onViewOrder\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h2 className=\"text-xl font-bold mb-4\">Order History</h2>\n      <p className=\"text-gray-600\">View your past meal orders and delivery history.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/OrderTracking.tsx",["1899","1900"],[],"// Placeholder OrderTracking component\nimport React from 'react';\n\ninterface OrderTrackingProps {\n  currentOrder: any | null;\n  onRefresh?: () => void;\n}\n\nexport const OrderTracking: React.FC<OrderTrackingProps> = ({ \n  currentOrder = null,\n  onRefresh\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Order Tracking</h2>\n        <button \n          onClick={onRefresh}\n          className=\"bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded\"\n        >\n          Refresh\n        </button>\n      </div>\n      <p className=\"text-gray-600\">Track your current meal order in real-time.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/PaymentMethods.tsx",["1901","1902","1903"],[],"// Placeholder PaymentMethods component\nimport React from 'react';\n\ninterface PaymentMethodsProps {\n  paymentMethods: any[];\n  onAddPaymentMethod?: () => void;\n  onRemovePaymentMethod?: (id: string) => void;\n}\n\nexport const PaymentMethods: React.FC<PaymentMethodsProps> = ({ \n  paymentMethods = [],\n  onAddPaymentMethod,\n  onRemovePaymentMethod\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Payment Methods</h2>\n        <button \n          onClick={onAddPaymentMethod}\n          className=\"bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded\"\n        >\n          Add Payment Method\n        </button>\n      </div>\n      <p className=\"text-gray-600\">Manage your saved payment methods and wallet balance.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent/components/SubscriptionManagement.tsx",["1904","1905"],[],"// Placeholder SubscriptionManagement component\nimport React from 'react';\n\ninterface SubscriptionManagementProps {\n  subscription: any | null;\n  onChangePlan?: () => void;\n  onCancelSubscription?: () => void;\n}\n\nexport const SubscriptionManagement: React.FC<SubscriptionManagementProps> = ({ \n  subscription = null,\n  onChangePlan,\n  onCancelSubscription\n}) => {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-xl font-bold\">Subscription</h2>\n        <div className=\"space-x-2\">\n          <button \n            onClick={onChangePlan}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded\"\n          >\n            Change Plan\n          </button>\n          <button \n            onClick={onCancelSubscription}\n            className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded\"\n          >\n            Cancel\n          </button>\n        </div>\n      </div>\n      <p className=\"text-gray-600\">Manage your subscription plan and billing preferences.</p>\n    </div>\n  );\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/parent-dashboard.tsx",["1906","1907","1908","1909","1910","1911","1912","1913","1914","1915"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart\n} from 'recharts';\nimport { \n  Wallet, Users, Bell, TrendingUp, Calendar, CreditCard,\n  Apple, AlertTriangle, CheckCircle, Clock, User\n} from 'lucide-react';\nimport { cn, formatCurrency, formatDate } from '@/lib/utils';\nimport { Student, MealOrder, PaymentHistory, WalletBalance, SpendingAnalytics } from './types';\n\ninterface ParentDashboardProps {\n  children: Student[];\n  className?: string;\n}\n\n// Mock data - replace with actual data fetching\nconst mockChildrenOrders: Record<string, MealOrder[]> = {\n  'child-1': [\n    {\n      id: '1',\n      studentId: 'child-1',\n      studentName: 'Arjun Sharma',\n      mealType: 'lunch',\n      items: [\n        { id: '1', name: 'Vegetable Biryani', category: 'main', price: 45, quantity: 1, nutritionalInfo: { calories: 420, protein: 12, carbs: 65, fat: 15, fiber: 6, sodium: 650, sugar: 8 }, isVegetarian: true }\n      ],\n      status: 'preparing',\n      orderDate: '2024-01-12',\n      totalAmount: 45,\n      priority: 'medium'\n    }\n  ],\n  'child-2': [\n    {\n      id: '2',\n      studentId: 'child-2',\n      studentName: 'Priya Sharma',\n      mealType: 'lunch',\n      items: [\n        { id: '2', name: 'Dal Rice Bowl', category: 'main', price: 40, quantity: 1, nutritionalInfo: { calories: 380, protein: 14, carbs: 60, fat: 12, fiber: 8, sodium: 580, sugar: 5 }, isVegetarian: true }\n      ],\n      status: 'ready',\n      orderDate: '2024-01-12',\n      totalAmount: 40,\n      priority: 'medium'\n    }\n  ]\n};\n\nconst mockPaymentHistory: PaymentHistory[] = [\n  {\n    id: '1',\n    studentId: 'child-1',\n    amount: 500,\n    type: 'credit',\n    description: 'Wallet top-up',\n    date: '2024-01-10',\n    status: 'completed'\n  },\n  {\n    id: '2',\n    studentId: 'child-1',\n    amount: 45,\n    type: 'debit',\n    description: 'Lunch order',\n    date: '2024-01-12',\n    status: 'completed',\n    orderId: '1'\n  },\n  {\n    id: '3',\n    studentId: 'child-2',\n    amount: 300,\n    type: 'credit',\n    description: 'Wallet top-up',\n    date: '2024-01-08',\n    status: 'completed'\n  }\n];\n\nconst mockWalletBalances: Record<string, WalletBalance> = {\n  'child-1': {\n    studentId: 'child-1',\n    balance: 455,\n    lastUpdated: '2024-01-12',\n    lowBalanceThreshold: 100\n  },\n  'child-2': {\n    studentId: 'child-2',\n    balance: 85,\n    lastUpdated: '2024-01-12',\n    lowBalanceThreshold: 100\n  }\n};\n\nconst mockSpendingAnalytics: SpendingAnalytics = {\n  studentId: 'all',\n  period: 'weekly',\n  data: [\n    { date: '2024-01-06', amount: 120, category: 'Lunch' },\n    { date: '2024-01-07', amount: 95, category: 'Lunch' },\n    { date: '2024-01-08', amount: 150, category: 'Lunch' },\n    { date: '2024-01-09', amount: 110, category: 'Lunch' },\n    { date: '2024-01-10', amount: 130, category: 'Lunch' },\n    { date: '2024-01-11', amount: 85, category: 'Lunch' },\n    { date: '2024-01-12', amount: 140, category: 'Lunch' },\n  ],\n  totalSpent: 830,\n  averagePerDay: 118.5,\n  trends: {\n    direction: 'up',\n    percentage: 12\n  }\n};\n\nconst mockNotifications = [\n  {\n    id: '1',\n    type: 'order_ready',\n    message: 'Priya\\'s lunch order is ready for pickup',\n    studentId: 'child-2',\n    timestamp: '2024-01-12T12:30:00Z',\n    read: false\n  },\n  {\n    id: '2',\n    type: 'low_balance',\n    message: 'Priya\\'s wallet balance is low (₹85)',\n    studentId: 'child-2',\n    timestamp: '2024-01-12T08:00:00Z',\n    read: false\n  },\n  {\n    id: '3',\n    type: 'order_placed',\n    message: 'Arjun placed a lunch order',\n    studentId: 'child-1',\n    timestamp: '2024-01-12T11:00:00Z',\n    read: true\n  }\n];\n\nconst COLORS = {\n  primary: '#4CAF50',\n  secondary: '#9C27B0',\n  accent: '#FF9800',\n  success: '#4CAF50',\n  warning: '#FFC107',\n  error: '#F44336',\n  info: '#2196F3'\n};\n\nconst mockChildren: Student[] = [\n  {\n    id: 'child-1',\n    name: 'Arjun Sharma',\n    class: '8',\n    section: 'A',\n    rollNumber: '15',\n    avatar: '/avatars/arjun.jpg'\n  },\n  {\n    id: 'child-2',\n    name: 'Priya Sharma',\n    class: '5',\n    section: 'B',\n    rollNumber: '22',\n    avatar: '/avatars/priya.jpg'\n  }\n];\n\nexport function ParentDashboard({ children = mockChildren, className }: ParentDashboardProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [selectedChild, setSelectedChild] = useState<string>('all');\n  const [unreadNotifications, setUnreadNotifications] = useState(mockNotifications.filter(n => !n.read).length);\n\n  useEffect(() => {\n    // Simulate data loading\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const totalBalance = Object.values(mockWalletBalances).reduce((sum, wallet) => sum + wallet.balance, 0);\n  const lowBalanceChildren = Object.entries(mockWalletBalances).filter(([_, wallet]) => \n    wallet.balance < wallet.lowBalanceThreshold\n  );\n\n  const allActiveOrders = Object.values(mockChildrenOrders).flat().filter(order => \n    order.status !== 'completed' && order.status !== 'cancelled'\n  );\n\n  const spendingChartData = mockSpendingAnalytics.data.map(item => ({\n    date: formatDate(new Date(item.date), 'short'),\n    amount: item.amount,\n  }));\n\n  const nutritionSummary = children.map(child => {\n    const orders = mockChildrenOrders[child.id] || [];\n    const todayOrders = orders.filter(order => order.orderDate === '2024-01-12');\n    const totalCalories = todayOrders.reduce((sum, order) => \n      sum + order.items.reduce((itemSum, item) => \n        itemSum + (item.nutritionalInfo.calories * item.quantity), 0), 0);\n    \n    return {\n      name: child.name,\n      calories: totalCalories,\n      target: 1800, // Mock target for children\n      percentage: Math.min((totalCalories / 1800) * 100, 100)\n    };\n  });\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-6 w-16\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-primary-500 to-primary-600 rounded-lg p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Parent Dashboard</h1>\n            <p className=\"text-primary-100 mt-1\">Managing {children.length} children</p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            {unreadNotifications > 0 && (\n              <div className=\"relative\">\n                <Bell className=\"h-6 w-6\" />\n                <span className=\"absolute -top-1 -right-1 bg-error-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                  {unreadNotifications}\n                </span>\n              </div>\n            )}\n            <div className=\"text-right\">\n              <p className=\"text-sm text-primary-100\">Total Balance</p>\n              <p className=\"text-2xl font-bold\">{formatCurrency(totalBalance)}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Children</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{children.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              All children active\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Orders</CardTitle>\n            <Clock className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{allActiveOrders.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              {allActiveOrders.filter(o => o.status === 'ready').length} ready for pickup\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Weekly Spending</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {formatCurrency(mockSpendingAnalytics.totalSpent)}\n            </div>\n            <p className={cn(\n              \"text-xs\",\n              mockSpendingAnalytics.trends.direction === 'up' ? \"text-error-600\" : \"text-success-600\"\n            )}>\n              {mockSpendingAnalytics.trends.direction === 'up' ? '+' : '-'}\n              {mockSpendingAnalytics.trends.percentage}% from last week\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Notifications</CardTitle>\n            <Bell className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-warning-600\">\n              {unreadNotifications}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {lowBalanceChildren.length > 0 \n                ? `${lowBalanceChildren.length} low balance alerts`\n                : \"All balances healthy\"}\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Low Balance Alert */}\n      {lowBalanceChildren.length > 0 && (\n        <Card className=\"border-warning-200 bg-warning-50\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center gap-2\">\n              <AlertTriangle className=\"h-5 w-5 text-warning-600\" />\n              <CardTitle className=\"text-warning-800\">Low Balance Alert</CardTitle>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {lowBalanceChildren.map(([childId, wallet]) => {\n                const child = children.find(c => c.id === childId);\n                return (\n                  <div key={childId} className=\"flex items-center justify-between\">\n                    <p className=\"text-warning-700\">\n                      {child?.name}'s balance is low\n                    </p>\n                    <p className=\"font-semibold text-warning-800\">\n                      {formatCurrency(wallet.balance)}\n                    </p>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"spending\">Spending</TabsTrigger>\n          <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n          <TabsTrigger value=\"payments\">Payments</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Children Overview */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Children Overview</CardTitle>\n                <CardDescription>Wallet balances and activity</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {children.map((child) => {\n                  const wallet = mockWalletBalances[child.id];\n                  const orders = mockChildrenOrders[child.id] || [];\n                  const activeOrder = orders.find(o => o.status !== 'completed');\n                  \n                  return (\n                    <div key={child.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-12 h-12 bg-primary-100 rounded-full flex items-center justify-center\">\n                          <User className=\"h-6 w-6 text-primary-600\" />\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{child.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Class {child.class}{child.section} • Roll #{child.rollNumber}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right space-y-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <Wallet className=\"h-4 w-4 text-muted-foreground\" />\n                          <span className={cn(\n                            \"font-semibold\",\n                            wallet && wallet.balance < wallet.lowBalanceThreshold \n                              ? \"text-error-600\" \n                              : \"text-success-600\"\n                          )}>\n                            {wallet ? formatCurrency(wallet.balance) : formatCurrency(0)}\n                          </span>\n                        </div>\n                        {activeOrder && (\n                          <p className={cn(\n                            \"text-xs capitalize\",\n                            activeOrder.status === 'ready' && \"text-success-600\",\n                            activeOrder.status === 'preparing' && \"text-warning-600\",\n                            activeOrder.status === 'pending' && \"text-info-600\"\n                          )}>\n                            {activeOrder.mealType} {activeOrder.status}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </CardContent>\n            </Card>\n\n            {/* Nutrition Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Apple className=\"h-5 w-5\" />\n                  Today's Nutrition Summary\n                </CardTitle>\n                <CardDescription>Calorie intake for each child</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <BarChart data={nutritionSummary}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip \n                      formatter={(value, name) => [\n                        name === 'calories' ? `${value} cal` : `${value} cal`,\n                        name === 'calories' ? 'Consumed' : 'Target'\n                      ]}\n                    />\n                    <Bar dataKey=\"calories\" fill={COLORS.primary} name=\"calories\" />\n                    <Bar dataKey=\"target\" fill={COLORS.info} opacity={0.3} name=\"target\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"spending\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Weekly Spending Trend</CardTitle>\n                <CardDescription>Combined spending across all children</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={spendingChartData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [formatCurrency(Number(value)), 'Amount Spent']} />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"amount\" \n                      stroke={COLORS.primary} \n                      fill={COLORS.primary} \n                      fillOpacity={0.6}\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Spending Analytics</CardTitle>\n                <CardDescription>Weekly summary and trends</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"text-center p-4 bg-primary-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-primary-600\">\n                      {formatCurrency(mockSpendingAnalytics.totalSpent)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Total This Week</p>\n                  </div>\n                  <div className=\"text-center p-4 bg-info-50 rounded-lg\">\n                    <p className=\"text-2xl font-bold text-info-600\">\n                      {formatCurrency(mockSpendingAnalytics.averagePerDay)}\n                    </p>\n                    <p className=\"text-sm text-muted-foreground\">Daily Average</p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">Trend vs Last Week</span>\n                    <span className={cn(\n                      \"text-sm font-medium\",\n                      mockSpendingAnalytics.trends.direction === 'up' \n                        ? \"text-error-600\" \n                        : \"text-success-600\"\n                    )}>\n                      {mockSpendingAnalytics.trends.direction === 'up' ? '+' : '-'}\n                      {mockSpendingAnalytics.trends.percentage}%\n                    </span>\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Lunch Orders</span>\n                      <span className=\"text-sm font-medium\">85%</span>\n                    </div>\n                    <Progress value={85} className=\"h-2\" />\n                  </div>\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm\">Snacks</span>\n                      <span className=\"text-sm font-medium\">15%</span>\n                    </div>\n                    <Progress value={15} className=\"h-2\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Orders</CardTitle>\n              <CardDescription>All children's meal orders</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {Object.entries(mockChildrenOrders).map(([childId, orders]) => {\n                  const child = children.find(c => c.id === childId);\n                  return orders.map((order) => (\n                    <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={cn(\n                          \"w-3 h-3 rounded-full\",\n                          order.status === 'ready' && \"bg-success-500\",\n                          order.status === 'preparing' && \"bg-warning-500\",\n                          order.status === 'completed' && \"bg-gray-400\",\n                          order.status === 'pending' && \"bg-info-500\"\n                        )} />\n                        <div>\n                          <p className=\"font-medium\">{child?.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {order.items[0]?.name} • {order.mealType}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {formatDate(new Date(order.orderDate))}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium\">{formatCurrency(order.totalAmount)}</p>\n                        <p className={cn(\n                          \"text-xs capitalize\",\n                          order.status === 'ready' && \"text-success-600\",\n                          order.status === 'preparing' && \"text-warning-600\",\n                          order.status === 'completed' && \"text-gray-500\",\n                          order.status === 'pending' && \"text-info-600\"\n                        )}>\n                          {order.status}\n                        </p>\n                      </div>\n                    </div>\n                  ));\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"payments\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Payment History\n              </CardTitle>\n              <CardDescription>Wallet transactions and order payments</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockPaymentHistory.map((payment) => {\n                  const child = children.find(c => c.id === payment.studentId);\n                  return (\n                    <div key={payment.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={cn(\n                          \"w-8 h-8 rounded-full flex items-center justify-center\",\n                          payment.type === 'credit' ? \"bg-success-100\" : \"bg-error-100\"\n                        )}>\n                          {payment.type === 'credit' ? (\n                            <TrendingUp className={cn(\"h-4 w-4 text-success-600\")} />\n                          ) : (\n                            <CreditCard className={cn(\"h-4 w-4 text-error-600\")} />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{child?.name}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {payment.description}\n                          </p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {formatDate(new Date(payment.date))}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className={cn(\n                          \"font-semibold\",\n                          payment.type === 'credit' ? \"text-success-600\" : \"text-error-600\"\n                        )}>\n                          {payment.type === 'credit' ? '+' : '-'}{formatCurrency(payment.amount)}\n                        </p>\n                        <div className=\"flex items-center gap-1\">\n                          <CheckCircle className=\"h-3 w-3 text-success-500\" />\n                          <span className=\"text-xs text-success-600 capitalize\">\n                            {payment.status}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notifications\n              </CardTitle>\n              <CardDescription>Updates about your children's meals</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {mockNotifications.map((notification) => {\n                  const child = children.find(c => c.id === notification.studentId);\n                  return (\n                    <div key={notification.id} className={cn(\n                      \"flex items-start justify-between p-4 border rounded-lg\",\n                      !notification.read && \"bg-blue-50 border-blue-200\"\n                    )}>\n                      <div className=\"flex items-start space-x-3\">\n                        <div className={cn(\n                          \"w-8 h-8 rounded-full flex items-center justify-center mt-1\",\n                          notification.type === 'order_ready' && \"bg-success-100\",\n                          notification.type === 'low_balance' && \"bg-warning-100\",\n                          notification.type === 'order_placed' && \"bg-info-100\"\n                        )}>\n                          {notification.type === 'order_ready' && <CheckCircle className=\"h-4 w-4 text-success-600\" />}\n                          {notification.type === 'low_balance' && <AlertTriangle className=\"h-4 w-4 text-warning-600\" />}\n                          {notification.type === 'order_placed' && <Clock className=\"h-4 w-4 text-info-600\" />}\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{notification.message}</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            {formatDate(new Date(notification.timestamp), 'short')} at {new Date(notification.timestamp).toLocaleTimeString('en-IN', { hour: '2-digit', minute: '2-digit' })}\n                          </p>\n                        </div>\n                      </div>\n                      {!notification.read && (\n                        <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-2\" />\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/student-dashboard.tsx",["1916","1917","1918","1919","1920"],[],"\"use client\"\n\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  LineChart, Line, PieChart, Pie, Cell, Area, AreaChart\n} from 'recharts';\nimport { \n  Apple, Utensils, Trophy, Clock, QrCode, Heart,\n  TrendingUp, Calendar, Target, Award\n} from 'lucide-react';\nimport { cn, formatCurrency, formatDate } from '@/lib/utils';\nimport { Student, MealOrder, DailyNutrition, Achievement, WalletBalance } from './types';\n\ninterface StudentDashboardProps {\n  student: Student;\n  className?: string;\n}\n\n// Mock data - replace with actual data fetching\nconst mockNutritionData: DailyNutrition[] = [\n  { date: '2024-01-08', consumed: { calories: 1850, protein: 65, carbs: 230, fat: 45, fiber: 18, sodium: 1200, sugar: 35 }, goal: { calories: 2000, protein: 70, carbs: 250, fat: 50, fiber: 25 }, percentage: 92 },\n  { date: '2024-01-09', consumed: { calories: 1920, protein: 72, carbs: 245, fat: 48, fiber: 22, sodium: 1100, sugar: 32 }, goal: { calories: 2000, protein: 70, carbs: 250, fat: 50, fiber: 25 }, percentage: 96 },\n  { date: '2024-01-10', consumed: { calories: 1780, protein: 68, carbs: 225, fat: 42, fiber: 20, sodium: 1300, sugar: 38 }, goal: { calories: 2000, protein: 70, carbs: 250, fat: 50, fiber: 25 }, percentage: 89 },\n  { date: '2024-01-11', consumed: { calories: 2020, protein: 75, carbs: 255, fat: 52, fiber: 26, sodium: 1150, sugar: 30 }, goal: { calories: 2000, protein: 70, carbs: 250, fat: 50, fiber: 25 }, percentage: 101 },\n  { date: '2024-01-12', consumed: { calories: 1900, protein: 70, carbs: 240, fat: 46, fiber: 24, sodium: 1250, sugar: 33 }, goal: { calories: 2000, protein: 70, carbs: 250, fat: 50, fiber: 25 }, percentage: 95 },\n];\n\nconst mockRecentOrders: MealOrder[] = [\n  {\n    id: '1',\n    studentId: 'student-1',\n    studentName: 'Current Student',\n    mealType: 'lunch',\n    items: [\n      { id: '1', name: 'Vegetable Biryani', category: 'main', price: 45, quantity: 1, nutritionalInfo: { calories: 420, protein: 12, carbs: 65, fat: 15, fiber: 6, sodium: 650, sugar: 8 }, isVegetarian: true }\n    ],\n    status: 'ready',\n    orderDate: '2024-01-12',\n    totalAmount: 45,\n    priority: 'medium'\n  },\n  {\n    id: '2',\n    studentId: 'student-1',\n    studentName: 'Current Student',\n    mealType: 'breakfast',\n    items: [\n      { id: '2', name: 'Healthy Breakfast Bowl', category: 'main', price: 35, quantity: 1, nutritionalInfo: { calories: 320, protein: 15, carbs: 45, fat: 10, fiber: 8, sodium: 400, sugar: 12 }, isVegetarian: true }\n    ],\n    status: 'completed',\n    orderDate: '2024-01-12',\n    pickupTime: '08:30',\n    totalAmount: 35,\n    priority: 'medium'\n  }\n];\n\nconst mockAchievements: Achievement[] = [\n  {\n    id: '1',\n    title: 'Nutrition Champion',\n    description: 'Met daily nutrition goals for 7 consecutive days',\n    icon: 'trophy',\n    progress: 5,\n    maxProgress: 7,\n    category: 'nutrition',\n  },\n  {\n    id: '2',\n    title: 'Variety Explorer',\n    description: 'Tried 10 different healthy meals',\n    icon: 'star',\n    progress: 8,\n    maxProgress: 10,\n    category: 'variety',\n  },\n  {\n    id: '3',\n    title: 'Consistency King',\n    description: 'Ordered meals 15 days in a row',\n    icon: 'calendar',\n    progress: 12,\n    maxProgress: 15,\n    category: 'consistency',\n  }\n];\n\nconst mockFavoriteMeals = [\n  { name: 'Vegetable Biryani', orders: 12, rating: 4.8, image: '/images/biryani.jpg' },\n  { name: 'Healthy Bowl', orders: 8, rating: 4.6, image: '/images/bowl.jpg' },\n  { name: 'Fruit Salad', orders: 6, rating: 4.9, image: '/images/fruit.jpg' }\n];\n\nconst mockWalletBalance: WalletBalance = {\n  studentId: 'student-1',\n  balance: 450,\n  lastUpdated: '2024-01-12',\n  lowBalanceThreshold: 100\n};\n\nconst COLORS = {\n  primary: '#4CAF50',\n  secondary: '#9C27B0',\n  accent: '#FF9800',\n  success: '#4CAF50',\n  warning: '#FFC107',\n  error: '#F44336',\n  info: '#2196F3'\n};\n\nexport function StudentDashboard({ student, className }: StudentDashboardProps) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [todayNutrition, setTodayNutrition] = useState<DailyNutrition | null>(null);\n\n  useEffect(() => {\n    // Simulate data loading\n    const timer = setTimeout(() => {\n      setTodayNutrition(mockNutritionData[mockNutritionData.length - 1]);\n      setIsLoading(false);\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  const generateRFIDCode = () => {\n    return Math.random().toString(36).substr(2, 8).toUpperCase();\n  };\n\n  const weeklyNutritionChart = mockNutritionData.map(day => ({\n    date: formatDate(new Date(day.date), 'short'),\n    calories: day.consumed.calories,\n    protein: day.consumed.protein,\n    target: day.goal.calories\n  }));\n\n  const nutritionBreakdown = todayNutrition ? [\n    { name: 'Protein', value: todayNutrition.consumed.protein, color: COLORS.primary },\n    { name: 'Carbs', value: todayNutrition.consumed.carbs, color: COLORS.info },\n    { name: 'Fat', value: todayNutrition.consumed.fat, color: COLORS.warning },\n  ] : [];\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"space-y-6\", className)}>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <Card key={i}>\n              <CardHeader className=\"pb-3\">\n                <Skeleton className=\"h-4 w-24\" />\n                <Skeleton className=\"h-6 w-16\" />\n              </CardHeader>\n              <CardContent>\n                <Skeleton className=\"h-4 w-full\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-6 w-48\" />\n          </CardHeader>\n          <CardContent>\n            <Skeleton className=\"h-64 w-full\" />\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Welcome Header */}\n      <div className=\"bg-gradient-to-r from-primary-500 to-primary-600 rounded-lg p-6 text-white\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Welcome back, {student.name}!</h1>\n            <p className=\"text-primary-100 mt-1\">Class {student.class}{student.section} • Roll #{student.rollNumber}</p>\n          </div>\n          <div className=\"text-right\">\n            <p className=\"text-sm text-primary-100\">Today's Nutrition Goal</p>\n            <p className=\"text-2xl font-bold\">{todayNutrition?.percentage}%</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Wallet Balance</CardTitle>\n            <div className=\"h-4 w-4 text-muted-foreground\">\n              💳\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold text-success-600\">\n              {formatCurrency(mockWalletBalance.balance)}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {mockWalletBalance.balance < mockWalletBalance.lowBalanceThreshold \n                ? \"Consider adding funds\" \n                : \"Balance is healthy\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Today's Calories</CardTitle>\n            <Apple className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {todayNutrition?.consumed.calories || 0}\n            </div>\n            <Progress \n              value={todayNutrition?.percentage || 0} \n              className=\"mt-2\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Goal: {todayNutrition?.goal.calories || 0} cal\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Orders</CardTitle>\n            <Utensils className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockRecentOrders.filter(order => order.status !== 'completed').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {mockRecentOrders.find(order => order.status === 'ready') \n                ? \"Order ready for pickup!\" \n                : \"No pending orders\"}\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Achievements</CardTitle>\n            <Trophy className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockAchievements.filter(a => a.progress >= a.maxProgress).length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              {mockAchievements.filter(a => a.progress < a.maxProgress).length} in progress\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs defaultValue=\"nutrition\" className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"nutrition\">Nutrition</TabsTrigger>\n          <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n          <TabsTrigger value=\"achievements\">Achievements</TabsTrigger>\n          <TabsTrigger value=\"pickup\">Pickup</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"nutrition\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Weekly Nutrition Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Weekly Nutrition Progress\n                </CardTitle>\n                <CardDescription>\n                  Your daily calorie intake vs goals\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <AreaChart data={weeklyNutritionChart}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Area \n                      type=\"monotone\" \n                      dataKey=\"calories\" \n                      stroke={COLORS.primary} \n                      fill={COLORS.primary} \n                      fillOpacity={0.6}\n                      name=\"Consumed Calories\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"target\" \n                      stroke={COLORS.warning} \n                      strokeDasharray=\"5 5\"\n                      name=\"Target Calories\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Today's Nutrition Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"h-5 w-5\" />\n                  Today's Nutrition\n                </CardTitle>\n                <CardDescription>\n                  Macronutrient breakdown\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <PieChart>\n                    <Pie\n                      data={nutritionBreakdown}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      labelLine={false}\n                      label={({ name, value }) => `${name}: ${value}g`}\n                      outerRadius={80}\n                      fill=\"#8884d8\"\n                      dataKey=\"value\"\n                    >\n                      {nutritionBreakdown.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip />\n                  </PieChart>\n                </ResponsiveContainer>\n                \n                {todayNutrition && (\n                  <div className=\"grid grid-cols-3 gap-4 mt-4 text-center\">\n                    <div>\n                      <p className=\"text-sm font-medium\">Protein</p>\n                      <p className=\"text-2xl font-bold text-primary-600\">\n                        {todayNutrition.consumed.protein}g\n                      </p>\n                      <Progress \n                        value={(todayNutrition.consumed.protein / todayNutrition.goal.protein) * 100} \n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Carbs</p>\n                      <p className=\"text-2xl font-bold text-info-600\">\n                        {todayNutrition.consumed.carbs}g\n                      </p>\n                      <Progress \n                        value={(todayNutrition.consumed.carbs / todayNutrition.goal.carbs) * 100} \n                        className=\"mt-1\"\n                      />\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium\">Fat</p>\n                      <p className=\"text-2xl font-bold text-warning-600\">\n                        {todayNutrition.consumed.fat}g\n                      </p>\n                      <Progress \n                        value={(todayNutrition.consumed.fat / todayNutrition.goal.fat) * 100} \n                        className=\"mt-1\"\n                      />\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"orders\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Recent Orders */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Orders</CardTitle>\n                <CardDescription>Your meal order history</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {mockRecentOrders.map((order) => (\n                  <div key={order.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={cn(\n                        \"w-3 h-3 rounded-full\",\n                        order.status === 'ready' && \"bg-success-500\",\n                        order.status === 'preparing' && \"bg-warning-500\",\n                        order.status === 'completed' && \"bg-gray-400\",\n                        order.status === 'pending' && \"bg-info-500\"\n                      )} />\n                      <div>\n                        <p className=\"font-medium\">{order.items[0]?.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          {formatDate(new Date(order.orderDate))} • {order.mealType}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium\">{formatCurrency(order.totalAmount)}</p>\n                      <p className={cn(\n                        \"text-xs capitalize\",\n                        order.status === 'ready' && \"text-success-600\",\n                        order.status === 'preparing' && \"text-warning-600\",\n                        order.status === 'completed' && \"text-gray-500\",\n                        order.status === 'pending' && \"text-info-600\"\n                      )}>\n                        {order.status}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* Favorite Meals */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Favorites</CardTitle>\n                <CardDescription>Most ordered meals</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {mockFavoriteMeals.map((meal, index) => (\n                  <div key={meal.name} className=\"flex items-center space-x-3\">\n                    <div className=\"flex-shrink-0 w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-lg\">🍽️</span>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium\">{meal.name}</p>\n                      <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                        <span>{meal.orders} orders</span>\n                        <span>•</span>\n                        <div className=\"flex items-center\">\n                          <Heart className=\"h-3 w-3 text-error-500 mr-1\" fill=\"currentColor\" />\n                          <span>{meal.rating}</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"achievements\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {mockAchievements.map((achievement) => (\n              <Card key={achievement.id}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <Award className={cn(\n                      \"h-8 w-8\",\n                      achievement.progress >= achievement.maxProgress \n                        ? \"text-warning-500\" \n                        : \"text-muted-foreground\"\n                    )} />\n                    <div className=\"text-right\">\n                      <p className=\"text-sm font-medium\">\n                        {achievement.progress}/{achievement.maxProgress}\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">\n                        {Math.round((achievement.progress / achievement.maxProgress) * 100)}%\n                      </p>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <h3 className=\"font-semibold mb-2\">{achievement.title}</h3>\n                  <p className=\"text-sm text-muted-foreground mb-3\">\n                    {achievement.description}\n                  </p>\n                  <Progress \n                    value={(achievement.progress / achievement.maxProgress) * 100}\n                    className=\"mb-2\"\n                  />\n                  {achievement.progress >= achievement.maxProgress && (\n                    <p className=\"text-xs text-success-600 font-medium\">\n                      🎉 Achievement Unlocked!\n                    </p>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"pickup\" className=\"space-y-4\">\n          <div className=\"max-w-2xl mx-auto\">\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"flex items-center justify-center gap-2\">\n                  <QrCode className=\"h-6 w-6\" />\n                  RFID Pickup Code\n                </CardTitle>\n                <CardDescription>\n                  Show this code to collect your order\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"text-center space-y-6\">\n                <div className=\"bg-gray-100 rounded-lg p-8\">\n                  <div className=\"text-4xl font-mono font-bold text-primary-600 tracking-wider\">\n                    {student.rfidCode || generateRFIDCode()}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mt-2\">\n                    Valid for today only\n                  </p>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-muted-foreground\">\n                    Present this code at the kitchen counter to collect your order\n                  </p>\n                  <div className=\"flex items-center justify-center gap-2 text-sm\">\n                    <Clock className=\"h-4 w-4\" />\n                    <span>Kitchen hours: 7:00 AM - 7:00 PM</span>\n                  </div>\n                </div>\n\n                {mockRecentOrders.find(order => order.status === 'ready') && (\n                  <div className=\"bg-success-50 border border-success-200 rounded-lg p-4\">\n                    <p className=\"text-success-800 font-medium\">\n                      ✅ Your lunch order is ready for pickup!\n                    </p>\n                    <p className=\"text-success-600 text-sm mt-1\">\n                      Order #{mockRecentOrders.find(order => order.status === 'ready')?.id}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/dashboard/types.ts",["1921","1922","1923","1924","1925","1926"],[],"// Dashboard Type Definitions for HASIVU School Platform\n[];\n  totalSpent: number;\n  averagePerDay: number;\n  trends: {}\n[];\n  nutritionCompliance: number;\n  wasteReduction: number;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/demo/PaymentIntelligenceDemo.tsx",["1927","1928","1929","1930","1931","1932","1933","1934","1935","1936","1937","1938","1939"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  Shield, \n  TrendingUp, \n  Brain, \n  CreditCard,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Activity,\n  DollarSign,\n  PieChart,\n  BarChart3,\n  Users,\n  Zap,\n  RefreshCw,\n  Lock\n} from 'lucide-react';\nimport { hasiviApi } from '@/services/api/hasivu-api.service';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  RadialBarChart,\n  RadialBar,\n  PolarAngleAxis\n} from 'recharts';\n\n// Demo payment transactions for testing\nconst DEMO_TRANSACTIONS = [\n  {\n    id: 'TXN-001',\n    amount: 150,\n    studentName: 'Emma Johnson',\n    time: '09:15 AM',\n    riskScore: 12,\n    status: 'approved',\n    paymentMethod: 'Credit Card',\n    location: 'Springfield Elementary'\n  },\n  {\n    id: 'TXN-002',\n    amount: 75,\n    studentName: 'Michael Chen',\n    time: '09:18 AM',\n    riskScore: 95,\n    status: 'flagged',\n    paymentMethod: 'Debit Card',\n    location: 'Unknown Location',\n    anomaly: 'Unusual location pattern'\n  },\n  {\n    id: 'TXN-003',\n    amount: 200,\n    studentName: 'Sofia Rodriguez',\n    time: '09:21 AM',\n    riskScore: 8,\n    status: 'approved',\n    paymentMethod: 'Wallet',\n    location: 'Springfield Elementary'\n  }\n];\n\n// ML Model metrics\nconst ML_METRICS = {\n  fraudDetection: {\n    accuracy: 99.7,\n    falsePositives: 0.1,\n    truePositives: 99.6,\n    processingTime: 187\n  },\n  churnPrediction: {\n    accuracy: 94,\n    precision: 92,\n    recall: 96,\n    f1Score: 94\n  },\n  revenueForecasting: {\n    accuracy: 97,\n    mape: 3.2, // Mean Absolute Percentage Error\n    confidence: 95\n  }\n};\n\n// Revenue data for charts\nconst revenueData = [\n  { month: 'Jan', actual: 45000, predicted: 44500, transactions: 1200 },\n  { month: 'Feb', actual: 52000, predicted: 51800, transactions: 1400 },\n  { month: 'Mar', actual: 48000, predicted: 48500, transactions: 1300 },\n  { month: 'Apr', actual: 55000, predicted: 54200, transactions: 1500 },\n  { month: 'May', actual: 61000, predicted: 60500, transactions: 1650 },\n  { month: 'Jun', actual: 58000, predicted: 58300, transactions: 1580 }\n];\n\n// Payment success rate data\nconst paymentSuccessData = [\n  { name: 'Credit Card', success: 98, failed: 2 },\n  { name: 'Debit Card', success: 96, failed: 4 },\n  { name: 'Wallet', success: 99.5, failed: 0.5 },\n  { name: 'UPI', success: 97, failed: 3 }\n];\n\nconst PaymentIntelligenceDemo: React.FC = () => {\n  const [selectedTransaction, setSelectedTransaction] = useState<any>(null);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [liveMetrics, setLiveMetrics] = useState({\n    totalTransactions: 2347892,\n    fraudsPrevented: 180,\n    moneySaved: 2300000,\n    activeModels: 4\n  });\n  const [activeTab, setActiveTab] = useState('fraud-detection');\n\n  // Simulate live metrics updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLiveMetrics(prev => ({\n        totalTransactions: prev.totalTransactions + Math.floor(Math.random() * 10),\n        fraudsPrevented: prev.fraudsPrevented + (Math.random() > 0.95 ? 1 : 0),\n        moneySaved: prev.moneySaved + Math.floor(Math.random() * 1000),\n        activeModels: 4\n      }));\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const analyzeTransaction = async (transaction: any) => {\n    setIsAnalyzing(true);\n    setSelectedTransaction(null);\n\n    // Simulate ML analysis\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    const analysis = {\n      ...transaction,\n      mlAnalysis: {\n        riskFactors: [\n          transaction.riskScore > 80 ? 'Unusual location pattern' : null,\n          transaction.amount > 500 ? 'High transaction amount' : null,\n          'First-time payment method'\n        ].filter(Boolean),\n        recommendation: transaction.riskScore > 80 ? 'Manual Review Required' : 'Auto-Approve',\n        confidence: 95 + Math.random() * 5,\n        processingTime: 150 + Math.floor(Math.random() * 100)\n      },\n      behaviorAnalysis: {\n        typicalAmount: 85,\n        typicalTime: '12:00 PM',\n        frequencyScore: 85,\n        consistencyScore: transaction.riskScore < 50 ? 92 : 45\n      }\n    };\n\n    setSelectedTransaction(analysis);\n    setIsAnalyzing(false);\n  };\n\n  const getRiskColor = (score: number) => {\n    if (score < 30) return 'text-green-600';\n    if (score < 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getRiskBadge = (score: number) => {\n    if (score < 30) return { variant: 'default' as const, text: 'Low Risk' };\n    if (score < 70) return { variant: 'secondary' as const, text: 'Medium Risk' };\n    return { variant: 'destructive' as const, text: 'High Risk' };\n  };\n\n  return (\n    <div className=\"w-full max-w-7xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          AI Payment Intelligence Live Demo\n        </h2>\n        <p className=\"text-gray-600\">\n          Experience our ML-powered fraud detection and payment optimization\n        </p>\n      </div>\n\n      {/* Live Metrics Dashboard */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Processed</p>\n                <p className=\"text-2xl font-bold\">{liveMetrics.totalTransactions.toLocaleString()}</p>\n              </div>\n              <Activity className=\"h-8 w-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Frauds Prevented</p>\n                <p className=\"text-2xl font-bold text-green-600\">{liveMetrics.fraudsPrevented}</p>\n              </div>\n              <Shield className=\"h-8 w-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Money Saved</p>\n                <p className=\"text-2xl font-bold\">₹{(liveMetrics.moneySaved / 100000).toFixed(1)}L</p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">ML Models Active</p>\n                <p className=\"text-2xl font-bold\">{liveMetrics.activeModels}</p>\n              </div>\n              <Brain className=\"h-8 w-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"fraud-detection\">Fraud Detection</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Predictive Analytics</TabsTrigger>\n          <TabsTrigger value=\"optimization\">Payment Optimization</TabsTrigger>\n        </TabsList>\n\n        {/* Fraud Detection Tab */}\n        <TabsContent value=\"fraud-detection\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* Transaction Stream */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5\" />\n                  Live Transaction Stream\n                </CardTitle>\n                <CardDescription>\n                  Click on a transaction to see AI analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {DEMO_TRANSACTIONS.map((transaction) => (\n                  <motion.div\n                    key={transaction.id}\n                    whileHover={{ scale: 1.02 }}\n                    className=\"p-3 border rounded-lg cursor-pointer hover:bg-gray-50\"\n                    onClick={() => analyzeTransaction(transaction)}\n                  >\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className={`p-2 rounded-full ${\n                          transaction.status === 'approved' ? 'bg-green-100' : 'bg-yellow-100'\n                        }`}>\n                          {transaction.status === 'approved' ? \n                            <CheckCircle className=\"h-4 w-4 text-green-600\" /> :\n                            <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                          }\n                        </div>\n                        <div>\n                          <p className=\"font-medium\">{transaction.studentName}</p>\n                          <p className=\"text-xs text-gray-500\">{transaction.time} • {transaction.paymentMethod}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold\">₹{transaction.amount}</p>\n                        <Badge {...getRiskBadge(transaction.riskScore)} className=\"text-xs\">\n                          Risk: {transaction.riskScore}%\n                        </Badge>\n                      </div>\n                    </div>\n                    {transaction.anomaly && (\n                      <Alert className=\"mt-2 p-2 bg-yellow-50 border-yellow-200\">\n                        <AlertDescription className=\"text-xs\">\n                          ⚠️ {transaction.anomaly}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n                  </motion.div>\n                ))}\n              </CardContent>\n            </Card>\n\n            {/* AI Analysis Panel */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5\" />\n                  AI Analysis Engine\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isAnalyzing ? (\n                  <div className=\"flex flex-col items-center justify-center h-64\">\n                    <motion.div\n                      animate={{ rotate: 360 }}\n                      transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n                    >\n                      <Brain className=\"h-12 w-12 text-blue-600\" />\n                    </motion.div>\n                    <p className=\"mt-4 text-gray-600\">Analyzing transaction patterns...</p>\n                  </div>\n                ) : selectedTransaction ? (\n                  <div className=\"space-y-4\">\n                    {/* Risk Assessment */}\n                    <div className=\"p-3 bg-gray-50 rounded-lg\">\n                      <p className=\"text-sm font-medium mb-2\">Risk Assessment</p>\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm text-gray-600\">Risk Score</span>\n                        <span className={`font-bold ${getRiskColor(selectedTransaction.riskScore)}`}>\n                          {selectedTransaction.riskScore}%\n                        </span>\n                      </div>\n                      <Progress value={selectedTransaction.riskScore} className=\"h-2\" />\n                    </div>\n\n                    {/* ML Analysis */}\n                    <div className=\"p-3 bg-blue-50 rounded-lg\">\n                      <p className=\"text-sm font-medium mb-2\">ML Analysis</p>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Confidence</span>\n                          <span className=\"font-medium\">{selectedTransaction.mlAnalysis.confidence.toFixed(1)}%</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Processing Time</span>\n                          <span className=\"font-medium\">{selectedTransaction.mlAnalysis.processingTime}ms</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Recommendation</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {selectedTransaction.mlAnalysis.recommendation}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Risk Factors */}\n                    {selectedTransaction.mlAnalysis.riskFactors.length > 0 && (\n                      <div className=\"p-3 bg-yellow-50 rounded-lg\">\n                        <p className=\"text-sm font-medium mb-2\">Risk Factors Detected</p>\n                        <ul className=\"text-sm text-yellow-800 space-y-1\">\n                          {selectedTransaction.mlAnalysis.riskFactors.map((factor: string, i: number) => (\n                            <li key={i}>• {factor}</li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n\n                    {/* Behavior Analysis */}\n                    <div className=\"p-3 bg-purple-50 rounded-lg\">\n                      <p className=\"text-sm font-medium mb-2\">Behavioral Analysis</p>\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600\">Consistency</span>\n                          <p className=\"font-medium\">{selectedTransaction.behaviorAnalysis.consistencyScore}%</p>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600\">Frequency</span>\n                          <p className=\"font-medium\">{selectedTransaction.behaviorAnalysis.frequencyScore}%</p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"flex flex-col items-center justify-center h-64 text-gray-400\">\n                    <CreditCard className=\"h-12 w-12 mb-4\" />\n                    <p>Select a transaction to analyze</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* ML Model Performance */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Fraud Detection Model Performance</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {ML_METRICS.fraudDetection.accuracy}%\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Accuracy</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {ML_METRICS.fraudDetection.truePositives}%\n                  </div>\n                  <p className=\"text-sm text-gray-600\">True Positives</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-yellow-600\">\n                    {ML_METRICS.fraudDetection.falsePositives}%\n                  </div>\n                  <p className=\"text-sm text-gray-600\">False Positives</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600\">\n                    {ML_METRICS.fraudDetection.processingTime}ms\n                  </div>\n                  <p className=\"text-sm text-gray-600\">Avg. Processing</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Predictive Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* Revenue Forecasting */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5\" />\n                  Revenue Forecasting\n                </CardTitle>\n                <CardDescription>\n                  AI-powered revenue predictions with {ML_METRICS.revenueForecasting.accuracy}% accuracy\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <LineChart data={revenueData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"actual\" \n                      stroke=\"#4CAF50\" \n                      strokeWidth={2}\n                      name=\"Actual Revenue\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"predicted\" \n                      stroke=\"#2196F3\" \n                      strokeWidth={2}\n                      strokeDasharray=\"5 5\"\n                      name=\"ML Prediction\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n                <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm font-medium mb-1\">Next Month Forecast</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">₹64,500</p>\n                  <p className=\"text-xs text-gray-600\">Confidence: {ML_METRICS.revenueForecasting.confidence}%</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Churn Prediction */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Users className=\"h-5 w-5\" />\n                  Churn Prediction Analysis\n                </CardTitle>\n                <CardDescription>\n                  Identify at-risk customers with {ML_METRICS.churnPrediction.accuracy}% accuracy\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Churn Risk Distribution */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Low Risk (0-30%)</span>\n                      <span className=\"font-medium text-green-600\">782 users</span>\n                    </div>\n                    <Progress value={78} className=\"h-2 bg-green-100\" />\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span>Medium Risk (30-70%)</span>\n                      <span className=\"font-medium text-yellow-600\">156 users</span>\n                    </div>\n                    <Progress value={15} className=\"h-2 bg-yellow-100\" />\n                    \n                    <div className=\"flex justify-between text-sm\">\n                      <span>High Risk (70-100%)</span>\n                      <span className=\"font-medium text-red-600\">62 users</span>\n                    </div>\n                    <Progress value={6} className=\"h-2 bg-red-100\" />\n                  </div>\n\n                  {/* Model Metrics */}\n                  <div className=\"grid grid-cols-2 gap-3 pt-4 border-t\">\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <p className=\"text-lg font-bold\">{ML_METRICS.churnPrediction.precision}%</p>\n                      <p className=\"text-xs text-gray-600\">Precision</p>\n                    </div>\n                    <div className=\"text-center p-2 bg-gray-50 rounded\">\n                      <p className=\"text-lg font-bold\">{ML_METRICS.churnPrediction.recall}%</p>\n                      <p className=\"text-xs text-gray-600\">Recall</p>\n                    </div>\n                  </div>\n\n                  <Alert className=\"bg-orange-50 border-orange-200\">\n                    <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                    <AlertDescription className=\"text-sm\">\n                      <strong>Alert:</strong> 12 high-value customers show increased churn risk this week\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Payment Optimization Tab */}\n        <TabsContent value=\"optimization\" className=\"space-y-4\">\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {/* Smart Retry Logic */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <RefreshCw className=\"h-5 w-5\" />\n                  AI-Powered Retry Optimization\n                </CardTitle>\n                <CardDescription>\n                  Intelligent payment retry scheduling\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"p-3 bg-green-50 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-sm font-medium\">Recovery Rate</span>\n                      <span className=\"text-2xl font-bold text-green-600\">67%</span>\n                    </div>\n                    <Progress value={67} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm font-medium\">Optimal Retry Times</p>\n                    <div className=\"grid grid-cols-3 gap-2 text-center\">\n                      <div className=\"p-2 bg-blue-50 rounded\">\n                        <p className=\"font-bold text-blue-600\">2h</p>\n                        <p className=\"text-xs text-gray-600\">First Retry</p>\n                      </div>\n                      <div className=\"p-2 bg-blue-50 rounded\">\n                        <p className=\"font-bold text-blue-600\">24h</p>\n                        <p className=\"text-xs text-gray-600\">Second Retry</p>\n                      </div>\n                      <div className=\"p-2 bg-blue-50 rounded\">\n                        <p className=\"font-bold text-blue-600\">72h</p>\n                        <p className=\"text-xs text-gray-600\">Final Retry</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"p-3 bg-purple-50 rounded-lg\">\n                    <p className=\"text-sm font-medium mb-2\">ML Insights</p>\n                    <ul className=\"text-sm text-purple-800 space-y-1\">\n                      <li>• Best retry time: Weekday mornings</li>\n                      <li>• 23% higher success with email reminder</li>\n                      <li>• Wallet payments: 89% first-retry success</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Method Success Rates */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5\" />\n                  Payment Method Optimization\n                </CardTitle>\n                <CardDescription>\n                  AI-recommended payment methods by success rate\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={250}>\n                  <BarChart data={paymentSuccessData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"name\" />\n                    <YAxis />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"success\" fill=\"#4CAF50\" name=\"Success Rate %\" />\n                  </BarChart>\n                </ResponsiveContainer>\n                \n                <Alert className=\"mt-4 bg-green-50 border-green-200\">\n                  <Zap className=\"h-4 w-4 text-green-600\" />\n                  <AlertDescription className=\"text-sm\">\n                    <strong>AI Recommendation:</strong> Promote Wallet payments for 2.5% higher success rate\n                  </AlertDescription>\n                </Alert>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default PaymentIntelligenceDemo;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/demo/RFIDLiveDemo.tsx",["1940","1941","1942","1943","1944","1945","1946","1947","1948"],[],"\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  CreditCard, \n  CheckCircle, \n  XCircle, \n  Loader2, \n  Wifi, \n  WifiOff,\n  User,\n  Package,\n  Clock,\n  Camera,\n  AlertCircle,\n  Activity\n} from 'lucide-react';\nimport { hasiviApi } from '@/services/api/hasivu-api.service';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { toast } from 'react-hot-toast';\n\ninterface RFIDVerificationResult {\n  success: boolean;\n  cardNumber: string;\n  studentId: string;\n  studentName: string;\n  schoolId: string;\n  verificationId: string;\n  timestamp: Date;\n  location: string;\n  readerInfo: {\n    id: string;\n    name: string;\n    location: string;\n    status: 'online' | 'offline' | 'maintenance';\n  };\n  orderInfo?: {\n    id: string;\n    status: string;\n    deliveryDate: Date;\n    items: string[];\n  };\n  signalQuality: 'excellent' | 'good' | 'fair' | 'poor';\n  verificationTime: number;\n  photoUrl?: string;\n}\n\ninterface DemoRFIDCard {\n  cardNumber: string;\n  studentName: string;\n  schoolName: string;\n  grade: string;\n  photoUrl: string;\n}\n\n// Demo RFID cards for testing\nconst DEMO_CARDS: DemoRFIDCard[] = [\n  {\n    cardNumber: 'RFID-2024-0001',\n    studentName: 'Emma Johnson',\n    schoolName: 'Springfield Elementary',\n    grade: '5th Grade',\n    photoUrl: 'https://ui-avatars.com/api/?name=Emma+Johnson&background=4CAF50&color=fff'\n  },\n  {\n    cardNumber: 'RFID-2024-0002',\n    studentName: 'Michael Chen',\n    schoolName: 'Springfield Elementary',\n    grade: '4th Grade',\n    photoUrl: 'https://ui-avatars.com/api/?name=Michael+Chen&background=2196F3&color=fff'\n  },\n  {\n    cardNumber: 'RFID-2024-0003',\n    studentName: 'Sofia Rodriguez',\n    schoolName: 'Springfield Elementary',\n    grade: '6th Grade',\n    photoUrl: 'https://ui-avatars.com/api/?name=Sofia+Rodriguez&background=9C27B0&color=fff'\n  }\n];\n\nconst RFIDLiveDemo: React.FC = () => {\n  const [isScanning, setIsScanning] = useState(false);\n  const [readerStatus, setReaderStatus] = useState<'online' | 'offline' | 'connecting'>('connecting');\n  const [selectedCard, setSelectedCard] = useState<DemoRFIDCard | null>(null);\n  const [verificationResult, setVerificationResult] = useState<RFIDVerificationResult | null>(null);\n  const [manualCardNumber, setManualCardNumber] = useState('');\n  const [isManualMode, setIsManualMode] = useState(false);\n  const [signalStrength, setSignalStrength] = useState(85);\n  const [verificationHistory, setVerificationHistory] = useState<RFIDVerificationResult[]>([]);\n  const scanTimeoutRef = useRef<NodeJS.Timeout>();\n\n  // Simulate reader connection\n  useEffect(() => {\n    const connectReader = async () => {\n      setReaderStatus('connecting');\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      setReaderStatus('online');\n      \n      // Simulate signal strength fluctuation\n      const interval = setInterval(() => {\n        setSignalStrength(prev => {\n          const change = (Math.random() - 0.5) * 10;\n          const newValue = prev + change;\n          return Math.max(60, Math.min(100, newValue));\n        });\n      }, 2000);\n\n      return () => clearInterval(interval);\n    };\n\n    connectReader();\n  }, []);\n\n  const simulateRFIDScan = async (card: DemoRFIDCard) => {\n    setIsScanning(true);\n    setVerificationResult(null);\n\n    // Clear any existing timeout\n    if (scanTimeoutRef.current) {\n      clearTimeout(scanTimeoutRef.current);\n    }\n\n    try {\n      // Simulate scanning delay (300-800ms)\n      const scanDelay = 300 + Math.random() * 500;\n      await new Promise(resolve => setTimeout(resolve, scanDelay));\n\n      // In production, this would call the actual API\n      // const response = await hasiviApi.verifyRFIDCard(card.cardNumber, 'demo-reader-001');\n      \n      // For demo, simulate the response\n      const mockResult: RFIDVerificationResult = {\n        success: true,\n        cardNumber: card.cardNumber,\n        studentId: `STU-${Date.now()}`,\n        studentName: card.studentName,\n        schoolId: 'demo-school-001',\n        verificationId: `VER-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n        timestamp: new Date(),\n        location: 'Main Cafeteria',\n        readerInfo: {\n          id: 'demo-reader-001',\n          name: 'Cafeteria Reader #1',\n          location: 'Main Entrance',\n          status: 'online'\n        },\n        orderInfo: {\n          id: `ORD-${Date.now()}`,\n          status: 'ready',\n          deliveryDate: new Date(),\n          items: ['Chicken Sandwich', 'Apple Juice', 'Fresh Fruit Cup']\n        },\n        signalQuality: signalStrength > 80 ? 'excellent' : signalStrength > 60 ? 'good' : 'fair',\n        verificationTime: scanDelay,\n        photoUrl: card.photoUrl\n      };\n\n      setVerificationResult(mockResult);\n      setVerificationHistory(prev => [mockResult, ...prev.slice(0, 4)]);\n      \n      // Success feedback\n      toast.success(`Verified: ${card.studentName}`);\n      \n      // Auto-reset after 5 seconds\n      scanTimeoutRef.current = setTimeout(() => {\n        setVerificationResult(null);\n        setSelectedCard(null);\n      }, 5000);\n\n    } catch (error) {\n      console.error('RFID verification error:', error);\n      toast.error('Verification failed. Please try again.');\n      \n      setVerificationResult({\n        success: false,\n        cardNumber: card.cardNumber,\n        studentId: '',\n        studentName: '',\n        schoolId: '',\n        verificationId: '',\n        timestamp: new Date(),\n        location: '',\n        readerInfo: {\n          id: 'demo-reader-001',\n          name: 'Cafeteria Reader #1',\n          location: 'Main Entrance',\n          status: 'online'\n        },\n        signalQuality: 'poor',\n        verificationTime: 0\n      });\n    } finally {\n      setIsScanning(false);\n    }\n  };\n\n  const handleCardSelect = (card: DemoRFIDCard) => {\n    setSelectedCard(card);\n    setIsManualMode(false);\n    simulateRFIDScan(card);\n  };\n\n  const handleManualVerification = () => {\n    if (!manualCardNumber) {\n      toast.error('Please enter a card number');\n      return;\n    }\n\n    const card = DEMO_CARDS.find(c => c.cardNumber === manualCardNumber);\n    if (card) {\n      handleCardSelect(card);\n    } else {\n      toast.error('Invalid card number. Try one of the demo cards.');\n    }\n  };\n\n  const getSignalIcon = () => {\n    if (readerStatus === 'offline') return <WifiOff className=\"h-5 w-5 text-red-500\" />;\n    if (readerStatus === 'connecting') return <Wifi className=\"h-5 w-5 text-yellow-500 animate-pulse\" />;\n    return <Wifi className=\"h-5 w-5 text-green-500\" />;\n  };\n\n  const getSignalColor = () => {\n    if (signalStrength > 80) return 'bg-green-500';\n    if (signalStrength > 60) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  return (\n    <div className=\"w-full max-w-6xl mx-auto p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"text-center mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          RFID Verification Live Demo\n        </h2>\n        <p className=\"text-gray-600\">\n          Experience our real-time RFID meal delivery verification system\n        </p>\n      </div>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        {/* RFID Reader Simulation */}\n        <Card className=\"h-fit\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2\">\n                <Activity className=\"h-5 w-5\" />\n                RFID Reader Station\n              </CardTitle>\n              <div className=\"flex items-center gap-2\">\n                {getSignalIcon()}\n                <Badge variant={readerStatus === 'online' ? 'default' : 'secondary'}>\n                  {readerStatus}\n                </Badge>\n              </div>\n            </div>\n            <CardDescription>Cafeteria Main Entrance</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Signal Strength */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Signal Strength</span>\n                <span className=\"font-medium\">{Math.round(signalStrength)}%</span>\n              </div>\n              <Progress value={signalStrength} className=\"h-2\" />\n            </div>\n\n            {/* Scanning Animation */}\n            <div className=\"relative h-48 bg-gradient-to-br from-blue-50 to-green-50 rounded-lg flex items-center justify-center\">\n              {isScanning ? (\n                <motion.div\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ duration: 1, repeat: Infinity }}\n                  className=\"relative\"\n                >\n                  <div className=\"absolute inset-0 bg-blue-400 rounded-full opacity-30 animate-ping\" />\n                  <CreditCard className=\"h-24 w-24 text-blue-600\" />\n                </motion.div>\n              ) : selectedCard ? (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"text-center\"\n                >\n                  <CheckCircle className=\"h-24 w-24 text-green-500 mx-auto mb-2\" />\n                  <p className=\"text-green-600 font-medium\">Card Verified!</p>\n                </motion.div>\n              ) : (\n                <div className=\"text-center text-gray-400\">\n                  <CreditCard className=\"h-24 w-24 mx-auto mb-2\" />\n                  <p>Tap or select a card to scan</p>\n                </div>\n              )}\n            </div>\n\n            {/* Demo Cards */}\n            <div className=\"space-y-2\">\n              <p className=\"text-sm font-medium text-gray-700\">Demo RFID Cards:</p>\n              <div className=\"grid gap-2\">\n                {DEMO_CARDS.map((card) => (\n                  <Button\n                    key={card.cardNumber}\n                    variant={selectedCard?.cardNumber === card.cardNumber ? 'default' : 'outline'}\n                    className=\"justify-start text-left h-auto p-3\"\n                    onClick={() => handleCardSelect(card)}\n                    disabled={isScanning}\n                  >\n                    <img \n                      src={card.photoUrl} \n                      alt={card.studentName}\n                      className=\"w-10 h-10 rounded-full mr-3\"\n                    />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{card.studentName}</div>\n                      <div className=\"text-xs text-gray-500\">\n                        {card.cardNumber} • {card.grade}\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n            </div>\n\n            {/* Manual Entry */}\n            <div className=\"space-y-2 pt-4 border-t\">\n              <p className=\"text-sm font-medium text-gray-700\">Manual Entry:</p>\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Enter card number\"\n                  value={manualCardNumber}\n                  onChange={(e) => setManualCardNumber(e.target.value)}\n                  onKeyPress={(e) => e.key === 'Enter' && handleManualVerification()}\n                />\n                <Button onClick={handleManualVerification} disabled={isScanning}>\n                  Verify\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Verification Results */}\n        <div className=\"space-y-4\">\n          {/* Current Verification */}\n          {verificationResult && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n            >\n              <Card className={verificationResult.success ? 'border-green-500' : 'border-red-500'}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    {verificationResult.success ? (\n                      <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                    ) : (\n                      <XCircle className=\"h-5 w-5 text-red-500\" />\n                    )}\n                    Verification Result\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {verificationResult.success && (\n                    <>\n                      {/* Student Info */}\n                      <div className=\"flex items-center gap-4\">\n                        {verificationResult.photoUrl && (\n                          <img \n                            src={verificationResult.photoUrl}\n                            alt={verificationResult.studentName}\n                            className=\"w-16 h-16 rounded-full\"\n                          />\n                        )}\n                        <div className=\"flex-1\">\n                          <p className=\"font-semibold text-lg\">{verificationResult.studentName}</p>\n                          <p className=\"text-sm text-gray-600\">ID: {verificationResult.studentId}</p>\n                        </div>\n                      </div>\n\n                      {/* Order Info */}\n                      {verificationResult.orderInfo && (\n                        <div className=\"bg-blue-50 p-3 rounded-lg\">\n                          <div className=\"flex items-center gap-2 mb-2\">\n                            <Package className=\"h-4 w-4 text-blue-600\" />\n                            <span className=\"font-medium text-blue-900\">Today's Meal</span>\n                          </div>\n                          <ul className=\"text-sm text-blue-800 space-y-1\">\n                            {verificationResult.orderInfo.items.map((item, i) => (\n                              <li key={i}>• {item}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n\n                      {/* Verification Details */}\n                      <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                        <div className=\"flex items-center gap-2\">\n                          <Clock className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-gray-600\">Time:</span>\n                          <span className=\"font-medium\">\n                            {new Date(verificationResult.timestamp).toLocaleTimeString()}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <Activity className=\"h-4 w-4 text-gray-400\" />\n                          <span className=\"text-gray-600\">Speed:</span>\n                          <span className=\"font-medium\">{verificationResult.verificationTime}ms</span>\n                        </div>\n                      </div>\n\n                      {/* Success Message */}\n                      <Alert className=\"bg-green-50 border-green-200\">\n                        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                        <AlertDescription className=\"text-green-800\">\n                          Meal successfully verified and ready for pickup!\n                        </AlertDescription>\n                      </Alert>\n                    </>\n                  )}\n\n                  {!verificationResult.success && (\n                    <Alert className=\"bg-red-50 border-red-200\">\n                      <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                      <AlertDescription className=\"text-red-800\">\n                        Verification failed. Please try again or contact support.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n\n          {/* Verification History */}\n          {verificationHistory.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Recent Verifications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-2\">\n                  {verificationHistory.map((history, index) => (\n                    <div\n                      key={history.verificationId}\n                      className=\"flex items-center justify-between p-2 bg-gray-50 rounded\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <img \n                          src={history.photoUrl}\n                          alt={history.studentName}\n                          className=\"w-8 h-8 rounded-full\"\n                        />\n                        <div>\n                          <p className=\"font-medium text-sm\">{history.studentName}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {new Date(history.timestamp).toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {history.verificationTime}ms\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* System Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Live System Stats</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <p className=\"text-2xl font-bold text-green-600\">99.9%</p>\n                  <p className=\"text-xs text-gray-600\">Accuracy Rate</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-blue-600\">&lt;1.5s</p>\n                  <p className=\"text-xs text-gray-600\">Avg. Verification</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-purple-600\">5M+</p>\n                  <p className=\"text-xs text-gray-600\">Total Verifications</p>\n                </div>\n                <div>\n                  <p className=\"text-2xl font-bold text-orange-600\">100+</p>\n                  <p className=\"text-xs text-gray-600\">Active Schools</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RFIDLiveDemo;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/error-boundary/ErrorBoundary.tsx",["1949","1950","1951","1952","1953"],[],"'use client';\n\n/**\n * HASIVU Platform - Production Error Boundary\n * Comprehensive error boundary with logging, recovery, and user feedback\n * Implements production-ready error handling with graceful degradation\n */\n\nimport React, { Component, ErrorInfo, ReactNode } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { AlertTriangle, RefreshCw, Home, Bug, ChevronDown, ChevronUp } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface Props {\n  children?: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  showErrorDetails?: boolean;\n  isolate?: boolean;\n  level?: 'page' | 'section' | 'component';\n  retryable?: boolean;\n  errorBoundaryId?: string;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n  eventId: string | null;\n  showDetails: boolean;\n  retryCount: number;\n  isRetrying: boolean;\n}\n\n// Error reporting utility\nclass ErrorReporter {\n  static report(\n    error: Error,\n    errorInfo: ErrorInfo,\n    boundaryId?: string,\n    retryCount: number = 0\n  ): string {\n    const eventId = Date.now().toString(36) + Math.random().toString(36).substr(2);\n    \n    const errorReport = {\n      eventId,\n      timestamp: new Date().toISOString(),\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n      componentStack: errorInfo.componentStack,\n      boundaryId,\n      retryCount,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n      url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n      userId: 'anonymous', // TODO: Get from auth context\n    };\n\n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.group(`🚨 Error Boundary: ${error.name}`);\n      console.error('Error:', error);\n      console.error('Component Stack:', errorInfo.componentStack);\n      console.error('Full Report:', errorReport);\n      console.groupEnd();\n    }\n\n    // TODO: In production, send to error reporting service\n    // await fetch('/api/errors', { \n    //   method: 'POST',\n    //   body: JSON.stringify(errorReport),\n    //   headers: { 'Content-Type': 'application/json' }\n    // });\n\n    return eventId;\n  }\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  private retryTimeoutId: NodeJS.Timeout | null = null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      eventId: null,\n      showDetails: false,\n      retryCount: 0,\n      isRetrying: false,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<State> {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const eventId = ErrorReporter.report(\n      error,\n      errorInfo,\n      this.props.errorBoundaryId,\n      this.state.retryCount\n    );\n\n    this.setState({\n      error,\n      errorInfo,\n      eventId,\n    });\n\n    // Call custom error handler if provided\n    this.props.onError?.(error, errorInfo);\n  }\n\n  handleRetry = () => {\n    if (this.state.retryCount >= 3) return;\n\n    this.setState({ isRetrying: true });\n    \n    this.retryTimeoutId = setTimeout(() => {\n      this.setState(prevState => ({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n        eventId: null,\n        showDetails: false,\n        retryCount: prevState.retryCount + 1,\n        isRetrying: false,\n      }));\n    }, 1000);\n  };\n\n  handleGoHome = () => {\n    if (typeof window !== 'undefined') {\n      window.location.href = '/';\n    }\n  };\n\n  toggleDetails = () => {\n    this.setState(prevState => ({\n      showDetails: !prevState.showDetails,\n    }));\n  };\n\n  componentWillUnmount() {\n    if (this.retryTimeoutId) {\n      clearTimeout(this.retryTimeoutId);\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // Custom fallback UI\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      const { error, eventId, showDetails, retryCount, isRetrying } = this.state;\n      const { level = 'component', retryable = true, showErrorDetails = true } = this.props;\n      \n      const canRetry = retryable && retryCount < 3;\n      const isPageLevel = level === 'page';\n\n      return (\n        <div\n          className={cn(\n            'flex items-center justify-center p-4',\n            isPageLevel && 'min-h-screen bg-gray-50',\n            this.props.isolate && 'border border-red-200 rounded-lg bg-red-50'\n          )}\n          role=\"alert\"\n          aria-live=\"assertive\"\n        >\n          <Card className={cn(\n            'w-full max-w-lg mx-auto',\n            isPageLevel ? 'border-red-200 bg-white shadow-lg' : 'border-red-200 bg-red-50'\n          )}>\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n                <AlertTriangle className=\"w-8 h-8 text-red-600\" />\n              </div>\n              <CardTitle className=\"text-xl text-red-900\">\n                {isPageLevel ? 'Something went wrong' : 'Component Error'}\n              </CardTitle>\n              <CardDescription className=\"text-red-700\">\n                {isPageLevel\n                  ? 'We encountered an unexpected error. Our team has been notified.'\n                  : 'This section encountered an error and cannot be displayed.'}\n                {eventId && (\n                  <span className=\"block mt-2 text-xs font-mono text-red-600\">\n                    Error ID: {eventId}\n                  </span>\n                )}\n              </CardDescription>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              {/* Action buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n                {canRetry && (\n                  <Button\n                    onClick={this.handleRetry}\n                    disabled={isRetrying}\n                    className=\"flex items-center justify-center space-x-2\"\n                    variant={isPageLevel ? 'default' : 'outline'}\n                  >\n                    <RefreshCw className={cn('w-4 h-4', isRetrying && 'animate-spin')} />\n                    <span>{isRetrying ? 'Retrying...' : 'Try Again'}</span>\n                  </Button>\n                )}\n                \n                {isPageLevel && (\n                  <Button \n                    onClick={this.handleGoHome} \n                    variant=\"outline\"\n                    className=\"flex items-center justify-center space-x-2\"\n                  >\n                    <Home className=\"w-4 h-4\" />\n                    <span>Go Home</span>\n                  </Button>\n                )}\n              </div>\n\n              {/* Retry count indicator */}\n              {retryCount > 0 && (\n                <div className=\"text-center\">\n                  <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n                    Attempt {retryCount} of 3\n                  </span>\n                </div>\n              )}\n\n              {/* Error details (development/debug mode) */}\n              {showErrorDetails && error && process.env.NODE_ENV === 'development' && (\n                <div className=\"border-t pt-4\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={this.toggleDetails}\n                    className=\"w-full flex items-center justify-center space-x-2 text-red-700 hover:text-red-800\"\n                  >\n                    <Bug className=\"w-4 h-4\" />\n                    <span>Error Details</span>\n                    {showDetails ? <ChevronUp className=\"w-4 h-4\" /> : <ChevronDown className=\"w-4 h-4\" />}\n                  </Button>\n\n                  {showDetails && (\n                    <div className=\"mt-3 p-3 bg-red-100 rounded-md\">\n                      <div className=\"text-sm space-y-2\">\n                        <div>\n                          <strong className=\"text-red-900\">Error:</strong>\n                          <pre className=\"mt-1 text-red-700 text-xs whitespace-pre-wrap font-mono\">\n                            {error.message}\n                          </pre>\n                        </div>\n                        {error.stack && (\n                          <div>\n                            <strong className=\"text-red-900\">Stack Trace:</strong>\n                            <pre className=\"mt-1 text-red-700 text-xs whitespace-pre-wrap font-mono max-h-32 overflow-auto\">\n                              {error.stack}\n                            </pre>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Production help text */}\n              {process.env.NODE_ENV === 'production' && (\n                <div className=\"text-center text-sm text-gray-600\">\n                  If this problem persists, please contact support with the error ID above.\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Higher-order component for easy wrapping\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  errorBoundaryProps?: Omit<Props, 'children'>\n) {\n  const WrappedComponent = (props: P) => (\n    <ErrorBoundary {...errorBoundaryProps}>\n      <Component {...props} />\n    </ErrorBoundary>\n  );\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  return WrappedComponent;\n}\n\n// Specialized error boundaries for different use cases\nexport const PageErrorBoundary = (props: Omit<Props, 'level'>) => (\n  <ErrorBoundary level=\"page\" {...props} />\n);\n\nexport const SectionErrorBoundary = (props: Omit<Props, 'level' | 'isolate'>) => (\n  <ErrorBoundary level=\"section\" isolate {...props} />\n);\n\nexport const ComponentErrorBoundary = (props: Omit<Props, 'level' | 'retryable'>) => (\n  <ErrorBoundary level=\"component\" retryable={false} {...props} />\n);\n\nexport default ErrorBoundary;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/CTASection.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/FeatureCard.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/HeroSection.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/StatsSection.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/home/TestimonialsSection.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/InventoryManagement.tsx",["1954","1955","1956","1957","1958","1959","1960","1961","1962","1963","1964","1965","1966","1967","1968","1969","1970","1971","1972","1973","1974","1975","1976","1977","1978","1979","1980","1981","1982","1983","1984","1985","1986"],[],"\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Package,\n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  ShoppingCart,\n  Truck,\n  Calendar,\n  DollarSign,\n  BarChart3,\n  Search,\n  Filter,\n  Plus,\n  Edit,\n  Trash2,\n  RefreshCw,\n  Download,\n  Upload,\n  Eye,\n  Clock,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  Zap,\n  Users,\n  Target,\n  Activity,\n  Loader2\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\n\n// API hooks\nimport {\n  useInventoryItems,\n  usePurchaseOrders,\n  useInventorySuppliers,\n  useInventoryMetrics,\n  useInventoryMutations\n} from '@/hooks/useApiIntegration';\n\n// TypeScript interfaces for Inventory Management\ninterface InventoryItem {\n  id: string;\n  name: string;\n  category: string;\n  subcategory: string;\n  sku: string;\n  currentStock: number;\n  minStock: number;\n  maxStock: number;\n  unit: string;\n  costPerUnit: number;\n  totalValue: number;\n  supplier: Supplier;\n  lastUpdated: string;\n  expiryDate?: string;\n  location: string;\n  status: 'in_stock' | 'low_stock' | 'out_of_stock' | 'expired' | 'ordered';\n  usageRate: number; // items per day\n  daysUntilEmpty: number;\n  reorderPoint: number;\n  lastOrderDate?: string;\n  image?: string;\n}\n\ninterface Supplier {\n  id: string;\n  name: string;\n  contact: string;\n  email: string;\n  rating: number;\n  reliability: number;\n  averageDeliveryTime: number; // in days\n  totalOrders: number;\n  avatar?: string;\n}\n\ninterface PurchaseOrder {\n  id: string;\n  orderNumber: string;\n  supplier: Supplier;\n  items: PurchaseOrderItem[];\n  status: 'draft' | 'sent' | 'confirmed' | 'delivered' | 'cancelled';\n  orderDate: string;\n  expectedDelivery: string;\n  actualDelivery?: string;\n  totalAmount: number;\n  notes?: string;\n  createdBy: string;\n}\n\ninterface PurchaseOrderItem {\n  itemId: string;\n  itemName: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n}\n\ninterface InventoryMetrics {\n  totalItems: number;\n  totalValue: number;\n  lowStockItems: number;\n  expiringSoonItems: number;\n  outOfStockItems: number;\n  averageStockLevel: number;\n  monthlyConsumption: number;\n  costSavings: number;\n}\n\n\n// Utility functions\nconst getStockStatusColor = (status: InventoryItem['status']) => {\n  switch (status) {\n    case 'in_stock': return 'bg-green-100 text-green-800 border-green-200';\n    case 'low_stock': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'out_of_stock': return 'bg-red-100 text-red-800 border-red-200';\n    case 'expired': return 'bg-red-100 text-red-800 border-red-200';\n    case 'ordered': return 'bg-blue-100 text-blue-800 border-blue-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getOrderStatusColor = (status: PurchaseOrder['status']) => {\n  switch (status) {\n    case 'draft': return 'bg-gray-100 text-gray-800 border-gray-200';\n    case 'sent': return 'bg-blue-100 text-blue-800 border-blue-200';\n    case 'confirmed': return 'bg-green-100 text-green-800 border-green-200';\n    case 'delivered': return 'bg-purple-100 text-purple-800 border-purple-200';\n    case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getDaysUntilExpiry = (expiryDate: string) => {\n  const now = new Date();\n  const expiry = new Date(expiryDate);\n  const diffTime = expiry.getTime() - now.getTime();\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n};\n\n// Inventory Item Card Component\nconst InventoryItemCard = ({ item, onReorder }: { item: InventoryItem; onReorder: (item: InventoryItem) => void }) => {\n  const stockPercentage = (item.currentStock / item.maxStock) * 100;\n  const isExpiringSoon = item.expiryDate && getDaysUntilExpiry(item.expiryDate) <= 3;\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            {item.image && (\n              <img \n                src={item.image} \n                alt={item.name}\n                className=\"w-12 h-12 rounded-lg object-cover\"\n              />\n            )}\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">{item.name}</h3>\n              <p className=\"text-sm text-gray-600\">{item.category} • {item.subcategory}</p>\n              <p className=\"text-xs text-gray-500\">{item.sku}</p>\n            </div>\n          </div>\n          <Badge className={`${getStockStatusColor(item.status)} border`}>\n            {item.status.replace('_', ' ')}\n          </Badge>\n        </div>\n\n        {/* Stock Level */}\n        <div className=\"mb-4\">\n          <div className=\"flex items-center justify-between text-sm mb-2\">\n            <span className=\"text-gray-600\">Stock Level</span>\n            <span className={`font-semibold ${\n              item.status === 'low_stock' ? 'text-orange-600' : \n              item.status === 'out_of_stock' ? 'text-red-600' : 'text-gray-900'\n            }`}>\n              {item.currentStock} {item.unit}\n            </span>\n          </div>\n          <Progress value={stockPercentage} className=\"h-3\" />\n          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n            <span>Min: {item.minStock}</span>\n            <span>Max: {item.maxStock}</span>\n          </div>\n        </div>\n\n        {/* Critical Alerts */}\n        <div className=\"space-y-2 mb-4\">\n          {item.status === 'low_stock' && (\n            <div className=\"flex items-center p-2 bg-yellow-50 border border-yellow-200 rounded\">\n              <AlertTriangle className=\"w-4 h-4 text-yellow-600 mr-2\" />\n              <span className=\"text-xs text-yellow-800\">Low stock - reorder needed</span>\n            </div>\n          )}\n          \n          {item.status === 'out_of_stock' && (\n            <div className=\"flex items-center p-2 bg-red-50 border border-red-200 rounded\">\n              <XCircle className=\"w-4 h-4 text-red-600 mr-2\" />\n              <span className=\"text-xs text-red-800\">Out of stock</span>\n            </div>\n          )}\n          \n          {isExpiringSoon && (\n            <div className=\"flex items-center p-2 bg-orange-50 border border-orange-200 rounded\">\n              <Clock className=\"w-4 h-4 text-orange-600 mr-2\" />\n              <span className=\"text-xs text-orange-800\">\n                Expires in {getDaysUntilExpiry(item.expiryDate!)} days\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Item Details */}\n        <div className=\"grid grid-cols-2 gap-3 text-sm mb-4\">\n          <div>\n            <p className=\"text-gray-600\">Unit Price</p>\n            <p className=\"font-semibold\">Rs.{item.costPerUnit}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Total Value</p>\n            <p className=\"font-semibold\">Rs.{item.totalValue}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Usage Rate</p>\n            <p className=\"font-semibold\">{item.usageRate}/{item.unit}/day</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Days Left</p>\n            <p className={`font-semibold ${\n              item.daysUntilEmpty <= 3 ? 'text-red-600' : 'text-gray-900'\n            }`}>\n              {item.daysUntilEmpty} days\n            </p>\n          </div>\n        </div>\n\n        {/* Supplier Info */}\n        <div className=\"flex items-center justify-between text-xs text-gray-500 mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <Avatar className=\"w-5 h-5\">\n              <AvatarImage src={item.supplier.avatar} alt={item.supplier.name} />\n              <AvatarFallback className=\"text-xs\">\n                {item.supplier.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <span>{item.supplier.name}</span>\n          </div>\n          <span>{item.location}</span>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n          {(item.status === 'low_stock' || item.status === 'out_of_stock') && (\n            <Button size=\"sm\" className=\"flex-1\" onClick={() => onReorder(item)} data-testid={`reorder-button-${item.id}`}>\n              <ShoppingCart className=\"w-3 h-3 mr-1\" />\n              Reorder\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Purchase Order Card Component\nconst PurchaseOrderCard = ({ order, onMarkDelivered }: { order: PurchaseOrder; onMarkDelivered: (order: PurchaseOrder) => void }) => {\n  const expectedDelivery = new Date(order.expectedDelivery);\n  const daysPending = Math.ceil((expectedDelivery.getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24));\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">{order.orderNumber}</h3>\n            <div className=\"flex items-center space-x-2 mt-1\">\n              <Avatar className=\"w-6 h-6\">\n                <AvatarImage src={order.supplier.avatar} alt={order.supplier.name} />\n                <AvatarFallback className=\"text-xs\">\n                  {order.supplier.name.split(' ').map(n => n[0]).join('')}\n                </AvatarFallback>\n              </Avatar>\n              <p className=\"text-sm text-gray-600\">{order.supplier.name}</p>\n            </div>\n          </div>\n          <Badge className={`${getOrderStatusColor(order.status)} border`}>\n            {order.status.replace('_', ' ')}\n          </Badge>\n        </div>\n\n        {/* Order Items */}\n        <div className=\"space-y-2 mb-4\">\n          {order.items.map((item, index) => (\n            <div key={index} className=\"flex items-center justify-between text-sm p-2 bg-gray-50 rounded\">\n              <span>{item.quantity} x {item.itemName}</span>\n              <span className=\"font-semibold\">Rs.{item.totalPrice}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Delivery Information */}\n        <div className=\"grid grid-cols-2 gap-3 text-sm mb-4\">\n          <div>\n            <p className=\"text-gray-600\">Order Date</p>\n            <p className=\"font-semibold\">\n              {new Date(order.orderDate).toLocaleDateString()}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Expected Delivery</p>\n            <p className={`font-semibold ${daysPending < 0 ? 'text-red-600' : 'text-gray-900'}`}>\n              {expectedDelivery.toLocaleDateString()}\n            </p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Total Amount</p>\n            <p className=\"font-semibold text-lg\">Rs.{order.totalAmount.toLocaleString()}</p>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Created By</p>\n            <p className=\"font-semibold\">{order.createdBy}</p>\n          </div>\n        </div>\n\n        {/* Notes */}\n        {order.notes && (\n          <div className=\"mb-4 p-2 bg-blue-50 border border-blue-200 rounded\">\n            <p className=\"text-xs text-blue-800\">\n              <strong>Note:</strong> {order.notes}\n            </p>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n            <Eye className=\"w-3 h-3 mr-1\" />\n            View Details\n          </Button>\n          {order.status === 'sent' && (\n            <Button size=\"sm\" variant=\"outline\" onClick={() => onMarkDelivered(order)} data-testid={`mark-delivered-button-${order.id}`}>\n              <CheckCircle className=\"w-3 h-3 mr-1\" />\n              Mark Delivered\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Supplier Card Component\nconst SupplierCard = ({ supplier }: { supplier: Supplier }) => {\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <Avatar className=\"w-12 h-12\">\n            <AvatarImage src={supplier.avatar} alt={supplier.name} />\n            <AvatarFallback>\n              {supplier.name.split(' ').map(n => n[0]).join('')}\n            </AvatarFallback>\n          </Avatar>\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">{supplier.name}</h3>\n            <p className=\"text-sm text-gray-600\">{supplier.contact}</p>\n            <p className=\"text-xs text-gray-500\">{supplier.email}</p>\n          </div>\n        </div>\n\n        {/* Supplier Metrics */}\n        <div className=\"space-y-3 mb-4\">\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span className=\"text-gray-600\">Rating</span>\n              <div className=\"flex items-center space-x-1\">\n                <span className=\"font-semibold\">{supplier.rating}</span>\n                <div className=\"flex\">\n                  {[...Array(5)].map((_, i) => (\n                    <div \n                      key={i}\n                      className={`w-3 h-3 rounded-full mr-1 ${\n                        i < Math.floor(supplier.rating) ? 'bg-yellow-400' : 'bg-gray-200'\n                      }`}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span className=\"text-gray-600\">Reliability</span>\n              <span className=\"font-semibold\">{supplier.reliability}%</span>\n            </div>\n            <Progress value={supplier.reliability} className=\"h-2\" />\n          </div>\n        </div>\n\n        {/* Supplier Stats */}\n        <div className=\"grid grid-cols-2 gap-3 text-center mb-4\">\n          <div className=\"p-2 bg-gray-50 rounded\">\n            <div className=\"text-lg font-bold text-gray-900\">{supplier.averageDeliveryTime}</div>\n            <div className=\"text-xs text-gray-600\">Avg Delivery (days)</div>\n          </div>\n          <div className=\"p-2 bg-gray-50 rounded\">\n            <div className=\"text-lg font-bold text-gray-900\">{supplier.totalOrders}</div>\n            <div className=\"text-xs text-gray-600\">Total Orders</div>\n          </div>\n        </div>\n\n        <Button size=\"sm\" className=\"w-full\">\n          <ShoppingCart className=\"w-3 h-3 mr-1\" />\n          Create Order\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Inventory Management Component\nexport const InventoryManagement: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState('inventory');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterCategory, setFilterCategory] = useState('all');\n\n  const [reorderOpen, setReorderOpen] = useState(false);\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\n  const [reorderQty, setReorderQty] = useState<number>(0);\n\n  const { toast } = useToast();\n\n  // Live data from backend\n  const { data: inventoryData, loading: itemsLoading, error: itemsError, refetch: refetchItems } = useInventoryItems();\n  const { data: suppliersData, loading: suppliersLoading, error: suppliersError } = useInventorySuppliers();\n  const { data: purchaseOrdersData, loading: poLoading, error: poError, refetch: refetchPO } = usePurchaseOrders();\n  const { data: metricsData, loading: metricsLoading, error: metricsError } = useInventoryMetrics();\n  const { createPurchaseOrder, updatePurchaseOrderStatus, updateStock, loading: invMutLoading } = useInventoryMutations();\n\n  const inventory: any[] = inventoryData || [];\n  const suppliers: any[] = suppliersData || [];\n  const purchaseOrders: any[] = purchaseOrdersData || [];\n  const metrics: InventoryMetrics = metricsData || {\n    totalItems: inventory.length,\n    totalValue: inventory.reduce((sum, it: any) => sum + (it.totalValue || 0), 0),\n    lowStockItems: inventory.filter((it: any) => it.status === 'low_stock').length,\n    expiringSoonItems: 0,\n    outOfStockItems: inventory.filter((it: any) => it.status === 'out_of_stock').length,\n    averageStockLevel: 0,\n    monthlyConsumption: 0,\n    costSavings: 0,\n  } as any;\n\n  // Filter inventory items\n  const filteredInventory = useMemo(() => {\n    return inventory.filter((item: any) => {\n      const matchesSearch = (item.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (item.category || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (item.sku || '').toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = filterCategory === 'all' || (item.category || '').toLowerCase() === filterCategory;\n      return matchesSearch && matchesCategory;\n    });\n  }, [inventory, searchTerm, filterCategory]);\n\n  // Handlers for actions\n  const openReorder = (item: InventoryItem) => {\n    setSelectedItem(item);\n    const suggested = Math.max(item.reorderPoint || item.minStock || 1, 1);\n    setReorderQty(suggested);\n    setReorderOpen(true);\n  };\n\n  const submitReorder = async () => {\n    try {\n      if (!selectedItem || reorderQty <= 0) return;\n      await createPurchaseOrder({\n        supplierId: selectedItem.supplier?.id,\n        items: [\n          { itemId: selectedItem.id, quantity: reorderQty, unitPrice: selectedItem.costPerUnit }\n        ]\n      });\n      toast({ title: 'Reorder Created', description: `${selectedItem.name} x ${reorderQty}` });\n      setReorderOpen(false);\n      setSelectedItem(null);\n      await Promise.all([refetchItems(), refetchPO?.()]);\n      setSelectedTab('orders');\n    } catch (e) {\n      toast({ title: 'Reorder Failed', description: 'Please try again.', variant: 'destructive' });\n    }\n  };\n\n  const markDelivered = async (order: PurchaseOrder) => {\n    try {\n      await updatePurchaseOrderStatus(order.id, 'delivered');\n      // Optionally adjust stock for each order item\n      for (const oi of order.items) {\n        await updateStock(oi.itemId, oi.quantity, 'add');\n      }\n      toast({ title: 'Order Marked Delivered', description: order.orderNumber });\n      await Promise.all([refetchItems(), refetchPO?.()]);\n    } catch (e) {\n      toast({ title: 'Update Failed', description: 'Could not mark as delivered.', variant: 'destructive' });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"inventory-header\">Inventory Management</h1>\n            <p className=\"text-gray-600\">Track stock levels, manage suppliers, and automate reorders</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Import\n            </Button>\n            <Button>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Item\n            </Button>\n          </div>\n        </div>\n\n        {/* Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <Package className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.totalItems ?? '-'}</p>\n                  <p className=\"text-gray-600\">Total Items</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <DollarSign className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">Rs.{(metrics.totalValue ?? 0).toLocaleString()}</p>\n                  <p className=\"text-gray-600\">Total Value</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-red-100 rounded-full\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.lowStockItems ?? 0}</p>\n                  <p className=\"text-gray-600\">Low Stock Items</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-full\">\n                  <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">Rs.{(metrics.costSavings ?? 0).toLocaleString()}</p>\n                  <p className=\"text-gray-600\">Monthly Savings</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n            <TabsTrigger value=\"orders\">Purchase Orders</TabsTrigger>\n            <TabsTrigger value=\"suppliers\">Suppliers</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Inventory Tab */}\n          <TabsContent value=\"inventory\" className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search items by name, category, or SKU...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <select \n                className=\"px-3 py-2 border border-gray-200 rounded-md\"\n                value={filterCategory}\n                onChange={(e) => setFilterCategory(e.target.value)}\n              >\n                <option value=\"all\">All Categories</option>\n                <option value=\"grains\">Grains</option>\n                <option value=\"protein\">Protein</option>\n                <option value=\"vegetables\">Vegetables</option>\n                <option value=\"oils\">Oils</option>\n              </select>\n              <Button variant=\"outline\">\n                <Filter className=\"w-4 h-4 mr-2\" />\n                More Filters\n              </Button>\n            </div>\n\n            {(itemsError || metricsError) && (\n              <div className=\"p-3 rounded bg-red-50 border border-red-200 text-red-800\">Failed to load inventory data.</div>\n            )}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredInventory.map((item: any) => (\n                <div data-testid=\"inventory-item\" key={item.id}>\n                  <InventoryItemCard item={item as any} onReorder={openReorder} />\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Purchase Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            {poError && (\n              <div className=\"p-3 rounded bg-red-50 border border-red-200 text-red-800\">Failed to load purchase orders.</div>\n            )}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {(purchaseOrders || []).map((order: any) => (\n                <PurchaseOrderCard key={order.id} order={order as any} onMarkDelivered={markDelivered} />\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Suppliers Tab */}\n          <TabsContent value=\"suppliers\" className=\"space-y-6\">\n            {suppliersError && (\n              <div className=\"p-3 rounded bg-red-50 border border-red-200 text-red-800\">Failed to load suppliers.</div>\n            )}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {(suppliers || []).map((supplier: any) => (\n                <SupplierCard key={supplier.id} supplier={supplier as any} />\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Monthly Consumption</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                    Rs.{(metrics.monthlyConsumption ?? 0).toLocaleString()}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    +8.5% from last month\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Average Stock Level</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    {(metrics.averageStockLevel ?? 0)}%\n                  </div>\n                  <Progress value={metrics.averageStockLevel ?? 0} className=\"mb-2\" />\n                  <p className=\"text-sm text-gray-600\">\n                    Optimal stock maintenance\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Reorder Dialog */}\n      <Dialog open={reorderOpen} onOpenChange={setReorderOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Create Purchase Order</DialogTitle>\n            <DialogDescription>\n              Reorder stock for {selectedItem?.name}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-2\">\n            <div className=\"space-y-1\">\n              <Label>Item</Label>\n              <div className=\"text-sm font-medium\">{selectedItem?.name}</div>\n              <div className=\"text-xs text-gray-500\">SKU: {selectedItem?.sku}</div>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"reorder-qty\">Quantity</Label>\n              <Input\n                id=\"reorder-qty\"\n                type=\"number\"\n                min={1}\n                value={reorderQty}\n                onChange={(e) => setReorderQty(parseInt(e.target.value || '0', 10))}\n                data-testid=\"reorder-qty-input\"\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setReorderOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={submitReorder} disabled={invMutLoading} data-testid=\"reorder-submit\">\n              {invMutLoading ? (\n                <>\n                  <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                  Creating...\n                </>\n              ) : (\n                'Create Order'\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default InventoryManagement;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/KitchenManagementDashboard.tsx",["1987","1988","1989","1990","1991","1992","1993","1994","1995","1996","1997","1998","1999","2000","2001","2002"],[],"\"use client\";\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Clock,\n  Users,\n  ChefHat,\n  Package,\n  AlertTriangle,\n  CheckCircle,\n  Timer,\n  Utensils,\n  TrendingUp,\n  Bell,\n  Settings,\n  BarChart3,\n  Calendar,\n  MapPin,\n  User,\n  Star,\n  Activity,\n  Zap,\n  ShoppingCart,\n  Eye,\n  MoreHorizontal,\n  Filter,\n  Search,\n  RefreshCw,\n  Plus,\n  Loader2\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { toast } from 'react-hot-toast';\n\n// Import API integration hooks\nimport {\n  useKitchenOrders,\n  useKitchenMetrics,\n  useOrderMutations,\n  useStaffMembers,\n  useInventoryItems,\n  useLowStockAlerts,\n  useWebSocketSubscription,\n  useWebSocketConnection\n} from '@/hooks/useApiIntegration';\n\n// TypeScript interfaces for Kitchen Management\ninterface Order {\n  id: string;\n  orderNumber: string;\n  studentName: string;\n  studentId: string;\n  items: OrderItem[];\n  status: 'pending' | 'preparing' | 'ready' | 'completed' | 'cancelled';\n  priority: 'low' | 'medium' | 'high';\n  orderTime: string;\n  estimatedTime: number; // in minutes\n  actualTime?: number;\n  assignedStaff?: string;\n  location: string;\n  specialInstructions?: string;\n  totalAmount: number;\n}\n\ninterface OrderItem {\n  id: string;\n  name: string;\n  quantity: number;\n  category: string;\n  allergens: string[];\n  preparationTime: number;\n  image?: string;\n}\n\ninterface KitchenStaff {\n  id: string;\n  name: string;\n  role: 'chef' | 'assistant' | 'prep' | 'manager';\n  avatar: string;\n  status: 'active' | 'break' | 'offline';\n  currentTask?: string;\n  efficiency: number;\n  hoursWorked: number;\n  tasksCompleted: number;\n  shift: string;\n}\n\ninterface InventoryItem {\n  id: string;\n  name: string;\n  category: string;\n  currentStock: number;\n  minStock: number;\n  maxStock: number;\n  unit: string;\n  supplier: string;\n  lastUpdated: string;\n  expiryDate?: string;\n  costPerUnit: number;\n}\n\ninterface KitchenMetrics {\n  ordersInProgress: number;\n  averagePreparationTime: number;\n  completionRate: number;\n  staffEfficiency: number;\n  dailyRevenue: number;\n  customerSatisfaction: number;\n  lowStockItems: number;\n  activeStaff: number;\n}\n\n// Mock data for demonstration\nconst mockOrders: Order[] = [\n  {\n    id: 'ORD-001',\n    orderNumber: '#12341',\n    studentName: 'Priya Sharma',\n    studentId: 'STU-001',\n    items: [\n      { id: 'ITM-001', name: 'Masala Dosa', quantity: 1, category: 'Main', allergens: [], preparationTime: 12, image: 'https://images.unsplash.com/photo-1589301760014-d929f3979dbc?w=100&h=100&fit=crop' },\n      { id: 'ITM-002', name: 'Coconut Chutney', quantity: 1, category: 'Side', allergens: ['coconut'], preparationTime: 3 }\n    ],\n    status: 'preparing',\n    priority: 'high',\n    orderTime: '2024-01-15T12:15:00Z',\n    estimatedTime: 15,\n    assignedStaff: 'Rajesh Kumar',\n    location: 'Main Cafeteria',\n    totalAmount: 125\n  },\n  {\n    id: 'ORD-002',\n    orderNumber: '#12342',\n    studentName: 'Arjun Patel',\n    studentId: 'STU-002',\n    items: [\n      { id: 'ITM-003', name: 'Chicken Biryani', quantity: 1, category: 'Main', allergens: [], preparationTime: 25 },\n      { id: 'ITM-004', name: 'Raita', quantity: 1, category: 'Side', allergens: ['dairy'], preparationTime: 5 }\n    ],\n    status: 'pending',\n    priority: 'medium',\n    orderTime: '2024-01-15T12:20:00Z',\n    estimatedTime: 30,\n    location: 'South Wing',\n    totalAmount: 180\n  },\n  {\n    id: 'ORD-003',\n    orderNumber: '#12343',\n    studentName: 'Meera Singh',\n    studentId: 'STU-003',\n    items: [\n      { id: 'ITM-005', name: 'Vegetable Pulao', quantity: 1, category: 'Main', allergens: [], preparationTime: 20 }\n    ],\n    status: 'ready',\n    priority: 'low',\n    orderTime: '2024-01-15T12:10:00Z',\n    estimatedTime: 20,\n    actualTime: 18,\n    assignedStaff: 'Sunita Devi',\n    location: 'Main Cafeteria',\n    totalAmount: 95\n  }\n];\n\nconst mockStaff: KitchenStaff[] = [\n  {\n    id: 'STF-001',\n    name: 'Rajesh Kumar',\n    role: 'chef',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',\n    status: 'active',\n    currentTask: 'Preparing Masala Dosa (#12341)',\n    efficiency: 92,\n    hoursWorked: 6.5,\n    tasksCompleted: 23,\n    shift: 'Morning (8:00 AM - 4:00 PM)'\n  },\n  {\n    id: 'STF-002',\n    name: 'Sunita Devi',\n    role: 'assistant',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',\n    status: 'active',\n    currentTask: 'Cleaning Station 3',\n    efficiency: 88,\n    hoursWorked: 7.2,\n    tasksCompleted: 31,\n    shift: 'Morning (7:00 AM - 3:00 PM)'\n  },\n  {\n    id: 'STF-003',\n    name: 'Mohammed Ali',\n    role: 'prep',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n    status: 'break',\n    efficiency: 85,\n    hoursWorked: 4.0,\n    tasksCompleted: 18,\n    shift: 'Afternoon (12:00 PM - 8:00 PM)'\n  }\n];\n\nconst mockInventory: InventoryItem[] = [\n  { id: 'INV-001', name: 'Rice', category: 'Grains', currentStock: 25, minStock: 20, maxStock: 100, unit: 'kg', supplier: 'ABC Grains Ltd', lastUpdated: '2024-01-15T10:30:00Z', costPerUnit: 45 },\n  { id: 'INV-002', name: 'Chicken', category: 'Protein', currentStock: 8, minStock: 15, maxStock: 50, unit: 'kg', supplier: 'Fresh Meat Co', lastUpdated: '2024-01-15T09:15:00Z', expiryDate: '2024-01-17', costPerUnit: 280 },\n  { id: 'INV-003', name: 'Tomatoes', category: 'Vegetables', currentStock: 12, minStock: 10, maxStock: 30, unit: 'kg', supplier: 'Green Farms', lastUpdated: '2024-01-15T11:00:00Z', expiryDate: '2024-01-18', costPerUnit: 35 }\n];\n\nconst mockMetrics: KitchenMetrics = {\n  ordersInProgress: 15,\n  averagePreparationTime: 18.5,\n  completionRate: 94.2,\n  staffEfficiency: 88.3,\n  dailyRevenue: 15420,\n  customerSatisfaction: 4.6,\n  lowStockItems: 3,\n  activeStaff: 8\n};\n\n// Order Status Colors\nconst getStatusColor = (status: Order['status']) => {\n  switch (status) {\n    case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'preparing': return 'bg-blue-100 text-blue-800 border-blue-200';\n    case 'ready': return 'bg-green-100 text-green-800 border-green-200';\n    case 'completed': return 'bg-gray-100 text-gray-800 border-gray-200';\n    case 'cancelled': return 'bg-red-100 text-red-800 border-red-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getPriorityColor = (priority: Order['priority']) => {\n  switch (priority) {\n    case 'high': return 'bg-red-500';\n    case 'medium': return 'bg-yellow-500';\n    case 'low': return 'bg-green-500';\n    default: return 'bg-gray-500';\n  }\n};\n\n// Order Card Component\nconst OrderCard = ({ order }: { order: Order }) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = new Date().getTime();\n      const orderTime = new Date(order.orderTime).getTime();\n      setTimeElapsed(Math.floor((now - orderTime) / 1000 / 60)); // minutes\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [order.orderTime]);\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"bg-white rounded-lg border border-gray-200 p-4 hover:shadow-lg transition-shadow\"\n    >\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-3 h-3 rounded-full ${getPriorityColor(order.priority)}`} />\n          <div>\n            <h3 className=\"font-semibold text-gray-900\">{order.orderNumber}</h3>\n            <p className=\"text-sm text-gray-600\">{order.studentName}</p>\n          </div>\n        </div>\n        <Badge className={`${getStatusColor(order.status)} border`}>\n          {order.status}\n        </Badge>\n      </div>\n\n      <div className=\"space-y-2 mb-4\">\n        {order.items.map((item) => (\n          <div key={item.id} className=\"flex items-center justify-between text-sm\">\n            <span className=\"flex-1\">{item.quantity}x {item.name}</span>\n            <span className=\"text-gray-500\">{item.preparationTime}min</span>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n        <span className=\"flex items-center\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          {timeElapsed}min ago\n        </span>\n        <span className=\"flex items-center\">\n          <MapPin className=\"w-3 h-3 mr-1\" />\n          {order.location}\n        </span>\n        <span className=\"font-semibold text-gray-900\">\n          Rs.{order.totalAmount}\n        </span>\n      </div>\n\n      {order.assignedStaff && (\n        <div className=\"flex items-center justify-between text-xs text-gray-600 mb-3\">\n          <span className=\"flex items-center\">\n            <User className=\"w-3 h-3 mr-1\" />\n            {order.assignedStaff}\n          </span>\n          <span className=\"flex items-center\">\n            <Timer className=\"w-3 h-3 mr-1\" />\n            Est. {order.estimatedTime}min\n          </span>\n        </div>\n      )}\n\n      <div className=\"flex space-x-2\">\n        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n          <Eye className=\"w-3 h-3 mr-1\" />\n          View\n        </Button>\n        <Button size=\"sm\" variant=\"outline\">\n          <MoreHorizontal className=\"w-3 h-3\" />\n        </Button>\n      </div>\n    </motion.div>\n  );\n};\n\n// Staff Card Component\nconst StaffCard = ({ staff }: { staff: KitchenStaff }) => {\n  const getStatusColor = (status: KitchenStaff['status']) => {\n    switch (status) {\n      case 'active': return 'bg-green-500';\n      case 'break': return 'bg-yellow-500';\n      case 'offline': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getRoleIcon = (role: KitchenStaff['role']) => {\n    switch (role) {\n      case 'chef': return <ChefHat className=\"w-4 h-4\" />;\n      case 'assistant': return <Users className=\"w-4 h-4\" />;\n      case 'prep': return <Utensils className=\"w-4 h-4\" />;\n      case 'manager': return <Settings className=\"w-4 h-4\" />;\n      default: return <User className=\"w-4 h-4\" />;\n    }\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-center space-x-3 mb-4\">\n          <div className=\"relative\">\n            <Avatar className=\"w-12 h-12\">\n              <AvatarImage src={staff.avatar} alt={staff.name} />\n              <AvatarFallback>{staff.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n            </Avatar>\n            <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white ${getStatusColor(staff.status)}`} />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"font-semibold\">{staff.name}</h3>\n              <div className=\"text-gray-500\">\n                {getRoleIcon(staff.role)}\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-600 capitalize\">{staff.role}</p>\n          </div>\n        </div>\n\n        {staff.currentTask && (\n          <div className=\"mb-4 p-2 bg-blue-50 rounded-md\">\n            <p className=\"text-xs text-blue-800 font-medium\">Current Task:</p>\n            <p className=\"text-sm text-blue-700\">{staff.currentTask}</p>\n          </div>\n        )}\n\n        <div className=\"space-y-3\">\n          <div>\n            <div className=\"flex items-center justify-between text-sm mb-1\">\n              <span className=\"text-gray-600\">Efficiency</span>\n              <span className=\"font-semibold\">{staff.efficiency}%</span>\n            </div>\n            <Progress value={staff.efficiency} className=\"h-2\" />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-3 text-center\">\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <div className=\"text-lg font-bold text-gray-900\">{staff.hoursWorked}h</div>\n              <div className=\"text-xs text-gray-600\">Hours Worked</div>\n            </div>\n            <div className=\"p-2 bg-gray-50 rounded\">\n              <div className=\"text-lg font-bold text-gray-900\">{staff.tasksCompleted}</div>\n              <div className=\"text-xs text-gray-600\">Tasks Done</div>\n            </div>\n          </div>\n\n          <div className=\"text-xs text-gray-500\">\n            <p>{staff.shift}</p>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Inventory Alert Component\nconst InventoryAlert = ({ item }: { item: InventoryItem }) => {\n  const isLowStock = item.currentStock <= item.minStock;\n  const stockPercentage = (item.currentStock / item.maxStock) * 100;\n\n  return (\n    <div className={`flex items-center justify-between p-3 rounded-lg border ${\n      isLowStock ? 'bg-red-50 border-red-200' : 'bg-gray-50 border-gray-200'\n    }`}>\n      <div className=\"flex items-center space-x-3\">\n        {isLowStock && <AlertTriangle className=\"w-5 h-5 text-red-500\" />}\n        <div>\n          <h4 className=\"font-medium\">{item.name}</h4>\n          <p className=\"text-sm text-gray-600\">{item.category} • {item.supplier}</p>\n        </div>\n      </div>\n      <div className=\"text-right\">\n        <div className=\"flex items-center space-x-2\">\n          <span className={`font-semibold ${isLowStock ? 'text-red-700' : 'text-gray-900'}`}>\n            {item.currentStock} {item.unit}\n          </span>\n          <Progress value={stockPercentage} className=\"w-16 h-2\" />\n        </div>\n        <p className=\"text-xs text-gray-500\">Min: {item.minStock} {item.unit}</p>\n      </div>\n    </div>\n  );\n};\n\n// Main Kitchen Management Dashboard\nexport const KitchenManagementDashboard: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState('orders');\n  const [orderFilters, setOrderFilters] = useState({});\n  const [staffFilters, setStaffFilters] = useState({});\n  const [inventoryFilters, setInventoryFilters] = useState({});\n\n  // API Integration hooks\n  const { data: orders, loading: ordersLoading, error: ordersError, refetch: refetchOrders } = useKitchenOrders(orderFilters);\n  const { data: metrics, loading: metricsLoading } = useKitchenMetrics('today');\n  const { data: staff, loading: staffLoading } = useStaffMembers(staffFilters);\n  const { data: inventory, loading: inventoryLoading } = useInventoryItems(inventoryFilters);\n  const { data: lowStockAlerts, loading: alertsLoading } = useLowStockAlerts();\n  const { updateOrderStatus, assignOrder, loading: mutationLoading, error: mutationError } = useOrderMutations();\n  const { connected: wsConnected } = useWebSocketConnection();\n\n  // Real-time updates via WebSocket\n  useWebSocketSubscription('order_update', useCallback((orderData: any) => {\n    toast.success(`Order ${orderData.orderNumber} status updated to ${orderData.status}`);\n    refetchOrders();\n  }, [refetchOrders]));\n\n  useWebSocketSubscription('kitchen_alert', useCallback((alertData: any) => {\n    toast.error(alertData.message);\n  }, []));\n\n  // Handle order status updates\n  const handleOrderStatusUpdate = useCallback(async (orderId: string, newStatus: string) => {\n    try {\n      await updateOrderStatus(orderId, newStatus);\n      toast.success('Order status updated successfully');\n      refetchOrders();\n    } catch (error) {\n      toast.error('Failed to update order status');\n    }\n  }, [updateOrderStatus, refetchOrders]);\n\n  // Handle order assignment\n  const handleOrderAssignment = useCallback(async (orderId: string, staffId: string) => {\n    try {\n      await assignOrder(orderId, staffId);\n      toast.success('Order assigned successfully');\n      refetchOrders();\n    } catch (error) {\n      toast.error('Failed to assign order');\n    }\n  }, [assignOrder, refetchOrders]);\n\n  // Use fallback data if API calls fail or data is not available\n  const ordersData = orders || mockOrders;\n  const metricsData = metrics || mockMetrics;\n  const staffData = staff || mockStaff;\n  const inventoryData = inventory || mockInventory;\n\n  // Filter orders by status\n  const pendingOrders = ordersData.filter(order => order.status === 'pending');\n  const preparingOrders = ordersData.filter(order => order.status === 'preparing');\n  const readyOrders = ordersData.filter(order => order.status === 'ready');\n\n  // Check if any critical data is loading\n  const isLoading = ordersLoading || metricsLoading;\n  const hasError = ordersError || mutationError;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Connection Status */}\n        {!wsConnected && (\n          <Alert className=\"border-yellow-200 bg-yellow-50\">\n            <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n            <AlertDescription className=\"text-yellow-800\">\n              Real-time connection lost. Data may not be current.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Error State */}\n        {hasError && (\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription className=\"text-red-800\">\n              {hasError}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"kitchen-header\">Kitchen Management</h1>\n            <p className=\"text-gray-600\">Real-time order tracking and kitchen operations</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => refetchOrders()}\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n              ) : (\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n              )}\n              Refresh\n            </Button>\n            <Button variant=\"outline\">\n              <Filter className=\"w-4 h-4 mr-2\" />\n              Filter\n            </Button>\n            <Button variant=\"outline\">\n              <Search className=\"w-4 h-4 mr-2\" />\n              Search\n            </Button>\n            <Button disabled={mutationLoading}>\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Add Order\n            </Button>\n          </div>\n        </div>\n\n        {/* Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <ShoppingCart className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metricsData.ordersInProgress}</p>\n                  <p className=\"text-gray-600\">Orders in Progress</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <Timer className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metricsData.averagePreparationTime}min</p>\n                  <p className=\"text-gray-600\">Avg Prep Time</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-full\">\n                  <TrendingUp className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metricsData.completionRate}%</p>\n                  <p className=\"text-gray-600\">Completion Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-full\">\n                  <Users className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metricsData.activeStaff}</p>\n                  <p className=\"text-gray-600\">Active Staff</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"orders\">Orders</TabsTrigger>\n            <TabsTrigger value=\"staff\">Staff</TabsTrigger>\n            <TabsTrigger value=\"inventory\">Inventory</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Orders Tab */}\n          <TabsContent value=\"orders\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              {/* Pending Orders */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Clock className=\"w-5 h-5 mr-2 text-yellow-600\" />\n                    Pending ({pendingOrders.length})\n                  </CardTitle>\n                  <CardDescription>Orders waiting to be prepared</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <AnimatePresence>\n                    {pendingOrders.map((order) => (\n                      <OrderCard key={order.id} order={order} />\n                    ))}\n                  </AnimatePresence>\n                </CardContent>\n              </Card>\n\n              {/* Preparing Orders */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <ChefHat className=\"w-5 h-5 mr-2 text-blue-600\" />\n                    Preparing ({preparingOrders.length})\n                  </CardTitle>\n                  <CardDescription>Orders currently being prepared</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <AnimatePresence>\n                    {preparingOrders.map((order) => (\n                      <OrderCard key={order.id} order={order} />\n                    ))}\n                  </AnimatePresence>\n                </CardContent>\n              </Card>\n\n              {/* Ready Orders */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <CheckCircle className=\"w-5 h-5 mr-2 text-green-600\" />\n                    Ready ({readyOrders.length})\n                  </CardTitle>\n                  <CardDescription>Orders ready for pickup</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <AnimatePresence>\n                    {readyOrders.map((order) => (\n                      <OrderCard key={order.id} order={order} />\n                    ))}\n                  </AnimatePresence>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Staff Tab */}\n          <TabsContent value=\"staff\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {staffData.map((member) => (\n                <StaffCard key={member.id} staff={member} />\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Inventory Tab */}\n          <TabsContent value=\"inventory\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <AlertTriangle className=\"w-5 h-5 mr-2 text-red-600\" />\n                    Low Stock Alerts\n                  </CardTitle>\n                  <CardDescription>Items that need restocking</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {inventoryData.filter(item => item.currentStock <= item.minStock).map((item) => (\n                    <InventoryAlert key={item.id} item={item} />\n                  ))}\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <Package className=\"w-5 h-5 mr-2 text-green-600\" />\n                    All Inventory Items\n                  </CardTitle>\n                  <CardDescription>Current stock levels</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {inventoryData.map((item) => (\n                    <InventoryAlert key={item.id} item={item} />\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Daily Revenue</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                    Rs.{metricsData.dailyRevenue.toLocaleString()}\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    +12.5% from yesterday\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Customer Satisfaction</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center mb-2\">\n                    <div className=\"text-3xl font-bold text-yellow-600\">\n                      {metricsData.customerSatisfaction}\n                    </div>\n                    <Star className=\"w-6 h-6 text-yellow-500 ml-1 fill-current\" />\n                  </div>\n                  <p className=\"text-sm text-gray-600\">\n                    Based on {245} reviews today\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default KitchenManagementDashboard;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/kitchen/OrderWorkflowBoard.tsx",["2003","2004","2005","2006","2007","2008","2009","2010","2011","2012","2013","2014"],[],"\"use client\";\n\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Clock,\n  ChefHat,\n  CheckCircle,\n  AlertTriangle,\n  Timer,\n  User,\n  MapPin,\n  Eye,\n  MoreHorizontal,\n  Plus,\n  RefreshCw,\n  Bell,\n  ArrowRight,\n  Utensils,\n  Star,\n  Flag,\n  Loader2\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Progress } from '@/components/ui/progress';\n\n// Hooks for backend integration\nimport { \n  useKitchenOrders, \n  useOrderMutations,\n  useWebSocketSubscription,\n  useWebSocketConnection\n} from '@/hooks/useApiIntegration';\n\n// Enhanced Order interface for workflow\ninterface WorkflowOrder {\n  id: string;\n  orderNumber: string;\n  studentName: string;\n  studentId: string;\n  studentAvatar?: string;\n  items: OrderItem[];\n  status: 'pending' | 'preparing' | 'ready' | 'completed';\n  priority: 'low' | 'medium' | 'high';\n  orderTime: string;\n  estimatedTime: number;\n  actualTime?: number;\n  assignedStaff?: StaffMember;\n  location: string;\n  specialInstructions?: string;\n  totalAmount: number;\n  progress: number; // 0-100\n  allergens: string[];\n  customerRating?: number;\n  notes: string[];\n}\n\ninterface OrderItem {\n  id: string;\n  name: string;\n  quantity: number;\n  category: string;\n  preparationTime: number;\n  isCompleted: boolean;\n  image?: string;\n}\n\ninterface StaffMember {\n  id: string;\n  name: string;\n  role: string;\n  avatar: string;\n  efficiency: number;\n}\n\n// Note: previous mockWorkflowOrders removed. Data will be sourced from backend via hooks.\n\n// Workflow columns configuration\nconst workflowColumns = [\n  {\n    id: 'pending',\n    title: 'Pending Orders',\n    icon: Clock,\n    color: 'yellow',\n    description: 'Orders waiting to be prepared'\n  },\n  {\n    id: 'preparing',\n    title: 'In Progress',\n    icon: ChefHat,\n    color: 'blue',\n    description: 'Orders currently being prepared'\n  },\n  {\n    id: 'ready',\n    title: 'Ready for Pickup',\n    icon: CheckCircle,\n    color: 'green',\n    description: 'Orders ready for collection'\n  },\n  {\n    id: 'completed',\n    title: 'Completed',\n    icon: Star,\n    color: 'gray',\n    description: 'Successfully delivered orders'\n  }\n];\n\n// Utility functions\nconst getStatusColor = (status: WorkflowOrder['status']) => {\n  switch (status) {\n    case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'preparing': return 'bg-blue-100 text-blue-800 border-blue-200';\n    case 'ready': return 'bg-green-100 text-green-800 border-green-200';\n    case 'completed': return 'bg-gray-100 text-gray-800 border-gray-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getPriorityColor = (priority: WorkflowOrder['priority']) => {\n  switch (priority) {\n    case 'high': return 'bg-red-500';\n    case 'medium': return 'bg-yellow-500';\n    case 'low': return 'bg-green-500';\n    default: return 'bg-gray-500';\n  }\n};\n\nconst getTimeElapsed = (orderTime: string) => {\n  const now = new Date().getTime();\n  const orderDate = new Date(orderTime).getTime();\n  return Math.floor((now - orderDate) / 1000 / 60); // minutes\n};\n\n// Enhanced Order Card Component for Workflow\nconst WorkflowOrderCard = ({ \n  order, \n  onStatusChange \n}: { \n  order: WorkflowOrder;\n  onStatusChange: (orderId: string, newStatus: WorkflowOrder['status']) => void;\n}) => {\n  const [timeElapsed, setTimeElapsed] = useState(0);\n  const [isDragging, setIsDragging] = useState(false);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTimeElapsed(getTimeElapsed(order.orderTime));\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [order.orderTime]);\n\n  const handleDragStart = (e: React.DragEvent) => {\n    setIsDragging(true);\n    e.dataTransfer.setData('text/plain', order.id);\n  };\n\n  const handleDragEnd = () => {\n    setIsDragging(false);\n  };\n\n  const completedItems = order.items.filter(item => item.isCompleted).length;\n  const totalItems = order.items.length;\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      whileHover={{ scale: 1.02 }}\n      whileTap={{ scale: 0.98 }}\n      className={`bg-white rounded-lg border-2 p-4 cursor-move transition-all duration-200 ${\n        isDragging \n          ? 'border-blue-400 shadow-lg transform rotate-2' \n          : 'border-gray-200 hover:border-gray-300 hover:shadow-md'\n      }`}\n      draggable\n      onDragStart={handleDragStart}\n      onDragEnd={handleDragEnd}\n      data-testid=\"order-card\"\n    >\n      {/* Header with Priority and Status */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center space-x-3\">\n          <div className={`w-3 h-3 rounded-full ${getPriorityColor(order.priority)}`} />\n          <div>\n            <h3 className=\"font-bold text-gray-900\">{order.orderNumber}</h3>\n            <div className=\"flex items-center space-x-2\">\n              {order.studentAvatar && (\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarImage src={order.studentAvatar} alt={order.studentName} />\n                  <AvatarFallback className=\"text-xs\">\n                    {order.studentName.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n              )}\n              <p className=\"text-sm font-medium text-gray-700\">{order.studentName}</p>\n            </div>\n          </div>\n        </div>\n        <Badge className={`${getStatusColor(order.status)} border`}>\n          {order.status}\n        </Badge>\n      </div>\n\n      {/* Progress Bar */}\n      {order.status === 'preparing' && (\n        <div className=\"mb-4\">\n          <div className=\"flex items-center justify-between text-xs text-gray-600 mb-1\">\n            <span>Progress</span>\n            <span>{order.progress}%</span>\n          </div>\n          <Progress value={order.progress} className=\"h-2\" />\n        </div>\n      )}\n\n      {/* Items List */}\n      <div className=\"space-y-2 mb-4\">\n        {order.items.map((item) => (\n          <div \n            key={item.id} \n            className={`flex items-center justify-between text-sm p-2 rounded ${\n              item.isCompleted ? 'bg-green-50 text-green-800' : 'bg-gray-50'\n            }`}\n          >\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${\n                item.isCompleted ? 'bg-green-500' : 'bg-gray-300'\n              }`} />\n              <span className={item.isCompleted ? 'line-through' : ''}>\n                {item.quantity}x {item.name}\n              </span>\n            </div>\n            <span className=\"text-gray-500\">{item.preparationTime}min</span>\n          </div>\n        ))}\n      </div>\n\n      {/* Allergen Alerts */}\n      {order.allergens.length > 0 && (\n        <div className=\"mb-3 p-2 bg-orange-50 border border-orange-200 rounded\">\n          <div className=\"flex items-center space-x-2\">\n            <AlertTriangle className=\"w-4 h-4 text-orange-600\" />\n            <span className=\"text-xs font-medium text-orange-800\">\n              Allergens: {order.allergens.join(', ')}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Special Instructions */}\n      {order.specialInstructions && (\n        <div className=\"mb-3 p-2 bg-blue-50 border border-blue-200 rounded\">\n          <p className=\"text-xs text-blue-800\">\n            <strong>Note:</strong> {order.specialInstructions}\n          </p>\n        </div>\n      )}\n\n      {/* Order Details */}\n      <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n        <span className=\"flex items-center\">\n          <Clock className=\"w-3 h-3 mr-1\" />\n          {timeElapsed}min ago\n        </span>\n        <span className=\"flex items-center\">\n          <MapPin className=\"w-3 h-3 mr-1\" />\n          {order.location}\n        </span>\n        <span className=\"font-semibold text-gray-900\">\n          Rs.{order.totalAmount}\n        </span>\n      </div>\n\n      {/* Assigned Staff */}\n      {order.assignedStaff && (\n        <div className=\"flex items-center justify-between text-xs text-gray-600 mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <Avatar className=\"w-5 h-5\">\n              <AvatarImage src={order.assignedStaff.avatar} alt={order.assignedStaff.name} />\n              <AvatarFallback className=\"text-xs\">\n                {order.assignedStaff.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <span>{order.assignedStaff.name}</span>\n          </div>\n          <span className=\"flex items-center\">\n            <Timer className=\"w-3 h-3 mr-1\" />\n            Est. {order.estimatedTime}min\n          </span>\n        </div>\n      )}\n\n      {/* Customer Rating (for completed orders) */}\n      {order.customerRating && order.status === 'completed' && (\n        <div className=\"flex items-center space-x-2 mb-3\">\n          <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n          <span className=\"text-sm font-medium\">{order.customerRating}</span>\n          <span className=\"text-xs text-gray-500\">Customer Rating</span>\n        </div>\n      )}\n\n      {/* Notes */}\n      {order.notes.length > 0 && (\n        <div className=\"mb-3\">\n          {order.notes.map((note, index) => (\n            <div key={index} className=\"text-xs text-gray-600 bg-gray-50 p-1 rounded mb-1\">\n              • {note}\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Action Buttons */}\n      <div className=\"flex space-x-2\">\n        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n          <Eye className=\"w-3 h-3 mr-1\" />\n          View Details\n        </Button>\n        {order.status !== 'completed' && (\n          <Button \n            size=\"sm\" \n            variant=\"outline\"\n            onClick={() => {\n              const nextStatus = order.status === 'pending' ? 'preparing' : \n                              order.status === 'preparing' ? 'ready' : 'completed';\n              onStatusChange(order.id, nextStatus);\n            }}\n          >\n            <ArrowRight className=\"w-3 h-3\" />\n          </Button>\n        )}\n      </div>\n    </motion.div>\n  );\n};\n\n// Workflow Column Component\nconst WorkflowColumn = ({ \n  column, \n  orders, \n  onStatusChange \n}: { \n  column: typeof workflowColumns[0];\n  orders: WorkflowOrder[];\n  onStatusChange: (orderId: string, newStatus: WorkflowOrder['status']) => void;\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    const orderId = e.dataTransfer.getData('text/plain');\n    onStatusChange(orderId, column.id as WorkflowOrder['status']);\n  };\n\n  const IconComponent = column.icon;\n\n  return (\n    <div\n      className={`flex-1 min-h-screen transition-colors duration-200 ${\n        isDragOver \n          ? 'bg-blue-50 border-blue-300' \n          : 'bg-gray-50 border-gray-200'\n      }`}\n      onDragOver={handleDragOver}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n    >\n      <Card className=\"h-full\">\n        <CardHeader className=\"pb-4\">\n          <CardTitle className={`flex items-center text-${column.color}-600`}>\n            <IconComponent className=\"w-5 h-5 mr-2\" />\n            {column.title} ({orders.length})\n          </CardTitle>\n          <CardDescription>{column.description}</CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4 max-h-[calc(100vh-200px)] overflow-y-auto\">\n          <AnimatePresence>\n            {orders.map((order) => (\n              <WorkflowOrderCard \n                key={order.id} \n                order={order} \n                onStatusChange={onStatusChange}\n              />\n            ))}\n          </AnimatePresence>\n          \n          {orders.length === 0 && (\n            <div className=\"text-center py-8 text-gray-500\">\n              <IconComponent className=\"w-12 h-12 mx-auto mb-3 opacity-30\" />\n              <p className=\"text-sm\">No orders in this stage</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\n// Main Order Workflow Board Component\nexport const OrderWorkflowBoard: React.FC = () => {\n  const [isAutoRefresh, setIsAutoRefresh] = useState(true);\n\n  // Fetch all orders from backend\n  const { data: apiOrders, loading, error, refetch } = useKitchenOrders();\n  const { updateOrderStatus, loading: mutating } = useOrderMutations();\n  const { connected } = useWebSocketConnection();\n\n  // WebSocket real-time updates\n  useWebSocketSubscription('order_update', useCallback(() => {\n    refetch();\n  }, [refetch]));\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    if (!isAutoRefresh) return;\n    const interval = setInterval(() => refetch(), 30000);\n    return () => clearInterval(interval);\n  }, [isAutoRefresh, refetch]);\n\n  // Map API orders to workflow shape with safe defaults\n  const orders: WorkflowOrder[] = useMemo(() => {\n    const list: any[] = apiOrders || [];\n    return list.map((o: any) => ({\n      id: o.id || o._id || String(o.orderNumber || Math.random()),\n      orderNumber: o.orderNumber || `#${o.id || 'N/A'}`,\n      studentName: o.student?.name || o.studentName || 'Student',\n      studentId: o.student?.id || o.studentId || 'N/A',\n      studentAvatar: o.student?.avatar || undefined,\n      items: (o.items || []).map((it: any, idx: number) => ({\n        id: it.id || `${o.id}-item-${idx}`,\n        name: it.name || 'Item',\n        quantity: it.quantity || 1,\n        category: it.category || 'General',\n        preparationTime: it.preparationTime || 5,\n        isCompleted: Boolean(it.isCompleted)\n      })),\n      status: (o.status || 'pending') as WorkflowOrder['status'],\n      priority: (o.priority || 'medium') as WorkflowOrder['priority'],\n      orderTime: o.orderTime || o.createdAt || new Date().toISOString(),\n      estimatedTime: o.estimatedTime || 15,\n      actualTime: o.actualTime,\n      assignedStaff: o.assignedStaff ? {\n        id: o.assignedStaff.id || o.assignedStaff._id || 'staff',\n        name: o.assignedStaff.name || 'Staff',\n        role: o.assignedStaff.role || 'chef',\n        avatar: o.assignedStaff.avatar || '',\n        efficiency: o.assignedStaff.efficiency || 0\n      } : undefined,\n      location: o.location || 'Kitchen',\n      specialInstructions: o.specialInstructions || '',\n      totalAmount: o.totalAmount || 0,\n      progress: o.progress ?? (o.status === 'completed' ? 100 : o.status === 'preparing' ? 50 : 0),\n      allergens: o.allergens || [],\n      customerRating: o.customerRating,\n      notes: o.notes || []\n    }));\n  }, [apiOrders]);\n\n  const handleStatusChange = async (orderId: string, newStatus: WorkflowOrder['status']) => {\n    try {\n      await updateOrderStatus(orderId, newStatus);\n      refetch();\n    } catch (e) {\n      // Error toast handled in hook; keep UI stable\n    }\n  };\n\n  // Group orders by status\n  const ordersByStatus = useMemo(() => (\n    workflowColumns.reduce((acc, column) => {\n      acc[column.id] = orders.filter(order => order.status === column.id);\n      return acc;\n    }, {} as Record<string, WorkflowOrder[]>)\n  ), [orders]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-100 p-6\">\n      <div className=\"max-w-full mx-auto\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Order Workflow Board</h1>\n            <p className=\"text-gray-600\">Drag and drop orders to update their status</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant={isAutoRefresh ? \"default\" : \"outline\"}\n              onClick={() => setIsAutoRefresh(!isAutoRefresh)}\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${isAutoRefresh ? 'animate-spin' : ''}`} />\n              Auto Refresh\n            </Button>\n            <Button variant=\"outline\" onClick={() => refetch()} disabled={loading}>\n              {loading ? <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" /> : <RefreshCw className=\"w-4 h-4 mr-2\" />}\n              Refresh\n            </Button>\n            <Badge className={`border ${connected ? 'bg-green-100 text-green-700' : 'bg-yellow-100 text-yellow-700'}`} data-testid=\"connection-status\">\n              {connected ? 'Live' : 'Reconnecting...'}\n            </Badge>\n          </div>\n        </div>\n\n        {/* Loading / Error States */}\n        {error && (\n          <div className=\"mb-4 p-3 rounded bg-red-50 border border-red-200 text-red-800\">\n            Failed to load orders. Please try again.\n          </div>\n        )}\n\n        {/* Workflow Board */}\n        <div className=\"flex space-x-6 overflow-x-auto pb-6\">\n          {workflowColumns.map(column => (\n            <WorkflowColumn\n              key={column.id}\n              column={column}\n              orders={ordersByStatus[column.id] || []}\n              onStatusChange={handleStatusChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OrderWorkflowBoard;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HASIVULandingPage.tsx",["2015","2016","2017","2018","2019","2020","2021"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Play, \n  Shield, \n  Zap, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Calendar,\n  Users,\n  TrendingUp,\n  Lock,\n  Award,\n  Smartphone\n} from 'lucide-react';\n\n// MagicUI Components (to be installed: npm install @magicui/react)\nimport { BentoGrid, BentoGridItem } from '@/components/magicui/bento-grid';\nimport { Marquee } from '@/components/magicui/marquee';\nimport { AnimatedList } from '@/components/magicui/animated-list';\nimport { NumberTicker } from '@/components/magicui/number-ticker';\nimport { TextGenerateEffect } from '@/components/magicui/text-generate-effect';\nimport { BackgroundBeams } from '@/components/magicui/background-beams';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\n\n// Custom Hooks\nconst useTypewriter = (text: string, speed: number = 50) => {\n  const [displayText, setDisplayText] = useState('');\n  \n  useEffect(() => {\n    let i = 0;\n    const timer = setInterval(() => {\n      if (i < text.length) {\n        setDisplayText(prev => prev + text.charAt(i));\n        i++;\n      } else {\n        clearInterval(timer);\n      }\n    }, speed);\n    \n    return () => clearInterval(timer);\n  }, [text, speed]);\n  \n  return displayText;\n};\n\n// Data\nconst schoolLogos = [\n  { name: \"Springfield Unified\", logo: \"/logos/springfield.png\", students: \"12,000\" },\n  { name: \"Oak Valley Schools\", logo: \"/logos/oak-valley.png\", students: \"8,500\" },\n  { name: \"Riverside District\", logo: \"/logos/riverside.png\", students: \"15,200\" },\n  { name: \"Lincoln Elementary\", logo: \"/logos/lincoln.png\", students: \"3,400\" },\n  { name: \"Central High Network\", logo: \"/logos/central.png\", students: \"22,000\" },\n];\n\nconst testimonials = [\n  {\n    quote: \"HASIVU eliminated our payment fraud entirely. 180 vulnerabilities fixed means we finally sleep well at night.\",\n    author: \"Dr. Sarah Chen\",\n    title: \"IT Director\",\n    school: \"Springfield Unified School District\",\n    students: \"12,000 students\",\n    avatar: \"/testimonials/sarah-chen.jpg\",\n    rating: 5\n  },\n  {\n    quote: \"Parents can see their child get their meal in real-time. The RFID system has eliminated every delivery dispute.\",\n    author: \"Marcus Rodriguez\",\n    title: \"Food Service Director\", \n    school: \"Lincoln Elementary\",\n    students: \"3,400 students\",\n    avatar: \"/testimonials/marcus-rodriguez.jpg\",\n    rating: 5\n  },\n  {\n    quote: \"67% faster meal pickups and zero manual errors. Our staff actually enjoys their job now.\",\n    author: \"Jennifer Park\",\n    title: \"Cafeteria Manager\",\n    school: \"Oak Valley Schools\", \n    students: \"8,500 students\",\n    avatar: \"/testimonials/jennifer-park.jpg\",\n    rating: 5\n  }\n];\n\nconst features = [\n  {\n    title: \"AI Fraud Detection\",\n    description: \"99.7% accuracy with real-time transaction monitoring and behavioral analysis\",\n    icon: Shield,\n    stats: \"₹2.3M saved annually\",\n    demo: \"/demos/fraud-detection.mp4\"\n  },\n  {\n    title: \"RFID Verification\",\n    description: \"Real-time delivery confirmation with photo proof and parent notifications\",\n    icon: Zap,\n    stats: \"99.9% delivery accuracy\",\n    demo: \"/demos/rfid-demo.mp4\"\n  },\n  {\n    title: \"Predictive Analytics\",\n    description: \"ML-powered insights for menu optimization and demand forecasting\",\n    icon: TrendingUp,\n    stats: \"94% churn prediction\",\n    demo: \"/demos/analytics.mp4\"\n  },\n  {\n    title: \"Mobile-First Platform\",\n    description: \"Native apps for students, parents, and staff with offline capability\",\n    icon: Smartphone,\n    stats: \"4.9★ app rating\",\n    demo: \"/demos/mobile-app.mp4\"\n  }\n];\n\nconst faqData = {\n  \"Implementation & Setup\": [\n    {\n      question: \"How long does implementation take?\",\n      answer: \"Complete implementation in 3 weeks: Week 1 (Setup & Training), Week 2 (Testing & Integration), Week 3 (Go-Live & Optimization). Zero disruption to daily operations with our parallel rollout approach.\"\n    },\n    {\n      question: \"What training is required for staff?\",  \n      answer: \"2-hour training session covers everything. Our intuitive interface requires minimal learning. 95% of staff are fully proficient within 2 days. 24/7 support during transition period.\"\n    }\n  ],\n  \"Security & Privacy\": [\n    {\n      question: \"How secure is student data?\",\n      answer: \"Bank-level security: SOC 2 Type II certified, FERPA compliant, ISO 27001 framework. All data encrypted in transit and at rest. 180 security vulnerabilities proactively addressed.\"\n    }\n  ],\n  \"Costs & ROI\": [\n    {\n      question: \"What's the total cost of ownership?\",\n      answer: \"Transparent pricing: Setup fee + monthly per-student cost. No hidden fees. Average ROI of 47% cost reduction within 6 months. Financing options available.\"\n    }\n  ]\n};\n\nconst HASIVULandingPage: React.FC = () => {\n  const [selectedTestimonial, setSelectedTestimonial] = useState(0);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  \n  const heroHeadline = useTypewriter(\"The World's First AI-Powered RFID School Food Platform\");\n  \n  // Auto-rotate testimonials\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSelectedTestimonial(prev => (prev + 1) % testimonials.length);\n    }, 5000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-50 to-white\">\n      \n      {/* HERO SECTION - Phase 1 */}\n      <section className=\"relative min-h-screen flex items-center justify-center px-4 overflow-hidden\">\n        <BackgroundBeams />\n        <div className=\"max-w-7xl mx-auto text-center z-10\">\n          \n          {/* Main Headline with Typewriter Effect */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-6\"\n          >\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-gray-900 mb-4\">\n              <span className=\"bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                {heroHeadline}\n              </span>\n            </h1>\n            \n            <motion.p \n              className=\"text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 2, duration: 0.8 }}\n            >\n              99.7% fraud detection • Real-time delivery verification • 47% cost reduction guaranteed\n            </motion.p>\n          </motion.div>\n\n          {/* CTA Buttons */}\n          <motion.div\n            className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 2.5, duration: 0.8 }}\n          >\n            <Button \n              size=\"lg\" \n              className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-4 text-lg shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n            >\n              <Calendar className=\"mr-2 h-5 w-5\" />\n              Book Demo - See It Live\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-2 border-gray-300 hover:border-green-600 px-8 py-4 text-lg transition-all\"\n              onClick={() => setIsVideoPlaying(true)}\n            >\n              <Play className=\"mr-2 h-5 w-5\" />\n              Watch 2-Min Demo\n            </Button>\n          </motion.div>\n\n          {/* Trust Indicators */}\n          <motion.div\n            className=\"flex flex-wrap justify-center gap-6 text-sm text-gray-600\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 3, duration: 0.8 }}\n          >\n            <div className=\"flex items-center\">\n              <Users className=\"h-4 w-4 mr-1 text-green-600\" />\n              <NumberTicker value={50000} />+ Students Served\n            </div>\n            <div className=\"flex items-center\">\n              <Shield className=\"h-4 w-4 mr-1 text-blue-600\" />\n              SOC 2 Type II Certified\n            </div>\n            <div className=\"flex items-center\">\n              <Award className=\"h-4 w-4 mr-1 text-purple-600\" />\n              <NumberTicker value={180} /> Security Fixes\n            </div>\n          </motion.div>\n\n          {/* Current Testimonial */}\n          <motion.div\n            className=\"mt-16 max-w-2xl mx-auto\"\n            key={selectedTestimonial}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.5 }}\n          >\n            <Card className=\"bg-white/80 backdrop-blur border-0 shadow-xl\">\n              <CardContent className=\"p-6 text-center\">\n                <div className=\"flex justify-center mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star key={i} className=\"h-5 w-5 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-lg text-gray-700 mb-4 italic\">\n                  \"{testimonials[selectedTestimonial].quote}\"\n                </p>\n                <div className=\"flex items-center justify-center\">\n                  <img \n                    src={testimonials[selectedTestimonial].avatar}\n                    alt={testimonials[selectedTestimonial].author}\n                    className=\"w-12 h-12 rounded-full mr-3\"\n                  />\n                  <div className=\"text-left\">\n                    <div className=\"font-semibold\">{testimonials[selectedTestimonial].author}</div>\n                    <div className=\"text-sm text-gray-600\">\n                      {testimonials[selectedTestimonial].title}, {testimonials[selectedTestimonial].school}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* LOGO MARQUEE - Phase 2 */}\n      <section className=\"py-12 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <p className=\"text-center text-gray-600 mb-8\">Trusted by 100+ school districts nationwide</p>\n          <Marquee className=\"py-4\">\n            {schoolLogos.map((school, index) => (\n              <div key={index} className=\"mx-8 flex items-center space-x-3\">\n                <img src={school.logo} alt={school.name} className=\"h-12 opacity-60 hover:opacity-100 transition-opacity\" />\n                <div className=\"text-sm text-gray-500\">\n                  <div className=\"font-semibold\">{school.name}</div>\n                  <div>{school.students} students</div>\n                </div>\n              </div>\n            ))}\n          </Marquee>\n        </div>\n      </section>\n\n      {/* PROBLEM AGITATION - Phase 3 */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              School Food Service Is Broken. \n              <span className=\"text-red-600 block mt-2\">Everyone Knows It.</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Every day you delay fixing these problems costs your school money, staff sanity, and parent trust.\n            </p>\n          </motion.div>\n\n          <BentoGrid className=\"max-w-4xl mx-auto\">\n            {[\n              { title: \"Payment Fraud Crisis\", problem: \"Manual processing allows fraud\", cost: \"₹50,000 lost monthly\", icon: \"💰\" },\n              { title: \"Zero Delivery Visibility\", problem: \"Parents have no idea if meals delivered\", cost: \"100+ complaints/month\", icon: \"❓\" },\n              { title: \"Staff Overwhelm\", problem: \"Manual verification takes hours daily\", cost: \"67% longer processes\", icon: \"😰\" },\n              { title: \"Security Nightmare\", problem: \"180 vulnerabilities in typical systems\", cost: \"Data breach risk\", icon: \"🚨\" }\n            ].map((item, i) => (\n              <BentoGridItem\n                key={i}\n                title={item.title}\n                description={\n                  <div className=\"space-y-2\">\n                    <p className=\"text-gray-600\">{item.problem}</p>\n                    <p className=\"text-red-600 font-semibold\">{item.cost}</p>\n                  </div>\n                }\n                header={\n                  <div className=\"flex items-center justify-center h-20 text-4xl bg-red-50 rounded-lg\">\n                    {item.icon}\n                  </div>\n                }\n                className=\"bg-white hover:bg-red-50 transition-colors border-2 border-red-100\"\n              />\n            ))}\n          </BentoGrid>\n        </div>\n      </section>\n\n      {/* SOLUTION REVELATION - Phase 4 */}\n      <section className=\"py-20 bg-gradient-to-b from-blue-50 to-green-50 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Meet HASIVU: <span className=\"text-green-600\">The AI That Solves Everything</span>\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              The only platform that combines AI payment intelligence with RFID delivery verification to create a completely transparent, secure, and efficient school food experience.\n            </p>\n          </motion.div>\n\n          <BentoGrid className=\"max-w-6xl mx-auto\">\n            {features.map((feature, i) => (\n              <BentoGridItem\n                key={i}\n                title={feature.title}\n                description={\n                  <div className=\"space-y-3\">\n                    <p className=\"text-gray-600\">{feature.description}</p>\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n                      {feature.stats}\n                    </Badge>\n                  </div>\n                }\n                header={\n                  <div className=\"flex items-center justify-center h-32 bg-gradient-to-br from-green-100 to-blue-100 rounded-lg\">\n                    <feature.icon className=\"h-16 w-16 text-green-600\" />\n                  </div>\n                }\n                className=\"bg-white hover:bg-green-50 transition-all hover:shadow-lg border-2 border-green-100\"\n              />\n            ))}\n          </BentoGrid>\n        </div>\n      </section>\n\n      {/* SOCIAL PROOF GALLERY - Phase 5 */}\n      <section className=\"py-20 px-4\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Real Results From Real Schools\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              See why 100+ school districts trust HASIVU with their food service operations\n            </p>\n          </motion.div>\n\n          {/* Animated Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 mb-16\">\n            {[\n              { stat: \"99.7%\", label: \"Fraud Detection\", subtext: \"Industry leading\" },\n              { stat: \"47%\", label: \"Cost Reduction\", subtext: \"Average savings\" },\n              { stat: \"67%\", label: \"Faster Pickups\", subtext: \"Time efficiency\" },\n              { stat: \"99.9%\", label: \"Delivery Accuracy\", subtext: \"RFID verified\" }\n            ].map((item, i) => (\n              <motion.div\n                key={i}\n                className=\"text-center\"\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: i * 0.1 }}\n                viewport={{ once: true }}\n              >\n                <div className=\"text-4xl md:text-5xl font-bold text-green-600 mb-2\">\n                  {item.stat}\n                </div>\n                <div className=\"text-lg font-semibold text-gray-900\">{item.label}</div>\n                <div className=\"text-sm text-gray-600\">{item.subtext}</div>\n              </motion.div>\n            ))}\n          </div>\n\n          {/* Testimonials Grid */}\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial, i) => (\n              <motion.div\n                key={i}\n                initial={{ opacity: 0, y: 20 }}\n                whileInView={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.8, delay: i * 0.2 }}\n                viewport={{ once: true }}\n              >\n                <Card className=\"h-full hover:shadow-lg transition-shadow\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex mb-3\">\n                      {[...Array(5)].map((_, i) => (\n                        <Star key={i} className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                      ))}\n                    </div>\n                    <p className=\"text-gray-700 mb-4 italic\">\"{testimonial.quote}\"</p>\n                    <div className=\"flex items-center\">\n                      <img \n                        src={testimonial.avatar}\n                        alt={testimonial.author}\n                        className=\"w-10 h-10 rounded-full mr-3\"\n                      />\n                      <div>\n                        <div className=\"font-semibold text-sm\">{testimonial.author}</div>\n                        <div className=\"text-xs text-gray-600\">{testimonial.title}</div>\n                        <div className=\"text-xs text-gray-500\">{testimonial.school}</div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* FAQ SECTION - Phase 6 */}\n      <section className=\"py-20 bg-gray-50 px-4\">\n        <div className=\"max-w-4xl mx-auto\">\n          <motion.div\n            className=\"text-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n              Frequently Asked Questions\n            </h2>\n            <p className=\"text-xl text-gray-600\">\n              Everything you need to know about HASIVU implementation\n            </p>\n          </motion.div>\n\n          {Object.entries(faqData).map(([category, questions], categoryIndex) => (\n            <div key={category} className=\"mb-8\">\n              <h3 className=\"text-2xl font-semibold text-gray-900 mb-4\">{category}</h3>\n              <Accordion type=\"single\" collapsible className=\"space-y-2\">\n                {questions.map((faq, i) => (\n                  <AccordionItem \n                    key={i} \n                    value={`${categoryIndex}-${i}`}\n                    className=\"bg-white rounded-lg border border-gray-200\"\n                  >\n                    <AccordionTrigger className=\"px-6 py-4 text-left hover:no-underline\">\n                      {faq.question}\n                    </AccordionTrigger>\n                    <AccordionContent className=\"px-6 pb-4 text-gray-600\">\n                      {faq.answer}\n                    </AccordionContent>\n                  </AccordionItem>\n                ))}\n              </Accordion>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* FINAL CTA SECTION - Phase 7 */}\n      <section className=\"py-20 bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 text-white px-4\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              Ready to Transform Your School's Food Service?\n            </h2>\n            <p className=\"text-xl mb-8 opacity-90\">\n              Join 100+ school districts already using AI-powered food service technology. \n              Limited implementation slots available for 2024.\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center mb-8\">\n              <Button \n                size=\"lg\" \n                className=\"bg-white text-blue-600 hover:bg-gray-100 px-8 py-4 text-lg shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n              >\n                <Calendar className=\"mr-2 h-5 w-5\" />\n                Book Implementation Demo\n              </Button>\n              \n              <Button \n                variant=\"outline\" \n                size=\"lg\"\n                className=\"border-2 border-white text-white hover:bg-white hover:text-blue-600 px-8 py-4 text-lg transition-all\"\n              >\n                Get Custom Quote\n                <ArrowRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </div>\n\n            <div className=\"text-sm opacity-75\">\n              ✅ 30-day money-back guarantee • ✅ Zero-risk implementation • ✅ 24/7 support included\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Video Modal */}\n      <AnimatePresence>\n        {isVideoPlaying && (\n          <motion.div\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setIsVideoPlaying(false)}\n          >\n            <motion.div\n              className=\"bg-white rounded-lg max-w-4xl w-full aspect-video\"\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <div className=\"w-full h-full bg-gray-900 rounded-lg flex items-center justify-center\">\n                <div className=\"text-white text-center\">\n                  <Play className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                  <p>HASIVU Platform Demo Video</p>\n                  <p className=\"text-sm opacity-75\">(Video player would be integrated here)</p>\n                </div>\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default HASIVULandingPage;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HASIVULandingPageProd.tsx",["2022","2023","2024","2025","2026","2027","2028","2029","2030","2031","2032","2033","2034","2035","2036","2037"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Play, \n  Shield, \n  Zap, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Calendar,\n  Users,\n  TrendingUp,\n  Lock,\n  Award,\n  Smartphone,\n  Loader2\n} from 'lucide-react';\n\n// API Service\nimport { hasiviApi, ApiResponse } from '@/services/api/hasivu-api.service';\n\n// UI Components\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { toast } from 'react-hot-toast';\n\n// Types\ninterface PublicStatistics {\n  totalStudents: number;\n  totalSchools: number;\n  totalOrders: number;\n  fraudDetectionRate: number;\n  deliveryAccuracy: number;\n  averageCostReduction: number;\n  systemUptime: number;\n  rfidVerifications: number;\n}\n\ninterface Testimonial {\n  id: string;\n  quote: string;\n  author: string;\n  title: string;\n  school: string;\n  students: number;\n  avatar: string;\n  rating: number;\n  verified: boolean;\n}\n\ninterface DemoFormData {\n  name: string;\n  email: string;\n  phone: string;\n  schoolName: string;\n  role: string;\n  studentCount: number;\n  message: string;\n}\n\nconst HASIVULandingPageProd: React.FC = () => {\n  // State Management\n  const [statistics, setStatistics] = useState<PublicStatistics | null>(null);\n  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);\n  const [selectedTestimonial, setSelectedTestimonial] = useState(0);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [isDemoModalOpen, setIsDemoModalOpen] = useState(false);\n  const [isSubmittingDemo, setIsSubmittingDemo] = useState(false);\n  const [isLoadingData, setIsLoadingData] = useState(true);\n  \n  const [demoForm, setDemoForm] = useState<DemoFormData>({\n    name: '',\n    email: '',\n    phone: '',\n    schoolName: '',\n    role: 'administrator',\n    studentCount: 100,\n    message: ''\n  });\n\n  // Fetch Real Data on Mount\n  useEffect(() => {\n    fetchPublicData();\n  }, []);\n\n  // Auto-rotate testimonials\n  useEffect(() => {\n    if (testimonials.length > 0) {\n      const interval = setInterval(() => {\n        setSelectedTestimonial(prev => (prev + 1) % testimonials.length);\n      }, 5000);\n      return () => clearInterval(interval);\n    }\n  }, [testimonials]);\n\n  // API Calls\n  const fetchPublicData = async () => {\n    setIsLoadingData(true);\n    try {\n      // Fetch statistics\n      const statsResponse = await hasiviApi.getPublicStatistics();\n      if (statsResponse.success && statsResponse.data) {\n        setStatistics(statsResponse.data);\n      } else {\n        // Use fallback data if API fails\n        setStatistics({\n          totalStudents: 50000,\n          totalSchools: 100,\n          totalOrders: 2300000,\n          fraudDetectionRate: 99.7,\n          deliveryAccuracy: 99.9,\n          averageCostReduction: 47,\n          systemUptime: 99.95,\n          rfidVerifications: 5000000\n        });\n      }\n\n      // Fetch testimonials\n      const testimonialsResponse = await hasiviApi.getTestimonials();\n      if (testimonialsResponse.success && testimonialsResponse.data) {\n        setTestimonials(testimonialsResponse.data);\n      } else {\n        // Use fallback testimonials\n        setTestimonials([\n          {\n            id: '1',\n            quote: \"HASIVU eliminated our payment fraud entirely. 180 vulnerabilities fixed means we finally sleep well at night.\",\n            author: \"Dr. Sarah Chen\",\n            title: \"IT Director\",\n            school: \"Springfield Unified School District\",\n            students: 12000,\n            avatar: \"/testimonials/sarah-chen.jpg\",\n            rating: 5,\n            verified: true\n          },\n          {\n            id: '2',\n            quote: \"Parents can see their child get their meal in real-time. The RFID system has eliminated every delivery dispute.\",\n            author: \"Marcus Rodriguez\",\n            title: \"Food Service Director\", \n            school: \"Lincoln Elementary\",\n            students: 3400,\n            avatar: \"/testimonials/marcus-rodriguez.jpg\",\n            rating: 5,\n            verified: true\n          },\n          {\n            id: '3',\n            quote: \"67% faster meal pickups and zero manual errors. Our staff actually enjoys their job now.\",\n            author: \"Jennifer Park\",\n            title: \"Cafeteria Manager\",\n            school: \"Oak Valley Schools\", \n            students: 8500,\n            avatar: \"/testimonials/jennifer-park.jpg\",\n            rating: 5,\n            verified: true\n          }\n        ]);\n      }\n    } catch (error) {\n      console.error('Error fetching public data:', error);\n      // Use fallback data\n      setStatistics({\n        totalStudents: 50000,\n        totalSchools: 100,\n        totalOrders: 2300000,\n        fraudDetectionRate: 99.7,\n        deliveryAccuracy: 99.9,\n        averageCostReduction: 47,\n        systemUptime: 99.95,\n        rfidVerifications: 5000000\n      });\n    } finally {\n      setIsLoadingData(false);\n    }\n  };\n\n  const handleDemoSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmittingDemo(true);\n\n    try {\n      const response = await hasiviApi.bookDemo(demoForm);\n      \n      if (response.success) {\n        toast.success('Demo booked successfully! We\\'ll contact you within 24 hours.');\n        setIsDemoModalOpen(false);\n        // Reset form\n        setDemoForm({\n          name: '',\n          email: '',\n          phone: '',\n          schoolName: '',\n          role: 'administrator',\n          studentCount: 100,\n          message: ''\n        });\n      } else {\n        toast.error(response.error?.message || 'Failed to book demo. Please try again.');\n      }\n    } catch (error) {\n      console.error('Demo booking error:', error);\n      toast.error('Failed to book demo. Please contact us directly at sales@hasivu.com');\n    } finally {\n      setIsSubmittingDemo(false);\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setDemoForm(prev => ({\n      ...prev,\n      [name]: name === 'studentCount' ? parseInt(value) || 0 : value\n    }));\n  };\n\n  const formatNumber = (num: number): string => {\n    return new Intl.NumberFormat('en-US').format(num);\n  };\n\n  if (isLoadingData) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 className=\"h-12 w-12 animate-spin text-green-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading HASIVU Platform...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-50 to-white\">\n      \n      {/* HERO SECTION */}\n      <section className=\"relative min-h-screen flex items-center justify-center px-4 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-green-50 via-blue-50 to-purple-50 opacity-50\" />\n        \n        <div className=\"max-w-7xl mx-auto text-center z-10\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-6\"\n          >\n            <h1 className=\"text-4xl md:text-6xl lg:text-7xl font-bold text-gray-900 mb-4\">\n              <span className=\"bg-gradient-to-r from-green-600 via-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                The World's First AI-Powered RFID School Food Platform\n              </span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-600 mb-8 max-w-4xl mx-auto\">\n              {statistics && (\n                <>\n                  {statistics.fraudDetectionRate.toFixed(1)}% fraud detection • \n                  Real-time delivery verification • \n                  {statistics.averageCostReduction}% cost reduction guaranteed\n                </>\n              )}\n            </p>\n          </motion.div>\n\n          {/* CTA Buttons */}\n          <motion.div\n            className=\"flex flex-col sm:flex-row gap-4 justify-center mb-12\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.5, duration: 0.8 }}\n          >\n            <Button \n              size=\"lg\" \n              className=\"bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white px-8 py-4 text-lg shadow-lg hover:shadow-xl transition-all transform hover:scale-105\"\n              onClick={() => setIsDemoModalOpen(true)}\n            >\n              <Calendar className=\"mr-2 h-5 w-5\" />\n              Book Demo - See It Live\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\"\n              className=\"border-2 border-gray-300 hover:border-green-600 px-8 py-4 text-lg transition-all\"\n              onClick={() => setIsVideoPlaying(true)}\n            >\n              <Play className=\"mr-2 h-5 w-5\" />\n              Watch 2-Min Demo\n            </Button>\n          </motion.div>\n\n          {/* Live Statistics */}\n          {statistics && (\n            <motion.div\n              className=\"flex flex-wrap justify-center gap-6 text-sm text-gray-600\"\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{ delay: 1, duration: 0.8 }}\n            >\n              <div className=\"flex items-center\">\n                <Users className=\"h-4 w-4 mr-1 text-green-600\" />\n                {formatNumber(statistics.totalStudents)}+ Students Served\n              </div>\n              <div className=\"flex items-center\">\n                <Shield className=\"h-4 w-4 mr-1 text-blue-600\" />\n                {statistics.systemUptime}% Uptime\n              </div>\n              <div className=\"flex items-center\">\n                <Award className=\"h-4 w-4 mr-1 text-purple-600\" />\n                {formatNumber(statistics.rfidVerifications)} RFID Verifications\n              </div>\n            </motion.div>\n          )}\n\n          {/* Current Testimonial */}\n          {testimonials.length > 0 && (\n            <motion.div\n              className=\"mt-16 max-w-2xl mx-auto\"\n              key={selectedTestimonial}\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              transition={{ duration: 0.5 }}\n            >\n              <Card className=\"bg-white/80 backdrop-blur border-0 shadow-xl\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"flex justify-center mb-3\">\n                    {[...Array(testimonials[selectedTestimonial].rating)].map((_, i) => (\n                      <Star key={i} className=\"h-5 w-5 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                  <p className=\"text-lg text-gray-700 mb-4 italic\">\n                    \"{testimonials[selectedTestimonial].quote}\"\n                  </p>\n                  <div className=\"flex items-center justify-center\">\n                    <img \n                      src={testimonials[selectedTestimonial].avatar}\n                      alt={testimonials[selectedTestimonial].author}\n                      className=\"w-12 h-12 rounded-full mr-3\"\n                      onError={(e) => {\n                        (e.target as HTMLImageElement).src = `https://ui-avatars.com/api/?name=${testimonials[selectedTestimonial].author}`;\n                      }}\n                    />\n                    <div className=\"text-left\">\n                      <div className=\"font-semibold\">\n                        {testimonials[selectedTestimonial].author}\n                        {testimonials[selectedTestimonial].verified && (\n                          <CheckCircle className=\"inline h-4 w-4 text-blue-600 ml-1\" />\n                        )}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        {testimonials[selectedTestimonial].title}, {testimonials[selectedTestimonial].school}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </motion.div>\n          )}\n        </div>\n      </section>\n\n      {/* REAL-TIME STATISTICS SECTION */}\n      {statistics && (\n        <section className=\"py-20 px-4 bg-gray-50\">\n          <div className=\"max-w-7xl mx-auto\">\n            <motion.div\n              className=\"text-center mb-16\"\n              initial={{ opacity: 0, y: 20 }}\n              whileInView={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.8 }}\n              viewport={{ once: true }}\n            >\n              <h2 className=\"text-4xl md:text-5xl font-bold text-gray-900 mb-4\">\n                Real Results, Real Impact\n              </h2>\n              <p className=\"text-xl text-gray-600\">\n                Live statistics from our production platform\n              </p>\n            </motion.div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n              {[\n                { \n                  stat: `${statistics.fraudDetectionRate.toFixed(1)}%`, \n                  label: \"Fraud Detection\", \n                  subtext: \"AI-powered security\" \n                },\n                { \n                  stat: `${statistics.averageCostReduction}%`, \n                  label: \"Cost Reduction\", \n                  subtext: \"Guaranteed savings\" \n                },\n                { \n                  stat: `${statistics.deliveryAccuracy.toFixed(1)}%`, \n                  label: \"Delivery Accuracy\", \n                  subtext: \"RFID verified\" \n                },\n                { \n                  stat: formatNumber(statistics.totalSchools), \n                  label: \"Schools Live\", \n                  subtext: \"And growing\" \n                }\n              ].map((item, i) => (\n                <motion.div\n                  key={i}\n                  className=\"text-center\"\n                  initial={{ opacity: 0, y: 20 }}\n                  whileInView={{ opacity: 1, y: 0 }}\n                  transition={{ duration: 0.8, delay: i * 0.1 }}\n                  viewport={{ once: true }}\n                >\n                  <Card className=\"hover:shadow-lg transition-shadow\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"text-4xl md:text-5xl font-bold text-green-600 mb-2\">\n                        {item.stat}\n                      </div>\n                      <div className=\"text-lg font-semibold text-gray-900\">{item.label}</div>\n                      <div className=\"text-sm text-gray-600\">{item.subtext}</div>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              ))}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Demo Booking Modal */}\n      <Dialog open={isDemoModalOpen} onOpenChange={setIsDemoModalOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle>Book Your Personalized Demo</DialogTitle>\n            <DialogDescription>\n              See HASIVU in action with a tailored demo for your school\n            </DialogDescription>\n          </DialogHeader>\n          \n          <form onSubmit={handleDemoSubmit} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Full Name *</label>\n                <Input\n                  name=\"name\"\n                  value={demoForm.name}\n                  onChange={handleInputChange}\n                  required\n                  placeholder=\"John Doe\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium\">Email *</label>\n                <Input\n                  type=\"email\"\n                  name=\"email\"\n                  value={demoForm.email}\n                  onChange={handleInputChange}\n                  required\n                  placeholder=\"john@school.edu\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium\">Phone *</label>\n                <Input\n                  type=\"tel\"\n                  name=\"phone\"\n                  value={demoForm.phone}\n                  onChange={handleInputChange}\n                  required\n                  placeholder=\"+1 (555) 123-4567\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium\">Role *</label>\n                <Select \n                  value={demoForm.role} \n                  onValueChange={(value) => setDemoForm(prev => ({ ...prev, role: value }))}\n                >\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"administrator\">Administrator</SelectItem>\n                    <SelectItem value=\"it_director\">IT Director</SelectItem>\n                    <SelectItem value=\"food_service\">Food Service Director</SelectItem>\n                    <SelectItem value=\"principal\">Principal</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium\">School Name *</label>\n              <Input\n                name=\"schoolName\"\n                value={demoForm.schoolName}\n                onChange={handleInputChange}\n                required\n                placeholder=\"Springfield Elementary School\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium\">Approximate Student Count</label>\n              <Input\n                type=\"number\"\n                name=\"studentCount\"\n                value={demoForm.studentCount}\n                onChange={handleInputChange}\n                placeholder=\"500\"\n                min=\"10\"\n                max=\"50000\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium\">Message (Optional)</label>\n              <Textarea\n                name=\"message\"\n                value={demoForm.message}\n                onChange={handleInputChange}\n                placeholder=\"Tell us about your specific needs or challenges...\"\n                rows={3}\n              />\n            </div>\n\n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                disabled={isSubmittingDemo}\n              >\n                {isSubmittingDemo ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Booking...\n                  </>\n                ) : (\n                  <>\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Book Demo\n                  </>\n                )}\n              </Button>\n              \n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsDemoModalOpen(false)}\n                disabled={isSubmittingDemo}\n              >\n                Cancel\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Video Modal */}\n      <AnimatePresence>\n        {isVideoPlaying && (\n          <motion.div\n            className=\"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={() => setIsVideoPlaying(false)}\n          >\n            <motion.div\n              className=\"bg-white rounded-lg max-w-4xl w-full aspect-video\"\n              initial={{ scale: 0.8, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              exit={{ scale: 0.8, opacity: 0 }}\n              onClick={(e) => e.stopPropagation()}\n            >\n              <iframe\n                className=\"w-full h-full rounded-lg\"\n                src=\"https://www.youtube.com/embed/dQw4w9WgXcQ\" // Replace with actual demo video\n                title=\"HASIVU Platform Demo\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n              />\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default HASIVULandingPageProd;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/ProductionLandingPage.tsx",["2038","2039","2040","2041","2042","2043","2044","2045","2046","2047","2048","2049","2050","2051","2052","2053","2054","2055","2056","2057","2058","2059","2060"],[],"\"use client\";\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Play, \n  Shield, \n  Zap, \n  CheckCircle, \n  Star, \n  ArrowRight, \n  Calendar,\n  Users,\n  TrendingUp,\n  Smartphone,\n  ChefHat,\n  CreditCard,\n  Lock,\n  Award,\n  Globe,\n  Target,\n  Clock,\n  Bell,\n  Heart,\n  Utensils,\n  MapPin,\n  Phone,\n  Mail\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { BentoGrid, BentoGridItem } from '@/components/magicui/bento-grid';\nimport { Marquee } from '@/components/magicui/marquee';\nimport { NumberTicker } from '@/components/magicui/number-ticker';\nimport { BackgroundBeams } from '@/components/magicui/background-beams';\n\n// Enhanced TypeScript interfaces\ninterface School {\n  name: string;\n  logo: string;\n  students: string;\n  location: string;\n  rating: number;\n}\n\ninterface Testimonial {\n  id: string;\n  quote: string;\n  author: string;\n  title: string;\n  school: string;\n  avatar: string;\n  rating: number;\n  children: number;\n  verified: boolean;\n}\n\ninterface Feature {\n  title: string;\n  description: string;\n  icon: React.ComponentType<any>;\n  stats: string;\n  color: string;\n  gradient: string;\n}\n\ninterface Stats {\n  students: number;\n  schools: number;\n  orders: number;\n  accuracy: number;\n  satisfaction: number;\n}\n\n// Live data simulation\nconst useLiveStats = () => {\n  const [stats, setStats] = useState<Stats>({\n    students: 50000,\n    schools: 100,\n    orders: 2300000,\n    accuracy: 99.7,\n    satisfaction: 4.9\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStats(prev => ({\n        ...prev,\n        students: prev.students + Math.floor(Math.random() * 5),\n        orders: prev.orders + Math.floor(Math.random() * 10),\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return stats;\n};\n\n// Bangalore schools data\nconst bangaloreSchools: School[] = [\n  {\n    name: \"Delhi Public School Bangalore East\",\n    logo: \"🏫\",\n    students: \"12,000\",\n    location: \"Whitefield\",\n    rating: 4.8\n  },\n  {\n    name: \"National Public School Koramangala\",\n    logo: \"🎓\",\n    students: \"6,200\",\n    location: \"Koramangala\",\n    rating: 4.9\n  },\n  {\n    name: \"Sarvodaya Vidyalaya\",\n    logo: \"📚\",\n    students: \"8,500\",\n    location: \"Jayanagar\",\n    rating: 4.7\n  },\n  {\n    name: \"Greenwood High International\",\n    logo: \"🌟\",\n    students: \"4,800\",\n    location: \"HSR Layout\",\n    rating: 4.8\n  },\n  {\n    name: \"Ryan International School\",\n    logo: \"🏆\",\n    students: \"9,200\",\n    location: \"Kundalahalli\",\n    rating: 4.6\n  }\n];\n\n// Parent testimonials with real scenarios\nconst parentTestimonials: Testimonial[] = [\n  {\n    id: \"1\",\n    quote: \"HASIVU transformed our family's lunch routine. My daughter Priya gets authentic Karnataka meals at school, and I can track her nutrition intake in real-time. The RFID system means no more lost lunch money!\",\n    author: \"Shalini Krishnamurthy\",\n    title: \"Working Mother\",\n    school: \"DPS Bangalore East\",\n    avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?w=64&h=64&fit=crop&crop=face\",\n    rating: 5,\n    children: 2,\n    verified: true\n  },\n  {\n    id: \"2\", \n    quote: \"As a parent of two kids in different classes, managing their meal preferences was a nightmare. HASIVU's AI recommendations ensure both my children eat balanced meals. The fraud detection saved us ₹15,000 last year!\",\n    author: \"Rajesh Kumar Sharma\",\n    title: \"IT Professional\",\n    school: \"NPS Koramangala\",\n    avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=64&h=64&fit=crop&crop=face\",\n    rating: 5,\n    children: 2,\n    verified: true\n  },\n  {\n    id: \"3\",\n    quote: \"My son has food allergies, and HASIVU's smart filtering ensures he only sees safe meal options. The instant notifications when he gets his meal give me peace of mind during my busy workday.\",\n    author: \"Dr. Meera Reddy\",\n    title: \"Pediatrician\",\n    school: \"Greenwood High\",\n    avatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=64&h=64&fit=crop&crop=face\",\n    rating: 5,\n    children: 1,\n    verified: true\n  }\n];\n\n// Feature set with Bangalore-specific benefits\nconst platformFeatures: Feature[] = [\n  {\n    title: \"AI Fraud Protection\",\n    description: \"99.7% accuracy in detecting payment anomalies with real-time behavioral analysis\",\n    icon: Shield,\n    stats: \"₹2.3M Protected\",\n    color: \"text-hasivu-blue-600\",\n    gradient: \"from-hasivu-blue-100 to-hasivu-blue-200\"\n  },\n  {\n    title: \"RFID Meal Verification\", \n    description: \"Instant confirmation when your child receives their meal with photo proof\",\n    icon: Zap,\n    stats: \"99.9% Accuracy\",\n    color: \"text-hasivu-orange-600\", \n    gradient: \"from-hasivu-orange-100 to-hasivu-orange-200\"\n  },\n  {\n    title: \"Predictive Nutrition AI\",\n    description: \"ML-powered meal recommendations based on your child's growth patterns\",\n    icon: TrendingUp,\n    stats: \"94% Satisfaction\",\n    color: \"text-hasivu-green-600\",\n    gradient: \"from-hasivu-green-100 to-hasivu-green-200\"\n  },\n  {\n    title: \"Bangalore Menu Curation\",\n    description: \"Authentic South Indian, North Indian, and cosmopolitan options for every taste\",\n    icon: ChefHat,\n    stats: \"150+ Daily Options\",\n    color: \"text-purple-600\",\n    gradient: \"from-purple-100 to-purple-200\"\n  }\n];\n\n// Navigation component\nconst Navigation = () => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  return (\n    <header className=\"fixed top-0 w-full z-50 bg-slate-900/80 backdrop-blur-xl border-b border-white/10 shadow-2xl\">\n      <nav className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <Link href=\"/\" className=\"flex items-center space-x-3 group\">\n            <div className=\"relative\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-500 via-cyan-500 to-purple-500 rounded-2xl flex items-center justify-center shadow-lg shadow-emerald-500/25 group-hover:shadow-emerald-500/40 transition-all duration-300 group-hover:scale-105\">\n                <span className=\"text-white font-black text-xl\">H</span>\n              </div>\n              <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-gradient-to-r from-emerald-400 to-cyan-400 rounded-full animate-pulse\"></div>\n            </div>\n            <div>\n              <div className=\"font-black text-2xl bg-gradient-to-r from-emerald-400 via-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                HASIVU\n              </div>\n              <div className=\"text-xs text-gray-300 font-medium -mt-1\">AI-Powered School Meals</div>\n            </div>\n          </Link>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            <Link href=\"#features\" className=\"text-gray-300 hover:text-emerald-400 transition-colors font-medium\">\n              Features\n            </Link>\n            <Link href=\"#schools\" className=\"text-gray-300 hover:text-cyan-400 transition-colors font-medium\">\n              Schools\n            </Link>\n            <Link href=\"#testimonials\" className=\"text-gray-300 hover:text-purple-400 transition-colors font-medium\">\n              Parents\n            </Link>\n            <Link href=\"#contact\" className=\"text-gray-300 hover:text-pink-400 transition-colors font-medium\">\n              Contact\n            </Link>\n          </div>\n\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link href=\"/auth/login\">\n              <Button variant=\"outline\" size=\"sm\" className=\"border-white/20 text-gray-300 hover:bg-white/10 backdrop-blur-sm rounded-xl\">\n                Parent Login\n              </Button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <Button variant=\"outline\" size=\"sm\" className=\"border-emerald-400/30 text-emerald-400 hover:bg-emerald-400/10 backdrop-blur-sm rounded-xl\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Dashboard\n              </Button>\n            </Link>\n            <Link href=\"/demo\">\n              <Button size=\"sm\" className=\"bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 shadow-lg shadow-emerald-500/25 hover:shadow-emerald-500/40 transition-all rounded-xl\">\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Book Demo\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\n// Hero section with live metrics\nconst HeroSection = () => {\n  const liveStats = useLiveStats();\n\n  return (\n    <section className=\"relative pt-32 pb-20 min-h-screen flex items-center overflow-hidden\">\n      {/* Modern gradient background with mesh */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900\"></div>\n      <div className=\"absolute inset-0 bg-gradient-to-tr from-emerald-500/10 via-blue-500/10 to-purple-500/10\"></div>\n      \n      {/* Animated mesh background */}\n      <div className=\"absolute inset-0 opacity-30\">\n        <div className=\"absolute top-0 -left-4 w-72 h-72 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl animate-blob\"></div>\n        <div className=\"absolute top-0 -right-4 w-72 h-72 bg-yellow-300 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-2000\"></div>\n        <div className=\"absolute -bottom-8 left-20 w-72 h-72 bg-pink-300 rounded-full mix-blend-multiply filter blur-xl animate-blob animation-delay-4000\"></div>\n      </div>\n      \n      {/* Floating elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-1/4 left-1/4 w-2 h-2 bg-white/20 rounded-full animate-ping\"></div>\n        <div className=\"absolute top-1/3 right-1/4 w-1 h-1 bg-emerald-400/40 rounded-full animate-pulse\"></div>\n        <div className=\"absolute bottom-1/4 left-1/3 w-3 h-3 bg-blue-400/30 rounded-full animate-bounce\"></div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 relative z-10\">\n        <div className=\"text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            className=\"mb-8\"\n          >\n            <Badge className=\"mb-6 bg-white/10 backdrop-blur-sm text-white border border-white/20 text-sm px-6 py-3 rounded-full\">\n              ✨ Trusted by 50,000+ Bangalore Families\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-black text-white mb-8 leading-tight\">\n              India's Most\n              <span className=\"block bg-gradient-to-r from-emerald-400 via-cyan-400 to-purple-400 bg-clip-text text-transparent\">\n                Intelligent School\n              </span>\n              <span className=\"block text-4xl md:text-5xl lg:text-6xl text-gray-200 font-bold mt-2\">\n                Food Platform\n              </span>\n            </h1>\n            \n            <p className=\"text-xl md:text-2xl text-gray-300 mb-10 max-w-4xl mx-auto leading-relaxed\">\n              AI-powered meal management with RFID verification, real-time parent notifications, \n              and authentic Indian cuisine designed specifically for Bangalore schools.\n            </p>\n          </motion.div>\n\n          {/* Live Statistics */}\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.3, duration: 0.8 }}\n            className=\"grid grid-cols-2 md:grid-cols-5 gap-8 mb-12 max-w-4xl mx-auto\"\n          >\n            {[\n              { value: liveStats.students, suffix: '+', label: 'Students Fed Daily', color: 'text-emerald-400' },\n              { value: liveStats.schools, suffix: '+', label: 'Partner Schools', color: 'text-cyan-400' },\n              { value: liveStats.orders / 1000000, suffix: 'M+', label: 'Meals Delivered', color: 'text-purple-400', decimals: 1 },\n              { value: liveStats.accuracy, suffix: '%', label: 'RFID Accuracy', color: 'text-pink-400' },\n              { value: liveStats.satisfaction, suffix: '★', label: 'Parent Rating', color: 'text-yellow-400' }\n            ].map((stat, index) => (\n              <motion.div\n                key={index}\n                className=\"text-center group cursor-pointer p-4 rounded-2xl bg-white/5 backdrop-blur-sm border border-white/10 hover:bg-white/10 transition-all duration-300\"\n                whileHover={{ scale: 1.05, y: -5 }}\n                transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n              >\n                <div className={`text-3xl md:text-4xl font-black mb-2 ${stat.color} group-hover:scale-110 transition-all duration-300`}>\n                  <NumberTicker value={stat.value} className=\"inline\" />\n                  {stat.suffix}\n                </div>\n                <div className=\"text-gray-300 font-medium text-xs md:text-sm\">{stat.label}</div>\n              </motion.div>\n            ))}\n          </motion.div>\n\n          {/* CTA Buttons */}\n          <motion.div\n            className=\"flex flex-col sm:flex-row gap-6 justify-center items-center mb-16\"\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.6, duration: 0.8 }}\n          >\n            <Link href=\"/dashboard\">\n              <Button \n                size=\"xl\" \n                className=\"bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 text-white px-12 py-4 text-lg shadow-2xl shadow-emerald-500/25 hover:shadow-emerald-500/40 transition-all transform hover:scale-105 group font-bold rounded-2xl backdrop-blur-sm\"\n              >\n                <Users className=\"mr-3 h-6 w-6 group-hover:scale-110 transition-transform\" />\n                Try Parent Dashboard\n                <ArrowRight className=\"ml-3 h-5 w-5 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n            </Link>\n            \n            <Link href=\"/school/demo\">\n              <Button \n                variant=\"outline\" \n                size=\"xl\"\n                className=\"border-2 border-white/20 hover:border-white/40 px-12 py-4 text-lg bg-white/10 backdrop-blur-md text-white hover:bg-white/20 transition-all group font-bold rounded-2xl\"\n              >\n                <Play className=\"mr-3 h-6 w-6 group-hover:scale-110 transition-transform\" />\n                Watch School Demo\n              </Button>\n            </Link>\n          </motion.div>\n\n          {/* Trust Indicators */}\n          <motion.div\n            className=\"flex flex-wrap justify-center gap-6 text-sm\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.9, duration: 0.8 }}\n          >\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20\">\n              <Shield className=\"h-4 w-4 text-emerald-400\" />\n              <span className=\"font-medium text-gray-200\">SOC 2 Type II Certified</span>\n            </div>\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20\">\n              <Lock className=\"h-4 w-4 text-cyan-400\" />\n              <span className=\"font-medium text-gray-200\">FERPA Compliant</span>\n            </div>\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20\">\n              <Award className=\"h-4 w-4 text-purple-400\" />\n              <span className=\"font-medium text-gray-200\">ISO 27001 Security</span>\n            </div>\n            <div className=\"flex items-center space-x-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full border border-white/20\">\n              <CreditCard className=\"h-4 w-4 text-pink-400\" />\n              <span className=\"font-medium text-gray-200\">PCI DSS Level 1</span>\n            </div>\n          </motion.div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\n// Enhanced testimonial section\nconst TestimonialSection = () => {\n  const [selectedTestimonial, setSelectedTestimonial] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSelectedTestimonial(prev => (prev + 1) % parentTestimonials.length);\n    }, 6000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <section id=\"testimonials\" className=\"py-24 bg-gradient-to-b from-slate-900 to-slate-800\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            whileInView={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n            viewport={{ once: true }}\n          >\n            <Badge className=\"mb-6 bg-purple-500/20 text-purple-300 border border-purple-400/30 backdrop-blur-sm px-6 py-3 rounded-full\">\n              💬 Real Parent Stories\n            </Badge>\n            <h2 className=\"text-4xl md:text-5xl font-black text-white mb-6\">\n              Bangalore Parents Love HASIVU\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto\">\n              Join thousands of families who trust HASIVU with their children's nutrition and meal management\n            </p>\n          </motion.div>\n        </div>\n\n        {/* Featured Testimonial */}\n        <motion.div\n          key={selectedTestimonial}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          className=\"max-w-5xl mx-auto mb-16\"\n        >\n          <Card className=\"bg-white/10 backdrop-blur-xl border-2 border-white/20 shadow-2xl shadow-purple-500/10 hover:shadow-purple-500/20 transition-all duration-500\">\n            <CardContent className=\"p-12 text-center\">\n              <div className=\"flex justify-center mb-6\">\n                {[...Array(5)].map((_, i) => (\n                  <Star key={i} className=\"h-8 w-8 text-yellow-400 fill-current\" />\n                ))}\n              </div>\n              <blockquote className=\"text-2xl md:text-3xl text-white font-medium mb-8 italic leading-relaxed\">\n                \"{parentTestimonials[selectedTestimonial].quote}\"\n              </blockquote>\n              <div className=\"flex items-center justify-center\">\n                <img \n                  src={parentTestimonials[selectedTestimonial].avatar}\n                  alt={parentTestimonials[selectedTestimonial].author}\n                  className=\"w-16 h-16 rounded-full border-4 border-white shadow-lg mr-6\"\n                />\n                <div className=\"text-left\">\n                  <div className=\"flex items-center space-x-2\">\n                    <h4 className=\"text-xl font-bold text-white\">\n                      {parentTestimonials[selectedTestimonial].author}\n                    </h4>\n                    {parentTestimonials[selectedTestimonial].verified && (\n                      <Badge className=\"bg-emerald-500/20 text-emerald-300 text-xs border border-emerald-400/30\">\n                        <CheckCircle className=\"w-3 h-3 mr-1\" />\n                        Verified\n                      </Badge>\n                    )}\n                  </div>\n                  <p className=\"text-gray-300\">{parentTestimonials[selectedTestimonial].title}</p>\n                  <p className=\"text-gray-400 text-sm\">{parentTestimonials[selectedTestimonial].school}</p>\n                  <p className=\"text-emerald-400 text-sm font-medium\">\n                    {parentTestimonials[selectedTestimonial].children} child{parentTestimonials[selectedTestimonial].children > 1 ? 'ren' : ''}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        {/* Testimonial indicators */}\n        <div className=\"flex justify-center space-x-2\">\n          {parentTestimonials.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setSelectedTestimonial(index)}\n              className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                index === selectedTestimonial \n                  ? 'bg-emerald-500 scale-125 shadow-lg shadow-emerald-500/50' \n                  : 'bg-white/30 hover:bg-white/50 backdrop-blur-sm'\n              }`}\n              aria-label={`View testimonial ${index + 1}`}\n            />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n};\n\n// Main component\nexport const ProductionLandingPage: React.FC = () => {\n  return (\n    <div className=\"min-h-screen bg-slate-900\">\n      <Navigation />\n      <HeroSection />\n      <TestimonialSection />\n      \n      {/* More sections to be added in next parts */}\n    </div>\n  );\n};\n\nexport default ProductionLandingPage;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/Layout.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/app-layout.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/main-header.tsx",["2061"],[],"\"use client\";\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { Bell, ShoppingCart, Menu, Wifi, WifiOff, AlertTriangle } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Sheet, SheetContent, SheetTrigger } from '@/components/ui/sheet';\nimport { cn, getInitials } from '@/lib/utils';\nimport { User, NotificationItem, CartItem, SchoolStatus } from '@/types/navigation';\nimport { NavigationMenu } from './navigation-menu';\nimport { MobileMenu } from './mobile-menu';\n\ninterface MainHeaderProps {\n  user: User;\n  notifications: NotificationItem[];\n  cartItems?: CartItem[];\n  schoolStatus: SchoolStatus;\n  onMenuClick?: () => void;\n  onLogout?: () => void;\n  className?: string;\n}\n\nexport function MainHeader({\n  user,\n  notifications,\n  cartItems = [],\n  schoolStatus,\n  onMenuClick,\n  onLogout,\n  className,\n}: MainHeaderProps) {\n  const unreadNotifications = notifications.filter(n => !n.read).length;\n  const urgentNotifications = notifications.filter(n => n.urgent && !n.read).length;\n  const cartItemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n  \n  const showCart = ['student', 'parent'].includes(user.role);\n  const showEmergencyBanner = schoolStatus.emergencyMode;\n\n  return (\n    <>\n      {/* Emergency Banner */}\n      {showEmergencyBanner && (\n        <div className=\"bg-error-500 text-white px-4 py-2 text-center font-medium\">\n          <div className=\"flex items-center justify-center gap-2 max-w-7xl mx-auto\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <span className=\"text-sm\">\n              {schoolStatus.emergencyMessage || 'Emergency notification active'}\n            </span>\n          </div>\n        </div>\n      )}\n      \n      {/* Main Header */}\n      <header className={cn(\n        \"sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\",\n        className\n      )}>\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex h-16 items-center justify-between\">\n            {/* Left Section - Logo & Navigation */}\n            <div className=\"flex items-center gap-6\">\n              {/* Mobile Menu Trigger */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden\">\n                    <Menu className=\"h-5 w-5\" />\n                    <span className=\"sr-only\">Toggle menu</span>\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" className=\"w-80 p-0\">\n                  <MobileMenu \n                    user={user} \n                    schoolStatus={schoolStatus}\n                    onItemClick={() => {}}\n                  />\n                </SheetContent>\n              </Sheet>\n\n              {/* Logo */}\n              <Link href=\"/\" className=\"flex items-center gap-2\">\n                <div className=\"h-8 w-8 rounded-md bg-primary-500 flex items-center justify-center\">\n                  <span className=\"text-white font-bold text-lg\">H</span>\n                </div>\n                <div className=\"hidden sm:block\">\n                  <span className=\"font-display font-bold text-xl text-primary-600\">HASIVU</span>\n                  <div className=\"text-xs text-gray-500 -mt-1\">School Platform</div>\n                </div>\n              </Link>\n\n              {/* Desktop Navigation */}\n              <div className=\"hidden md:block\">\n                <NavigationMenu user={user} />\n              </div>\n            </div>\n\n            {/* Right Section - Status, Notifications, Cart, Profile */}\n            <div className=\"flex items-center gap-3\">\n              {/* RFID Status Indicator */}\n              <div className=\"hidden sm:flex items-center gap-2 text-xs text-gray-600\">\n                {schoolStatus.rfidSystemStatus === 'online' ? (\n                  <>\n                    <Wifi className=\"h-4 w-4 text-success-500\" />\n                    <span>RFID Online</span>\n                  </>\n                ) : (\n                  <>\n                    <WifiOff className=\"h-4 w-4 text-error-500\" />\n                    <span>RFID Offline</span>\n                  </>\n                )}\n              </div>\n\n              {/* Meal Service Status */}\n              {showCart && (\n                <div className=\"hidden sm:block\">\n                  <div className={cn(\n                    \"px-2 py-1 rounded-full text-xs font-medium\",\n                    schoolStatus.mealServiceActive\n                      ? \"bg-success-100 text-success-700\"\n                      : \"bg-gray-100 text-gray-600\"\n                  )}>\n                    {schoolStatus.mealServiceActive ? 'Ordering Open' : 'Ordering Closed'}\n                  </div>\n                </div>\n              )}\n\n              {/* Notifications */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                    <Bell className=\"h-5 w-5\" />\n                    {unreadNotifications > 0 && (\n                      <span className={cn(\n                        \"absolute -top-1 -right-1 h-5 w-5 rounded-full text-xs font-medium flex items-center justify-center\",\n                        urgentNotifications > 0\n                          ? \"bg-error-500 text-white animate-pulse\"\n                          : \"bg-primary-500 text-white\"\n                      )}>\n                        {unreadNotifications > 9 ? '9+' : unreadNotifications}\n                      </span>\n                    )}\n                    <span className=\"sr-only\">Notifications</span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-80\">\n                  <DropdownMenuLabel className=\"flex items-center justify-between\">\n                    Notifications\n                    {unreadNotifications > 0 && (\n                      <span className=\"text-xs text-gray-500\">\n                        {unreadNotifications} unread\n                      </span>\n                    )}\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    {notifications.length === 0 ? (\n                      <div className=\"p-4 text-center text-gray-500 text-sm\">\n                        No notifications\n                      </div>\n                    ) : (\n                      notifications.slice(0, 5).map((notification) => (\n                        <DropdownMenuItem key={notification.id} className=\"flex-col items-start p-3\">\n                          <div className=\"flex items-start gap-2 w-full\">\n                            <div className={cn(\n                              \"h-2 w-2 rounded-full mt-2 flex-shrink-0\",\n                              {\n                                'bg-info-500': notification.type === 'info',\n                                'bg-warning-500': notification.type === 'warning',\n                                'bg-error-500': notification.type === 'error',\n                                'bg-success-500': notification.type === 'success',\n                              }\n                            )} />\n                            <div className=\"flex-1\">\n                              <div className=\"font-medium text-sm\">{notification.title}</div>\n                              <div className=\"text-xs text-gray-600 mt-1\">{notification.message}</div>\n                              <div className=\"text-xs text-gray-400 mt-1\">\n                                {notification.timestamp.toLocaleTimeString()}\n                              </div>\n                            </div>\n                          </div>\n                        </DropdownMenuItem>\n                      ))\n                    )}\n                  </div>\n                  {notifications.length > 5 && (\n                    <>\n                      <DropdownMenuSeparator />\n                      <DropdownMenuItem asChild>\n                        <Link href=\"/notifications\" className=\"text-center w-full\">\n                          View all notifications\n                        </Link>\n                      </DropdownMenuItem>\n                    </>\n                  )}\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              {/* Shopping Cart (for students/parents) */}\n              {showCart && (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"relative\">\n                      <ShoppingCart className=\"h-5 w-5\" />\n                      {cartItemCount > 0 && (\n                        <span className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full bg-accent-500 text-white text-xs font-medium flex items-center justify-center\">\n                          {cartItemCount > 9 ? '9+' : cartItemCount}\n                        </span>\n                      )}\n                      <span className=\"sr-only\">Shopping cart</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-80\">\n                    <DropdownMenuLabel>Meal Cart</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <div className=\"max-h-96 overflow-y-auto\">\n                      {cartItems.length === 0 ? (\n                        <div className=\"p-4 text-center text-gray-500 text-sm\">\n                          Your cart is empty\n                        </div>\n                      ) : (\n                        cartItems.map((item) => (\n                          <DropdownMenuItem key={item.id} className=\"flex-col items-start p-3\">\n                            <div className=\"flex items-center gap-3 w-full\">\n                              {item.image && (\n                                <img src={item.image} alt={item.name} className=\"h-10 w-10 rounded object-cover\" />\n                              )}\n                              <div className=\"flex-1\">\n                                <div className=\"font-medium text-sm\">{item.name}</div>\n                                <div className=\"text-xs text-gray-600\">\n                                  ₹{item.price} × {item.quantity}\n                                </div>\n                              </div>\n                              <div className=\"font-medium text-sm\">\n                                ₹{item.price * item.quantity}\n                              </div>\n                            </div>\n                          </DropdownMenuItem>\n                        ))\n                      )}\n                    </div>\n                    {cartItems.length > 0 && (\n                      <>\n                        <DropdownMenuSeparator />\n                        <DropdownMenuItem asChild>\n                          <Link href=\"/cart\" className=\"text-center w-full font-medium\">\n                            View Cart & Checkout\n                          </Link>\n                        </DropdownMenuItem>\n                      </>\n                    )}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              )}\n\n              {/* User Profile Menu */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" className=\"relative h-9 w-9 rounded-full\">\n                    <Avatar className=\"h-9 w-9\">\n                      <AvatarImage src={user.avatar} alt={user.name} />\n                      <AvatarFallback className=\"bg-primary-100 text-primary-700\">\n                        {getInitials(user.name)}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel className=\"font-normal\">\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-sm font-medium leading-none\">{user.name}</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">{user.email}</p>\n                      <div className=\"flex items-center gap-2 mt-1\">\n                        <span className={cn(\n                          \"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium\",\n                          {\n                            'bg-blue-100 text-blue-700': user.role === 'student',\n                            'bg-green-100 text-green-700': user.role === 'parent',\n                            'bg-purple-100 text-purple-700': user.role === 'admin',\n                            'bg-orange-100 text-orange-700': user.role === 'kitchen',\n                            'bg-gray-100 text-gray-700': user.role === 'teacher',\n                          }\n                        )}>\n                          {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n                        </span>\n                        {user.grade && (\n                          <span className=\"text-xs text-gray-500\">Grade {user.grade}</span>\n                        )}\n                      </div>\n                    </div>\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/profile\">Profile Settings</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/preferences\">Preferences</Link>\n                  </DropdownMenuItem>\n                  {['student', 'parent'].includes(user.role) && (\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/meal-preferences\">Meal Preferences</Link>\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem asChild>\n                    <Link href=\"/help\">Help & Support</Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem \n                    onClick={onLogout}\n                    className=\"text-error-600 focus:text-error-600\"\n                  >\n                    Sign out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </div>\n      </header>\n    </>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/mobile-menu.tsx",["2062"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport {\n  Home,\n  UtensilsCrossed,\n  Calendar,\n  FileText,\n  Users,\n  Settings,\n  ChefHat,\n  CreditCard,\n  BookOpen,\n  BarChart3,\n  Clock,\n  ChevronRight,\n  ChevronDown,\n  Wifi,\n  WifiOff,\n  AlertTriangle,\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { cn, getInitials } from '@/lib/utils';\nimport { User, NavigationItem, SchoolStatus } from '@/types/navigation';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\ninterface MobileMenuProps {\n  user: User;\n  schoolStatus: SchoolStatus;\n  onItemClick?: () => void;\n  className?: string;\n}\n\n// Same navigation items as desktop but optimized for mobile\nconst getNavigationItems = (userRole: User['role']): NavigationItem[] => {\n  const baseItems: NavigationItem[] = [\n    {\n      id: 'home',\n      label: 'Home',\n      href: '/dashboard',\n      icon: Home,\n      roles: ['student', 'parent', 'admin', 'kitchen', 'teacher'],\n    },\n  ];\n\n  const roleSpecificItems: Record<User['role'], NavigationItem[]> = {\n    student: [\n      {\n        id: 'meals',\n        label: 'Meals',\n        href: '/meals',\n        icon: UtensilsCrossed,\n        roles: ['student'],\n        children: [\n          {\n            id: 'menu',\n            label: 'Today\\'s Menu',\n            href: '/meals/menu',\n            roles: ['student'],\n          },\n          {\n            id: 'order',\n            label: 'Order Food',\n            href: '/meals/order',\n            roles: ['student'],\n          },\n          {\n            id: 'history',\n            label: 'Order History',\n            href: '/meals/history',\n            roles: ['student'],\n          },\n        ],\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        href: '/schedule',\n        icon: Calendar,\n        roles: ['student'],\n      },\n      {\n        id: 'reports',\n        label: 'Reports',\n        href: '/reports',\n        icon: FileText,\n        roles: ['student'],\n      },\n    ],\n    parent: [\n      {\n        id: 'children',\n        label: 'My Children',\n        href: '/children',\n        icon: Users,\n        roles: ['parent'],\n        children: [\n          {\n            id: 'meals',\n            label: 'Meal Orders',\n            href: '/children/meals',\n            roles: ['parent'],\n          },\n          {\n            id: 'schedule',\n            label: 'Schedule',\n            href: '/children/schedule',\n            roles: ['parent'],\n          },\n          {\n            id: 'reports',\n            label: 'Reports',\n            href: '/children/reports',\n            roles: ['parent'],\n          },\n        ],\n      },\n      {\n        id: 'payments',\n        label: 'Payments',\n        href: '/payments',\n        icon: CreditCard,\n        roles: ['parent'],\n      },\n    ],\n    admin: [\n      {\n        id: 'users',\n        label: 'Users',\n        href: '/admin/users',\n        icon: Users,\n        roles: ['admin'],\n        children: [\n          {\n            id: 'students',\n            label: 'Students',\n            href: '/admin/users/students',\n            roles: ['admin'],\n          },\n          {\n            id: 'parents',\n            label: 'Parents',\n            href: '/admin/users/parents',\n            roles: ['admin'],\n          },\n          {\n            id: 'staff',\n            label: 'Staff',\n            href: '/admin/users/staff',\n            roles: ['admin'],\n          },\n        ],\n      },\n      {\n        id: 'meals',\n        label: 'Meal Management',\n        href: '/admin/meals',\n        icon: UtensilsCrossed,\n        roles: ['admin'],\n        children: [\n          {\n            id: 'menu',\n            label: 'Menu Planning',\n            href: '/admin/meals/menu',\n            roles: ['admin'],\n          },\n          {\n            id: 'orders',\n            label: 'Orders',\n            href: '/admin/meals/orders',\n            roles: ['admin'],\n          },\n          {\n            id: 'inventory',\n            label: 'Inventory',\n            href: '/admin/meals/inventory',\n            roles: ['admin'],\n          },\n        ],\n      },\n      {\n        id: 'analytics',\n        label: 'Analytics',\n        href: '/admin/analytics',\n        icon: BarChart3,\n        roles: ['admin'],\n      },\n      {\n        id: 'settings',\n        label: 'Settings',\n        href: '/admin/settings',\n        icon: Settings,\n        roles: ['admin'],\n      },\n    ],\n    kitchen: [\n      {\n        id: 'orders',\n        label: 'Orders',\n        href: '/kitchen/orders',\n        icon: UtensilsCrossed,\n        roles: ['kitchen'],\n        children: [\n          {\n            id: 'pending',\n            label: 'Pending Orders',\n            href: '/kitchen/orders/pending',\n            roles: ['kitchen'],\n          },\n          {\n            id: 'preparing',\n            label: 'Preparing',\n            href: '/kitchen/orders/preparing',\n            roles: ['kitchen'],\n          },\n          {\n            id: 'ready',\n            label: 'Ready for Pickup',\n            href: '/kitchen/orders/ready',\n            roles: ['kitchen'],\n          },\n        ],\n      },\n      {\n        id: 'menu',\n        label: 'Menu',\n        href: '/kitchen/menu',\n        icon: ChefHat,\n        roles: ['kitchen'],\n      },\n      {\n        id: 'inventory',\n        label: 'Inventory',\n        href: '/kitchen/inventory',\n        icon: BookOpen,\n        roles: ['kitchen'],\n      },\n    ],\n    teacher: [\n      {\n        id: 'students',\n        label: 'Students',\n        href: '/teacher/students',\n        icon: Users,\n        roles: ['teacher'],\n      },\n      {\n        id: 'schedule',\n        label: 'Lunch Schedule',\n        href: '/teacher/schedule',\n        icon: Clock,\n        roles: ['teacher'],\n      },\n      {\n        id: 'reports',\n        label: 'Reports',\n        href: '/teacher/reports',\n        icon: FileText,\n        roles: ['teacher'],\n      },\n    ],\n  };\n\n  return [...baseItems, ...roleSpecificItems[userRole]];\n};\n\nexport function MobileMenu({ user, schoolStatus, onItemClick, className }: MobileMenuProps) {\n  const pathname = usePathname();\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n  const navigationItems = getNavigationItems(user.role);\n\n  const isActive = (href: string) => {\n    if (!pathname) return false;\n    if (href === '/dashboard') {\n      return pathname === '/dashboard' || pathname === '/';\n    }\n    return pathname.startsWith(href);\n  };\n\n  const toggleExpanded = (itemId: string) => {\n    setExpandedItems(prev => \n      prev.includes(itemId) \n        ? prev.filter(id => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  const handleItemClick = () => {\n    onItemClick?.();\n  };\n\n  return (\n    <div className={cn(\"flex flex-col h-full\", className)}>\n      {/* Header with user info */}\n      <div className=\"p-6 border-b\">\n        <div className=\"flex items-center gap-3\">\n          <Avatar className=\"h-10 w-10\">\n            <AvatarImage src={user.avatar} alt={user.name} />\n            <AvatarFallback className=\"bg-primary-100 text-primary-700\">\n              {getInitials(user.name)}\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <div className=\"font-medium text-sm\">{user.name}</div>\n            <div className=\"text-xs text-gray-500\">{user.email}</div>\n            <div className=\"flex items-center gap-2 mt-1\">\n              <span className={cn(\n                \"inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium\",\n                {\n                  'bg-blue-100 text-blue-700': user.role === 'student',\n                  'bg-green-100 text-green-700': user.role === 'parent',\n                  'bg-purple-100 text-purple-700': user.role === 'admin',\n                  'bg-orange-100 text-orange-700': user.role === 'kitchen',\n                  'bg-gray-100 text-gray-700': user.role === 'teacher',\n                }\n              )}>\n                {user.role.charAt(0).toUpperCase() + user.role.slice(1)}\n              </span>\n              {user.grade && (\n                <span className=\"text-xs text-gray-500\">Grade {user.grade}</span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Emergency banner for mobile */}\n        {schoolStatus.emergencyMode && (\n          <div className=\"mt-4 p-3 bg-error-50 border border-error-200 rounded-lg\">\n            <div className=\"flex items-start gap-2\">\n              <AlertTriangle className=\"h-4 w-4 text-error-500 mt-0.5 flex-shrink-0\" />\n              <div>\n                <div className=\"font-medium text-error-800 text-sm\">Emergency Alert</div>\n                <div className=\"text-error-700 text-xs mt-1\">\n                  {schoolStatus.emergencyMessage || 'Emergency notification active'}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Status indicators */}\n        <div className=\"mt-4 space-y-2\">\n          <div className=\"flex items-center justify-between text-xs\">\n            <span className=\"text-gray-600\">RFID System</span>\n            <div className=\"flex items-center gap-1\">\n              {schoolStatus.rfidSystemStatus === 'online' ? (\n                <>\n                  <Wifi className=\"h-3 w-3 text-success-500\" />\n                  <span className=\"text-success-600\">Online</span>\n                </>\n              ) : (\n                <>\n                  <WifiOff className=\"h-3 w-3 text-error-500\" />\n                  <span className=\"text-error-600\">Offline</span>\n                </>\n              )}\n            </div>\n          </div>\n          \n          {['student', 'parent'].includes(user.role) && (\n            <div className=\"flex items-center justify-between text-xs\">\n              <span className=\"text-gray-600\">Meal Service</span>\n              <span className={cn(\n                \"px-2 py-0.5 rounded-full font-medium\",\n                schoolStatus.mealServiceActive\n                  ? \"bg-success-100 text-success-700\"\n                  : \"bg-gray-100 text-gray-600\"\n              )}>\n                {schoolStatus.mealServiceActive ? 'Open' : 'Closed'}\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Navigation Items */}\n      <div className=\"flex-1 overflow-y-auto py-4\">\n        <nav className=\"px-4 space-y-1\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const hasChildren = item.children && item.children.length > 0;\n            const active = isActive(item.href);\n            const expanded = expandedItems.includes(item.id);\n\n            return (\n              <div key={item.id}>\n                {hasChildren ? (\n                  <>\n                    <Button\n                      variant=\"ghost\"\n                      className={cn(\n                        \"w-full justify-start h-auto p-3\",\n                        active && \"bg-accent text-accent-foreground\"\n                      )}\n                      onClick={() => toggleExpanded(item.id)}\n                    >\n                      <div className=\"flex items-center gap-3 flex-1\">\n                        {Icon && <Icon className=\"h-5 w-5\" />}\n                        <span className=\"font-medium\">{item.label}</span>\n                      </div>\n                      {expanded ? (\n                        <ChevronDown className=\"h-4 w-4\" />\n                      ) : (\n                        <ChevronRight className=\"h-4 w-4\" />\n                      )}\n                    </Button>\n                    \n                    {expanded && (\n                      <div className=\"ml-8 mt-1 space-y-1\">\n                        {item.children?.map((child) => (\n                          <Link\n                            key={child.id}\n                            href={child.href}\n                            onClick={handleItemClick}\n                            className={cn(\n                              \"block px-3 py-2 text-sm rounded-md transition-colors\",\n                              isActive(child.href)\n                                ? \"bg-accent text-accent-foreground font-medium\"\n                                : \"text-gray-600 hover:bg-gray-100 hover:text-gray-900\"\n                            )}\n                          >\n                            {child.label}\n                          </Link>\n                        ))}\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <Link\n                    href={item.href}\n                    onClick={handleItemClick}\n                    className={cn(\n                      \"flex items-center gap-3 px-3 py-3 rounded-md transition-colors\",\n                      active\n                        ? \"bg-accent text-accent-foreground font-medium\"\n                        : \"text-gray-700 hover:bg-gray-100 hover:text-gray-900\"\n                    )}\n                  >\n                    {Icon && <Icon className=\"h-5 w-5\" />}\n                    <span className=\"font-medium\">{item.label}</span>\n                  </Link>\n                )}\n              </div>\n            );\n          })}\n        </nav>\n      </div>\n\n      {/* Footer with quick actions */}\n      <div className=\"p-4 border-t space-y-2\">\n        <Link\n          href=\"/profile\"\n          onClick={handleItemClick}\n          className=\"flex items-center gap-3 px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-md transition-colors\"\n        >\n          <Settings className=\"h-4 w-4\" />\n          <span>Profile Settings</span>\n        </Link>\n        \n        <Link\n          href=\"/help\"\n          onClick={handleItemClick}\n          className=\"flex items-center gap-3 px-3 py-2 text-sm text-gray-600 hover:bg-gray-100 hover:text-gray-900 rounded-md transition-colors\"\n        >\n          <FileText className=\"h-4 w-4\" />\n          <span>Help & Support</span>\n        </Link>\n      </div>\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/header/navigation-menu.tsx",["2063","2064"],[],"\"use client\";\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport {\n  Home,\n  UtensilsCrossed,\n  Calendar,\n  FileText,\n  Users,\n  Settings,\n  ChefHat,\n  CreditCard,\n  BookOpen,\n  BarChart3,\n  Shield,\n  Clock,\n  Bell,\n} from 'lucide-react';\nimport {\n  NavigationMenu as NavigationMenuRoot,\n  NavigationMenuContent,\n  NavigationMenuItem,\n  NavigationMenuLink,\n  NavigationMenuList,\n  NavigationMenuTrigger,\n  navigationMenuTriggerStyle,\n} from '@/components/ui/navigation-menu';\nimport { cn } from '@/lib/utils';\nimport { User, NavigationItem } from '@/types/navigation';\n\ninterface NavigationMenuProps {\n  user: User;\n  className?: string;\n}\n\n// Define navigation items based on user roles\nconst getNavigationItems = (userRole: User['role']): NavigationItem[] => {\n  const baseItems: NavigationItem[] = [\n    {\n      id: 'home',\n      label: 'Home',\n      href: '/dashboard',\n      icon: Home,\n      roles: ['student', 'parent', 'admin', 'kitchen', 'teacher'],\n    },\n  ];\n\n  const roleSpecificItems: Record<User['role'], NavigationItem[]> = {\n    student: [\n      {\n        id: 'meals',\n        label: 'Meals',\n        href: '/meals',\n        icon: UtensilsCrossed,\n        roles: ['student'],\n        children: [\n          {\n            id: 'menu',\n            label: 'Today\\'s Menu',\n            href: '/meals/menu',\n            roles: ['student'],\n          },\n          {\n            id: 'order',\n            label: 'Order Food',\n            href: '/meals/order',\n            roles: ['student'],\n          },\n          {\n            id: 'history',\n            label: 'Order History',\n            href: '/meals/history',\n            roles: ['student'],\n          },\n        ],\n      },\n      {\n        id: 'schedule',\n        label: 'Schedule',\n        href: '/schedule',\n        icon: Calendar,\n        roles: ['student'],\n      },\n      {\n        id: 'reports',\n        label: 'Reports',\n        href: '/reports',\n        icon: FileText,\n        roles: ['student'],\n      },\n    ],\n    parent: [\n      {\n        id: 'children',\n        label: 'My Children',\n        href: '/children',\n        icon: Users,\n        roles: ['parent'],\n        children: [\n          {\n            id: 'meals',\n            label: 'Meal Orders',\n            href: '/children/meals',\n            roles: ['parent'],\n          },\n          {\n            id: 'schedule',\n            label: 'Schedule',\n            href: '/children/schedule',\n            roles: ['parent'],\n          },\n          {\n            id: 'reports',\n            label: 'Reports',\n            href: '/children/reports',\n            roles: ['parent'],\n          },\n        ],\n      },\n      {\n        id: 'payments',\n        label: 'Payments',\n        href: '/payments',\n        icon: CreditCard,\n        roles: ['parent'],\n      },\n    ],\n    admin: [\n      {\n        id: 'users',\n        label: 'Users',\n        href: '/admin/users',\n        icon: Users,\n        roles: ['admin'],\n        children: [\n          {\n            id: 'students',\n            label: 'Students',\n            href: '/admin/users/students',\n            roles: ['admin'],\n          },\n          {\n            id: 'parents',\n            label: 'Parents',\n            href: '/admin/users/parents',\n            roles: ['admin'],\n          },\n          {\n            id: 'staff',\n            label: 'Staff',\n            href: '/admin/users/staff',\n            roles: ['admin'],\n          },\n        ],\n      },\n      {\n        id: 'meals',\n        label: 'Meal Management',\n        href: '/admin/meals',\n        icon: UtensilsCrossed,\n        roles: ['admin'],\n        children: [\n          {\n            id: 'menu',\n            label: 'Menu Planning',\n            href: '/admin/meals/menu',\n            roles: ['admin'],\n          },\n          {\n            id: 'orders',\n            label: 'Orders',\n            href: '/admin/meals/orders',\n            roles: ['admin'],\n          },\n          {\n            id: 'inventory',\n            label: 'Inventory',\n            href: '/admin/meals/inventory',\n            roles: ['admin'],\n          },\n        ],\n      },\n      {\n        id: 'analytics',\n        label: 'Analytics',\n        href: '/admin/analytics',\n        icon: BarChart3,\n        roles: ['admin'],\n      },\n      {\n        id: 'settings',\n        label: 'Settings',\n        href: '/admin/settings',\n        icon: Settings,\n        roles: ['admin'],\n      },\n    ],\n    kitchen: [\n      {\n        id: 'orders',\n        label: 'Orders',\n        href: '/kitchen/orders',\n        icon: UtensilsCrossed,\n        roles: ['kitchen'],\n        children: [\n          {\n            id: 'pending',\n            label: 'Pending Orders',\n            href: '/kitchen/orders/pending',\n            roles: ['kitchen'],\n          },\n          {\n            id: 'preparing',\n            label: 'Preparing',\n            href: '/kitchen/orders/preparing',\n            roles: ['kitchen'],\n          },\n          {\n            id: 'ready',\n            label: 'Ready for Pickup',\n            href: '/kitchen/orders/ready',\n            roles: ['kitchen'],\n          },\n        ],\n      },\n      {\n        id: 'menu',\n        label: 'Menu',\n        href: '/kitchen/menu',\n        icon: ChefHat,\n        roles: ['kitchen'],\n      },\n      {\n        id: 'inventory',\n        label: 'Inventory',\n        href: '/kitchen/inventory',\n        icon: BookOpen,\n        roles: ['kitchen'],\n      },\n    ],\n    teacher: [\n      {\n        id: 'students',\n        label: 'Students',\n        href: '/teacher/students',\n        icon: Users,\n        roles: ['teacher'],\n      },\n      {\n        id: 'schedule',\n        label: 'Lunch Schedule',\n        href: '/teacher/schedule',\n        icon: Clock,\n        roles: ['teacher'],\n      },\n      {\n        id: 'reports',\n        label: 'Reports',\n        href: '/teacher/reports',\n        icon: FileText,\n        roles: ['teacher'],\n      },\n    ],\n  };\n\n  return [...baseItems, ...roleSpecificItems[userRole]];\n};\n\nexport function NavigationMenu({ user, className }: NavigationMenuProps) {\n  const pathname = usePathname();\n  const navigationItems = getNavigationItems(user.role);\n\n  const isActive = (href: string) => {\n    if (!pathname) return false;\n    if (href === '/dashboard') {\n      return pathname === '/dashboard' || pathname === '/';\n    }\n    return pathname.startsWith(href);\n  };\n\n  return (\n    <NavigationMenuRoot className={className}>\n      <NavigationMenuList>\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const hasChildren = item.children && item.children.length > 0;\n          const active = isActive(item.href);\n\n          return (\n            <NavigationMenuItem key={item.id}>\n              {hasChildren ? (\n                <>\n                  <NavigationMenuTrigger className={cn(\n                    navigationMenuTriggerStyle(),\n                    active && \"bg-accent text-accent-foreground\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      {Icon && <Icon className=\"h-4 w-4\" />}\n                      <span>{item.label}</span>\n                    </div>\n                  </NavigationMenuTrigger>\n                  <NavigationMenuContent>\n                    <div className=\"grid w-[400px] gap-3 p-4 md:w-[500px] md:grid-cols-2 lg:w-[600px]\">\n                      {item.children?.map((child) => (\n                        <NavigationMenuLink key={child.id} asChild>\n                          <Link\n                            href={child.href}\n                            className={cn(\n                              \"block select-none space-y-1 rounded-md p-3 leading-none no-underline outline-none transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground\",\n                              isActive(child.href) && \"bg-accent text-accent-foreground\"\n                            )}\n                          >\n                            <div className=\"text-sm font-medium leading-none\">\n                              {child.label}\n                            </div>\n                            <p className=\"line-clamp-2 text-sm leading-snug text-muted-foreground\">\n                              {getItemDescription(child.id)}\n                            </p>\n                          </Link>\n                        </NavigationMenuLink>\n                      ))}\n                    </div>\n                  </NavigationMenuContent>\n                </>\n              ) : (\n                <NavigationMenuLink asChild>\n                  <Link\n                    href={item.href}\n                    className={cn(\n                      navigationMenuTriggerStyle(),\n                      active && \"bg-accent text-accent-foreground\"\n                    )}\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      {Icon && <Icon className=\"h-4 w-4\" />}\n                      <span>{item.label}</span>\n                    </div>\n                  </Link>\n                </NavigationMenuLink>\n              )}\n            </NavigationMenuItem>\n          );\n        })}\n      </NavigationMenuList>\n    </NavigationMenuRoot>\n  );\n}\n\n// Helper function to get descriptions for navigation items\nfunction getItemDescription(itemId: string): string {\n  const descriptions: Record<string, string> = {\n    menu: \"View today's available meals and nutritional information\",\n    order: \"Place orders for lunch and snacks\",\n    history: \"Review past meal orders and payments\",\n    meals: \"Manage your child's meal orders and preferences\",\n    schedule: \"View meal timing and lunch break schedules\",\n    reports: \"Access detailed reports and analytics\",\n    students: \"Manage student accounts and information\",\n    parents: \"Manage parent accounts and family links\",\n    staff: \"Manage staff accounts and permissions\",\n    pending: \"View and process pending meal orders\",\n    preparing: \"Track orders currently being prepared\",\n    ready: \"Manage orders ready for pickup\",\n    inventory: \"Track ingredients and stock levels\",\n    orders: \"View and manage all meal orders\",\n    analytics: \"System analytics and performance metrics\",\n  };\n  \n  return descriptions[itemId] || \"\";\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/navigation/bottom-tab-nav.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/navigation/breadcrumb-nav.tsx",["2065","2066","2067"],[],"\"use client\";\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { ChevronRight, Home } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\ninterface BreadcrumbItem {\n  label: string;\n  href?: string;\n  current?: boolean;\n}\n\ninterface BreadcrumbNavProps {\n  items?: BreadcrumbItem[];\n  showHome?: boolean;\n  className?: string;\n}\n\n// Auto-generate breadcrumbs from pathname\nfunction generateBreadcrumbs(pathname: string): BreadcrumbItem[] {\n  const segments = pathname.split('/').filter(Boolean);\n  const breadcrumbs: BreadcrumbItem[] = [];\n  \n  // Add home\n  breadcrumbs.push({\n    label: 'Home',\n    href: '/dashboard',\n  });\n  \n  // Generate breadcrumbs from path segments\n  let currentPath = '';\n  segments.forEach((segment, index) => {\n    currentPath += `/${segment}`;\n    const isLast = index === segments.length - 1;\n    \n    // Convert segment to readable label\n    const label = segment\n      .split('-')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n    \n    breadcrumbs.push({\n      label: formatBreadcrumbLabel(segment, currentPath),\n      href: isLast ? undefined : currentPath,\n      current: isLast,\n    });\n  });\n  \n  return breadcrumbs;\n}\n\n// Format breadcrumb labels for better readability\nfunction formatBreadcrumbLabel(segment: string, fullPath: string): string {\n  const labelMap: Record<string, string> = {\n    'admin': 'Admin',\n    'kitchen': 'Kitchen',\n    'meals': 'Meals',\n    'users': 'Users',\n    'students': 'Students',\n    'parents': 'Parents',\n    'staff': 'Staff',\n    'orders': 'Orders',\n    'menu': 'Menu',\n    'inventory': 'Inventory',\n    'analytics': 'Analytics',\n    'reports': 'Reports',\n    'settings': 'Settings',\n    'payments': 'Payments',\n    'security': 'Security',\n    'dashboard': 'Dashboard',\n    'profile': 'Profile',\n    'children': 'My Children',\n    'schedule': 'Schedule',\n    'nutrition': 'Nutrition',\n    'transactions': 'Transactions',\n    'billing': 'Billing',\n    'refunds': 'Refunds',\n    'overview': 'Overview',\n    'financial': 'Financial',\n    'logs': 'Access Logs',\n    'permissions': 'Permissions',\n    'pending': 'Pending',\n    'preparing': 'Preparing',\n    'ready': 'Ready',\n    'completed': 'Completed',\n    'current': 'Current',\n    'upcoming': 'Upcoming',\n    'recipes': 'Recipes',\n    'low-stock': 'Low Stock',\n    'cart': 'Cart',\n    'history': 'History',\n    'preferences': 'Preferences',\n    'help': 'Help & Support',\n  };\n  \n  return labelMap[segment] || segment\n    .split('-')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n}\n\nexport function BreadcrumbNav({ items, showHome = true, className }: BreadcrumbNavProps) {\n  const pathname = usePathname();\n  \n  // Use provided items or auto-generate from pathname\n  const breadcrumbItems = items || generateBreadcrumbs(pathname);\n  \n  // Don't show breadcrumbs on certain pages\n  const hiddenPaths = ['/dashboard', '/', '/auth', '/login', '/register'];\n  if (hiddenPaths.includes(pathname)) {\n    return null;\n  }\n  \n  return (\n    <nav className={cn(\"flex items-center space-x-1 text-sm text-gray-500\", className)} aria-label=\"Breadcrumb\">\n      <ol className=\"flex items-center space-x-1\">\n        {breadcrumbItems.map((item, index) => {\n          const isLast = index === breadcrumbItems.length - 1;\n          const isHome = index === 0 && showHome;\n          \n          return (\n            <li key={index} className=\"flex items-center\">\n              {index > 0 && (\n                <ChevronRight className=\"h-3 w-3 text-gray-400 mx-1\" aria-hidden=\"true\" />\n              )}\n              \n              {item.href && !isLast ? (\n                <Link\n                  href={item.href}\n                  className=\"flex items-center gap-1 hover:text-gray-700 transition-colors\"\n                >\n                  {isHome && <Home className=\"h-3 w-3\" />}\n                  <span>{item.label}</span>\n                </Link>\n              ) : (\n                <span className={cn(\n                  \"flex items-center gap-1\",\n                  isLast ? \"text-gray-900 font-medium\" : \"text-gray-500\"\n                )}>\n                  {isHome && <Home className=\"h-3 w-3\" />}\n                  <span>{item.label}</span>\n                </span>\n              )}\n            </li>\n          );\n        })}\n      </ol>\n    </nav>\n  );\n}\n\n// Hook for programmatic breadcrumb management\nexport function useBreadcrumbs() {\n  const pathname = usePathname();\n  \n  const setBreadcrumbs = (items: BreadcrumbItem[]) => {\n    // This could be implemented with a context provider\n    // For now, return the auto-generated breadcrumbs\n    return generateBreadcrumbs(pathname);\n  };\n  \n  return {\n    breadcrumbs: generateBreadcrumbs(pathname),\n    setBreadcrumbs,\n  };\n}\n\n// Specialized breadcrumb component for specific sections\nexport function AdminBreadcrumbs({ className }: { className?: string }) {\n  return (\n    <BreadcrumbNav\n      className={cn(\"mb-4\", className)}\n      showHome={true}\n    />\n  );\n}\n\nexport function KitchenBreadcrumbs({ className }: { className?: string }) {\n  return (\n    <BreadcrumbNav\n      className={cn(\"mb-4\", className)}\n      showHome={true}\n    />\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/sidebar/sidebar-nav.tsx",["2068"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport {\n  ChevronLeft,\n  ChevronRight,\n  Home,\n  Users,\n  UtensilsCrossed,\n  BarChart3,\n  Settings,\n  ChefHat,\n  BookOpen,\n  Clock,\n  FileText,\n  ShoppingBag,\n  AlertTriangle,\n  Shield,\n  CreditCard,\n  Zap,\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { User, NavigationItem } from '@/types/navigation';\n\ninterface SidebarNavProps {\n  user: User;\n  collapsed?: boolean;\n  onToggle?: (collapsed: boolean) => void;\n  className?: string;\n}\n\n// Enhanced navigation items with descriptions and badges\nconst getAdminNavItems = (): NavigationItem[] => [\n  {\n    id: 'dashboard',\n    label: 'Dashboard',\n    href: '/admin',\n    icon: Home,\n    roles: ['admin'],\n  },\n  {\n    id: 'users',\n    label: 'User Management',\n    href: '/admin/users',\n    icon: Users,\n    roles: ['admin'],\n    children: [\n      {\n        id: 'students',\n        label: 'Students',\n        href: '/admin/users/students',\n        roles: ['admin'],\n      },\n      {\n        id: 'parents',\n        label: 'Parents',\n        href: '/admin/users/parents',\n        roles: ['admin'],\n      },\n      {\n        id: 'staff',\n        label: 'Staff',\n        href: '/admin/users/staff',\n        roles: ['admin'],\n      },\n    ],\n  },\n  {\n    id: 'meals',\n    label: 'Meal Management',\n    href: '/admin/meals',\n    icon: UtensilsCrossed,\n    roles: ['admin'],\n    children: [\n      {\n        id: 'menu',\n        label: 'Menu Planning',\n        href: '/admin/meals/menu',\n        roles: ['admin'],\n      },\n      {\n        id: 'orders',\n        label: 'Orders',\n        href: '/admin/meals/orders',\n        roles: ['admin'],\n        badge: 5, // Example: pending orders\n      },\n      {\n        id: 'inventory',\n        label: 'Inventory',\n        href: '/admin/meals/inventory',\n        roles: ['admin'],\n      },\n      {\n        id: 'nutrition',\n        label: 'Nutrition Info',\n        href: '/admin/meals/nutrition',\n        roles: ['admin'],\n      },\n    ],\n  },\n  {\n    id: 'payments',\n    label: 'Payments',\n    href: '/admin/payments',\n    icon: CreditCard,\n    roles: ['admin'],\n    children: [\n      {\n        id: 'transactions',\n        label: 'Transactions',\n        href: '/admin/payments/transactions',\n        roles: ['admin'],\n      },\n      {\n        id: 'billing',\n        label: 'Billing',\n        href: '/admin/payments/billing',\n        roles: ['admin'],\n      },\n      {\n        id: 'refunds',\n        label: 'Refunds',\n        href: '/admin/payments/refunds',\n        roles: ['admin'],\n      },\n    ],\n  },\n  {\n    id: 'schedule',\n    label: 'Staff Scheduling',\n    href: '/admin/schedule',\n    icon: Clock,\n    roles: ['admin'],\n  },\n  {\n    id: 'analytics',\n    label: 'Analytics',\n    href: '/admin/analytics',\n    icon: BarChart3,\n    roles: ['admin'],\n    children: [\n      {\n        id: 'overview',\n        label: 'Overview',\n        href: '/admin/analytics/overview',\n        roles: ['admin'],\n      },\n      {\n        id: 'meals',\n        label: 'Meal Analytics',\n        href: '/admin/analytics/meals',\n        roles: ['admin'],\n      },\n      {\n        id: 'financial',\n        label: 'Financial',\n        href: '/admin/analytics/financial',\n        roles: ['admin'],\n      },\n    ],\n  },\n  {\n    id: 'reports',\n    label: 'Reports',\n    href: '/admin/reports',\n    icon: FileText,\n    roles: ['admin'],\n  },\n  {\n    id: 'security',\n    label: 'Security',\n    href: '/admin/security',\n    icon: Shield,\n    roles: ['admin'],\n    children: [\n      {\n        id: 'logs',\n        label: 'Access Logs',\n        href: '/admin/security/logs',\n        roles: ['admin'],\n      },\n      {\n        id: 'permissions',\n        label: 'Permissions',\n        href: '/admin/security/permissions',\n        roles: ['admin'],\n      },\n    ],\n  },\n  {\n    id: 'rfid-verification',\n    label: 'RFID Verification',\n    href: '/rfid-verification',\n    icon: Zap,\n    roles: ['admin'],\n  },\n  {\n    id: 'settings',\n    label: 'Settings',\n    href: '/admin/settings',\n    icon: Settings,\n    roles: ['admin'],\n  },\n];\n\nconst getKitchenNavItems = (): NavigationItem[] => [\n  {\n    id: 'dashboard',\n    label: 'Kitchen Dashboard',\n    href: '/kitchen',\n    icon: Home,\n    roles: ['kitchen'],\n  },\n  {\n    id: 'orders',\n    label: 'Orders',\n    href: '/kitchen/orders',\n    icon: ShoppingBag,\n    roles: ['kitchen'],\n    badge: 12, // Example: pending orders\n    children: [\n      {\n        id: 'pending',\n        label: 'Pending',\n        href: '/kitchen/orders/pending',\n        roles: ['kitchen'],\n        badge: 8,\n      },\n      {\n        id: 'preparing',\n        label: 'Preparing',\n        href: '/kitchen/orders/preparing',\n        roles: ['kitchen'],\n        badge: 4,\n      },\n      {\n        id: 'ready',\n        label: 'Ready',\n        href: '/kitchen/orders/ready',\n        roles: ['kitchen'],\n      },\n      {\n        id: 'completed',\n        label: 'Completed',\n        href: '/kitchen/orders/completed',\n        roles: ['kitchen'],\n      },\n    ],\n  },\n  {\n    id: 'menu',\n    label: 'Menu Management',\n    href: '/kitchen/menu',\n    icon: ChefHat,\n    roles: ['kitchen'],\n    children: [\n      {\n        id: 'current',\n        label: 'Current Menu',\n        href: '/kitchen/menu/current',\n        roles: ['kitchen'],\n      },\n      {\n        id: 'upcoming',\n        label: 'Upcoming',\n        href: '/kitchen/menu/upcoming',\n        roles: ['kitchen'],\n      },\n      {\n        id: 'recipes',\n        label: 'Recipes',\n        href: '/kitchen/menu/recipes',\n        roles: ['kitchen'],\n      },\n    ],\n  },\n  {\n    id: 'inventory',\n    label: 'Inventory',\n    href: '/kitchen/inventory',\n    icon: BookOpen,\n    roles: ['kitchen'],\n    children: [\n      {\n        id: 'current',\n        label: 'Current Stock',\n        href: '/kitchen/inventory/current',\n        roles: ['kitchen'],\n      },\n      {\n        id: 'low-stock',\n        label: 'Low Stock',\n        href: '/kitchen/inventory/low-stock',\n        roles: ['kitchen'],\n        badge: 3, // Items running low\n      },\n      {\n        id: 'orders',\n        label: 'Purchase Orders',\n        href: '/kitchen/inventory/orders',\n        roles: ['kitchen'],\n      },\n    ],\n  },\n  {\n    id: 'schedule',\n    label: 'Schedule',\n    href: '/kitchen/schedule',\n    icon: Clock,\n    roles: ['kitchen'],\n  },\n  {\n    id: 'reports',\n    label: 'Reports',\n    href: '/kitchen/reports',\n    icon: FileText,\n    roles: ['kitchen'],\n  },\n  {\n    id: 'rfid-verification',\n    label: 'RFID Verification',\n    href: '/rfid-verification',\n    icon: Zap,\n    roles: ['kitchen'],\n  },\n];\n\nexport function SidebarNav({ user, collapsed = false, onToggle, className }: SidebarNavProps) {\n  const pathname = usePathname();\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n  \n  const navItems = user.role === 'admin' ? getAdminNavItems() : getKitchenNavItems();\n\n  const isActive = (href: string) => {\n    if (href === '/admin' || href === '/kitchen') {\n      return pathname === href;\n    }\n    return pathname.startsWith(href);\n  };\n\n  const toggleExpanded = (itemId: string) => {\n    if (collapsed) {\n      onToggle?.(false); // Auto-expand sidebar when clicking on item with children\n    }\n    setExpandedItems(prev => \n      prev.includes(itemId) \n        ? prev.filter(id => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  return (\n    <div className={cn(\n      \"flex flex-col h-full bg-white border-r transition-all duration-300\",\n      collapsed ? \"w-16\" : \"w-64\",\n      className\n    )}>\n      {/* Sidebar Header */}\n      <div className={cn(\n        \"flex items-center justify-between p-4 border-b\",\n        collapsed && \"justify-center\"\n      )}>\n        {!collapsed && (\n          <div className=\"flex items-center gap-2\">\n            <div className=\"h-8 w-8 rounded-md bg-primary-500 flex items-center justify-center\">\n              <span className=\"text-white font-bold text-lg\">H</span>\n            </div>\n            <div>\n              <div className=\"font-semibold text-primary-600\">{user.role === 'admin' ? 'Admin' : 'Kitchen'}</div>\n              <div className=\"text-xs text-gray-500\">Control Panel</div>\n            </div>\n          </div>\n        )}\n        \n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          onClick={() => onToggle?.(!collapsed)}\n          className=\"h-8 w-8\"\n        >\n          {collapsed ? (\n            <ChevronRight className=\"h-4 w-4\" />\n          ) : (\n            <ChevronLeft className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Navigation Items */}\n      <nav className=\"flex-1 overflow-y-auto py-4\">\n        <div className=\"space-y-1 px-3\">\n          {navItems.map((item) => {\n            const Icon = item.icon;\n            const hasChildren = item.children && item.children.length > 0;\n            const active = isActive(item.href);\n            const expanded = expandedItems.includes(item.id);\n\n            return (\n              <div key={item.id}>\n                {hasChildren ? (\n                  <>\n                    <Button\n                      variant=\"ghost\"\n                      className={cn(\n                        \"w-full justify-start h-auto p-2 text-left font-normal\",\n                        active && \"bg-primary-50 text-primary-700\",\n                        collapsed && \"justify-center\"\n                      )}\n                      onClick={() => toggleExpanded(item.id)}\n                    >\n                      <div className={cn(\n                        \"flex items-center gap-3 w-full\",\n                        collapsed && \"justify-center\"\n                      )}>\n                        <div className=\"relative\">\n                          {Icon && <Icon className=\"h-5 w-5\" />}\n                          {item.badge && item.badge > 0 && !collapsed && (\n                            <span className=\"absolute -top-1 -right-1 h-4 w-4 rounded-full bg-error-500 text-white text-xs font-medium flex items-center justify-center\">\n                              {item.badge > 9 ? '9+' : item.badge}\n                            </span>\n                          )}\n                        </div>\n                        {!collapsed && (\n                          <>\n                            <span className=\"flex-1\">{item.label}</span>\n                            <ChevronRight className={cn(\n                              \"h-4 w-4 transition-transform\",\n                              expanded && \"rotate-90\"\n                            )} />\n                          </>\n                        )}\n                      </div>\n                    </Button>\n                    \n                    {expanded && !collapsed && (\n                      <div className=\"ml-8 mt-1 space-y-1\">\n                        {item.children?.map((child) => (\n                          <Link\n                            key={child.id}\n                            href={child.href}\n                            className={cn(\n                              \"flex items-center justify-between px-3 py-2 text-sm rounded-md transition-colors\",\n                              isActive(child.href)\n                                ? \"bg-primary-100 text-primary-700 font-medium\"\n                                : \"text-gray-600 hover:bg-gray-100 hover:text-gray-900\"\n                            )}\n                          >\n                            <span>{child.label}</span>\n                            {child.badge && child.badge > 0 && (\n                              <span className=\"h-5 w-5 rounded-full bg-error-500 text-white text-xs font-medium flex items-center justify-center\">\n                                {child.badge > 9 ? '9+' : child.badge}\n                              </span>\n                            )}\n                          </Link>\n                        ))}\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <Link\n                    href={item.href}\n                    className={cn(\n                      \"flex items-center gap-3 px-2 py-2 rounded-md transition-colors\",\n                      active\n                        ? \"bg-primary-50 text-primary-700 font-medium\"\n                        : \"text-gray-700 hover:bg-gray-100 hover:text-gray-900\",\n                      collapsed && \"justify-center\"\n                    )}\n                  >\n                    <div className=\"relative\">\n                      {Icon && <Icon className=\"h-5 w-5\" />}\n                      {item.badge && item.badge > 0 && !collapsed && (\n                        <span className=\"absolute -top-1 -right-1 h-4 w-4 rounded-full bg-error-500 text-white text-xs font-medium flex items-center justify-center\">\n                          {item.badge > 9 ? '9+' : item.badge}\n                        </span>\n                      )}\n                    </div>\n                    {!collapsed && (\n                      <span className=\"flex-1\">{item.label}</span>\n                    )}\n                  </Link>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </nav>\n\n      {/* Footer with user role indicator */}\n      {!collapsed && (\n        <div className=\"p-4 border-t\">\n          <div className=\"flex items-center gap-3\">\n            <div className={cn(\n              \"h-8 w-8 rounded-full flex items-center justify-center text-white text-sm font-medium\",\n              user.role === 'admin' ? \"bg-purple-500\" : \"bg-orange-500\"\n            )}>\n              {user.role === 'admin' ? 'A' : 'K'}\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"text-sm font-medium\">{user.name}</div>\n              <div className=\"text-xs text-gray-500 capitalize\">{user.role} Panel</div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/layout/sidebar-layout.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/loading/LoadingStates.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/animated-list.tsx",["2069"],[],"\"use client\";\n\nimport React, { ReactElement, useMemo } from \"react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nexport interface AnimatedListProps {\n  className?: string;\n  children: React.ReactNode;\n  delay?: number;\n}\n\nexport const AnimatedList = React.memo<AnimatedListProps>(\n  ({ className, children, delay = 1000 }) => {\n    const [messages, setMessages] = React.useState<ReactElement[]>([]);\n\n    const childrenArray = React.Children.toArray(children);\n\n    React.useEffect(() => {\n      const interval = setInterval(() => {\n        setMessages((prev) => {\n          const newMessages = [...prev];\n          if (newMessages.length < childrenArray.length) {\n            newMessages.push(childrenArray[newMessages.length] as ReactElement);\n          }\n          return newMessages;\n        });\n      }, delay);\n\n      return () => clearInterval(interval);\n    }, [childrenArray, delay]);\n\n    return (\n      <div className={className}>\n        <AnimatePresence>\n          {messages.map((item, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.3 }}\n            >\n              {item}\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n    );\n  }\n);\n\nAnimatedList.displayName = \"AnimatedList\";\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/background-beams.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/bento-grid.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/marquee.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/number-ticker.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/magicui/text-generate-effect.tsx",["2070"],[],"\"use client\";\n\nimport { useEffect } from \"react\";\nimport { motion, stagger, useAnimate } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\nexport const TextGenerateEffect = ({\n  words,\n  className,\n  filter = true,\n  duration = 0.5,\n}: {\n  words: string;\n  className?: string;\n  filter?: boolean;\n  duration?: number;\n}) => {\n  const [scope, animate] = useAnimate();\n  let wordsArray = words.split(\" \");\n  \n  useEffect(() => {\n    animate(\n      \"span\",\n      {\n        opacity: 1,\n        filter: filter ? \"blur(0px)\" : \"none\",\n      },\n      {\n        duration: duration || 1,\n        delay: stagger(0.2),\n      }\n    );\n  }, [scope.current]);\n\n  const renderWords = () => {\n    return (\n      <motion.div ref={scope}>\n        {wordsArray.map((word, idx) => {\n          return (\n            <motion.span\n              key={word + idx}\n              className=\"dark:text-white text-black opacity-0\"\n              style={{\n                filter: filter ? \"blur(10px)\" : \"none\",\n              }}\n            >\n              {word}{\" \"}\n            </motion.span>\n          );\n        })}\n      </motion.div>\n    );\n  };\n\n  return (\n    <div className={cn(\"font-bold\", className)}>\n      <div className=\"mt-4\">\n        <div className=\"dark:text-white text-black text-2xl leading-snug tracking-wide\">\n          {renderWords()}\n        </div>\n      </div>\n    </div>\n  );\n};\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/CategoryTabs.tsx",["2071"],[],"/**\n * CategoryTabs Component - Enhanced Meal Category Navigation\n * Tabbed navigation for different meal categories with filtering\n * Enhanced with better mobile responsiveness and accessibility\n */\n\nimport React from 'react';\nimport { Tabs, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Clock, AlertTriangle, CheckCircle, Users } from 'lucide-react';\nimport { MEAL_TYPES } from '@/utils/constants';\nimport type { CategoryTabsProps, MenuCategory } from './types';\nimport { getMealCategoryInfo } from './utils';\nimport { cn } from '@/lib/utils';\n\nconst CategoryTabs: React.FC<CategoryTabsProps> = ({\n  categories,\n  activeCategory,\n  onCategoryChange,\n  student,\n}) => {\n  // Filter categories based on student grade and availability\n  const availableCategories = categories.filter(category => {\n    // Check grade restrictions\n    if (category.gradeFilters && category.gradeFilters.length > 0) {\n      if (!category.gradeFilters.includes(student.grade)) {\n        return false;\n      }\n    }\n\n    // Check dietary preferences\n    if (category.dietaryFilters && category.dietaryFilters.length > 0) {\n      const hasMatchingDietary = category.dietaryFilters.some(dietary =>\n        student.dietaryPreferences.includes(dietary)\n      );\n      if (!hasMatchingDietary && student.dietaryPreferences.length > 0) {\n        return false;\n      }\n    }\n\n    return category.isActive;\n  });\n\n  // Sort categories by sort order\n  const sortedCategories = availableCategories.sort((a, b) => a.sortOrder - b.sortOrder);\n\n  return (\n    <div className=\"w-full space-y-4\">\n      <Tabs value={activeCategory} onValueChange={onCategoryChange} className=\"w-full\">\n        {/* Mobile-first responsive tabs */}\n        <div className=\"overflow-x-auto scrollbar-hide\">\n          <TabsList className={cn(\n            'inline-flex h-auto p-1 bg-gray-50 border border-gray-200 rounded-xl',\n            'min-w-full lg:grid lg:grid-cols-4 gap-1'\n          )}>\n            {sortedCategories.map((category) => {\n              const categoryInfo = getMealCategoryInfo(category.mealType);\n              const isActive = activeCategory === category.id;\n              \n              return (\n                <TabsTrigger\n                  key={category.id}\n                  value={category.id}\n                  className={cn(\n                    'flex-shrink-0 lg:flex-shrink flex flex-col items-center gap-2',\n                    'p-3 sm:p-4 rounded-lg transition-all duration-300 min-w-[120px] lg:min-w-0',\n                    'border-2 border-transparent',\n                    isActive\n                      ? 'bg-white shadow-lg border-primary text-primary scale-105 lg:scale-100'\n                      : 'hover:bg-white/80 hover:shadow-md active:scale-95',\n                    'focus:outline-none focus:ring-2 focus:ring-primary/50'\n                  )}\n                  role=\"tab\"\n                  aria-selected={isActive}\n                  aria-controls={`category-panel-${category.id}`}\n                >\n                  {/* Icon and label */}\n                  <div className=\"flex flex-col sm:flex-row items-center gap-2\">\n                    <span \n                      className=\"text-2xl sm:text-3xl transition-transform duration-200 hover:scale-110\" \n                      role=\"img\" \n                      aria-label={category.name}\n                    >\n                      {categoryInfo.icon}\n                    </span>\n                    <div className=\"text-center sm:text-left\">\n                      <div className=\"font-bold text-xs sm:text-sm leading-tight\">\n                        {categoryInfo.label}\n                      </div>\n                      <div className=\"text-xs text-gray-600 hidden lg:block mt-0.5\">\n                        {categoryInfo.description}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Category-specific badges */}\n                  <div className=\"flex flex-wrap gap-1 justify-center mt-1\">\n                    {/* Special dietary indicators */}\n                    {category.dietaryFilters && category.dietaryFilters.length > 0 && (\n                      <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 bg-green-50 border-green-200 text-green-700\">\n                        {category.dietaryFilters.length === 1 \n                          ? category.dietaryFilters[0] \n                          : `${category.dietaryFilters.length} diets`}\n                      </Badge>\n                    )}\n\n                    {/* Grade restrictions */}\n                    {category.gradeFilters && category.gradeFilters.length > 0 && (\n                      <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 bg-blue-50 border-blue-200 text-blue-700\">\n                        Grade {Math.min(...category.gradeFilters)}-{Math.max(...category.gradeFilters)}\n                      </Badge>\n                    )}\n\n                    {/* New category indicator */}\n                    {category.name.toLowerCase().includes('new') && (\n                      <Badge className=\"text-xs px-1.5 py-0.5 bg-gradient-to-r from-green-400 to-green-600 text-white animate-pulse\">\n                        New!\n                      </Badge>\n                    )}\n                  </div>\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n        </div>\n      </Tabs>\n\n      {/* Enhanced Category Description Panel */}\n      {activeCategory && (\n        <div \n          id={`category-panel-${activeCategory}`}\n          role=\"tabpanel\"\n          aria-labelledby={`category-tab-${activeCategory}`}\n          className=\"bg-gradient-to-br from-gray-50 to-gray-100 rounded-xl p-4 sm:p-6 shadow-sm border border-gray-200\"\n        >\n          {(() => {\n            const activecat = sortedCategories.find(cat => cat.id === activeCategory);\n            if (!activecat) return null;\n            \n            const categoryInfo = getMealCategoryInfo(activecat.mealType);\n            \n            return (\n              <div className=\"space-y-4\">\n                {/* Header */}\n                <div className=\"flex items-start space-x-4\">\n                  <div className=\"bg-white p-3 rounded-xl shadow-sm\">\n                    <span className=\"text-4xl\" role=\"img\" aria-label={activecat.name}>\n                      {categoryInfo.icon}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-xl text-gray-900 mb-1\">\n                      {categoryInfo.label}\n                    </h3>\n                    <p className=\"text-gray-700 text-sm leading-relaxed\">\n                      {activecat.description}\n                    </p>\n                  </div>\n                </div>\n                  \n                {/* Enhanced timing and feature information */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {/* Timing Information */}\n                  {(() => {\n                    const timingInfo = {\n                      [MEAL_TYPES.BREAKFAST]: { time: '7:00 AM - 9:00 AM', lastOrder: '8:30 AM' },\n                      [MEAL_TYPES.LUNCH]: { time: '12:00 PM - 2:00 PM', lastOrder: '1:30 PM' },\n                      [MEAL_TYPES.DINNER]: { time: '6:00 PM - 8:00 PM', lastOrder: '7:30 PM' },\n                      [MEAL_TYPES.SNACKS]: { time: '3:00 PM - 5:00 PM', lastOrder: '4:30 PM' },\n                    };\n                    \n                    const timing = timingInfo[activecat.mealType];\n                    \n                    return timing ? (\n                      <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n                        <div className=\"flex items-center mb-2\">\n                          <Clock className=\"h-4 w-4 text-blue-500 mr-2\" />\n                          <span className=\"font-semibold text-sm text-gray-900\">Timings</span>\n                        </div>\n                        <div className=\"space-y-1 text-xs\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Available:</span>\n                            <span className=\"font-medium text-gray-900\">{timing.time}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-gray-600\">Last order:</span>\n                            <span className=\"font-medium text-amber-700\">{timing.lastOrder}</span>\n                          </div>\n                        </div>\n                      </div>\n                    ) : null;\n                  })()}\n\n                  {/* Student compatibility */}\n                  <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n                    <div className=\"flex items-center mb-2\">\n                      <Users className=\"h-4 w-4 text-green-500 mr-2\" />\n                      <span className=\"font-semibold text-sm text-gray-900\">Your Profile</span>\n                    </div>\n                    <div className=\"space-y-2\">\n                      {activecat.gradeFilters && activecat.gradeFilters.includes(student.grade) ? (\n                        <div className=\"flex items-center text-xs text-green-700\">\n                          <CheckCircle className=\"h-3 w-3 mr-1.5\" />\n                          Perfect for Grade {student.grade}\n                        </div>\n                      ) : (\n                        <div className=\"flex items-center text-xs text-gray-600\">\n                          <Users className=\"h-3 w-3 mr-1.5\" />\n                          Available for all grades\n                        </div>\n                      )}\n                      \n                      {/* Dietary compatibility indicator */}\n                      {activecat.dietaryFilters && student.dietaryPreferences.length > 0 && (\n                        (() => {\n                          const compatibleDiets = activecat.dietaryFilters.filter(diet =>\n                            student.dietaryPreferences.includes(diet)\n                          );\n                          \n                          return compatibleDiets.length > 0 ? (\n                            <div className=\"flex items-center text-xs text-green-700\">\n                              <CheckCircle className=\"h-3 w-3 mr-1.5\" />\n                              {compatibleDiets.length} compatible diet{compatibleDiets.length > 1 ? 's' : ''}\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center text-xs text-gray-600\">\n                              <AlertTriangle className=\"h-3 w-3 mr-1.5\" />\n                              Check individual meals for dietary compatibility\n                            </div>\n                          );\n                        })()\n                      )}\n                    </div>\n                  </div>\n\n                  {/* Category features */}\n                  <div className=\"bg-white rounded-lg p-4 shadow-sm\">\n                    <div className=\"flex items-center mb-2\">\n                      <span className=\"text-lg mr-2\">{categoryInfo.icon}</span>\n                      <span className=\"font-semibold text-sm text-gray-900\">Features</span>\n                    </div>\n                    <div className=\"space-y-1\">\n\n                      {/* Special features based on meal type */}\n                      {activecat.mealType === MEAL_TYPES.BREAKFAST && (\n                        <div className=\"text-xs text-gray-700 flex items-center\">\n                          <span className=\"mr-2\">🏃‍♂️</span>\n                          Perfect energy boost to start your day\n                        </div>\n                      )}\n                      \n                      {activecat.mealType === MEAL_TYPES.LUNCH && (\n                        <div className=\"text-xs text-gray-700 flex items-center\">\n                          <span className=\"mr-2\">💪</span>\n                          Complete nutrition for active learning\n                        </div>\n                      )}\n                      \n                      {activecat.mealType === MEAL_TYPES.SNACKS && (\n                        <div className=\"text-xs text-gray-700 flex items-center\">\n                          <span className=\"mr-2\">⚡</span>\n                          Quick bites between classes\n                        </div>\n                      )}\n                      \n                      {activecat.mealType === MEAL_TYPES.DINNER && (\n                        <div className=\"text-xs text-gray-700 flex items-center\">\n                          <span className=\"mr-2\">😴</span>\n                          Light & healthy evening meals\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Important alerts and notifications */}\n                <div className=\"space-y-3\">\n                  {/* Allergy warning */}\n                  {student.allergies.length > 0 && (\n                    <Alert className=\"border-amber-200 bg-amber-50\">\n                      <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n                      <AlertDescription className=\"text-amber-800\">\n                        <span className=\"font-semibold\">Allergy Alert:</span> Remember to check allergen information for items in this category.\n                        Your profile shows allergies to: <span className=\"font-medium\">{student.allergies.join(', ')}</span>.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* Wallet balance warning */}\n                  {student.walletBalance < 100 && activecat.mealType === MEAL_TYPES.LUNCH && (\n                    <Alert className=\"border-orange-200 bg-orange-50\">\n                      <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                      <AlertDescription className=\"text-orange-800\">\n                        <span className=\"font-semibold\">Low Balance:</span> Your wallet balance is low (₹{student.walletBalance}). \n                        Consider topping up for lunch orders.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* Parent approval reminder */}\n                  {student.parentApprovalRequired && (\n                    <Alert className=\"border-blue-200 bg-blue-50\">\n                      <Users className=\"h-4 w-4 text-blue-600\" />\n                      <AlertDescription className=\"text-blue-800\">\n                        <span className=\"font-semibold\">Parent Approval Required:</span> Orders will be sent to your parent for approval before processing.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n\n                  {/* Low grade students reminder */}\n                  {student.grade <= 5 && (\n                    <Alert className=\"border-purple-200 bg-purple-50\">\n                      <CheckCircle className=\"h-4 w-4 text-purple-600\" />\n                      <AlertDescription className=\"text-purple-800\">\n                        <span className=\"font-semibold\">Grade {student.grade} Special Care:</span> All your orders automatically require parent approval for your safety.\n                      </AlertDescription>\n                    </Alert>\n                  )}\n                </div>\n              </div>\n            );\n          })()}\n        </div>\n      )}\n\n      {/* Add scroll hint for mobile */}\n      <style jsx global>{`\n        .scrollbar-hide {\n          -ms-overflow-style: none;\n          scrollbar-width: none;\n        }\n        .scrollbar-hide::-webkit-scrollbar {\n          display: none;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default CategoryTabs;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/EnhancedMealList.tsx",["2072","2073","2074","2075","2076","2077"],[],"/**\n * Enhanced Meal List Component\n * Uses ScrollArea for smooth scrolling of meal items with nutritional previews\n */\n\n\"use client\"\n\nimport React, { useState, useMemo, useCallback } from 'react'\nimport { ScrollArea } from '@/components/ui/scroll-area'\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card'\nimport { ToggleGroup, ToggleGroupItem } from '@/components/ui/toggle-group'\nimport { Slider } from '@/components/ui/slider'\nimport { Badge } from '@/components/ui/badge'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { \n  Search, \n  Filter, \n  Star, \n  Clock, \n  Users, \n  Leaf, \n  AlertTriangle,\n  Plus,\n  Minus,\n  Info,\n  Heart,\n  Utensils\n} from 'lucide-react'\nimport { toast } from 'sonner'\n\nimport type { \n  MealItem, \n  StudentInfo, \n  DietaryPreference, \n  SpiceLevel,\n  MealType \n} from './types'\n\ninterface EnhancedMealListProps {\n  meals: MealItem[]\n  student: StudentInfo\n  onAddToCart: (meal: MealItem, quantity: number) => void\n  onViewDetails: (meal: MealItem) => void\n  cartItems: { [mealId: string]: number }\n  className?: string\n}\n\ninterface FilterOptions {\n  priceRange: [number, number]\n  dietaryPreferences: DietaryPreference[]\n  spiceLevel: SpiceLevel[]\n  categories: MealType[]\n  maxCalories?: number\n  isGlutenFree?: boolean\n  isDiabeticFriendly?: boolean\n  showAvailableOnly: boolean\n}\n\nconst DIETARY_ICONS: Record<DietaryPreference, { icon: React.ReactNode; color: string }> = {\n  vegetarian: { icon: <Leaf className=\"w-3 h-3\" />, color: 'bg-green-100 text-green-800' },\n  vegan: { icon: <Leaf className=\"w-3 h-3\" />, color: 'bg-green-200 text-green-900' },\n  'non-vegetarian': { icon: <Utensils className=\"w-3 h-3\" />, color: 'bg-red-100 text-red-800' },\n  jain: { icon: <Heart className=\"w-3 h-3\" />, color: 'bg-orange-100 text-orange-800' },\n  eggetarian: { icon: <Utensils className=\"w-3 h-3\" />, color: 'bg-yellow-100 text-yellow-800' }\n}\n\nconst SPICE_LEVEL_COLORS: Record<SpiceLevel, string> = {\n  mild: 'bg-green-100 text-green-800',\n  medium: 'bg-yellow-100 text-yellow-800',\n  spicy: 'bg-orange-100 text-orange-800',\n  'very-spicy': 'bg-red-100 text-red-800'\n}\n\nexport function EnhancedMealList({ \n  meals, \n  student, \n  onAddToCart, \n  onViewDetails,\n  cartItems,\n  className \n}: EnhancedMealListProps) {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [showFilters, setShowFilters] = useState(false)\n  const [filters, setFilters] = useState<FilterOptions>({\n    priceRange: [0, 500],\n    dietaryPreferences: [],\n    spiceLevel: [],\n    categories: [],\n    showAvailableOnly: true\n  })\n\n  // Calculate price range from available meals\n  const priceRange = useMemo(() => {\n    const prices = meals.map(meal => meal.price)\n    return [Math.min(...prices), Math.max(...prices)]\n  }, [meals])\n\n  // Filter meals based on search and filters\n  const filteredMeals = useMemo(() => {\n    return meals.filter(meal => {\n      // Search filter\n      if (searchTerm && !meal.name.toLowerCase().includes(searchTerm.toLowerCase()) &&\n          !meal.description.toLowerCase().includes(searchTerm.toLowerCase()) &&\n          !meal.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))) {\n        return false\n      }\n\n      // Price range filter\n      if (meal.price < filters.priceRange[0] || meal.price > filters.priceRange[1]) {\n        return false\n      }\n\n      // Dietary preference filter\n      if (filters.dietaryPreferences.length > 0 && \n          !filters.dietaryPreferences.includes(meal.dietaryType)) {\n        return false\n      }\n\n      // Spice level filter\n      if (filters.spiceLevel.length > 0 && \n          !filters.spiceLevel.includes(meal.spiceLevel)) {\n        return false\n      }\n\n      // Category filter\n      if (filters.categories.length > 0 && \n          !filters.categories.includes(meal.category)) {\n        return false\n      }\n\n      // Availability filter\n      if (filters.showAvailableOnly && !meal.isAvailable) {\n        return false\n      }\n\n      // Calorie filter\n      if (filters.maxCalories && meal.nutritionalInfo.calories > filters.maxCalories) {\n        return false\n      }\n\n      // Dietary restrictions\n      if (filters.isGlutenFree && !meal.isGlutenFree) {\n        return false\n      }\n\n      if (filters.isDiabeticFriendly && !meal.isDiabeticFriendly) {\n        return false\n      }\n\n      return true\n    })\n  }, [meals, searchTerm, filters])\n\n  const handleAddToCart = useCallback((meal: MealItem) => {\n    const currentQuantity = cartItems[meal.id] || 0\n    if (currentQuantity < meal.maxQuantityPerStudent) {\n      onAddToCart(meal, 1)\n      toast.success(`${meal.name} added to cart`)\n    } else {\n      toast.error(`Maximum ${meal.maxQuantityPerStudent} allowed per student`)\n    }\n  }, [cartItems, onAddToCart])\n\n  const handleRemoveFromCart = useCallback((meal: MealItem) => {\n    const currentQuantity = cartItems[meal.id] || 0\n    if (currentQuantity > 0) {\n      onAddToCart(meal, -1)\n      toast.success(`${meal.name} removed from cart`)\n    }\n  }, [cartItems, onAddToCart])\n\n  const NutritionalPreview = ({ meal }: { meal: MealItem }) => (\n    <div className=\"space-y-2\">\n      <div className=\"flex items-center justify-between\">\n        <h4 className=\"font-semibold text-sm\">{meal.name}</h4>\n        <Badge variant=\"secondary\" className=\"text-xs\">\n          ₹{meal.price}\n        </Badge>\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n        <div className=\"space-y-1\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Calories:</span>\n            <span className=\"font-medium\">{meal.nutritionalInfo.calories}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Protein:</span>\n            <span className=\"font-medium\">{meal.nutritionalInfo.protein}g</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Carbs:</span>\n            <span className=\"font-medium\">{meal.nutritionalInfo.carbohydrates}g</span>\n          </div>\n        </div>\n        <div className=\"space-y-1\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Fat:</span>\n            <span className=\"font-medium\">{meal.nutritionalInfo.fat}g</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Fiber:</span>\n            <span className=\"font-medium\">{meal.nutritionalInfo.fiber}g</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Prep Time:</span>\n            <span className=\"font-medium\">{meal.preparationTime}m</span>\n          </div>\n        </div>\n      </div>\n\n      {meal.allergens.length > 0 && (\n        <div className=\"pt-2 border-t\">\n          <div className=\"flex items-center gap-1 text-xs text-orange-600\">\n            <AlertTriangle className=\"w-3 h-3\" />\n            <span>Contains: {meal.allergens.join(', ')}</span>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n\n  const MealCard = ({ meal }: { meal: MealItem }) => {\n    const cartQuantity = cartItems[meal.id] || 0\n    const isInCart = cartQuantity > 0\n    const canAddMore = cartQuantity < meal.maxQuantityPerStudent\n    const isAvailable = meal.isAvailable\n\n    return (\n      <Card className={`group transition-all duration-200 hover:shadow-md ${\n        !isAvailable ? 'opacity-60' : ''\n      }`}>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start gap-3\">\n            {/* Meal Image */}\n            <div className=\"relative w-16 h-16 rounded-lg overflow-hidden bg-gray-100 flex-shrink-0\">\n              <img \n                src={meal.imageUrl} \n                alt={meal.name}\n                className=\"w-full h-full object-cover\"\n                loading=\"lazy\"\n              />\n              {!isAvailable && (\n                <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                  <span className=\"text-white text-xs font-medium\">Out of Stock</span>\n                </div>\n              )}\n            </div>\n\n            {/* Meal Info */}\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-start justify-between mb-1\">\n                <HoverCard>\n                  <HoverCardTrigger asChild>\n                    <h3 className=\"font-medium text-sm leading-tight cursor-pointer hover:text-primary-600 transition-colors\">\n                      {meal.name}\n                    </h3>\n                  </HoverCardTrigger>\n                  <HoverCardContent className=\"w-80\">\n                    <NutritionalPreview meal={meal} />\n                  </HoverCardContent>\n                </HoverCard>\n                \n                <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                  <Star className=\"w-3 h-3 fill-yellow-400 text-yellow-400\" />\n                  <span>{meal.rating.toFixed(1)}</span>\n                </div>\n              </div>\n\n              <p className=\"text-xs text-gray-600 line-clamp-2 mb-2\">\n                {meal.description}\n              </p>\n\n              {/* Tags and Dietary Info */}\n              <div className=\"flex items-center gap-1 mb-2 flex-wrap\">\n                <Badge \n                  variant=\"outline\" \n                  className={`text-xs px-1.5 py-0.5 ${DIETARY_ICONS[meal.dietaryType].color}`}\n                >\n                  {DIETARY_ICONS[meal.dietaryType].icon}\n                  <span className=\"ml-1 capitalize\">{meal.dietaryType}</span>\n                </Badge>\n                \n                <Badge \n                  variant=\"outline\" \n                  className={`text-xs px-1.5 py-0.5 ${SPICE_LEVEL_COLORS[meal.spiceLevel]}`}\n                >\n                  {meal.spiceLevel}\n                </Badge>\n\n                {meal.isGlutenFree && (\n                  <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 bg-blue-100 text-blue-800\">\n                    Gluten Free\n                  </Badge>\n                )}\n              </div>\n\n              {/* Price and Actions */}\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-semibold text-primary-600\">₹{meal.price}</span>\n                  {meal.originalPrice && meal.originalPrice > meal.price && (\n                    <span className=\"text-xs text-gray-500 line-through\">₹{meal.originalPrice}</span>\n                  )}\n                  <div className=\"flex items-center gap-1 text-xs text-gray-500\">\n                    <Clock className=\"w-3 h-3\" />\n                    <span>{meal.preparationTime}m</span>\n                  </div>\n                </div>\n\n                {/* Cart Controls */}\n                <div className=\"flex items-center gap-2\">\n                  {isInCart ? (\n                    <div className=\"flex items-center gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => handleRemoveFromCart(meal)}\n                        disabled={!isAvailable}\n                      >\n                        <Minus className=\"w-3 h-3\" />\n                      </Button>\n                      <span className=\"text-sm font-medium min-w-[1.5rem] text-center\">\n                        {cartQuantity}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"h-6 w-6 p-0\"\n                        onClick={() => handleAddToCart(meal)}\n                        disabled={!canAddMore || !isAvailable}\n                      >\n                        <Plus className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  ) : (\n                    <Button\n                      size=\"sm\"\n                      className=\"h-6 px-2 text-xs\"\n                      onClick={() => handleAddToCart(meal)}\n                      disabled={!isAvailable}\n                    >\n                      <Plus className=\"w-3 h-3 mr-1\" />\n                      Add\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <div className={className}>\n      {/* Search and Filter Header */}\n      <div className=\"space-y-3 mb-4\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search meals, ingredients, or tags...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 text-mobile-optimized\"\n            />\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setShowFilters(!showFilters)}\n            className={`${showFilters ? 'bg-primary-50 border-primary-300' : ''}`}\n          >\n            <Filter className=\"w-4 h-4 mr-1\" />\n            Filters\n          </Button>\n        </div>\n\n        {/* Quick Filter Toggles */}\n        <div className=\"flex items-center gap-2 overflow-x-auto pb-2 scrollbar-none\">\n          <ToggleGroup \n            type=\"multiple\" \n            value={filters.dietaryPreferences}\n            onValueChange={(values) => \n              setFilters(prev => ({ ...prev, dietaryPreferences: values as DietaryPreference[] }))\n            }\n            className=\"flex-shrink-0\"\n          >\n            <ToggleGroupItem value=\"vegetarian\" size=\"sm\">\n              <Leaf className=\"w-3 h-3 mr-1\" />\n              Veg\n            </ToggleGroupItem>\n            <ToggleGroupItem value=\"vegan\" size=\"sm\">\n              <Leaf className=\"w-3 h-3 mr-1\" />\n              Vegan\n            </ToggleGroupItem>\n            <ToggleGroupItem value=\"jain\" size=\"sm\">\n              <Heart className=\"w-3 h-3 mr-1\" />\n              Jain\n            </ToggleGroupItem>\n          </ToggleGroup>\n\n          <div className=\"w-px h-6 bg-gray-300\" />\n\n          <ToggleGroup\n            type=\"single\"\n            value={filters.showAvailableOnly ? \"available\" : \"\"}\n            onValueChange={(value) => \n              setFilters(prev => ({ ...prev, showAvailableOnly: value === \"available\" }))\n            }\n          >\n            <ToggleGroupItem value=\"available\" size=\"sm\">\n              Available Only\n            </ToggleGroupItem>\n          </ToggleGroup>\n        </div>\n\n        {/* Advanced Filters */}\n        {showFilters && (\n          <Card className=\"p-4 space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">\n                Price Range: ₹{filters.priceRange[0]} - ₹{filters.priceRange[1]}\n              </label>\n              <Slider\n                value={filters.priceRange}\n                onValueChange={(value) => \n                  setFilters(prev => ({ ...prev, priceRange: value as [number, number] }))\n                }\n                max={priceRange[1]}\n                min={priceRange[0]}\n                step={10}\n                className=\"w-full\"\n              />\n            </div>\n\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Spice Level</label>\n              <ToggleGroup \n                type=\"multiple\" \n                value={filters.spiceLevel}\n                onValueChange={(values) => \n                  setFilters(prev => ({ ...prev, spiceLevel: values as SpiceLevel[] }))\n                }\n              >\n                <ToggleGroupItem value=\"mild\" size=\"sm\">Mild</ToggleGroupItem>\n                <ToggleGroupItem value=\"medium\" size=\"sm\">Medium</ToggleGroupItem>\n                <ToggleGroupItem value=\"spicy\" size=\"sm\">Spicy</ToggleGroupItem>\n                <ToggleGroupItem value=\"very-spicy\" size=\"sm\">Very Spicy</ToggleGroupItem>\n              </ToggleGroup>\n            </div>\n\n            <div className=\"flex gap-4\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setFilters({\n                  priceRange: priceRange as [number, number],\n                  dietaryPreferences: [],\n                  spiceLevel: [],\n                  categories: [],\n                  showAvailableOnly: true\n                })}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </Card>\n        )}\n      </div>\n\n      {/* Results Info */}\n      <div className=\"flex items-center justify-between mb-3 text-sm text-gray-600\">\n        <span>{filteredMeals.length} meals found</span>\n        {searchTerm && (\n          <span>for \"{searchTerm}\"</span>\n        )}\n      </div>\n\n      {/* Meals List */}\n      <ScrollArea className=\"h-[calc(100vh-300px)] pr-4\">\n        <div className=\"space-y-3\">\n          {filteredMeals.length > 0 ? (\n            filteredMeals.map((meal) => (\n              <MealCard key={meal.id} meal={meal} />\n            ))\n          ) : (\n            <Card className=\"p-8 text-center\">\n              <div className=\"text-gray-500\">\n                <Users className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n                <h3 className=\"font-medium mb-2\">No meals found</h3>\n                <p className=\"text-sm\">Try adjusting your search or filters</p>\n              </div>\n            </Card>\n          )}\n        </div>\n      </ScrollArea>\n    </div>\n  )\n}\n\nexport default EnhancedMealList","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/EnhancedMealOrderingDemo.tsx",["2078","2079","2080","2081"],[],"/**\n * Enhanced Meal Ordering Demo Component\n * Comprehensive demonstration of all new ShadCN components working together\n */\n\n\"use client\"\n\nimport React, { useState, useCallback, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { Separator } from '@/components/ui/separator'\nimport { toast } from 'sonner'\n\n// Import our new enhanced components\nimport EnhancedMealList from './EnhancedMealList'\nimport QuantitySelector from './QuantitySelector'\nimport RFIDVerification from './RFIDVerification'\nimport NotificationSystem, { notificationService } from './NotificationSystem'\n\nimport type { \n  MealItem, \n  StudentInfo, \n  OrderHistoryItem, \n  RFIDPickupInfo,\n  OrderSummary \n} from './types'\n\n// Mock data for demonstration\nconst mockStudent: StudentInfo = {\n  id: 'STU-001',\n  name: 'Arjun Patel',\n  grade: 8,\n  section: 'A',\n  rfidCardId: '123456',\n  dietaryPreferences: ['vegetarian'],\n  allergies: [],\n  canOrderWithoutApproval: true,\n  maxDailySpend: 500,\n  parentApprovalRequired: false,\n  schoolId: 'SCH-001',\n  rollNumber: '23A001',\n  walletBalance: 350.75,\n  hasActiveMealPlan: true,\n  mealPlanType: 'premium'\n}\n\nconst mockMeals: MealItem[] = [\n  {\n    id: 'MEAL-001',\n    name: 'Paneer Butter Masala',\n    description: 'Rich and creamy paneer curry with aromatic spices, served with naan bread',\n    category: 'lunch',\n    price: 85,\n    originalPrice: 95,\n    imageUrl: '/api/placeholder/120/120',\n    isAvailable: true,\n    preparationTime: 15,\n    servingSize: '1 portion',\n    dietaryType: 'vegetarian',\n    allergens: ['dairy'],\n    spiceLevel: 'medium',\n    isGlutenFree: false,\n    isDiabeticFriendly: false,\n    isJainFood: true,\n    nutritionalInfo: {\n      calories: 450,\n      protein: 18,\n      carbohydrates: 35,\n      fat: 28,\n      fiber: 4,\n      sugar: 8,\n      sodium: 850\n    },\n    gradeRestrictions: [6, 7, 8, 9, 10],\n    schoolApprovalRequired: false,\n    maxQuantityPerStudent: 3,\n    rating: 4.5,\n    totalRatings: 234,\n    tags: ['popular', 'protein-rich', 'comfort-food'],\n    availableFrom: '11:30',\n    availableTo: '14:30',\n    lastOrderTime: '14:00'\n  },\n  {\n    id: 'MEAL-002',\n    name: 'Chicken Biryani',\n    description: 'Fragrant basmati rice cooked with tender chicken pieces and aromatic spices',\n    category: 'lunch',\n    price: 120,\n    imageUrl: '/api/placeholder/120/120',\n    isAvailable: true,\n    preparationTime: 20,\n    servingSize: '1 portion',\n    dietaryType: 'non-vegetarian',\n    allergens: [],\n    spiceLevel: 'spicy',\n    isGlutenFree: true,\n    isDiabeticFriendly: false,\n    isJainFood: false,\n    nutritionalInfo: {\n      calories: 650,\n      protein: 35,\n      carbohydrates: 75,\n      fat: 18,\n      fiber: 3,\n      sugar: 5,\n      sodium: 1200\n    },\n    gradeRestrictions: [6, 7, 8, 9, 10],\n    schoolApprovalRequired: false,\n    maxQuantityPerStudent: 2,\n    rating: 4.8,\n    totalRatings: 456,\n    tags: ['premium', 'protein-rich', 'spicy'],\n    availableFrom: '12:00',\n    availableTo: '14:30',\n    lastOrderTime: '14:00'\n  },\n  {\n    id: 'MEAL-003',\n    name: 'Fresh Fruit Salad',\n    description: 'Seasonal fresh fruits with honey drizzle and mint leaves',\n    category: 'snack',\n    price: 45,\n    imageUrl: '/api/placeholder/120/120',\n    isAvailable: true,\n    preparationTime: 5,\n    servingSize: '1 bowl',\n    dietaryType: 'vegan',\n    allergens: [],\n    spiceLevel: 'mild',\n    isGlutenFree: true,\n    isDiabeticFriendly: true,\n    isJainFood: true,\n    nutritionalInfo: {\n      calories: 150,\n      protein: 2,\n      carbohydrates: 38,\n      fat: 1,\n      fiber: 6,\n      sugar: 32,\n      sodium: 5\n    },\n    gradeRestrictions: undefined,\n    schoolApprovalRequired: false,\n    maxQuantityPerStudent: 5,\n    rating: 4.2,\n    totalRatings: 123,\n    tags: ['healthy', 'refreshing', 'diabetic-friendly'],\n    availableFrom: '09:00',\n    availableTo: '17:00',\n    lastOrderTime: '16:30'\n  },\n  {\n    id: 'MEAL-004',\n    name: 'Masala Dosa',\n    description: 'Crispy South Indian crepe with spiced potato filling and coconut chutney',\n    category: 'breakfast',\n    price: 65,\n    imageUrl: '/api/placeholder/120/120',\n    isAvailable: false,\n    preparationTime: 12,\n    servingSize: '1 piece',\n    dietaryType: 'vegetarian',\n    allergens: [],\n    spiceLevel: 'medium',\n    isGlutenFree: false,\n    isDiabeticFriendly: false,\n    isJainFood: true,\n    nutritionalInfo: {\n      calories: 380,\n      protein: 12,\n      carbohydrates: 58,\n      fat: 12,\n      fiber: 5,\n      sugar: 4,\n      sodium: 650\n    },\n    gradeRestrictions: undefined,\n    schoolApprovalRequired: false,\n    maxQuantityPerStudent: 3,\n    rating: 4.6,\n    totalRatings: 189,\n    tags: ['traditional', 'south-indian', 'filling'],\n    availableFrom: '07:30',\n    availableTo: '10:30',\n    lastOrderTime: '10:00'\n  }\n]\n\nconst mockPendingOrders: OrderHistoryItem[] = [\n  {\n    orderId: 'ORD-12345',\n    date: new Date().toISOString(),\n    items: [\n      {\n        mealItem: mockMeals[0],\n        quantity: 2,\n        selectedDeliveryTime: '13:00',\n        specialInstructions: 'Less spicy please'\n      }\n    ],\n    total: 170,\n    status: 'ready',\n    rating: undefined\n  }\n]\n\nexport function EnhancedMealOrderingDemo() {\n  const [activeTab, setActiveTab] = useState('browse')\n  const [cartItems, setCartItems] = useState<{ [mealId: string]: number }>({})\n  const [selectedMeal, setSelectedMeal] = useState<MealItem | null>(null)\n  const [isRFIDVerifying, setIsRFIDVerifying] = useState(false)\n\n  // Calculate cart summary\n  const cartSummary = React.useMemo(() => {\n    let totalItems = 0\n    let totalAmount = 0\n    \n    Object.entries(cartItems).forEach(([mealId, quantity]) => {\n      const meal = mockMeals.find(m => m.id === mealId)\n      if (meal && quantity > 0) {\n        totalItems += quantity\n        totalAmount += meal.price * quantity\n      }\n    })\n    \n    return { totalItems, totalAmount }\n  }, [cartItems])\n\n  // Handle adding/removing items from cart\n  const handleCartUpdate = useCallback((meal: MealItem, quantityChange: number) => {\n    setCartItems(prev => {\n      const currentQuantity = prev[meal.id] || 0\n      const newQuantity = Math.max(0, currentQuantity + quantityChange)\n      \n      if (newQuantity === 0) {\n        const { [meal.id]: removed, ...rest } = prev\n        return rest\n      }\n      \n      return {\n        ...prev,\n        [meal.id]: newQuantity\n      }\n    })\n  }, [])\n\n  const handleMealSelect = useCallback((meal: MealItem) => {\n    setSelectedMeal(meal)\n    setActiveTab('quantity')\n  }, [])\n\n  const handleRFIDVerification = useCallback((rfidInfo: RFIDPickupInfo) => {\n    setIsRFIDVerifying(false)\n    notificationService.rfidVerification(true, rfidInfo.pickupLocation)\n    \n    // Simulate order completion\n    setTimeout(() => {\n      notificationService.orderStatusUpdate(rfidInfo.orderId, 'delivered')\n    }, 2000)\n  }, [])\n\n  const handleRFIDError = useCallback((error: string) => {\n    setIsRFIDVerifying(false)\n    notificationService.rfidVerification(false)\n  }, [])\n\n  const handlePlaceOrder = useCallback(() => {\n    if (cartSummary.totalItems === 0) {\n      toast.error('Please add items to cart first')\n      return\n    }\n    \n    if (cartSummary.totalAmount > mockStudent.walletBalance) {\n      notificationService.lowBalance(mockStudent.walletBalance, cartSummary.totalAmount)\n      return\n    }\n    \n    // Simulate order placement\n    const orderItems = Object.entries(cartItems)\n      .filter(([_, quantity]) => quantity > 0)\n      .map(([mealId, quantity]) => {\n        const meal = mockMeals.find(m => m.id === mealId)!\n        return meal.name\n      })\n    \n    notificationService.orderPlaced({\n      orderId: `ORD-${Date.now()}`,\n      items: orderItems,\n      total: cartSummary.totalAmount\n    })\n    \n    // Clear cart\n    setCartItems({})\n    \n    // Simulate order status updates\n    setTimeout(() => notificationService.orderStatusUpdate('ORD-12346', 'confirmed', '15 mins'), 3000)\n    setTimeout(() => notificationService.orderStatusUpdate('ORD-12346', 'preparing'), 8000)\n    setTimeout(() => notificationService.orderStatusUpdate('ORD-12346', 'ready'), 13000)\n  }, [cartItems, cartSummary])\n\n  // Demo notifications on mount\n  useEffect(() => {\n    const demoNotifications = () => {\n      setTimeout(() => {\n        notificationService.specialOffer(\n          'Lunch Special: 20% Off!',\n          'Get 20% off on all lunch items today',\n          'LUNCH20'\n        )\n      }, 3000)\n      \n      setTimeout(() => {\n        notificationService.mealRecommendation(\n          mockMeals[2],\n          'Perfect healthy snack for your afternoon break'\n        )\n      }, 6000)\n    }\n    \n    if (process.env.NODE_ENV === 'development') {\n      demoNotifications()\n    }\n  }, [])\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-4 space-y-6\">\n      {/* Initialize Notification System */}\n      <NotificationSystem student={mockStudent} />\n      \n      {/* Header */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <CardTitle className=\"flex items-center gap-2\">\n                Enhanced Meal Ordering System\n                <Badge variant=\"secondary\">Demo</Badge>\n              </CardTitle>\n              <CardDescription>\n                Demonstrating advanced ShadCN UI components for school food delivery\n              </CardDescription>\n            </div>\n            \n            {/* Cart Summary */}\n            <div className=\"text-right\">\n              <div className=\"text-sm text-gray-600\">Cart Summary</div>\n              <div className=\"font-semibold\">\n                {cartSummary.totalItems} items • ₹{cartSummary.totalAmount}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                Balance: ₹{mockStudent.walletBalance}\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Main Content */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"browse\">Browse Meals</TabsTrigger>\n          <TabsTrigger value=\"quantity\">Quantity Selection</TabsTrigger>\n          <TabsTrigger value=\"rfid\">RFID Verification</TabsTrigger>\n          <TabsTrigger value=\"features\">Component Features</TabsTrigger>\n        </TabsList>\n\n        {/* Browse Meals Tab */}\n        <TabsContent value=\"browse\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Enhanced Meal List with ScrollArea & Filters</CardTitle>\n              <CardDescription>\n                Scroll through meals with advanced filtering using ToggleGroup and Slider components.\n                Hover over meal names for nutritional information using HoverCard.\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <EnhancedMealList\n                meals={mockMeals}\n                student={mockStudent}\n                onAddToCart={handleCartUpdate}\n                onViewDetails={handleMealSelect}\n                cartItems={cartItems}\n                className=\"h-[600px]\"\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quantity Selection Tab */}\n        <TabsContent value=\"quantity\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Quantity Selector with Slider</CardTitle>\n                <CardDescription>\n                  Interactive quantity selection with price breakdown and bulk discounts\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                {selectedMeal ? (\n                  <QuantitySelector\n                    meal={selectedMeal}\n                    student={mockStudent}\n                    currentQuantity={cartItems[selectedMeal.id] || 0}\n                    onQuantityChange={(quantity) => {\n                      setCartItems(prev => ({\n                        ...prev,\n                        [selectedMeal.id]: quantity\n                      }))\n                    }}\n                  />\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <div className=\"text-sm\">Select a meal from the Browse tab to see quantity selection</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Cart Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n                <CardDescription>Review your selected items</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {Object.entries(cartItems).filter(([_, quantity]) => quantity > 0).length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {Object.entries(cartItems)\n                      .filter(([_, quantity]) => quantity > 0)\n                      .map(([mealId, quantity]) => {\n                        const meal = mockMeals.find(m => m.id === mealId)!\n                        return (\n                          <div key={mealId} className=\"flex items-center justify-between p-2 border rounded\">\n                            <div className=\"flex items-center gap-3\">\n                              <img \n                                src={meal.imageUrl} \n                                alt={meal.name}\n                                className=\"w-8 h-8 rounded object-cover\"\n                              />\n                              <div>\n                                <div className=\"font-medium text-sm\">{meal.name}</div>\n                                <div className=\"text-xs text-gray-600\">₹{meal.price} each</div>\n                              </div>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-sm font-medium\">×{quantity}</div>\n                              <div className=\"text-xs text-gray-600\">₹{meal.price * quantity}</div>\n                            </div>\n                          </div>\n                        )\n                      })\n                    }\n                    \n                    <Separator />\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Subtotal:</span>\n                        <span>₹{cartSummary.totalAmount}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Taxes (5%):</span>\n                        <span>₹{(cartSummary.totalAmount * 0.05).toFixed(2)}</span>\n                      </div>\n                      <div className=\"flex justify-between font-semibold border-t pt-2\">\n                        <span>Total:</span>\n                        <span>₹{(cartSummary.totalAmount * 1.05).toFixed(2)}</span>\n                      </div>\n                    </div>\n                    \n                    <Button \n                      onClick={handlePlaceOrder} \n                      className=\"w-full\"\n                      disabled={cartSummary.totalAmount > mockStudent.walletBalance}\n                    >\n                      Place Order\n                    </Button>\n                    \n                    {cartSummary.totalAmount > mockStudent.walletBalance && (\n                      <div className=\"text-sm text-red-600 text-center\">\n                        Insufficient balance. Add ₹{(cartSummary.totalAmount - mockStudent.walletBalance).toFixed(2)} to wallet.\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <div className=\"text-sm\">No items in cart</div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* RFID Verification Tab */}\n        <TabsContent value=\"rfid\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>RFID Verification with InputOTP</CardTitle>\n              <CardDescription>\n                Multi-step verification process using OTP inputs for RFID card, security code, and location verification\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <RFIDVerification\n                studentInfo={mockStudent}\n                pendingOrders={mockPendingOrders}\n                onVerificationComplete={handleRFIDVerification}\n                onVerificationFailed={handleRFIDError}\n                isScanning={isRFIDVerifying}\n              />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Features Tab */}\n        <TabsContent value=\"features\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">ScrollArea</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ Smooth scrolling meal lists</p>\n                  <p>✅ Custom scrollbar styling</p>\n                  <p>✅ Touch-friendly mobile scrolling</p>\n                  <p>✅ Nutritional information panels</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Slider</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ Quantity selection</p>\n                  <p>✅ Price range filtering</p>\n                  <p>✅ Responsive touch controls</p>\n                  <p>✅ Real-time price calculation</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Sonner Toasts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ Order status notifications</p>\n                  <p>✅ Payment confirmations</p>\n                  <p>✅ Special offers</p>\n                  <p>✅ Sound notifications</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">ToggleGroup</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ Dietary preference filters</p>\n                  <p>✅ Spice level selection</p>\n                  <p>✅ Multi-select options</p>\n                  <p>✅ Quick filter toggles</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">HoverCard</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ Meal nutritional previews</p>\n                  <p>✅ User information display</p>\n                  <p>✅ Quick details on hover</p>\n                  <p>✅ Mobile tap support</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">InputOTP</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm space-y-2\">\n                  <p>✅ RFID card verification</p>\n                  <p>✅ Security code entry</p>\n                  <p>✅ Location verification</p>\n                  <p>✅ Auto-advance on complete</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Accessibility Features</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Keyboard Navigation</h4>\n                  <ul className=\"space-y-1\">\n                    <li>• Tab navigation support</li>\n                    <li>• Arrow key slider control</li>\n                    <li>• Enter/Space activation</li>\n                    <li>• Focus management</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Screen Reader Support</h4>\n                  <ul className=\"space-y-1\">\n                    <li>• ARIA labels and descriptions</li>\n                    <li>• Live regions for notifications</li>\n                    <li>• Semantic HTML structure</li>\n                    <li>• Status announcements</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Mobile Accessibility</h4>\n                  <ul className=\"space-y-1\">\n                    <li>• Touch target sizing (44px min)</li>\n                    <li>• Gesture-friendly controls</li>\n                    <li>• High contrast support</li>\n                    <li>• Text size adaptation</li>\n                  </ul>\n                </div>\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Visual Indicators</h4>\n                  <ul className=\"space-y-1\">\n                    <li>• Focus ring visibility</li>\n                    <li>• Color contrast compliance</li>\n                    <li>• Loading state indicators</li>\n                    <li>• Error state messaging</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default EnhancedMealOrderingDemo","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealCard.tsx",["2082","2083","2084","2085"],[],"/**\n * MealCard Component - Enhanced Individual Meal Display Card\n * Displays meal information with add to cart functionality\n * Enhanced with better ShadCN patterns, mobile responsiveness, and accessibility\n */\n\nimport React, { useState, useCallback, useRef, useEffect } from 'react';\nimport Image from 'next/image';\nimport { \n  Star, \n  Clock, \n  Users, \n  AlertTriangle, \n  Plus, \n  Minus, \n  Info, \n  Heart,\n  Share2,\n  Zap,\n  Shield,\n  ShoppingCart\n} from 'lucide-react';\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { cn } from '@/lib/utils';\nimport type { MealCardProps, MealItem, StudentInfo } from './types';\nimport {\n  formatCurrency,\n  getDietaryInfo,\n  getAllergyInfo,\n  getSpiceLevelInfo,\n  isMealSuitableForStudent,\n  canOrderMeal,\n  getNutritionalScore,\n  formatTime,\n} from './utils';\n\nconst MealCard: React.FC<MealCardProps> = ({\n  meal,\n  student,\n  onAddToCart,\n  onViewDetails,\n  isInCart = false,\n  cartQuantity = 0,\n}) => {\n  const [quantity, setQuantity] = useState(1);\n  const [showDetails, setShowDetails] = useState(false);\n  const [isImageLoading, setIsImageLoading] = useState(true);\n  const [imageError, setImageError] = useState(false);\n  const [isPressed, setIsPressed] = useState(false);\n  const [swipeDirection, setSwipeDirection] = useState<'left' | 'right' | null>(null);\n  const touchStartX = useRef<number | null>(null);\n  const touchStartY = useRef<number | null>(null);\n  const cardRef = useRef<HTMLDivElement>(null);\n\n  const isSuitable = isMealSuitableForStudent(meal, student);\n  const canOrder = canOrderMeal(meal);\n  const dietaryInfo = getDietaryInfo(meal.dietaryType);\n  const spiceLevelInfo = getSpiceLevelInfo(meal.spiceLevel);\n  const nutritionalScore = getNutritionalScore(meal.nutritionalInfo);\n\n  const handleAddToCart = useCallback(() => {\n    onAddToCart(meal, quantity);\n    setQuantity(1);\n  }, [meal, quantity, onAddToCart]);\n\n  const handleQuantityChange = useCallback((change: number) => {\n    const newQuantity = Math.max(1, Math.min(meal.maxQuantityPerStudent, quantity + change));\n    setQuantity(newQuantity);\n  }, [meal.maxQuantityPerStudent, quantity]);\n\n  const handleImageLoad = useCallback(() => {\n    setIsImageLoading(false);\n  }, []);\n\n  const handleImageError = useCallback(() => {\n    setIsImageLoading(false);\n    setImageError(true);\n  }, []);\n\n  // Mobile touch handlers for enhanced interactions\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    const touch = e.touches[0];\n    touchStartX.current = touch.clientX;\n    touchStartY.current = touch.clientY;\n    setIsPressed(true);\n  }, []);\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!touchStartX.current || !touchStartY.current) return;\n    \n    const touch = e.touches[0];\n    const deltaX = touch.clientX - touchStartX.current;\n    const deltaY = touch.clientY - touchStartY.current;\n    \n    // Detect horizontal swipe (more horizontal than vertical movement)\n    if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > 50) {\n      if (deltaX > 0) {\n        setSwipeDirection('right');\n      } else {\n        setSwipeDirection('left');\n      }\n    }\n  }, []);\n\n  // Get meal availability status\n  const getAvailabilityStatus = () => {\n    if (!meal.isAvailable) return { status: 'unavailable', text: 'Not Available', color: 'bg-red-100 text-red-800' };\n    if (!canOrder) return { status: 'closed', text: 'Ordering Closed', color: 'bg-gray-100 text-gray-800' };\n    if (!isSuitable) return { status: 'unsuitable', text: 'Not Suitable', color: 'bg-yellow-100 text-yellow-800' };\n    return { status: 'available', text: 'Available', color: 'bg-green-100 text-green-800' };\n  };\n\n  // Get meal availability status\n  const availability = getAvailabilityStatus();\n\n  const handleTouchEnd = useCallback(() => {\n    setIsPressed(false);\n    \n    // Handle swipe actions\n    if (swipeDirection === 'right' && availability.status === 'available') {\n      // Swipe right to add to cart\n      if ('vibrate' in navigator) {\n        navigator.vibrate(50);\n      }\n      handleAddToCart();\n    } else if (swipeDirection === 'left') {\n      // Swipe left to view details\n      if ('vibrate' in navigator) {\n        navigator.vibrate(30);\n      }\n      setShowDetails(true);\n    }\n    \n    setSwipeDirection(null);\n    touchStartX.current = null;\n    touchStartY.current = null;\n  }, [swipeDirection, availability.status, handleAddToCart]);\n\n  // Haptic feedback for interactions\n  const handleHapticFeedback = useCallback((type: 'light' | 'medium' | 'heavy' = 'light') => {\n    if ('vibrate' in navigator) {\n      const patterns = {\n        light: 30,\n        medium: 50,\n        heavy: 100\n      };\n      navigator.vibrate(patterns[type]);\n    }\n  }, []);\n\n  // Enhanced add to cart with haptic feedback\n  const handleAddToCartWithFeedback = useCallback(() => {\n    handleHapticFeedback('medium');\n    handleAddToCart();\n  }, [handleAddToCart, handleHapticFeedback]);\n\n  // Enhanced quantity change with haptic feedback\n  const handleQuantityChangeWithFeedback = useCallback((change: number) => {\n    handleHapticFeedback('light');\n    handleQuantityChange(change);\n  }, [handleQuantityChange, handleHapticFeedback]);\n\n  // Enhanced add to cart with haptic feedback\n\n  return (\n    <Card \n      ref={cardRef}\n      className={cn(\n        'group relative transition-all duration-300 hover:shadow-xl hover:-translate-y-1',\n        'border-0 shadow-md bg-white touch-manipulation select-none',\n        'active:scale-[0.98] active:shadow-lg',\n        !isSuitable && 'opacity-60 grayscale',\n        isInCart && 'ring-2 ring-primary shadow-primary/20',\n        !canOrder && 'cursor-not-allowed',\n        isPressed && 'scale-[0.98] shadow-lg',\n        swipeDirection === 'right' && 'translate-x-2 bg-green-50',\n        swipeDirection === 'left' && '-translate-x-2 bg-blue-50'\n      )}\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n    >\n      <CardHeader className=\"p-0 relative overflow-hidden\">\n        <div className=\"relative aspect-video overflow-hidden\">\n          {/* Loading skeleton */}\n          {isImageLoading && (\n            <div className=\"absolute inset-0 bg-gradient-to-r from-gray-200 via-gray-300 to-gray-200 animate-pulse\" />\n          )}\n          \n          {/* Image */}\n          {!imageError ? (\n            <Image\n              src={meal.imageUrl}\n              alt={`${meal.name} - ${meal.description.slice(0, 50)}...`}\n              width={400}\n              height={200}\n              className={cn(\n                'w-full h-full object-cover transition-transform duration-300 group-hover:scale-105',\n                isImageLoading && 'opacity-0'\n              )}\n              onLoad={handleImageLoad}\n              onError={handleImageError}\n              priority={false}\n              sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n            />\n          ) : (\n            <div className=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n              <div className=\"text-gray-400 text-center\">\n                <div className=\"text-4xl mb-2\">🍽️</div>\n                <p className=\"text-sm\">Image unavailable</p>\n              </div>\n            </div>\n          )}\n          \n          {/* Gradient overlay for better text readability */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-transparent\" />\n          \n          {/* Availability Badge */}\n          <Badge \n            variant=\"secondary\"\n            className={cn(\n              'absolute top-3 right-3 font-medium backdrop-blur-sm',\n              availability.color,\n              'shadow-sm border-white/20'\n            )}\n          >\n            {availability.text}\n          </Badge>\n\n          {/* Discount Badge */}\n          {meal.originalPrice && meal.originalPrice > meal.price && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute top-3 left-3 font-bold backdrop-blur-sm shadow-sm animate-pulse\"\n            >\n              <Zap className=\"w-3 h-3 mr-1\" />\n              {Math.round(((meal.originalPrice - meal.price) / meal.originalPrice) * 100)}% OFF\n            </Badge>\n          )}\n\n          {/* Dietary Type Indicator */}\n          <div className=\"absolute bottom-3 left-3\">\n            <Badge \n              variant=\"outline\" \n              className={cn(\n                'bg-white/95 backdrop-blur-sm shadow-sm border-white/50',\n                `text-${dietaryInfo.color}-700 hover:bg-${dietaryInfo.color}-50`\n              )}\n            >\n              <span className=\"mr-1.5 text-sm\" role=\"img\" aria-label={dietaryInfo.label}>\n                {dietaryInfo.icon}\n              </span>\n              <span className=\"font-medium text-xs\">{dietaryInfo.label}</span>\n            </Badge>\n          </div>\n\n          {/* Quick action buttons - Mobile optimized */}\n          <div className=\"absolute bottom-3 right-3 opacity-0 group-hover:opacity-100 md:opacity-100 transition-opacity duration-200 flex space-x-1\">\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              className=\"h-10 w-10 p-0 backdrop-blur-sm bg-white/90 hover:bg-white touch-manipulation\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleHapticFeedback('light');\n                // Add to favorites logic\n              }}\n              aria-label=\"Add to favorites\"\n            >\n              <Heart className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"secondary\"\n              className=\"h-10 w-10 p-0 backdrop-blur-sm bg-white/90 hover:bg-white touch-manipulation\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleHapticFeedback('light');\n                // Share meal logic\n              }}\n              aria-label=\"Share meal\"\n            >\n              <Share2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          {/* Swipe hint indicator for mobile */}\n          <div className=\"absolute top-3 left-1/2 transform -translate-x-1/2 md:hidden\">\n            <div className=\"bg-black/60 text-white text-xs px-2 py-1 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n              ← Swipe for details • Swipe for cart →\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"p-3 sm:p-4 lg:p-5\">\n        <div className=\"space-y-4\">\n          {/* Meal Title and Rating */}\n          <div className=\"flex justify-between items-start gap-3\">\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-semibold text-lg leading-tight text-gray-900 group-hover:text-primary transition-colors\">\n                {meal.name}\n              </h3>\n              <p className=\"text-sm text-gray-600 mt-1.5 line-clamp-2 leading-relaxed\">\n                {meal.description}\n              </p>\n            </div>\n            <div className=\"flex items-center shrink-0 bg-yellow-50 px-2 py-1 rounded-full\">\n              <Star className=\"h-3.5 w-3.5 fill-yellow-400 text-yellow-400\" />\n              <span className=\"text-sm font-semibold ml-1 text-gray-900\">{meal.rating.toFixed(1)}</span>\n              <span className=\"text-xs text-gray-500 ml-1\">({meal.totalRatings})</span>\n            </div>\n          </div>\n\n          {/* Price */}\n          <div className=\"flex items-baseline space-x-2\">\n            <span className=\"text-2xl font-bold text-primary\">\n              {formatCurrency(meal.price)}\n            </span>\n            {meal.originalPrice && meal.originalPrice > meal.price && (\n              <span className=\"text-sm text-gray-500 line-through\">\n                {formatCurrency(meal.originalPrice)}\n              </span>\n            )}\n            <span className=\"text-xs text-gray-500 font-medium\">per {meal.servingSize}</span>\n          </div>\n\n          {/* Key Information */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex flex-wrap items-center gap-2 text-xs text-gray-600\">\n              <div className=\"flex items-center bg-gray-50 px-2 py-1.5 rounded-md min-h-[32px] touch-manipulation\">\n                <Clock className=\"h-3 w-3 mr-1.5 text-gray-500 shrink-0\" />\n                <span className=\"font-medium whitespace-nowrap\">{meal.preparationTime}m</span>\n              </div>\n              <div className=\"flex items-center bg-gray-50 px-2 py-1.5 rounded-md min-h-[32px] touch-manipulation\">\n                <Users className=\"h-3 w-3 mr-1.5 text-gray-500 shrink-0\" />\n                <span className=\"font-medium whitespace-nowrap\">{meal.servingSize}</span>\n              </div>\n              {spiceLevelInfo.intensity > 0 && (\n                <div className=\"flex items-center bg-red-50 px-2 py-1.5 rounded-md min-h-[32px] touch-manipulation\">\n                  <span className=\"mr-1.5 text-xs shrink-0\">{spiceLevelInfo.icon}</span>\n                  <span className=\"font-medium text-red-700 whitespace-nowrap\">{spiceLevelInfo.label}</span>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Nutritional Score */}\n          {nutritionalScore > 0 && (\n            <div className=\"bg-gray-50 rounded-lg p-3\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-4 w-4 text-gray-500 mr-1.5\" />\n                  <span className=\"text-xs font-medium text-gray-700\">Nutrition Score</span>\n                </div>\n                <span className={cn(\n                  'text-xs font-bold px-2 py-1 rounded-full',\n                  nutritionalScore >= 80 ? 'bg-green-100 text-green-800' :\n                  nutritionalScore >= 60 ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'\n                )}>\n                  {nutritionalScore}/100\n                </span>\n              </div>\n              <div className=\"w-full h-2 bg-gray-200 rounded-full overflow-hidden\">\n                <div \n                  className={cn(\n                    'h-full rounded-full transition-all duration-500',\n                    nutritionalScore >= 80 ? 'bg-green-500' :\n                    nutritionalScore >= 60 ? 'bg-yellow-500' : 'bg-red-500'\n                  )}\n                  style={{ width: `${nutritionalScore}%` }}\n                />\n              </div>\n            </div>\n          )}\n\n          {/* Allergen Warnings */}\n          {meal.allergens.length > 0 && (\n            <div className=\"bg-orange-50 border border-orange-200 rounded-lg p-3\">\n              <div className=\"flex items-start space-x-2\">\n                <AlertTriangle className=\"h-4 w-4 text-orange-500 shrink-0 mt-0.5\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-xs font-medium text-orange-800 mb-1\">Allergen Warning</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {meal.allergens.map(allergen => {\n                      const allergyInfo = getAllergyInfo(allergen);\n                      return (\n                        <Badge \n                          key={allergen} \n                          variant=\"outline\" \n                          className=\"text-xs bg-white border-orange-300 text-orange-700\"\n                        >\n                          <span className=\"mr-1\">{allergyInfo.icon}</span>\n                          {allergyInfo.label.replace('Contains ', '')}\n                        </Badge>\n                      );\n                    })}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Special Indicators */}\n          <div className=\"flex flex-wrap gap-1.5\">\n            {meal.isGlutenFree && (\n              <Badge variant=\"outline\" className=\"text-xs bg-green-50 border-green-300 text-green-700\">\n                🌾 Gluten-Free\n              </Badge>\n            )}\n            {meal.isDiabeticFriendly && (\n              <Badge variant=\"outline\" className=\"text-xs bg-blue-50 border-blue-300 text-blue-700\">\n                💙 Diabetic-Friendly\n              </Badge>\n            )}\n            {meal.isJainFood && (\n              <Badge variant=\"outline\" className=\"text-xs bg-yellow-50 border-yellow-300 text-yellow-700\">\n                🗺️ Jain\n              </Badge>\n            )}\n            {meal.schoolApprovalRequired && (\n              <Badge variant=\"outline\" className=\"text-xs bg-purple-50 border-purple-300 text-purple-700\">\n                ✓ School Approved\n              </Badge>\n            )}\n          </div>\n\n          {/* Availability Time */}\n          <div className=\"bg-gray-50 rounded-lg p-3 text-xs\">\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2\">\n              <div className=\"flex items-center text-gray-600\">\n                <Clock className=\"h-3 w-3 mr-1.5 text-gray-500\" />\n                <span>\n                  <span className=\"font-medium\">Available:</span>\n                  <br className=\"sm:hidden\" />\n                  <span className=\"sm:ml-1\">{formatTime(meal.availableFrom)} - {formatTime(meal.availableTo)}</span>\n                </span>\n              </div>\n              <div className=\"flex items-center text-gray-600\">\n                <AlertTriangle className=\"h-3 w-3 mr-1.5 text-amber-500\" />\n                <span>\n                  <span className=\"font-medium\">Last order:</span>\n                  <br className=\"sm:hidden\" />\n                  <span className=\"sm:ml-1 font-semibold text-amber-700\">{formatTime(meal.lastOrderTime)}</span>\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"p-3 sm:p-4 lg:p-5 pt-0\">\n        <div className=\"w-full space-y-3\">\n          {/* Quantity Selector and Add Button */}\n          {availability.status === 'available' && (\n            <div className=\"flex flex-col sm:flex-row items-stretch sm:items-center gap-3\">\n              <div className=\"flex items-center space-x-3\">\n                <Label htmlFor={`quantity-${meal.id}`} className=\"text-sm font-medium text-gray-700\">\n                  Quantity:\n                </Label>\n                <div className=\"flex items-center border-2 rounded-lg bg-white shadow-sm\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleQuantityChangeWithFeedback(-1)}\n                    disabled={quantity <= 1}\n                    className=\"h-11 w-11 p-0 hover:bg-gray-50 disabled:opacity-50 touch-manipulation active:scale-95\"\n                    aria-label=\"Decrease quantity\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <span \n                    id={`quantity-${meal.id}`}\n                    className=\"px-4 py-3 text-base font-bold min-w-[3.5rem] text-center select-none\"\n                    role=\"spinbutton\"\n                    aria-valuenow={quantity}\n                    aria-valuemin={1}\n                    aria-valuemax={meal.maxQuantityPerStudent}\n                  >\n                    {quantity}\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => handleQuantityChangeWithFeedback(1)}\n                    disabled={quantity >= meal.maxQuantityPerStudent}\n                    className=\"h-11 w-11 p-0 hover:bg-gray-50 disabled:opacity-50 touch-manipulation active:scale-95\"\n                    aria-label=\"Increase quantity\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                {meal.maxQuantityPerStudent > 1 && (\n                  <span className=\"text-xs text-gray-500\">\n                    Max: {meal.maxQuantityPerStudent}\n                  </span>\n                )}\n              </div>\n\n              <Button \n                onClick={handleAddToCartWithFeedback}\n                className={cn(\n                  'flex-1 h-12 font-semibold shadow-md transition-all duration-200 touch-manipulation',\n                  'hover:shadow-lg hover:-translate-y-0.5 active:scale-[0.98] active:translate-y-0',\n                  'min-h-[48px]', // Ensure minimum touch target size\n                  !canOrder || !isSuitable \n                    ? 'opacity-50 cursor-not-allowed' \n                    : 'bg-primary hover:bg-primary/90'\n                )}\n                disabled={!canOrder || !isSuitable}\n                aria-describedby={!isSuitable ? 'meal-unsuitable-reason' : undefined}\n              >\n                <ShoppingCart className=\"h-4 w-4 mr-2 shrink-0\" />\n                <span className=\"hidden sm:inline whitespace-nowrap\">Add to Cart •</span>\n                <span className=\"font-bold ml-1\">{formatCurrency(meal.price * quantity)}</span>\n              </Button>\n            </div>\n          )}\n\n          {/* Unavailable state */}\n          {availability.status !== 'available' && (\n            <div className=\"text-center\">\n              <Button \n                variant=\"outline\"\n                className=\"w-full h-12 cursor-not-allowed min-h-[48px] touch-manipulation\"\n                disabled\n              >\n                {availability.status === 'unavailable' && 'Currently Unavailable'}\n                {availability.status === 'closed' && 'Ordering Window Closed'}\n                {availability.status === 'unsuitable' && 'Not Suitable for Your Preferences'}\n              </Button>\n              {availability.status === 'unsuitable' && (\n                <p id=\"meal-unsuitable-reason\" className=\"text-xs text-gray-600 mt-1\">\n                  This meal contains allergens or doesn't match your dietary preferences\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Cart Status */}\n          {isInCart && cartQuantity > 0 && (\n            <div className=\"flex items-center justify-center\">\n              <Badge \n                variant=\"secondary\" \n                className=\"bg-primary/10 text-primary border-primary/20 px-3 py-1.5 font-medium animate-pulse\"\n              >\n                <div className=\"flex items-center\">\n                  <div className=\"w-2 h-2 bg-primary rounded-full mr-2\"></div>\n                  {cartQuantity} item{cartQuantity !== 1 ? 's' : ''} in cart\n                </div>\n              </Badge>\n            </div>\n          )}\n\n          {/* View Details Button */}\n          <Dialog open={showDetails} onOpenChange={setShowDetails}>\n            <DialogTrigger asChild>\n              <Button \n                variant=\"outline\" \n                className={cn(\n                  'w-full h-11 border-2 font-medium transition-all duration-200 touch-manipulation',\n                  'hover:bg-gray-50 hover:border-gray-300 focus:ring-2 focus:ring-primary/20',\n                  'min-h-[44px] active:scale-[0.98]'\n                )}\n                onClick={() => {\n                  handleHapticFeedback('light');\n                  onViewDetails(meal);\n                }}\n              >\n                <Info className=\"h-4 w-4 mr-2 shrink-0\" />\n                <span className=\"truncate\">View Details & Nutrition</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle className=\"flex items-center space-x-2\">\n                  <span>{meal.name}</span>\n                  <Badge className={availability.color}>{availability.text}</Badge>\n                </DialogTitle>\n                <DialogDescription>{meal.description}</DialogDescription>\n              </DialogHeader>\n\n              <div className=\"space-y-6\">\n                {/* Image */}\n                <Image\n                  src={meal.imageUrl}\n                  alt={meal.name}\n                  width={600}\n                  height={300}\n                  className=\"w-full h-60 object-cover rounded-lg\"\n                />\n\n                {/* Detailed Information */}\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {/* Basic Info */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Basic Information</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Price:</span>\n                          <span className=\"font-medium\">{formatCurrency(meal.price)}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Serving Size:</span>\n                          <span>{meal.servingSize}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Preparation Time:</span>\n                          <span>{meal.preparationTime} minutes</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Rating:</span>\n                          <span>{meal.rating}/5 ({meal.totalRatings} reviews)</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Dietary Information */}\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Dietary Information</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <span>{dietaryInfo.icon}</span>\n                          <span className=\"text-sm\">{dietaryInfo.label}</span>\n                        </div>\n                        {spiceLevelInfo.intensity > 0 && (\n                          <div className=\"flex items-center space-x-2\">\n                            <span>{spiceLevelInfo.icon}</span>\n                            <span className=\"text-sm\">{spiceLevelInfo.label}</span>\n                          </div>\n                        )}\n                        <div className=\"flex flex-wrap gap-1 mt-2\">\n                          {meal.isGlutenFree && <Badge variant=\"outline\" className=\"text-xs\">Gluten-Free</Badge>}\n                          {meal.isDiabeticFriendly && <Badge variant=\"outline\" className=\"text-xs\">Diabetic-Friendly</Badge>}\n                          {meal.isJainFood && <Badge variant=\"outline\" className=\"text-xs\">Jain</Badge>}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Nutritional Information */}\n                  <div className=\"space-y-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Nutritional Information</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Calories:</span>\n                          <span className=\"font-medium\">{meal.nutritionalInfo.calories} kcal</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Protein:</span>\n                          <span>{meal.nutritionalInfo.protein}g</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Carbohydrates:</span>\n                          <span>{meal.nutritionalInfo.carbohydrates}g</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Fat:</span>\n                          <span>{meal.nutritionalInfo.fat}g</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Fiber:</span>\n                          <span>{meal.nutritionalInfo.fiber}g</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Sodium:</span>\n                          <span>{meal.nutritionalInfo.sodium}mg</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Allergen Information */}\n                    {meal.allergens.length > 0 && (\n                      <div>\n                        <h4 className=\"font-semibold mb-2 text-orange-600\">Allergen Warnings</h4>\n                        <div className=\"space-y-1\">\n                          {meal.allergens.map(allergen => {\n                            const info = getAllergyInfo(allergen);\n                            return (\n                              <div key={allergen} className=\"flex items-center space-x-2 text-sm\">\n                                <span>{info.icon}</span>\n                                <span>{info.label}</span>\n                              </div>\n                            );\n                          })}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* Vendor Information */}\n                {meal.vendor && (\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Vendor Information</h4>\n                    <div className=\"bg-gray-50 p-3 rounded-lg\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <p className=\"font-medium\">{meal.vendor.name}</p>\n                          <p className=\"text-sm text-gray-600\">{meal.vendor.location}</p>\n                          <p className=\"text-sm text-gray-600\">{meal.vendor.contactNumber}</p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"flex items-center\">\n                            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400 mr-1\" />\n                            <span className=\"text-sm font-medium\">{meal.vendor.rating}/5</span>\n                          </div>\n                          {meal.vendor.hygieneCertification && (\n                            <Badge variant=\"outline\" className=\"text-xs mt-1\">Hygiene Certified</Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Availability Schedule */}\n                <div>\n                  <h4 className=\"font-semibold mb-2\">Availability Schedule</h4>\n                  <div className=\"bg-gray-50 p-3 rounded-lg text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Available Hours:</span>\n                      <span>{formatTime(meal.availableFrom)} - {formatTime(meal.availableTo)}</span>\n                    </div>\n                    <div className=\"flex justify-between mt-1\">\n                      <span>Last Order Time:</span>\n                      <span>{formatTime(meal.lastOrderTime)}</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default MealCard;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealOrderingDrawer.tsx",["2086","2087"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from \"@/components/ui/drawer\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { ScrollArea } from \"@/components/ui/scroll-area\"\nimport { \n  ShoppingCart, \n  Plus, \n  Minus, \n  Clock, \n  Users, \n  Leaf, \n  AlertCircle,\n  CreditCard,\n  Smartphone,\n  X\n} from \"lucide-react\"\nimport { MealItem, OrderItem } from \"./types\"\n\ninterface MealOrderingDrawerProps {\n  meals: MealItem[]\n  categories: string[]\n  cart: OrderItem[]\n  onAddToCart: (meal: MealItem, quantity: number) => void\n  onUpdateQuantity: (mealId: string, quantity: number) => void\n  onRemoveFromCart: (mealId: string) => void\n  onCheckout: () => void\n  total: number\n  children: React.ReactNode\n}\n\nexport function MealOrderingDrawer({\n  meals,\n  categories,\n  cart,\n  onAddToCart,\n  onUpdateQuantity,\n  onRemoveFromCart,\n  onCheckout,\n  total,\n  children\n}: MealOrderingDrawerProps) {\n  const [selectedCategory, setSelectedCategory] = React.useState(categories[0] || \"All\")\n  const [quantities, setQuantities] = React.useState<Record<string, number>>({})\n\n  const filteredMeals = React.useMemo(() => {\n    return selectedCategory === \"All\" \n      ? meals \n      : meals.filter(meal => meal.category === selectedCategory)\n  }, [meals, selectedCategory])\n\n  const cartItemsCount = cart.reduce((sum, item) => sum + item.quantity, 0)\n\n  const updateQuantity = (mealId: string, quantity: number) => {\n    setQuantities(prev => ({\n      ...prev,\n      [mealId]: Math.max(0, quantity)\n    }))\n  }\n\n  const handleAddToCart = (meal: MealItem) => {\n    const quantity = quantities[meal.id] || 1\n    onAddToCart(meal, quantity)\n    setQuantities(prev => ({ ...prev, [meal.id]: 0 }))\n  }\n\n  const getCartItemQuantity = (mealId: string) => {\n    return cart.find(item => item.mealId === mealId)?.quantity || 0\n  }\n\n  return (\n    <Drawer>\n      <DrawerTrigger asChild>\n        {children}\n      </DrawerTrigger>\n      <DrawerContent className=\"max-h-[95vh] bg-background\">\n        <div className=\"mx-auto w-full max-w-sm\">\n          <DrawerHeader className=\"text-center pb-0\">\n            <DrawerTitle className=\"flex items-center justify-center gap-2\">\n              <ShoppingCart className=\"h-5 w-5\" />\n              Order Your Meals\n            </DrawerTitle>\n            <DrawerDescription>\n              Browse available meals and add them to your cart\n            </DrawerDescription>\n          </DrawerHeader>\n\n          {/* Category Selection */}\n          <div className=\"px-4 py-2\">\n            <ScrollArea className=\"w-full whitespace-nowrap\">\n              <div className=\"flex gap-2 pb-2\">\n                {[\"All\", ...categories].map((category) => (\n                  <Badge\n                    key={category}\n                    variant={selectedCategory === category ? \"default\" : \"outline\"}\n                    className=\"cursor-pointer whitespace-nowrap px-3 py-1.5 text-xs\"\n                    onClick={() => setSelectedCategory(category)}\n                  >\n                    {category}\n                  </Badge>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n\n          <Separator />\n\n          {/* Meals List */}\n          <ScrollArea className=\"max-h-[40vh] px-4\">\n            <div className=\"space-y-3 py-4\">\n              {filteredMeals.map((meal) => {\n                const currentQuantity = quantities[meal.id] || 0\n                const inCartQuantity = getCartItemQuantity(meal.id)\n                \n                return (\n                  <Card key={meal.id} className=\"p-3\">\n                    <div className=\"flex gap-3\">\n                      {/* Meal Image */}\n                      <div className=\"relative h-16 w-16 rounded-lg overflow-hidden bg-muted flex-shrink-0\">\n                        {meal.image ? (\n                          <img\n                            src={meal.image}\n                            alt={meal.name}\n                            className=\"h-full w-full object-cover\"\n                          />\n                        ) : (\n                          <div className=\"flex h-full w-full items-center justify-center\">\n                            <ShoppingCart className=\"h-6 w-6 text-muted-foreground\" />\n                          </div>\n                        )}\n                        {!meal.available && (\n                          <div className=\"absolute inset-0 bg-black/50 flex items-center justify-center\">\n                            <AlertCircle className=\"h-4 w-4 text-white\" />\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Meal Details */}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex justify-between items-start gap-2 mb-1\">\n                          <h4 className=\"font-medium text-sm truncate\">{meal.name}</h4>\n                          <span className=\"text-sm font-semibold text-green-600\">₹{meal.price}</span>\n                        </div>\n                        \n                        <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                          {meal.description}\n                        </p>\n\n                        {/* Meal Info */}\n                        <div className=\"flex items-center gap-1 mb-2\">\n                          {meal.preparationTime && (\n                            <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5\">\n                              <Clock className=\"h-2.5 w-2.5 mr-1\" />\n                              {meal.preparationTime}m\n                            </Badge>\n                          )}\n                          {meal.dietaryInfo?.vegetarian && (\n                            <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5 text-green-600\">\n                              <Leaf className=\"h-2.5 w-2.5 mr-1\" />\n                              Veg\n                            </Badge>\n                          )}\n                          {meal.servingSize && (\n                            <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5\">\n                              <Users className=\"h-2.5 w-2.5 mr-1\" />\n                              {meal.servingSize}\n                            </Badge>\n                          )}\n                        </div>\n\n                        {/* Quantity Controls */}\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"h-7 w-7 p-0\"\n                              onClick={() => updateQuantity(meal.id, currentQuantity - 1)}\n                              disabled={currentQuantity === 0}\n                            >\n                              <Minus className=\"h-3 w-3\" />\n                            </Button>\n                            <span className=\"text-sm font-medium min-w-[2ch] text-center\">\n                              {currentQuantity}\n                            </span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"h-7 w-7 p-0\"\n                              onClick={() => updateQuantity(meal.id, currentQuantity + 1)}\n                              disabled={!meal.available}\n                            >\n                              <Plus className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n\n                          <div className=\"flex items-center gap-2\">\n                            {inCartQuantity > 0 && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {inCartQuantity} in cart\n                              </Badge>\n                            )}\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleAddToCart(meal)}\n                              disabled={currentQuantity === 0 || !meal.available}\n                              className=\"h-7 px-3 text-xs\"\n                            >\n                              Add\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </Card>\n                )\n              })}\n            </div>\n          </ScrollArea>\n\n          {/* Cart Summary */}\n          {cart.length > 0 && (\n            <>\n              <Separator />\n              <div className=\"px-4 py-3\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium\">Cart Items ({cartItemsCount})</span>\n                    <span className=\"text-sm font-semibold\">₹{total}</span>\n                  </div>\n                  \n                  {/* Cart Items Preview */}\n                  <div className=\"space-y-1\">\n                    {cart.slice(0, 2).map((item) => {\n                      const meal = meals.find(m => m.id === item.mealId)\n                      return (\n                        <div key={item.mealId} className=\"flex justify-between text-xs text-muted-foreground\">\n                          <span className=\"truncate\">{meal?.name} x{item.quantity}</span>\n                          <span>₹{(meal?.price || 0) * item.quantity}</span>\n                        </div>\n                      )\n                    })}\n                    {cart.length > 2 && (\n                      <div className=\"text-xs text-muted-foreground text-center\">\n                        +{cart.length - 2} more items\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n\n          <DrawerFooter className=\"pt-2\">\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={onCheckout}\n                disabled={cart.length === 0}\n                className=\"flex-1\"\n              >\n                <CreditCard className=\"h-4 w-4 mr-2\" />\n                Checkout ₹{total}\n              </Button>\n              <DrawerClose asChild>\n                <Button variant=\"outline\" size=\"icon\" className=\"h-10 w-10\">\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </DrawerClose>\n            </div>\n            \n            <div className=\"flex items-center justify-center gap-2 text-xs text-muted-foreground\">\n              <Smartphone className=\"h-3 w-3\" />\n              Mobile-optimized ordering experience\n            </div>\n          </DrawerFooter>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealOrderingInterface.tsx",["2088","2089","2090","2091","2092","2093","2094","2095","2096","2097","2098","2099","2100","2101","2102","2103","2104","2105","2106","2107","2108","2109"],[],"/**\n * MealOrderingInterface - Main Component\n * Complete school meal ordering interface with all features integrated\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Search, Filter, SortAsc, Heart, ShoppingCart, Smartphone } from 'lucide-react';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\n// Import our custom components\nimport MealCard from './MealCard';\nimport CategoryTabs from './CategoryTabs';\nimport OrderSummary from './OrderSummary';\nimport RFIDInterface from './RFIDInterface';\n\n// Import types and utilities\nimport type {\n  MealItem,\n  StudentInfo,\n  OrderItem,\n  MenuCategory,\n  DeliverySlot,\n  OrderSummary as OrderSummaryType,\n  MealOrderForm,\n  MealOrderingContext,\n  SchoolMealConfig,\n} from './types';\nimport {\n  formatCurrency,\n  isMealSuitableForStudent,\n  canOrderMeal,\n  getMealRecommendations,\n  calculateOrderSummary,\n  getAvailableDeliverySlots,\n  getMealCategoryInfo,\n} from './utils';\n\n// Import constants\nimport { MEAL_TYPES, DIETARY_PREFERENCES, SPICE_LEVELS } from '@/utils/constants';\n\ninterface MealOrderingInterfaceProps {\n  studentInfo: StudentInfo;\n  schoolConfig: SchoolMealConfig;\n  onOrderPlaced: (orderData: any) => Promise<void>;\n  onRFIDScan?: (cardId: string) => Promise<void>;\n}\n\nconst MealOrderingInterface: React.FC<MealOrderingInterfaceProps> = ({\n  studentInfo,\n  schoolConfig,\n  onOrderPlaced,\n  onRFIDScan,\n}) => {\n  // State management\n  const [activeTab, setActiveTab] = useState('menu');\n  const [activeCategory, setActiveCategory] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState('popularity');\n  const [filterDietary, setFilterDietary] = useState<string>('all');\n  const [cart, setCart] = useState<OrderItem[]>([]);\n  const [isPlacingOrder, setIsPlacingOrder] = useState(false);\n  const [selectedDeliverySlot, setSelectedDeliverySlot] = useState<DeliverySlot | null>(null);\n\n  // Mock data - in real app, this would come from API\n  const [meals, setMeals] = useState<MealItem[]>([]);\n  const [categories, setCategories] = useState<MenuCategory[]>([]);\n  const [deliverySlots, setDeliverySlots] = useState<DeliverySlot[]>([]);\n  const [pendingOrders, setPendingOrders] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize with mock data\n  useEffect(() => {\n    initializeMockData();\n  }, []);\n\n  const initializeMockData = () => {\n    // Mock categories\n    const mockCategories: MenuCategory[] = [\n      {\n        id: 'breakfast',\n        name: 'Breakfast',\n        mealType: MEAL_TYPES.BREAKFAST,\n        description: 'Start your day with nutritious breakfast options',\n        iconName: 'sunrise',\n        isActive: true,\n        sortOrder: 1,\n      },\n      {\n        id: 'lunch',\n        name: 'Lunch',\n        mealType: MEAL_TYPES.LUNCH,\n        description: 'Hearty and filling lunch meals',\n        iconName: 'sun',\n        isActive: true,\n        sortOrder: 2,\n      },\n      {\n        id: 'snacks',\n        name: 'Snacks',\n        mealType: MEAL_TYPES.SNACKS,\n        description: 'Quick and tasty snacks',\n        iconName: 'cookie',\n        isActive: true,\n        sortOrder: 3,\n      },\n      {\n        id: 'dinner',\n        name: 'Dinner',\n        mealType: MEAL_TYPES.DINNER,\n        description: 'Light and healthy dinner options',\n        iconName: 'moon',\n        isActive: true,\n        sortOrder: 4,\n      },\n    ];\n\n    // Mock meals\n    const mockMeals: MealItem[] = [\n      {\n        id: 'meal-1',\n        name: 'Vegetable Sandwich',\n        description: 'Fresh vegetables with whole wheat bread and mint chutney',\n        category: MEAL_TYPES.BREAKFAST,\n        price: 45,\n        originalPrice: 50,\n        imageUrl: '/images/meals/veg-sandwich.jpg',\n        isAvailable: true,\n        preparationTime: 10,\n        servingSize: '2 pieces',\n        dietaryType: DIETARY_PREFERENCES.VEGETARIAN,\n        allergens: [],\n        spiceLevel: SPICE_LEVELS.MILD,\n        isGlutenFree: false,\n        isDiabeticFriendly: true,\n        isJainFood: true,\n        nutritionalInfo: {\n          calories: 280,\n          protein: 8,\n          carbohydrates: 45,\n          fat: 6,\n          fiber: 4,\n          sugar: 8,\n          sodium: 320,\n        },\n        gradeRestrictions: [],\n        schoolApprovalRequired: false,\n        maxQuantityPerStudent: 2,\n        rating: 4.3,\n        totalRatings: 156,\n        tags: ['healthy', 'fresh', 'popular'],\n        availableFrom: '07:00',\n        availableTo: '09:00',\n        lastOrderTime: '08:30',\n      },\n      {\n        id: 'meal-2',\n        name: 'Dal Rice Bowl',\n        description: 'Nutritious lentil curry with steamed rice and pickle',\n        category: MEAL_TYPES.LUNCH,\n        price: 85,\n        imageUrl: '/images/meals/dal-rice.jpg',\n        isAvailable: true,\n        preparationTime: 15,\n        servingSize: '1 bowl',\n        dietaryType: DIETARY_PREFERENCES.VEGETARIAN,\n        allergens: [],\n        spiceLevel: SPICE_LEVELS.MEDIUM,\n        isGlutenFree: true,\n        isDiabeticFriendly: false,\n        isJainFood: true,\n        nutritionalInfo: {\n          calories: 420,\n          protein: 18,\n          carbohydrates: 65,\n          fat: 8,\n          fiber: 6,\n          sugar: 4,\n          sodium: 480,\n        },\n        gradeRestrictions: [],\n        schoolApprovalRequired: false,\n        maxQuantityPerStudent: 2,\n        rating: 4.6,\n        totalRatings: 234,\n        tags: ['traditional', 'protein-rich', 'comfort-food'],\n        availableFrom: '12:00',\n        availableTo: '14:00',\n        lastOrderTime: '13:30',\n      },\n      {\n        id: 'meal-3',\n        name: 'Fresh Fruit Bowl',\n        description: 'Seasonal fresh fruits with honey and nuts',\n        category: MEAL_TYPES.SNACKS,\n        price: 35,\n        imageUrl: '/images/meals/fruit-bowl.jpg',\n        isAvailable: true,\n        preparationTime: 5,\n        servingSize: '1 bowl',\n        dietaryType: DIETARY_PREFERENCES.VEGAN,\n        allergens: ['nuts'],\n        spiceLevel: SPICE_LEVELS.MILD,\n        isGlutenFree: true,\n        isDiabeticFriendly: true,\n        isJainFood: true,\n        nutritionalInfo: {\n          calories: 150,\n          protein: 3,\n          carbohydrates: 35,\n          fat: 2,\n          fiber: 8,\n          sugar: 28,\n          sodium: 5,\n        },\n        gradeRestrictions: [],\n        schoolApprovalRequired: false,\n        maxQuantityPerStudent: 3,\n        rating: 4.8,\n        totalRatings: 89,\n        tags: ['healthy', 'fresh', 'vitamin-rich'],\n        availableFrom: '15:00',\n        availableTo: '17:00',\n        lastOrderTime: '16:30',\n      },\n    ];\n\n    // Mock delivery slots\n    const mockSlots: DeliverySlot[] = [\n      {\n        id: 'slot-1',\n        mealType: MEAL_TYPES.BREAKFAST,\n        startTime: '08:00',\n        endTime: '09:00',\n        isAvailable: true,\n        currentOrders: 15,\n        maxOrders: 50,\n        deliveryLocation: 'Classroom Block A',\n      },\n      {\n        id: 'slot-2',\n        mealType: MEAL_TYPES.LUNCH,\n        startTime: '12:30',\n        endTime: '13:30',\n        isAvailable: true,\n        currentOrders: 32,\n        maxOrders: 100,\n        deliveryLocation: 'Main Cafeteria',\n      },\n    ];\n\n    setCategories(mockCategories);\n    setMeals(mockMeals);\n    setDeliverySlots(mockSlots);\n    setActiveCategory(mockCategories[0]?.id || '');\n    setSelectedDeliverySlot(mockSlots[0] || null);\n    setLoading(false);\n  };\n\n  // Filter and sort meals\n  const filteredMeals = React.useMemo(() => {\n    let filtered = meals;\n\n    // Filter by category\n    if (activeCategory) {\n      const category = categories.find(cat => cat.id === activeCategory);\n      if (category) {\n        filtered = filtered.filter(meal => meal.category === category.mealType);\n      }\n    }\n\n    // Filter by search query\n    if (searchQuery) {\n      filtered = filtered.filter(meal =>\n        meal.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        meal.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        meal.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))\n      );\n    }\n\n    // Filter by dietary preference\n    if (filterDietary !== 'all') {\n      filtered = filtered.filter(meal => meal.dietaryType === filterDietary);\n    }\n\n    // Filter suitable meals for student\n    filtered = filtered.filter(meal => isMealSuitableForStudent(meal, studentInfo));\n\n    // Sort meals\n    switch (sortBy) {\n      case 'popularity':\n        filtered.sort((a, b) => b.rating - a.rating);\n        break;\n      case 'price-low':\n        filtered.sort((a, b) => a.price - b.price);\n        break;\n      case 'price-high':\n        filtered.sort((a, b) => b.price - a.price);\n        break;\n      case 'name':\n        filtered.sort((a, b) => a.name.localeCompare(b.name));\n        break;\n      default:\n        break;\n    }\n\n    return filtered;\n  }, [meals, activeCategory, searchQuery, filterDietary, sortBy, categories, studentInfo]);\n\n  // Get recommended meals\n  const recommendedMeals = React.useMemo(() => {\n    return getMealRecommendations(meals, studentInfo).slice(0, 3);\n  }, [meals, studentInfo]);\n\n  // Calculate order summary\n  const orderSummary: OrderSummaryType | null = React.useMemo(() => {\n    if (cart.length === 0 || !selectedDeliverySlot) return null;\n\n    const summary = calculateOrderSummary(cart, selectedDeliverySlot, studentInfo);\n    return {\n      ...summary,\n      selectedDeliverySlot,\n      estimatedDeliveryTime: '30 minutes',\n    };\n  }, [cart, selectedDeliverySlot, studentInfo]);\n\n  // Cart management\n  const addToCart = useCallback((meal: MealItem, quantity: number) => {\n    setCart(prev => {\n      const existingItem = prev.find(item => item.mealItem.id === meal.id);\n      if (existingItem) {\n        return prev.map(item =>\n          item.mealItem.id === meal.id\n            ? { ...item, quantity: Math.min(item.quantity + quantity, meal.maxQuantityPerStudent) }\n            : item\n        );\n      } else {\n        return [...prev, {\n          mealItem: meal,\n          quantity: Math.min(quantity, meal.maxQuantityPerStudent),\n          selectedDeliveryTime: selectedDeliverySlot?.startTime || '',\n        }];\n      }\n    });\n  }, [selectedDeliverySlot]);\n\n  const updateCartQuantity = useCallback((mealId: string, quantity: number) => {\n    setCart(prev =>\n      prev.map(item =>\n        item.mealItem.id === mealId\n          ? { ...item, quantity }\n          : item\n      )\n    );\n  }, []);\n\n  const removeFromCart = useCallback((mealId: string) => {\n    setCart(prev => prev.filter(item => item.mealItem.id !== mealId));\n  }, []);\n\n  const clearCart = useCallback(() => {\n    setCart([]);\n  }, []);\n\n  // Order placement\n  const handlePlaceOrder = async (orderData: MealOrderForm) => {\n    if (!orderSummary) return;\n\n    setIsPlacingOrder(true);\n    try {\n      await onOrderPlaced({\n        ...orderData,\n        items: cart,\n        summary: orderSummary,\n        studentId: studentInfo.id,\n      });\n      clearCart();\n      setActiveTab('rfid'); // Switch to RFID tab after order\n    } catch (error) {\n      console.error('Failed to place order:', error);\n    } finally {\n      setIsPlacingOrder(false);\n    }\n  };\n\n  // View meal details\n  const handleViewMealDetails = useCallback((meal: MealItem) => {\n    // This could open a detailed modal or navigate to a detail page\n    console.log('View details for meal:', meal.name);\n  }, []);\n\n  // Get cart item count and total\n  const cartItemCount = cart.reduce((sum, item) => sum + item.quantity, 0);\n  const cartTotal = cart.reduce((sum, item) => sum + (item.mealItem.price * item.quantity), 0);\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-4 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between space-y-4 md:space-y-0\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            HASIVU Meal Ordering\n          </h1>\n          <p className=\"text-gray-600\">\n            Welcome, {studentInfo.name} | Grade {studentInfo.grade}-{studentInfo.section}\n          </p>\n        </div>\n        \n        {/* Wallet Balance */}\n        <div className=\"flex items-center space-x-4\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">Wallet Balance:</span>\n              <span className=\"font-bold text-green-600\">\n                {formatCurrency(studentInfo.walletBalance)}\n              </span>\n            </div>\n          </Card>\n        </div>\n      </div>\n\n      {/* Main Interface */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"menu\" className=\"flex items-center space-x-2\">\n            <span>🍽️</span>\n            <span>Menu</span>\n            {cart.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2 bg-red-100 text-red-700\">\n                {cartItemCount}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"cart\" className=\"flex items-center space-x-2\">\n            <ShoppingCart className=\"h-4 w-4\" />\n            <span>Cart</span>\n            {cart.length > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {formatCurrency(cartTotal)}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"rfid\" className=\"flex items-center space-x-2\">\n            <Smartphone className=\"h-4 w-4\" />\n            <span>Pickup</span>\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Menu Tab */}\n        <TabsContent value=\"menu\" className=\"space-y-6\">\n          {/* Search and Filters */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-4\">\n                {/* Search */}\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search meals, ingredients, or tags...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n\n                {/* Dietary Filter */}\n                <Select value={filterDietary} onValueChange={setFilterDietary}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Dietary preference\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Diets</SelectItem>\n                    <SelectItem value={DIETARY_PREFERENCES.VEGETARIAN}>Vegetarian</SelectItem>\n                    <SelectItem value={DIETARY_PREFERENCES.VEGAN}>Vegan</SelectItem>\n                    <SelectItem value={DIETARY_PREFERENCES.NON_VEGETARIAN}>Non-Vegetarian</SelectItem>\n                    <SelectItem value={DIETARY_PREFERENCES.JAIN}>Jain</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Sort By */}\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"popularity\">Popularity</SelectItem>\n                    <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                    <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                    <SelectItem value=\"name\">Name A-Z</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Category Tabs */}\n          <CategoryTabs\n            categories={categories}\n            activeCategory={activeCategory}\n            onCategoryChange={setActiveCategory}\n            student={studentInfo}\n          />\n\n          {/* Recommended Meals */}\n          {recommendedMeals.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Heart className=\"h-5 w-5 text-red-500\" />\n                  <span>Recommended for You</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  {recommendedMeals.map((meal) => (\n                    <MealCard\n                      key={meal.id}\n                      meal={meal}\n                      student={studentInfo}\n                      onAddToCart={addToCart}\n                      onViewDetails={handleViewMealDetails}\n                      isInCart={cart.some(item => item.mealItem.id === meal.id)}\n                      cartQuantity={cart.find(item => item.mealItem.id === meal.id)?.quantity || 0}\n                    />\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Meal Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredMeals.map((meal) => (\n              <MealCard\n                key={meal.id}\n                meal={meal}\n                student={studentInfo}\n                onAddToCart={addToCart}\n                onViewDetails={handleViewMealDetails}\n                isInCart={cart.some(item => item.mealItem.id === meal.id)}\n                cartQuantity={cart.find(item => item.mealItem.id === meal.id)?.quantity || 0}\n              />\n            ))}\n          </div>\n\n          {/* No Results */}\n          {filteredMeals.length === 0 && (\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <div className=\"text-6xl mb-4\">🔍</div>\n                <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No meals found</h3>\n                <p className=\"text-sm text-gray-500 text-center\">\n                  Try adjusting your search query or filters to find more meals.\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Cart Tab */}\n        <TabsContent value=\"cart\">\n          {orderSummary && (\n            <OrderSummary\n              orderSummary={orderSummary}\n              student={studentInfo}\n              onUpdateQuantity={updateCartQuantity}\n              onRemoveItem={removeFromCart}\n              onPlaceOrder={handlePlaceOrder}\n              isPlacingOrder={isPlacingOrder}\n            />\n          )}\n        </TabsContent>\n\n        {/* RFID Tab */}\n        <TabsContent value=\"rfid\">\n          <RFIDInterface\n            studentInfo={studentInfo}\n            pendingOrders={pendingOrders}\n            onRFIDScan={onRFIDScan || (() => Promise.resolve())}\n          />\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default MealOrderingInterface;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/MealSearchCommand.tsx",["2110","2111"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Card } from \"@/components/ui/card\"\nimport { Search, Utensils, Clock, DollarSign, Leaf, Users } from \"lucide-react\"\nimport { MealItem } from \"./types\"\n\ninterface MealSearchCommandProps {\n  meals: MealItem[]\n  onMealSelect: (meal: MealItem) => void\n  categories: string[]\n  selectedCategory?: string\n  open: boolean\n  onOpenChange: (open: boolean) => void\n}\n\nexport function MealSearchCommand({\n  meals,\n  onMealSelect,\n  categories,\n  selectedCategory,\n  open,\n  onOpenChange\n}: MealSearchCommandProps) {\n  const [searchValue, setSearchValue] = React.useState(\"\")\n\n  // Filter meals based on search and category\n  const filteredMeals = React.useMemo(() => {\n    let filtered = meals\n    \n    if (selectedCategory && selectedCategory !== \"All\") {\n      filtered = filtered.filter(meal => meal.category === selectedCategory)\n    }\n    \n    if (searchValue) {\n      filtered = filtered.filter(meal =>\n        meal.name.toLowerCase().includes(searchValue.toLowerCase()) ||\n        meal.description.toLowerCase().includes(searchValue.toLowerCase()) ||\n        meal.ingredients.some(ingredient =>\n          ingredient.toLowerCase().includes(searchValue.toLowerCase())\n        )\n      )\n    }\n    \n    return filtered\n  }, [meals, selectedCategory, searchValue])\n\n  // Group meals by category for better organization\n  const mealsByCategory = React.useMemo(() => {\n    return filteredMeals.reduce((acc, meal) => {\n      if (!acc[meal.category]) {\n        acc[meal.category] = []\n      }\n      acc[meal.category].push(meal)\n      return acc\n    }, {} as Record<string, MealItem[]>)\n  }, [filteredMeals])\n\n  const handleMealSelect = (meal: MealItem) => {\n    onMealSelect(meal)\n    onOpenChange(false)\n    setSearchValue(\"\")\n  }\n\n  return (\n    <Command className=\"rounded-lg border shadow-md\" shouldFilter={false}>\n      <CommandInput\n        placeholder=\"Search meals, ingredients, or dietary preferences...\"\n        value={searchValue}\n        onValueChange={setSearchValue}\n        icon={Search}\n        className=\"h-12\"\n      />\n      <CommandList className=\"max-h-[400px]\">\n        <CommandEmpty className=\"py-6 text-center text-sm text-muted-foreground\">\n          <div className=\"flex flex-col items-center gap-2\">\n            <Utensils className=\"h-8 w-8 text-muted-foreground/50\" />\n            <span>No meals found matching your search.</span>\n            <span className=\"text-xs\">Try different keywords or browse categories.</span>\n          </div>\n        </CommandEmpty>\n        \n        {Object.entries(mealsByCategory).map(([category, categoryMeals]) => (\n          <CommandGroup key={category} heading={category} className=\"mb-2\">\n            {categoryMeals.map((meal) => (\n              <CommandItem\n                key={meal.id}\n                onSelect={() => handleMealSelect(meal)}\n                className=\"p-4 cursor-pointer hover:bg-muted/50 transition-colors\"\n              >\n                <Card className=\"w-full border-none shadow-none bg-transparent p-0\">\n                  <div className=\"flex items-start gap-3\">\n                    {/* Meal Image */}\n                    <div className=\"relative h-16 w-16 rounded-lg overflow-hidden bg-muted flex-shrink-0\">\n                      {meal.image ? (\n                        <img\n                          src={meal.image}\n                          alt={meal.name}\n                          className=\"h-full w-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"flex h-full w-full items-center justify-center\">\n                          <Utensils className=\"h-6 w-6 text-muted-foreground\" />\n                        </div>\n                      )}\n                      {/* Availability indicator */}\n                      <div className={`absolute top-1 right-1 h-3 w-3 rounded-full ${\n                        meal.available ? \"bg-green-500\" : \"bg-red-500\"\n                      }`} />\n                    </div>\n                    \n                    {/* Meal Details */}\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between gap-2 mb-1\">\n                        <h4 className=\"font-medium text-sm truncate\">{meal.name}</h4>\n                        <div className=\"flex items-center gap-1 text-sm font-medium text-green-600\">\n                          <DollarSign className=\"h-3 w-3\" />\n                          {meal.price}\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-xs text-muted-foreground mb-2 line-clamp-2\">\n                        {meal.description}\n                      </p>\n                      \n                      {/* Meal metadata badges */}\n                      <div className=\"flex items-center gap-1 flex-wrap\">\n                        {meal.preparationTime && (\n                          <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5\">\n                            <Clock className=\"h-2.5 w-2.5 mr-1\" />\n                            {meal.preparationTime}min\n                          </Badge>\n                        )}\n                        \n                        {meal.nutritionInfo?.calories && (\n                          <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5\">\n                            {meal.nutritionInfo.calories} cal\n                          </Badge>\n                        )}\n                        \n                        {meal.dietaryInfo?.vegetarian && (\n                          <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5 text-green-600\">\n                            <Leaf className=\"h-2.5 w-2.5 mr-1\" />\n                            Veg\n                          </Badge>\n                        )}\n                        \n                        {meal.servingSize && (\n                          <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0.5 h-5\">\n                            <Users className=\"h-2.5 w-2.5 mr-1\" />\n                            {meal.servingSize}\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        ))}\n      </CommandList>\n    </Command>\n  )\n}\n\n// Enhanced search with filters component\nexport function MealSearchWithFilters({\n  meals,\n  onMealSelect,\n  categories\n}: {\n  meals: MealItem[]\n  onMealSelect: (meal: MealItem) => void\n  categories: string[]\n}) {\n  const [open, setOpen] = React.useState(false)\n  const [selectedCategory, setSelectedCategory] = React.useState<string>(\"All\")\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Quick category filters */}\n      <div className=\"flex gap-2 overflow-x-auto pb-2\">\n        {[\"All\", ...categories].map((category) => (\n          <Badge\n            key={category}\n            variant={selectedCategory === category ? \"default\" : \"outline\"}\n            className=\"cursor-pointer whitespace-nowrap px-3 py-1 text-xs\"\n            onClick={() => setSelectedCategory(category)}\n          >\n            {category}\n          </Badge>\n        ))}\n      </div>\n      \n      {/* Search command */}\n      <MealSearchCommand\n        meals={meals}\n        onMealSelect={onMealSelect}\n        categories={categories}\n        selectedCategory={selectedCategory}\n        open={open}\n        onOpenChange={setOpen}\n      />\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/NotificationSystem.tsx",["2112","2113","2114","2115","2116","2117","2118","2119","2120","2121","2122","2123","2124","2125","2126","2127","2128","2129","2130","2131","2132"],[],"/**\n * Notification System Component\n * Uses Sonner for modern toast notifications with order status updates\n */\n\n\"use client\"\n\nimport React, { useEffect, useCallback } from 'react'\nimport { toast } from 'sonner'\nimport { \n  CheckCircle, \n  Clock, \n  AlertTriangle, \n  XCircle, \n  Bell, \n  ShoppingCart,\n  CreditCard,\n  Utensils,\n  MapPin,\n  Star,\n  Gift,\n  TrendingUp,\n  Shield,\n  Info,\n  Zap\n} from 'lucide-react'\nimport { Button } from '@/components/ui/button'\n\nimport type { \n  OrderHistoryItem, \n  StudentInfo, \n  MealItem, \n  RFIDPickupInfo,\n  OrderStatus \n} from './types'\n\nexport interface NotificationSystemProps {\n  student: StudentInfo\n  onOrderStatusUpdate?: (orderId: string, status: OrderStatus) => void\n  onNotificationClick?: (notificationId: string) => void\n  className?: string\n}\n\n// Notification types and their configurations\nconst NOTIFICATION_CONFIG = {\n  orderPlaced: {\n    icon: <CheckCircle className=\"w-4 h-4\" />,\n    style: 'success',\n    duration: 4000,\n    sound: true\n  },\n  orderConfirmed: {\n    icon: <Clock className=\"w-4 h-4\" />,\n    style: 'default',\n    duration: 3000,\n    sound: true\n  },\n  orderPreparing: {\n    icon: <Utensils className=\"w-4 h-4\" />,\n    style: 'default',\n    duration: 3000,\n    sound: false\n  },\n  orderReady: {\n    icon: <Bell className=\"w-4 h-4\" />,\n    style: 'success',\n    duration: 0, // Persistent\n    sound: true\n  },\n  orderDelivered: {\n    icon: <MapPin className=\"w-4 h-4\" />,\n    style: 'success',\n    duration: 4000,\n    sound: true\n  },\n  orderCancelled: {\n    icon: <XCircle className=\"w-4 h-4\" />,\n    style: 'error',\n    duration: 5000,\n    sound: true\n  },\n  paymentSuccess: {\n    icon: <CreditCard className=\"w-4 h-4\" />,\n    style: 'success',\n    duration: 3000,\n    sound: true\n  },\n  paymentFailed: {\n    icon: <AlertTriangle className=\"w-4 h-4\" />,\n    style: 'error',\n    duration: 6000,\n    sound: true\n  },\n  lowBalance: {\n    icon: <AlertTriangle className=\"w-4 h-4\" />,\n    style: 'warning',\n    duration: 5000,\n    sound: false\n  },\n  mealRecommendation: {\n    icon: <Star className=\"w-4 h-4\" />,\n    style: 'default',\n    duration: 6000,\n    sound: false\n  },\n  specialOffer: {\n    icon: <Gift className=\"w-4 h-4\" />,\n    style: 'default',\n    duration: 8000,\n    sound: false\n  },\n  rfidVerification: {\n    icon: <Shield className=\"w-4 h-4\" />,\n    style: 'success',\n    duration: 3000,\n    sound: true\n  },\n  systemAlert: {\n    icon: <Info className=\"w-4 h-4\" />,\n    style: 'default',\n    duration: 5000,\n    sound: false\n  }\n} as const\n\ntype NotificationType = keyof typeof NOTIFICATION_CONFIG\n\nexport class NotificationService {\n  private static instance: NotificationService\n  private isInitialized = false\n  private soundEnabled = true\n  private notificationQueue: Array<() => void> = []\n\n  static getInstance(): NotificationService {\n    if (!NotificationService.instance) {\n      NotificationService.instance = new NotificationService()\n    }\n    return NotificationService.instance\n  }\n\n  initialize(student: StudentInfo) {\n    if (this.isInitialized) return\n    \n    this.isInitialized = true\n    this.soundEnabled = localStorage.getItem('hasivu-sound-enabled') !== 'false'\n    \n    // Process any queued notifications\n    this.notificationQueue.forEach(notification => notification())\n    this.notificationQueue = []\n    \n    // Welcome notification\n    this.showNotification('systemAlert', {\n      title: `Welcome back, ${student.name}!`,\n      description: `You have ₹${student.walletBalance} in your wallet`,\n      action: {\n        label: 'View Menu',\n        onClick: () => console.log('Navigate to menu')\n      }\n    })\n  }\n\n  toggleSound(enabled: boolean) {\n    this.soundEnabled = enabled\n    localStorage.setItem('hasivu-sound-enabled', enabled.toString())\n  }\n\n  private playNotificationSound(type: NotificationType) {\n    if (!this.soundEnabled || !NOTIFICATION_CONFIG[type].sound) return\n    \n    // Create audio context for notification sound\n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)()\n      const oscillator = audioContext.createOscillator()\n      const gainNode = audioContext.createGain()\n      \n      oscillator.connect(gainNode)\n      gainNode.connect(audioContext.destination)\n      \n      // Different tones for different notification types\n      const frequencies = {\n        success: [523.25, 659.25, 783.99], // C5-E5-G5\n        error: [220.00, 185.00], // A3-F#3\n        warning: [293.66, 349.23], // D4-F4\n        default: [440.00] // A4\n      }\n      \n      const config = NOTIFICATION_CONFIG[type]\n      const tones = frequencies[config.style as keyof typeof frequencies] || frequencies.default\n      \n      tones.forEach((freq, index) => {\n        setTimeout(() => {\n          const osc = audioContext.createOscillator()\n          const gain = audioContext.createGain()\n          \n          osc.connect(gain)\n          gain.connect(audioContext.destination)\n          \n          osc.frequency.setValueAtTime(freq, audioContext.currentTime)\n          gain.gain.setValueAtTime(0.1, audioContext.currentTime)\n          gain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2)\n          \n          osc.start(audioContext.currentTime)\n          osc.stop(audioContext.currentTime + 0.2)\n        }, index * 100)\n      })\n    } catch (error) {\n      console.warn('Could not play notification sound:', error)\n    }\n  }\n\n  showNotification(\n    type: NotificationType, \n    options: {\n      title: string\n      description?: string\n      action?: {\n        label: string\n        onClick: () => void\n      }\n      data?: any\n    }\n  ) {\n    const config = NOTIFICATION_CONFIG[type]\n    \n    if (!this.isInitialized) {\n      // Queue notification for later\n      this.notificationQueue.push(() => this.showNotification(type, options))\n      return\n    }\n    \n    this.playNotificationSound(type)\n    \n    const toastOptions: any = {\n      duration: config.duration,\n      icon: config.icon,\n      description: options.description,\n      action: options.action ? {\n        label: options.action.label,\n        onClick: options.action.onClick\n      } : undefined,\n      className: `notification-${config.style}`\n    }\n    \n    switch (config.style) {\n      case 'success':\n        toast.success(options.title, toastOptions)\n        break\n      case 'error':\n        toast.error(options.title, toastOptions)\n        break\n      case 'warning':\n        toast.warning(options.title, toastOptions)\n        break\n      default:\n        toast(options.title, toastOptions)\n    }\n  }\n\n  // Predefined notification methods\n  orderPlaced(orderData: { orderId: string; items: string[]; total: number }) {\n    this.showNotification('orderPlaced', {\n      title: 'Order placed successfully!',\n      description: `Order #${orderData.orderId} • ${orderData.items.length} items • ₹${orderData.total}`,\n      action: {\n        label: 'Track Order',\n        onClick: () => console.log('Navigate to order tracking', orderData.orderId)\n      }\n    })\n  }\n\n  orderStatusUpdate(orderId: string, status: OrderStatus, estimatedTime?: string) {\n    const statusMessages = {\n      'pending': 'Order received and being processed',\n      'confirmed': `Order confirmed${estimatedTime ? ` • Ready in ${estimatedTime}` : ''}`,\n      'preparing': 'Your order is being prepared',\n      'ready': 'Order ready for pickup!',\n      'delivered': 'Order delivered successfully',\n      'cancelled': 'Order has been cancelled'\n    }\n\n    const notificationTypes: Record<OrderStatus, NotificationType> = {\n      'pending': 'orderConfirmed',\n      'confirmed': 'orderConfirmed',\n      'preparing': 'orderPreparing',\n      'ready': 'orderReady',\n      'delivered': 'orderDelivered',\n      'cancelled': 'orderCancelled'\n    }\n\n    this.showNotification(notificationTypes[status], {\n      title: statusMessages[status],\n      description: `Order #${orderId}`,\n      action: status === 'ready' ? {\n        label: 'Get Directions',\n        onClick: () => console.log('Navigate to pickup location')\n      } : undefined\n    })\n  }\n\n  paymentUpdate(success: boolean, amount: number, method: string) {\n    if (success) {\n      this.showNotification('paymentSuccess', {\n        title: 'Payment successful',\n        description: `₹${amount} charged to ${method}`,\n      })\n    } else {\n      this.showNotification('paymentFailed', {\n        title: 'Payment failed',\n        description: `Unable to process ₹${amount} via ${method}`,\n        action: {\n          label: 'Retry',\n          onClick: () => console.log('Retry payment')\n        }\n      })\n    }\n  }\n\n  lowBalance(currentBalance: number, requiredAmount: number) {\n    this.showNotification('lowBalance', {\n      title: 'Low wallet balance',\n      description: `Balance: ₹${currentBalance} • Required: ₹${requiredAmount}`,\n      action: {\n        label: 'Add Money',\n        onClick: () => console.log('Navigate to wallet topup')\n      }\n    })\n  }\n\n  mealRecommendation(meal: MealItem, reason: string) {\n    this.showNotification('mealRecommendation', {\n      title: `Try ${meal.name}!`,\n      description: reason,\n      action: {\n        label: 'View Meal',\n        onClick: () => console.log('Navigate to meal details', meal.id)\n      }\n    })\n  }\n\n  specialOffer(title: string, description: string, offerCode?: string) {\n    this.showNotification('specialOffer', {\n      title,\n      description: `${description}${offerCode ? ` • Code: ${offerCode}` : ''}`,\n      action: {\n        label: 'View Offers',\n        onClick: () => console.log('Navigate to offers page')\n      }\n    })\n  }\n\n  rfidVerification(success: boolean, location?: string) {\n    if (success) {\n      this.showNotification('rfidVerification', {\n        title: 'RFID verification successful',\n        description: location ? `Verified at ${location}` : undefined,\n      })\n    } else {\n      this.showNotification('paymentFailed', {\n        title: 'RFID verification failed',\n        description: 'Please try scanning your card again',\n        action: {\n          label: 'Retry',\n          onClick: () => console.log('Retry RFID scan')\n        }\n      })\n    }\n  }\n\n  systemMaintenance(message: string, duration?: string) {\n    this.showNotification('systemAlert', {\n      title: 'System maintenance',\n      description: `${message}${duration ? ` • Duration: ${duration}` : ''}`,\n    })\n  }\n}\n\nexport function NotificationSystem({ \n  student, \n  onOrderStatusUpdate,\n  onNotificationClick,\n  className \n}: NotificationSystemProps) {\n  const notificationService = NotificationService.getInstance()\n\n  useEffect(() => {\n    // Initialize notification service with student data\n    notificationService.initialize(student)\n  }, [student, notificationService])\n\n  // Example: Listen for order status updates (in real app, this would come from WebSocket/SSE)\n  useEffect(() => {\n    const mockStatusUpdates = () => {\n      // Simulate receiving order status updates\n      setTimeout(() => {\n        notificationService.orderStatusUpdate('ORD-123', 'confirmed', '15 mins')\n      }, 5000)\n      \n      setTimeout(() => {\n        notificationService.orderStatusUpdate('ORD-123', 'preparing')\n      }, 10000)\n      \n      setTimeout(() => {\n        notificationService.orderStatusUpdate('ORD-123', 'ready')\n      }, 15000)\n    }\n\n    // Only run mock updates in development\n    if (process.env.NODE_ENV === 'development') {\n      // mockStatusUpdates()\n    }\n  }, [notificationService])\n\n  // Expose notification methods for use by other components\n  const showOrderNotification = useCallback((orderId: string, items: string[], total: number) => {\n    notificationService.orderPlaced({ orderId, items, total })\n  }, [notificationService])\n\n  const showPaymentNotification = useCallback((success: boolean, amount: number, method: string) => {\n    notificationService.paymentUpdate(success, amount, method)\n  }, [notificationService])\n\n  const showBalanceWarning = useCallback(() => {\n    if (student.walletBalance < 100) {\n      notificationService.lowBalance(student.walletBalance, 100)\n    }\n  }, [student.walletBalance, notificationService])\n\n  // Check for low balance on mount\n  useEffect(() => {\n    if (student.walletBalance < 50) {\n      setTimeout(() => showBalanceWarning(), 2000)\n    }\n  }, [student.walletBalance, showBalanceWarning])\n\n  // Provide context methods for child components to use\n  React.useEffect(() => {\n    // Attach notification methods to window for global access (development only)\n    if (process.env.NODE_ENV === 'development') {\n      (window as any).hasivu_notifications = {\n        orderPlaced: showOrderNotification,\n        paymentUpdate: showPaymentNotification,\n        balanceWarning: showBalanceWarning,\n        mealRecommendation: (meal: MealItem, reason: string) => \n          notificationService.mealRecommendation(meal, reason),\n        specialOffer: (title: string, description: string, code?: string) =>\n          notificationService.specialOffer(title, description, code),\n        rfidVerification: (success: boolean, location?: string) =>\n          notificationService.rfidVerification(success, location)\n      }\n    }\n  }, [showOrderNotification, showPaymentNotification, showBalanceWarning, notificationService])\n\n  return (\n    <div className={className}>\n      {/* Settings panel for notification preferences */}\n      <div className=\"hidden\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => notificationService.toggleSound(!notificationService['soundEnabled'])}\n        >\n          {notificationService['soundEnabled'] ? 'Mute' : 'Unmute'} Sounds\n        </Button>\n      </div>\n    </div>\n  )\n}\n\n// Export the service instance for use in other components\nexport const notificationService = NotificationService.getInstance()\n\nexport default NotificationSystem","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/NutritionalTooltips.tsx",["2133"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { \n  Info, \n  Zap, \n  Droplets, \n  Wheat, \n  Apple, \n  AlertTriangle, \n  Leaf, \n  Shield,\n  Clock,\n  Users\n} from \"lucide-react\"\nimport { NutritionalInfo, DietaryInfo } from \"./types\"\n\ninterface NutritionalTooltipProps {\n  nutrition: NutritionalInfo\n  dietary: DietaryInfo\n  children: React.ReactNode\n  side?: \"top\" | \"bottom\" | \"left\" | \"right\"\n}\n\nexport function NutritionalTooltip({\n  nutrition,\n  dietary,\n  children,\n  side = \"top\"\n}: NutritionalTooltipProps) {\n  // Calculate daily value percentages (based on 2000 calorie diet)\n  const getDVPercentage = (value: number, dv: number) => Math.round((value / dv) * 100)\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          {children}\n        </TooltipTrigger>\n        <TooltipContent side={side} className=\"w-80 p-0\">\n          <div className=\"p-4 space-y-3\">\n            {/* Header */}\n            <div className=\"flex items-center gap-2 pb-2 border-b\">\n              <Apple className=\"h-4 w-4 text-green-600\" />\n              <span className=\"font-semibold text-sm\">Nutritional Information</span>\n            </div>\n\n            {/* Calories - Main highlight */}\n            <div className=\"text-center p-3 bg-muted rounded-lg\">\n              <div className=\"flex items-center justify-center gap-2 mb-1\">\n                <Zap className=\"h-5 w-5 text-orange-500\" />\n                <span className=\"text-2xl font-bold\">{nutrition.calories}</span>\n                <span className=\"text-sm text-muted-foreground\">calories</span>\n              </div>\n              <Progress \n                value={getDVPercentage(nutrition.calories, 2000)} \n                className=\"h-2\"\n              />\n              <span className=\"text-xs text-muted-foreground\">\n                {getDVPercentage(nutrition.calories, 2000)}% Daily Value*\n              </span>\n            </div>\n\n            {/* Macronutrients */}\n            <div className=\"space-y-2\">\n              <div className=\"text-sm font-medium\">Macronutrients</div>\n              \n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <Wheat className=\"h-3 w-3 text-amber-600\" />\n                    <span>Carbs</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{nutrition.carbohydrates}g</span>\n                    <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0\">\n                      {getDVPercentage(nutrition.carbohydrates, 300)}%\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <Droplets className=\"h-3 w-3 text-red-600\" />\n                    <span>Protein</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{nutrition.protein}g</span>\n                    <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0\">\n                      {getDVPercentage(nutrition.protein, 50)}%\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-3 w-3 rounded-full bg-yellow-500\" />\n                    <span>Fat</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{nutrition.fat}g</span>\n                    <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0\">\n                      {getDVPercentage(nutrition.fat, 65)}%\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-3 w-3 rounded-full bg-green-500\" />\n                    <span>Fiber</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{nutrition.fiber}g</span>\n                    <Badge variant=\"outline\" className=\"text-xs px-1.5 py-0\">\n                      {getDVPercentage(nutrition.fiber, 25)}%\n                    </Badge>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center\">\n                  <div className=\"flex items-center gap-2\">\n                    <AlertTriangle className=\"h-3 w-3 text-red-500\" />\n                    <span>Sodium</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <span className=\"font-medium\">{nutrition.sodium}mg</span>\n                    <Badge \n                      variant={getDVPercentage(nutrition.sodium, 2300) > 20 ? \"destructive\" : \"outline\"}\n                      className=\"text-xs px-1.5 py-0\"\n                    >\n                      {getDVPercentage(nutrition.sodium, 2300)}%\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Separator />\n\n            {/* Dietary Information */}\n            <div className=\"space-y-2\">\n              <div className=\"text-sm font-medium\">Dietary Information</div>\n              <div className=\"flex flex-wrap gap-1\">\n                {dietary.vegetarian && (\n                  <Badge className=\"text-xs bg-green-100 text-green-800 hover:bg-green-100\">\n                    <Leaf className=\"h-2.5 w-2.5 mr-1\" />\n                    Vegetarian\n                  </Badge>\n                )}\n                {dietary.vegan && (\n                  <Badge className=\"text-xs bg-green-100 text-green-800 hover:bg-green-100\">\n                    <Leaf className=\"h-2.5 w-2.5 mr-1\" />\n                    Vegan\n                  </Badge>\n                )}\n                {dietary.glutenFree && (\n                  <Badge className=\"text-xs bg-blue-100 text-blue-800 hover:bg-blue-100\">\n                    <Shield className=\"h-2.5 w-2.5 mr-1\" />\n                    Gluten-Free\n                  </Badge>\n                )}\n                {dietary.dairyFree && (\n                  <Badge className=\"text-xs bg-blue-100 text-blue-800 hover:bg-blue-100\">\n                    <Shield className=\"h-2.5 w-2.5 mr-1\" />\n                    Dairy-Free\n                  </Badge>\n                )}\n                {dietary.nutFree && (\n                  <Badge className=\"text-xs bg-purple-100 text-purple-800 hover:bg-purple-100\">\n                    <Shield className=\"h-2.5 w-2.5 mr-1\" />\n                    Nut-Free\n                  </Badge>\n                )}\n                {dietary.spicy && (\n                  <Badge className=\"text-xs bg-red-100 text-red-800 hover:bg-red-100\">\n                    🌶️ Spicy\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            {/* Allergens Warning */}\n            {dietary.allergens && dietary.allergens.length > 0 && (\n              <>\n                <Separator />\n                <div className=\"space-y-1\">\n                  <div className=\"flex items-center gap-2 text-sm font-medium text-amber-600\">\n                    <AlertTriangle className=\"h-3 w-3\" />\n                    Allergen Information\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Contains: {dietary.allergens.join(\", \")}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {/* Footer */}\n            <div className=\"pt-2 border-t\">\n              <div className=\"text-xs text-muted-foreground\">\n                * % Daily Values are based on a 2,000 calorie diet. Your daily values may be higher or lower depending on your calorie needs.\n              </div>\n            </div>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\n// Quick info tooltip for meal attributes\ninterface QuickInfoTooltipProps {\n  info: string\n  children: React.ReactNode\n  icon?: React.ReactNode\n}\n\nexport function QuickInfoTooltip({ info, children, icon }: QuickInfoTooltipProps) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          {children}\n        </TooltipTrigger>\n        <TooltipContent className=\"max-w-xs\">\n          <div className=\"flex items-start gap-2\">\n            {icon && <div className=\"mt-0.5\">{icon}</div>}\n            <span className=\"text-sm\">{info}</span>\n          </div>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\n// Preparation time tooltip\nexport function PreparationTimeTooltip({ \n  minutes, \n  children \n}: { \n  minutes: number\n  children: React.ReactNode \n}) {\n  const getPreparationInfo = (minutes: number) => {\n    if (minutes <= 15) {\n      return {\n        text: `Quick preparation in ${minutes} minutes. Perfect for busy schedules!`,\n        color: \"text-green-600\"\n      }\n    } else if (minutes <= 30) {\n      return {\n        text: `Fresh preparation takes ${minutes} minutes. Worth the wait for quality!`,\n        color: \"text-amber-600\"\n      }\n    } else {\n      return {\n        text: `Artisan preparation requires ${minutes} minutes. Premium quality meal.`,\n        color: \"text-red-600\"\n      }\n    }\n  }\n\n  const info = getPreparationInfo(minutes)\n\n  return (\n    <QuickInfoTooltip \n      info={info.text}\n      icon={<Clock className={`h-3 w-3 ${info.color}`} />}\n    >\n      {children}\n    </QuickInfoTooltip>\n  )\n}\n\n// Serving size tooltip\nexport function ServingSizeTooltip({ \n  size, \n  children \n}: { \n  size: string\n  children: React.ReactNode \n}) {\n  return (\n    <QuickInfoTooltip \n      info={`Serving size: ${size}. Perfect portion for balanced nutrition.`}\n      icon={<Users className=\"h-3 w-3 text-blue-600\" />}\n    >\n      {children}\n    </QuickInfoTooltip>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/OrderSummary.tsx",["2134","2135","2136"],[],"/**\n * OrderSummary Component - Enhanced Order Review and Checkout\n * Complete order summary with payment, delivery options and RFID integration\n * Enhanced with better mobile responsiveness and accessibility\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { \n  ShoppingCart, \n  Clock, \n  MapPin, \n  CreditCard, \n  Wallet, \n  AlertCircle, \n  CheckCircle,\n  Minus,\n  Plus,\n  Trash2,\n  Users,\n  Star,\n  Smartphone,\n  Shield,\n  Zap,\n  Heart,\n  TrendingUp\n} from 'lucide-react';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport type { OrderSummaryProps, MealOrderForm } from './types';\nimport {\n  formatCurrency,\n  validateOrder,\n  calculateTotalNutrition,\n  needsParentApproval,\n  formatTime,\n  calculateEstimatedDelivery,\n  generatePickupCode,\n} from './utils';\nimport { cn } from '@/lib/utils';\n\nconst OrderSummary: React.FC<OrderSummaryProps> = ({\n  orderSummary,\n  student,\n  onUpdateQuantity,\n  onRemoveItem,\n  onPlaceOrder,\n  isPlacingOrder = false,\n}) => {\n  const [showNutrition, setShowNutrition] = useState(false);\n  const [showRFIDCode, setShowRFIDCode] = useState(false);\n  const [generatedPickupCode, setGeneratedPickupCode] = useState<string>('');\n  \n  const form = useForm<MealOrderForm>({\n    defaultValues: {\n      deliveryTime: orderSummary.selectedDeliverySlot.id,\n      deliveryLocation: orderSummary.selectedDeliverySlot.deliveryLocation,\n      paymentMethod: 'wallet',\n      specialInstructions: '',\n      parentApprovalRequested: false,\n    },\n  });\n\n  // Calculate total nutrition\n  const totalNutrition = calculateTotalNutrition(orderSummary.items);\n  \n  // Validate order\n  const validation = validateOrder(orderSummary, student);\n  \n  // Check if parent approval is needed\n  const requiresApproval = needsParentApproval(orderSummary, student);\n\n  // Set parent approval automatically if needed\n  useEffect(() => {\n    if (requiresApproval) {\n      form.setValue('parentApprovalRequested', true);\n    }\n  }, [requiresApproval, form]);\n\n  // Generate pickup code when order is ready\n  const handleGeneratePickupCode = useCallback(() => {\n    const orderId = `ORDER_${Date.now()}`;\n    const code = generatePickupCode(orderId, student.id);\n    setGeneratedPickupCode(code);\n    setShowRFIDCode(true);\n  }, [student.id]);\n\n  const onSubmit = useCallback(async (data: MealOrderForm) => {\n    if (!validation.isValid) return;\n    \n    try {\n      await onPlaceOrder(data);\n      // Generate pickup code after successful order\n      handleGeneratePickupCode();\n    } catch (error) {\n      console.error('Order placement failed:', error);\n    }\n  }, [validation.isValid, onPlaceOrder, handleGeneratePickupCode]);\n\n  const handleQuantityUpdate = useCallback((mealId: string, change: number) => {\n    const currentItem = orderSummary.items.find(item => item.mealItem.id === mealId);\n    if (currentItem) {\n      const newQuantity = Math.max(0, currentItem.quantity + change);\n      if (newQuantity === 0) {\n        onRemoveItem(mealId);\n      } else {\n        onUpdateQuantity(mealId, newQuantity);\n      }\n    }\n  }, [orderSummary.items, onRemoveItem, onUpdateQuantity]);\n\n  if (orderSummary.items.length === 0) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto shadow-lg border-0\">\n        <CardContent className=\"flex flex-col items-center justify-center py-16 px-6\">\n          <div className=\"bg-gray-100 p-6 rounded-full mb-6\">\n            <ShoppingCart className=\"h-12 w-12 text-gray-400\" />\n          </div>\n          <h3 className=\"text-xl font-bold text-gray-800 mb-3\">Your cart is empty</h3>\n          <p className=\"text-sm text-gray-600 text-center leading-relaxed max-w-sm\">\n            Browse through our delicious meal categories and add your favorite items to get started!\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Order Items */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader className=\"bg-gradient-to-r from-blue-50 to-purple-50 rounded-t-lg\">\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-white p-2 rounded-lg shadow-sm\">\n                <ShoppingCart className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  Order Summary\n                </span>\n                <p className=\"text-sm text-gray-600 mt-0.5\">\n                  {orderSummary.items.length} item{orderSummary.items.length !== 1 ? 's' : ''} • \n                  Total: {formatCurrency(orderSummary.total)}\n                </p>\n              </div>\n            </div>\n            <Badge \n              variant=\"secondary\" \n              className=\"bg-primary/10 text-primary px-3 py-1.5 font-semibold\"\n            >\n              {orderSummary.items.length}\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"p-6 space-y-4\">\n          {orderSummary.items.map((item, index) => (\n            <div \n              key={item.mealItem.id} \n              className={cn(\n                'border rounded-xl p-4 transition-all duration-200 hover:shadow-md',\n                'bg-gradient-to-r from-white to-gray-50',\n                index !== orderSummary.items.length - 1 && 'mb-4'\n              )}\n            >\n              <div className=\"flex items-start space-x-4\">\n                {/* Enhanced Meal Image */}\n                <div className=\"relative group\">\n                  <img\n                    src={item.mealItem.imageUrl}\n                    alt={item.mealItem.name}\n                    className=\"w-20 h-20 object-cover rounded-xl shadow-md transition-transform duration-200 group-hover:scale-105\"\n                  />\n                  <div className=\"absolute inset-0 bg-black/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-200 flex items-center justify-center\">\n                    <Heart className=\"h-4 w-4 text-white\" />\n                  </div>\n                </div>\n                \n                {/* Meal Details */}\n                <div className=\"flex-1 min-w-0\">\n                  <h4 className=\"font-semibold text-sm\">{item.mealItem.name}</h4>\n                  <p className=\"text-xs text-gray-600 line-clamp-2\">\n                    {item.mealItem.description}\n                  </p>\n                  \n                  {/* Meal Info */}\n                  <div className=\"flex items-center space-x-3 mt-2 text-xs text-gray-500\">\n                    <div className=\"flex items-center\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      {item.mealItem.preparationTime} min\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Users className=\"h-3 w-3 mr-1\" />\n                      {item.mealItem.servingSize}\n                    </div>\n                    <div className=\"flex items-center\">\n                      <Star className=\"h-3 w-3 mr-1\" />\n                      {item.mealItem.rating}\n                    </div>\n                  </div>\n\n                  {/* Special Instructions */}\n                  {item.specialInstructions && (\n                    <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs\">\n                      <strong>Special Instructions:</strong> {item.specialInstructions}\n                    </div>\n                  )}\n\n                  {/* Customizations */}\n                  {item.customizations && (\n                    <div className=\"mt-2 space-y-1\">\n                      {item.customizations.spiceLevel && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          Spice: {item.customizations.spiceLevel}\n                        </Badge>\n                      )}\n                      {item.customizations.extraItems && item.customizations.extraItems.length > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{item.customizations.extraItems.join(', ')}\n                        </Badge>\n                      )}\n                      {item.customizations.removedItems && item.customizations.removedItems.length > 0 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          -{item.customizations.removedItems.join(', ')}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Quantity and Price */}\n                <div className=\"flex flex-col items-end space-y-2\">\n                  <div className=\"text-lg font-semibold\">\n                    {formatCurrency(item.mealItem.price * item.quantity)}\n                  </div>\n                  \n                  {/* Quantity Controls */}\n                  <div className=\"flex items-center border rounded-md\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityUpdate(item.mealItem.id, -1)}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Minus className=\"h-3 w-3\" />\n                    </Button>\n                    <span className=\"px-3 py-1 text-sm font-medium min-w-[2rem] text-center\">\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleQuantityUpdate(item.mealItem.id, 1)}\n                      disabled={item.quantity >= item.mealItem.maxQuantityPerStudent}\n                      className=\"h-8 w-8 p-0\"\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n\n                  {/* Remove Button */}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onRemoveItem(item.mealItem.id)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  >\n                    <Trash2 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Enhanced Nutritional Summary */}\n      <Card className=\"shadow-lg border-0\">\n        <CardHeader \n          className=\"cursor-pointer hover:bg-gray-50 transition-colors duration-200 rounded-t-lg\"\n          onClick={() => setShowNutrition(!showNutrition)}\n        >\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-green-100 p-2 rounded-lg\">\n                <TrendingUp className=\"h-5 w-5 text-green-600\" />\n              </div>\n              <div>\n                <span className=\"text-lg font-bold text-gray-900\">Nutritional Summary</span>\n                <p className=\"text-sm text-gray-600 mt-0.5\">\n                  Complete breakdown of your meal nutrition\n                </p>\n              </div>\n            </div>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              className=\"bg-gray-100 hover:bg-gray-200 rounded-full w-8 h-8 p-0\"\n            >\n              {showNutrition ? '▼' : '▶'}\n            </Button>\n          </CardTitle>\n        </CardHeader>\n        {showNutrition && (\n          <CardContent className=\"p-6\">\n            {/* Nutrition Grid */}\n            <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              <div className=\"text-center bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl\">\n                <div className=\"text-2xl font-bold text-red-700 mb-1\">\n                  {Math.round(totalNutrition.calories)}\n                </div>\n                <div className=\"text-sm font-medium text-red-600\">Calories</div>\n                <div className=\"text-xs text-red-500 mt-1\">kcal</div>\n              </div>\n              <div className=\"text-center bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl\">\n                <div className=\"text-2xl font-bold text-blue-700 mb-1\">\n                  {Math.round(totalNutrition.protein)}g\n                </div>\n                <div className=\"text-sm font-medium text-blue-600\">Protein</div>\n                <div className=\"text-xs text-blue-500 mt-1\">grams</div>\n              </div>\n              <div className=\"text-center bg-gradient-to-br from-yellow-50 to-yellow-100 p-4 rounded-xl\">\n                <div className=\"text-2xl font-bold text-yellow-700 mb-1\">\n                  {Math.round(totalNutrition.carbohydrates)}g\n                </div>\n                <div className=\"text-sm font-medium text-yellow-600\">Carbs</div>\n                <div className=\"text-xs text-yellow-500 mt-1\">grams</div>\n              </div>\n              <div className=\"text-center bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl\">\n                <div className=\"text-2xl font-bold text-purple-700 mb-1\">\n                  {Math.round(totalNutrition.fat)}g\n                </div>\n                <div className=\"text-sm font-medium text-purple-600\">Fat</div>\n                <div className=\"text-xs text-purple-500 mt-1\">grams</div>\n              </div>\n            </div>\n\n            {/* Additional Nutrition Info */}\n            <div className=\"grid grid-cols-2 gap-4 mb-6\">\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium text-gray-700\">Fiber:</span>\n                  <span className=\"font-bold text-gray-900\">{Math.round(totalNutrition.fiber)}g</span>\n                </div>\n              </div>\n              <div className=\"bg-gray-50 p-3 rounded-lg\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium text-gray-700\">Sodium:</span>\n                  <span className=\"font-bold text-gray-900\">{Math.round(totalNutrition.sodium)}mg</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Enhanced Nutritional Guidelines */}\n            <Alert className=\"border-green-200 bg-green-50\">\n              <Shield className=\"h-4 w-4 text-green-600\" />\n              <AlertDescription className=\"text-green-800\">\n                <span className=\"font-semibold\">Daily Guidelines for Grade {student.grade}:</span>\n                <div className=\"grid grid-cols-2 gap-2 mt-2 text-xs\">\n                  <div>Calories: 1800-2200 kcal</div>\n                  <div>Protein: 50-65g</div>\n                  <div>Carbs: 225-325g</div>\n                  <div>Fat: 60-85g</div>\n                </div>\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        )}\n      </Card>\n\n      {/* Order Details Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Order Details</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Delivery Time */}\n              <FormField\n                control={form.control}\n                name=\"deliveryTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center space-x-2\">\n                      <Clock className=\"h-4 w-4\" />\n                      <span>Delivery Time</span>\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select delivery time\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value={orderSummary.selectedDeliverySlot.id}>\n                          {formatTime(orderSummary.selectedDeliverySlot.startTime)} - {formatTime(orderSummary.selectedDeliverySlot.endTime)}\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Estimated delivery: {calculateEstimatedDelivery(orderSummary.items, orderSummary.selectedDeliverySlot)}\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Delivery Location */}\n              <FormField\n                control={form.control}\n                name=\"deliveryLocation\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center space-x-2\">\n                      <MapPin className=\"h-4 w-4\" />\n                      <span>Delivery Location</span>\n                    </FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Classroom or pickup location\" \n                        {...field} \n                        defaultValue={orderSummary.selectedDeliverySlot.deliveryLocation}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Where should we deliver your order?\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Payment Method */}\n              <FormField\n                control={form.control}\n                name=\"paymentMethod\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center space-x-2\">\n                      <CreditCard className=\"h-4 w-4\" />\n                      <span>Payment Method</span>\n                    </FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select payment method\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"wallet\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Wallet className=\"h-4 w-4\" />\n                            <span>School Wallet ({formatCurrency(student.walletBalance)} available)</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"upi\">\n                          <div className=\"flex items-center space-x-2\">\n                            <CreditCard className=\"h-4 w-4\" />\n                            <span>UPI Payment</span>\n                          </div>\n                        </SelectItem>\n                        <SelectItem value=\"cash\">\n                          <div className=\"flex items-center space-x-2\">\n                            <span>💵</span>\n                            <span>Cash on Delivery</span>\n                          </div>\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Special Instructions */}\n              <FormField\n                control={form.control}\n                name=\"specialInstructions\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Special Instructions (Optional)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Any specific requirements or preferences...\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Let us know if you have any special requests\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {/* Parent Approval */}\n              {requiresApproval && (\n                <Alert>\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    This order requires parent approval due to the amount ({formatCurrency(orderSummary.total)}) \n                    or your account settings. Your parent will be notified and must approve before the order is processed.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {/* Validation Errors */}\n              {!validation.isValid && (\n                <Alert variant=\"destructive\">\n                  <AlertCircle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <div className=\"space-y-1\">\n                      {validation.errors.map((error, index) => (\n                        <div key={index}>• {error}</div>\n                      ))}\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n\n      {/* Price Breakdown */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Price Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"flex justify-between text-sm\">\n            <span>Subtotal</span>\n            <span>{formatCurrency(orderSummary.subtotal)}</span>\n          </div>\n          \n          {orderSummary.discounts > 0 && (\n            <div className=\"flex justify-between text-sm text-green-600\">\n              <span>Discounts</span>\n              <span>-{formatCurrency(orderSummary.discounts)}</span>\n            </div>\n          )}\n          \n          <div className=\"flex justify-between text-sm\">\n            <span>Taxes (GST)</span>\n            <span>{formatCurrency(orderSummary.taxes)}</span>\n          </div>\n          \n          <div className=\"flex justify-between text-sm\">\n            <span>Delivery Charges</span>\n            <span>{orderSummary.deliveryCharges === 0 ? 'FREE' : formatCurrency(orderSummary.deliveryCharges)}</span>\n          </div>\n          \n          <Separator />\n          \n          <div className=\"flex justify-between font-semibold text-lg\">\n            <span>Total</span>\n            <span>{formatCurrency(orderSummary.total)}</span>\n          </div>\n          \n          {/* Savings Display */}\n          {orderSummary.discounts > 0 && (\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                You saved {formatCurrency(orderSummary.discounts)}! 🎉\n              </Badge>\n            </div>\n          )}\n        </CardContent>\n        \n        <CardFooter className=\"p-6\">\n          <div className=\"w-full space-y-4\">\n            {/* Main Order Button */}\n            <Button\n              type=\"submit\"\n              className={cn(\n                'w-full h-12 text-lg font-bold shadow-lg transition-all duration-300',\n                'hover:shadow-xl hover:-translate-y-1 active:translate-y-0',\n                !validation.isValid || isPlacingOrder\n                  ? 'opacity-50 cursor-not-allowed'\n                  : 'bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700'\n              )}\n              disabled={!validation.isValid || isPlacingOrder}\n              onClick={form.handleSubmit(onSubmit)}\n            >\n              {isPlacingOrder ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-3\" />\n                  Processing Order...\n                </>\n              ) : (\n                <>\n                  <CheckCircle className=\"h-5 w-5 mr-3\" />\n                  {requiresApproval ? 'Send for Parent Approval' : 'Place Order Now'}\n                  <span className=\"mx-2\">•</span>\n                  <span className=\"bg-white/20 px-2 py-1 rounded-md\">\n                    {formatCurrency(orderSummary.total)}\n                  </span>\n                </>\n              )}\n            </Button>\n\n            {/* RFID Pickup Code Display */}\n            {showRFIDCode && generatedPickupCode && (\n              <Alert className=\"border-blue-200 bg-blue-50\">\n                <Smartphone className=\"h-4 w-4 text-blue-600\" />\n                <AlertDescription className=\"text-blue-800\">\n                  <div className=\"flex flex-col space-y-2\">\n                    <span className=\"font-semibold\">RFID Pickup Code Generated!</span>\n                    <div className=\"bg-white p-3 rounded-lg border border-blue-200\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-mono font-bold text-gray-900 tracking-wider\">\n                          {generatedPickupCode}\n                        </div>\n                        <div className=\"text-xs text-gray-600 mt-1\">\n                          Show this code at pickup counter\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-xs\">\n                      ℹ️ This code is linked to your RFID card: {student.rfidCardId || 'Not linked'}\n                    </div>\n                  </div>\n                </AlertDescription>\n              </Alert>\n            )}\n\n            {/* Security and Safety Notice */}\n            <div className=\"flex items-center justify-center space-x-2 text-xs text-gray-600\">\n              <Shield className=\"h-3 w-3\" />\n              <span>Secure payment • Safe delivery • Fresh ingredients</span>\n            </div>\n          </div>\n        </CardFooter>\n      </Card>\n\n      {/* RFID Integration Info (if not shown above) */}\n      {student.rfidCardId && !showRFIDCode && (\n        <Card className=\"shadow-md border border-blue-200 bg-gradient-to-r from-blue-50 to-purple-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"bg-blue-100 p-2 rounded-lg\">\n                <Smartphone className=\"h-5 w-5 text-blue-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-blue-900\">RFID Card Linked</h4>\n                <p className=\"text-sm text-blue-700\">\n                  Card ID: {student.rfidCardId} • Ready for contactless pickup\n                </p>\n              </div>\n              <div className=\"bg-green-100 px-3 py-1 rounded-full\">\n                <CheckCircle className=\"h-4 w-4 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default OrderSummary;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/QuantitySelector.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/RFIDInterface.tsx",["2137","2138","2139"],[],"/**\n * RFIDInterface Component - RFID Card Pickup Interface\n * Handles RFID-based meal pickup verification\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { CreditCard, CheckCircle, AlertCircle, Clock, MapPin, User, QrCode } from 'lucide-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport type { RFIDInterfaceProps, RFIDPickupInfo } from './types';\nimport { formatCurrency, formatTime, generatePickupCode } from './utils';\n\nconst RFIDInterface: React.FC<RFIDInterfaceProps> = ({\n  studentInfo,\n  pendingOrders,\n  onRFIDScan,\n  isScanning = false,\n}) => {\n  const [manualCardId, setManualCardId] = useState('');\n  const [scanResult, setScanResult] = useState<{\n    status: 'success' | 'error' | 'warning';\n    message: string;\n    order?: any;\n  } | null>(null);\n  const [pickupCode, setPickupCode] = useState('');\n\n  // Generate pickup code for first pending order\n  useEffect(() => {\n    if (pendingOrders.length > 0) {\n      const code = generatePickupCode(pendingOrders[0].orderId, studentInfo.id);\n      setPickupCode(code);\n    }\n  }, [pendingOrders, studentInfo.id]);\n\n  const handleManualScan = async () => {\n    if (!manualCardId.trim()) {\n      setScanResult({\n        status: 'error',\n        message: 'Please enter a valid RFID card number',\n      });\n      return;\n    }\n\n    try {\n      await onRFIDScan(manualCardId.trim());\n      setScanResult({\n        status: 'success',\n        message: 'RFID card scanned successfully! Order verification in progress...',\n      });\n      setManualCardId('');\n    } catch (error) {\n      setScanResult({\n        status: 'error',\n        message: 'Failed to scan RFID card. Please try again.',\n      });\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleManualScan();\n    }\n  };\n\n  // Clear scan result after 5 seconds\n  useEffect(() => {\n    if (scanResult) {\n      const timer = setTimeout(() => {\n        setScanResult(null);\n      }, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [scanResult]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Student Information */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <User className=\"h-5 w-5\" />\n            <span>Student Information</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Name:</span>\n                <span className=\"font-medium\">{studentInfo.name}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Grade & Section:</span>\n                <span className=\"font-medium\">{studentInfo.grade}-{studentInfo.section}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Roll Number:</span>\n                <span className=\"font-medium\">{studentInfo.rollNumber}</span>\n              </div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">Wallet Balance:</span>\n                <span className=\"font-medium text-green-600\">\n                  {formatCurrency(studentInfo.walletBalance)}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-gray-600\">RFID Card:</span>\n                <span className=\"font-medium\">\n                  {studentInfo.rfidCardId ? (\n                    <Badge variant=\"secondary\" className=\"bg-green-100 text-green-700\">\n                      ✅ Linked\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"text-orange-600\">\n                      ⚠️ Not Linked\n                    </Badge>\n                  )}\n                </span>\n              </div>\n              {pickupCode && (\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Pickup Code:</span>\n                  <span className=\"font-mono font-bold text-lg text-blue-600\">\n                    {pickupCode}\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* RFID Scanner Interface */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <CreditCard className=\"h-5 w-5\" />\n            <span>RFID Meal Pickup</span>\n            {isScanning && (\n              <div className=\"flex items-center space-x-2 text-blue-600\">\n                <div className=\"animate-pulse\">📡</div>\n                <span className=\"text-sm\">Scanning...</span>\n              </div>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Scan Result Display */}\n          {scanResult && (\n            <Alert \n              variant={scanResult.status === 'error' ? 'destructive' : 'default'}\n              className={\n                scanResult.status === 'success' ? 'border-green-200 bg-green-50' :\n                scanResult.status === 'warning' ? 'border-yellow-200 bg-yellow-50' :\n                'border-red-200 bg-red-50'\n              }\n            >\n              {scanResult.status === 'success' && <CheckCircle className=\"h-4 w-4\" />}\n              {scanResult.status === 'error' && <AlertCircle className=\"h-4 w-4\" />}\n              {scanResult.status === 'warning' && <AlertCircle className=\"h-4 w-4\" />}\n              <AlertDescription>{scanResult.message}</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Manual RFID Input */}\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"inline-flex items-center justify-center w-24 h-24 bg-blue-100 rounded-full mb-4\">\n                <CreditCard className=\"h-12 w-12 text-blue-600\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Tap Your RFID Card</h3>\n              <p className=\"text-gray-600 text-sm mb-4\">\n                Place your RFID card near the scanner or enter the card number manually\n              </p>\n            </div>\n\n            <div className=\"max-w-md mx-auto space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"rfid-input\">Manual RFID Entry</Label>\n                <div className=\"flex space-x-2\">\n                  <Input\n                    id=\"rfid-input\"\n                    type=\"text\"\n                    placeholder=\"Enter RFID card number\"\n                    value={manualCardId}\n                    onChange={(e) => setManualCardId(e.target.value.toUpperCase())}\n                    onKeyPress={handleKeyPress}\n                    maxLength={16}\n                    className=\"font-mono\"\n                  />\n                  <Button \n                    onClick={handleManualScan}\n                    disabled={isScanning || !manualCardId.trim()}\n                  >\n                    Scan\n                  </Button>\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  Enter 8-16 character RFID card number (letters and numbers only)\n                </p>\n              </div>\n\n              {/* QR Code Alternative */}\n              <div className=\"text-center\">\n                <Separator className=\"my-4\" />\n                <p className=\"text-sm text-gray-600 mb-2\">Alternative pickup method</p>\n                <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n                  <QrCode className=\"h-4 w-4\" />\n                  <span>Show QR Code</span>\n                </Button>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  Show this to the meal counter staff\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Orders */}\n      {pendingOrders.length > 0 ? (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"flex items-center space-x-2\">\n                <Clock className=\"h-5 w-5\" />\n                <span>Pending Pickups ({pendingOrders.length})</span>\n              </span>\n              <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-700\">\n                Ready for Pickup\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {pendingOrders.map((order) => (\n              <div key={order.orderId} className=\"border rounded-lg p-4\">\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div>\n                    <h4 className=\"font-semibold\">Order #{order.orderId.slice(-6).toUpperCase()}</h4>\n                    <p className=\"text-sm text-gray-600\">\n                      Placed on {new Date(order.date).toLocaleDateString()}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-semibold\">{formatCurrency(order.total)}</div>\n                    <Badge \n                      variant=\"secondary\"\n                      className={`text-xs ${\n                        order.status === 'ready' ? 'bg-green-100 text-green-700' :\n                        order.status === 'preparing' ? 'bg-yellow-100 text-yellow-700' :\n                        'bg-blue-100 text-blue-700'\n                      }`}\n                    >\n                      {order.status === 'ready' ? '✅ Ready' :\n                       order.status === 'preparing' ? '👨‍🍳 Preparing' :\n                       '🔄 Confirmed'}\n                    </Badge>\n                  </div>\n                </div>\n\n                {/* Order Items Summary */}\n                <div className=\"space-y-2\">\n                  {order.items.slice(0, 3).map((item, index) => (\n                    <div key={index} className=\"flex justify-between text-sm\">\n                      <span>{item.quantity}x {item.mealItem.name}</span>\n                      <span>{formatCurrency(item.mealItem.price * item.quantity)}</span>\n                    </div>\n                  ))}\n                  {order.items.length > 3 && (\n                    <div className=\"text-sm text-gray-500\">\n                      +{order.items.length - 3} more items\n                    </div>\n                  )}\n                </div>\n\n                {/* Pickup Instructions */}\n                <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n                  <div className=\"flex items-start space-x-2\">\n                    <MapPin className=\"h-4 w-4 text-blue-600 mt-0.5\" />\n                    <div className=\"text-sm\">\n                      <p className=\"font-medium text-blue-800\">Pickup Instructions:</p>\n                      <p className=\"text-blue-700\">\n                        Visit the meal counter with your RFID card or show pickup code: \n                        <span className=\"font-mono font-bold ml-1\">{pickupCode}</span>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* RFID Verification Status */}\n                {studentInfo.rfidCardId && (\n                  <div className=\"mt-3 flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2 text-sm text-green-600\">\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <span>RFID verification enabled</span>\n                    </div>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Verify Pickup\n                    </Button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"flex flex-col items-center justify-center py-12\">\n            <Clock className=\"h-16 w-16 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Pending Orders</h3>\n            <p className=\"text-sm text-gray-500 text-center\">\n              You don't have any orders ready for pickup right now.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* RFID Setup Instructions */}\n      {!studentInfo.rfidCardId && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <AlertCircle className=\"h-5 w-5 text-orange-500\" />\n              <span>RFID Card Setup Required</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Alert className=\"border-orange-200 bg-orange-50\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>\n                <div className=\"space-y-2\">\n                  <p>Your RFID card is not linked to your account. To enable quick pickup:</p>\n                  <ol className=\"list-decimal list-inside space-y-1 text-sm\">\n                    <li>Visit the school administrative office</li>\n                    <li>Bring your student ID and RFID card</li>\n                    <li>Request RFID linking to your meal account</li>\n                    <li>Test the card with a staff member</li>\n                  </ol>\n                  <p className=\"text-sm mt-2\">\n                    <strong>Note:</strong> You can still use the pickup code method shown above.\n                  </p>\n                </div>\n              </AlertDescription>\n            </Alert>\n            \n            <div className=\"mt-4 text-center\">\n              <Button variant=\"outline\">\n                Contact Support for RFID Setup\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Pickup History */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Recent Pickup History</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {/* This would be populated with actual pickup history */}\n            <div className=\"text-center text-gray-500 text-sm py-8\">\n              <Clock className=\"h-8 w-8 mx-auto mb-2 text-gray-400\" />\n              <p>No recent pickup history available</p>\n              <p className=\"text-xs mt-1\">Your pickup history will appear here</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RFIDInterface;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/RFIDVerification.tsx",["2140"],[],"/**\n * RFID Verification Component\n * Uses InputOTP for RFID card verification and security codes\n */\n\n\"use client\"\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator } from '@/components/ui/input-otp'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Progress } from '@/components/ui/progress'\nimport { \n  CreditCard, \n  Shield, \n  CheckCircle, \n  XCircle, \n  Clock, \n  Scan,\n  AlertTriangle,\n  RefreshCw,\n  User,\n  MapPin\n} from 'lucide-react'\nimport { toast } from 'sonner'\n\nimport type { StudentInfo, RFIDPickupInfo, OrderHistoryItem } from './types'\n\ninterface RFIDVerificationProps {\n  studentInfo: StudentInfo\n  pendingOrders: OrderHistoryItem[]\n  onVerificationComplete: (rfidInfo: RFIDPickupInfo) => void\n  onVerificationFailed: (error: string) => void\n  className?: string\n  isScanning?: boolean\n}\n\ninterface VerificationState {\n  step: 'rfid' | 'security' | 'location' | 'complete'\n  rfidCode: string\n  securityCode: string\n  locationCode: string\n  isVerifying: boolean\n  error: string | null\n  progress: number\n  selectedOrder: OrderHistoryItem | null\n}\n\nconst VERIFICATION_TIMEOUT = 30000 // 30 seconds\nconst RFID_CODE_LENGTH = 6\nconst SECURITY_CODE_LENGTH = 4\nconst LOCATION_CODE_LENGTH = 3\n\nexport function RFIDVerification({\n  studentInfo,\n  pendingOrders,\n  onVerificationComplete,\n  onVerificationFailed,\n  className,\n  isScanning = false\n}: RFIDVerificationProps) {\n  const [state, setState] = useState<VerificationState>({\n    step: 'rfid',\n    rfidCode: '',\n    securityCode: '',\n    locationCode: '',\n    isVerifying: false,\n    error: null,\n    progress: 0,\n    selectedOrder: pendingOrders[0] || null\n  })\n\n  const [timeRemaining, setTimeRemaining] = useState(VERIFICATION_TIMEOUT / 1000)\n\n  // Timeout effect\n  useEffect(() => {\n    if (!state.isVerifying) return\n\n    const interval = setInterval(() => {\n      setTimeRemaining((prev) => {\n        if (prev <= 1) {\n          setState(prev => ({ ...prev, isVerifying: false, error: 'Verification timeout' }))\n          onVerificationFailed('Verification timeout. Please try again.')\n          return VERIFICATION_TIMEOUT / 1000\n        }\n        return prev - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(interval)\n  }, [state.isVerifying, onVerificationFailed])\n\n  // Auto-start verification when RFID code is complete\n  useEffect(() => {\n    if (state.rfidCode.length === RFID_CODE_LENGTH && !state.isVerifying && state.step === 'rfid') {\n      handleRFIDVerification()\n    }\n  }, [state.rfidCode])\n\n  // Auto-advance when security code is complete\n  useEffect(() => {\n    if (state.securityCode.length === SECURITY_CODE_LENGTH && state.step === 'security') {\n      handleSecurityVerification()\n    }\n  }, [state.securityCode])\n\n  // Auto-complete when location code is complete\n  useEffect(() => {\n    if (state.locationCode.length === LOCATION_CODE_LENGTH && state.step === 'location') {\n      handleLocationVerification()\n    }\n  }, [state.locationCode])\n\n  const handleRFIDVerification = useCallback(async () => {\n    setState(prev => ({ ...prev, isVerifying: true, error: null, progress: 25 }))\n    \n    try {\n      // Simulate RFID verification API call\n      await new Promise(resolve => setTimeout(resolve, 1500))\n      \n      // Mock verification logic\n      if (state.rfidCode === studentInfo.rfidCardId) {\n        setState(prev => ({ \n          ...prev, \n          step: 'security', \n          isVerifying: false, \n          progress: 50,\n          error: null \n        }))\n        toast.success('RFID verified successfully')\n      } else {\n        throw new Error('Invalid RFID card')\n      }\n    } catch (error) {\n      setState(prev => ({ \n        ...prev, \n        isVerifying: false, \n        error: 'RFID verification failed',\n        progress: 0\n      }))\n      onVerificationFailed('RFID verification failed. Please check your card.')\n    }\n  }, [state.rfidCode, studentInfo.rfidCardId, onVerificationFailed])\n\n  const handleSecurityVerification = useCallback(async () => {\n    setState(prev => ({ ...prev, isVerifying: true, error: null, progress: 75 }))\n    \n    try {\n      // Simulate security code verification\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      setState(prev => ({ \n        ...prev, \n        step: 'location', \n        isVerifying: false, \n        progress: 85 \n      }))\n      toast.success('Security code verified')\n    } catch (error) {\n      setState(prev => ({ \n        ...prev, \n        isVerifying: false, \n        error: 'Invalid security code',\n        progress: 50\n      }))\n    }\n  }, [])\n\n  const handleLocationVerification = useCallback(async () => {\n    setState(prev => ({ ...prev, isVerifying: true, error: null, progress: 95 }))\n    \n    try {\n      // Simulate location verification\n      await new Promise(resolve => setTimeout(resolve, 800))\n      \n      const rfidInfo: RFIDPickupInfo = {\n        studentId: studentInfo.id,\n        orderId: state.selectedOrder?.orderId || '',\n        rfidCardId: state.rfidCode,\n        pickupLocation: `Location-${state.locationCode}`,\n        pickupTime: new Date().toISOString(),\n        verificationStatus: 'verified'\n      }\n      \n      setState(prev => ({ \n        ...prev, \n        step: 'complete', \n        isVerifying: false, \n        progress: 100 \n      }))\n      \n      toast.success('Verification complete! You can now collect your order.')\n      onVerificationComplete(rfidInfo)\n    } catch (error) {\n      setState(prev => ({ \n        ...prev, \n        isVerifying: false, \n        error: 'Location verification failed',\n        progress: 75\n      }))\n    }\n  }, [state.rfidCode, state.locationCode, state.selectedOrder, studentInfo.id, onVerificationComplete])\n\n  const resetVerification = useCallback(() => {\n    setState({\n      step: 'rfid',\n      rfidCode: '',\n      securityCode: '',\n      locationCode: '',\n      isVerifying: false,\n      error: null,\n      progress: 0,\n      selectedOrder: pendingOrders[0] || null\n    })\n    setTimeRemaining(VERIFICATION_TIMEOUT / 1000)\n  }, [pendingOrders])\n\n  const getStepTitle = () => {\n    switch (state.step) {\n      case 'rfid': return 'Scan RFID Card'\n      case 'security': return 'Enter Security Code'\n      case 'location': return 'Verify Pickup Location'\n      case 'complete': return 'Verification Complete'\n      default: return 'Verification'\n    }\n  }\n\n  const getStepDescription = () => {\n    switch (state.step) {\n      case 'rfid': return 'Please scan your RFID card or enter the card number'\n      case 'security': return 'Enter the 4-digit security code from your card'\n      case 'location': return 'Enter the 3-digit location code from pickup point'\n      case 'complete': return 'Your identity has been verified successfully'\n      default: return ''\n    }\n  }\n\n  const getStepIcon = () => {\n    switch (state.step) {\n      case 'rfid': return <CreditCard className=\"w-6 h-6 text-primary-500\" />\n      case 'security': return <Shield className=\"w-6 h-6 text-primary-500\" />\n      case 'location': return <MapPin className=\"w-6 h-6 text-primary-500\" />\n      case 'complete': return <CheckCircle className=\"w-6 h-6 text-green-500\" />\n      default: return <Scan className=\"w-6 h-6 text-gray-500\" />\n    }\n  }\n\n  if (pendingOrders.length === 0) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"text-gray-500\">\n            <CreditCard className=\"w-12 h-12 mx-auto mb-3 opacity-50\" />\n            <h3 className=\"font-medium mb-2\">No pending orders</h3>\n            <p className=\"text-sm\">You don't have any orders ready for pickup.</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            {getStepIcon()}\n            <div>\n              <CardTitle className=\"text-lg\">{getStepTitle()}</CardTitle>\n              <CardDescription>{getStepDescription()}</CardDescription>\n            </div>\n          </div>\n          \n          {state.isVerifying && (\n            <Badge variant=\"outline\" className=\"text-primary-600\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              {Math.floor(timeRemaining / 60)}:{(timeRemaining % 60).toString().padStart(2, '0')}\n            </Badge>\n          )}\n        </div>\n        \n        {state.progress > 0 && (\n          <div className=\"mt-4\">\n            <div className=\"flex items-center justify-between text-sm mb-2\">\n              <span className=\"text-gray-600\">Verification Progress</span>\n              <span className=\"text-primary-600\">{state.progress}%</span>\n            </div>\n            <Progress value={state.progress} className=\"h-2\" />\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Order Selection */}\n        {pendingOrders.length > 1 && state.step === 'rfid' && (\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">Select Order to Collect:</label>\n            <div className=\"space-y-2\">\n              {pendingOrders.map((order) => (\n                <Card \n                  key={order.orderId}\n                  className={`p-3 cursor-pointer transition-colors ${\n                    state.selectedOrder?.orderId === order.orderId\n                      ? 'ring-2 ring-primary-500 bg-primary-50'\n                      : 'hover:bg-gray-50'\n                  }`}\n                  onClick={() => setState(prev => ({ ...prev, selectedOrder: order }))}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"font-medium text-sm\">Order #{order.orderId}</div>\n                      <div className=\"text-xs text-gray-600\">\n                        {order.items.length} items • ₹{order.total}\n                      </div>\n                    </div>\n                    <Badge variant={order.status === 'ready' ? 'default' : 'secondary'}>\n                      {order.status}\n                    </Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Student Info */}\n        <div className=\"flex items-center gap-3 p-3 bg-gray-50 rounded-lg\">\n          <User className=\"w-5 h-5 text-gray-600\" />\n          <div>\n            <div className=\"font-medium text-sm\">{studentInfo.name}</div>\n            <div className=\"text-xs text-gray-600\">\n              Grade {studentInfo.grade}-{studentInfo.section} • Roll: {studentInfo.rollNumber}\n            </div>\n          </div>\n        </div>\n\n        {/* Error Display */}\n        {state.error && (\n          <Alert variant=\"destructive\">\n            <AlertTriangle className=\"h-4 w-4\" />\n            <AlertDescription>{state.error}</AlertDescription>\n          </Alert>\n        )}\n\n        {/* RFID Input Step */}\n        {state.step === 'rfid' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"mb-4\">\n                {isScanning ? (\n                  <div className=\"flex items-center justify-center gap-2 text-primary-600\">\n                    <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                    <span className=\"text-sm\">Scanning for RFID card...</span>\n                  </div>\n                ) : (\n                  <div className=\"text-sm text-gray-600\">\n                    Enter your 6-digit RFID card number\n                  </div>\n                )}\n              </div>\n              \n              <InputOTP\n                value={state.rfidCode}\n                onChange={(value) => setState(prev => ({ ...prev, rfidCode: value }))}\n                maxLength={RFID_CODE_LENGTH}\n                disabled={state.isVerifying}\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                </InputOTPGroup>\n                <InputOTPSeparator />\n                <InputOTPGroup>\n                  <InputOTPSlot index={3} />\n                  <InputOTPSlot index={4} />\n                  <InputOTPSlot index={5} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n          </div>\n        )}\n\n        {/* Security Code Input Step */}\n        {state.step === 'security' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"mb-4 text-sm text-gray-600\">\n                Enter the 4-digit security code printed on your RFID card\n              </div>\n              \n              <InputOTP\n                value={state.securityCode}\n                onChange={(value) => setState(prev => ({ ...prev, securityCode: value }))}\n                maxLength={SECURITY_CODE_LENGTH}\n                disabled={state.isVerifying}\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                  <InputOTPSlot index={3} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n          </div>\n        )}\n\n        {/* Location Code Input Step */}\n        {state.step === 'location' && (\n          <div className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"mb-4 text-sm text-gray-600\">\n                Enter the 3-digit code displayed at the pickup location\n              </div>\n              \n              <InputOTP\n                value={state.locationCode}\n                onChange={(value) => setState(prev => ({ ...prev, locationCode: value }))}\n                maxLength={LOCATION_CODE_LENGTH}\n                disabled={state.isVerifying}\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n          </div>\n        )}\n\n        {/* Completion Step */}\n        {state.step === 'complete' && (\n          <div className=\"text-center py-4\">\n            <CheckCircle className=\"w-16 h-16 mx-auto mb-4 text-green-500\" />\n            <h3 className=\"font-semibold text-green-700 mb-2\">\n              Verification Successful!\n            </h3>\n            <p className=\"text-sm text-gray-600 mb-4\">\n              You can now collect your order from the pickup location.\n            </p>\n            \n            {state.selectedOrder && (\n              <Card className=\"p-3 bg-green-50 border-green-200\">\n                <div className=\"text-sm\">\n                  <div className=\"font-medium\">Order #{state.selectedOrder.orderId}</div>\n                  <div className=\"text-gray-600\">\n                    Pickup Location: Location-{state.locationCode}\n                  </div>\n                  <div className=\"text-gray-600\">\n                    Verified at: {new Date().toLocaleTimeString()}\n                  </div>\n                </div>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-3 pt-4\">\n          {state.step !== 'complete' && (\n            <Button\n              variant=\"outline\"\n              onClick={resetVerification}\n              disabled={state.isVerifying}\n              className=\"flex-1\"\n            >\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n          )}\n          \n          {state.step === 'complete' && (\n            <Button\n              onClick={resetVerification}\n              className=\"flex-1\"\n            >\n              Verify Another Order\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default RFIDVerification","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/__tests__/enhanced-meal-ordering-integration.test.tsx",["2141","2142","2143","2144","2145","2146","2147","2148","2149","2150","2151","2152","2153","2154","2155","2156","2157","2158"],[],"/**\n * Comprehensive Integration Tests for Enhanced Meal Ordering Workflow\n * Tests the integration of ShadCN components in meal ordering process\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\n\n// Import ShadCN components\nimport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from '../../ui/command'\nimport {\n  Drawer,\n  DrawerTrigger,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerClose,\n} from '../../ui/drawer'\nimport {\n  Tooltip,\n  TooltipTrigger,\n  TooltipContent,\n  TooltipProvider,\n} from '../../ui/tooltip'\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from '../../ui/popover'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n  InputOTPSeparator,\n} from '../../ui/input-otp'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('Enhanced Meal Ordering Integration Tests', () => {\n  // Mock meal data\n  const mockMeals = [\n    {\n      id: '1',\n      name: 'Chicken Biryani',\n      description: 'Aromatic basmati rice with tender chicken pieces',\n      price: 180,\n      category: 'Main Course',\n      image: '/images/chicken-biryani.jpg',\n      nutrition: {\n        calories: 650,\n        protein: 35,\n        carbs: 75,\n        fat: 18,\n        fiber: 8,\n        sugar: 6,\n        sodium: 890,\n      },\n      allergens: ['Contains dairy'],\n      spiceLevel: 'Medium',\n      preparationTime: 25,\n      availability: true,\n    },\n    {\n      id: '2',\n      name: 'Paneer Butter Masala',\n      description: 'Rich and creamy paneer curry with butter naan',\n      price: 160,\n      category: 'Main Course',\n      image: '/images/paneer-butter-masala.jpg',\n      nutrition: {\n        calories: 580,\n        protein: 22,\n        carbs: 45,\n        fat: 28,\n        fiber: 5,\n        sugar: 8,\n        sodium: 750,\n      },\n      allergens: ['Contains dairy', 'Contains gluten'],\n      spiceLevel: 'Mild',\n      preparationTime: 20,\n      availability: true,\n    },\n    {\n      id: '3',\n      name: 'Veg Thali',\n      description: 'Complete vegetarian meal with dal, sabzi, rice, and roti',\n      price: 140,\n      category: 'Complete Meal',\n      image: '/images/veg-thali.jpg',\n      nutrition: {\n        calories: 520,\n        protein: 18,\n        carbs: 68,\n        fat: 15,\n        fiber: 12,\n        sugar: 4,\n        sodium: 680,\n      },\n      allergens: ['Contains gluten'],\n      spiceLevel: 'Medium',\n      preparationTime: 15,\n      availability: true,\n    },\n  ]\n\n  // Mock student data\n  const mockStudent = {\n    id: 'ST001',\n    name: 'John Doe',\n    grade: '10th',\n    rfidCode: '123456',\n    balance: 500,\n    dietaryRestrictions: ['No beef'],\n    allergies: ['Nuts'],\n  }\n\n  // Enhanced Meal Search Component with Command\n  const EnhancedMealSearch = ({ \n    onSelectMeal = jest.fn(),\n    meals = mockMeals \n  }: {\n    onSelectMeal?: (meal: any) => void\n    meals?: typeof mockMeals\n  }) => {\n    const [open, setOpen] = React.useState(false)\n    const [selectedMeal, setSelectedMeal] = React.useState<any>(null)\n\n    const handleSelect = (meal: any) => {\n      setSelectedMeal(meal)\n      setOpen(false)\n      onSelectMeal(meal)\n    }\n\n    return (\n      <div className=\"meal-search-container\">\n        <CommandDialog open={open} onOpenChange={setOpen}>\n          <CommandInput placeholder=\"Search for meals...\" />\n          <CommandList>\n            <CommandEmpty>No meals found.</CommandEmpty>\n            <CommandGroup heading=\"Available Meals\">\n              {meals.map((meal) => (\n                <CommandItem\n                  key={meal.id}\n                  value={meal.name.toLowerCase()}\n                  onSelect={() => handleSelect(meal)}\n                >\n                  <div className=\"flex items-center justify-between w-full\">\n                    <div>\n                      <span className=\"font-medium\">{meal.name}</span>\n                      <p className=\"text-sm text-muted-foreground\">{meal.description}</p>\n                    </div>\n                    <span className=\"text-lg font-bold\">₹{meal.price}</span>\n                  </div>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </CommandDialog>\n        \n        <button\n          onClick={() => setOpen(true)}\n          className=\"search-trigger-btn w-full p-3 border rounded-lg text-left\"\n        >\n          {selectedMeal ? `Selected: ${selectedMeal.name}` : 'Search for meals...'}\n        </button>\n      </div>\n    )\n  }\n\n  // Enhanced Meal Card with Tooltip and Drawer\n  const EnhancedMealCard = ({ \n    meal,\n    onAddToCart = jest.fn(),\n    onCustomize = jest.fn()\n  }: {\n    meal: typeof mockMeals[0]\n    onAddToCart?: (meal: any, quantity: number) => void\n    onCustomize?: (meal: any, customization: any) => void\n  }) => {\n    const [quantity, setQuantity] = React.useState(1)\n    const [customization, setCustomization] = React.useState({\n      spiceLevel: meal.spiceLevel,\n      portion: 'Regular',\n      extras: [] as string[],\n    })\n\n    const handleAddToCart = () => {\n      onAddToCart(meal, quantity)\n    }\n\n    const handleCustomize = () => {\n      onCustomize(meal, customization)\n    }\n\n    return (\n      <TooltipProvider>\n        <div className=\"meal-card border rounded-lg p-4 space-y-3\">\n          <div className=\"flex justify-between items-start\">\n            <div>\n              <h3 className=\"font-medium text-lg\">{meal.name}</h3>\n              <p className=\"text-sm text-muted-foreground\">{meal.description}</p>\n              <div className=\"flex items-center gap-2 mt-2\">\n                <span className=\"text-lg font-bold\">₹{meal.price}</span>\n                <span className=\"text-sm text-muted-foreground\">• {meal.preparationTime} mins</span>\n              </div>\n            </div>\n            \n            <Tooltip>\n              <TooltipTrigger asChild>\n                <button className=\"nutrition-info-btn text-blue-600\">ℹ️</button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <div className=\"space-y-2\">\n                  <div className=\"font-medium\">Nutrition Facts</div>\n                  <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                    <div>Calories: {meal.nutrition.calories}</div>\n                    <div>Protein: {meal.nutrition.protein}g</div>\n                    <div>Carbs: {meal.nutrition.carbs}g</div>\n                    <div>Fat: {meal.nutrition.fat}g</div>\n                    <div>Fiber: {meal.nutrition.fiber}g</div>\n                    <div>Sodium: {meal.nutrition.sodium}mg</div>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Allergens: {meal.allergens.join(', ')}\n                  </div>\n                </div>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <button\n              onClick={() => setQuantity(Math.max(1, quantity - 1))}\n              className=\"quantity-decrease w-8 h-8 border rounded\"\n              disabled={quantity <= 1}\n            >\n              -\n            </button>\n            <span className=\"quantity-display px-3\">{quantity}</span>\n            <button\n              onClick={() => setQuantity(quantity + 1)}\n              className=\"quantity-increase w-8 h-8 border rounded\"\n            >\n              +\n            </button>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <button\n              onClick={handleAddToCart}\n              className=\"add-to-cart-btn flex-1 bg-primary text-primary-foreground p-2 rounded\"\n            >\n              Add to Cart\n            </button>\n            \n            <Drawer>\n              <DrawerTrigger asChild>\n                <button className=\"customize-btn px-4 py-2 border rounded\">\n                  Customize\n                </button>\n              </DrawerTrigger>\n              <DrawerContent>\n                <DrawerHeader>\n                  <DrawerTitle>Customize {meal.name}</DrawerTitle>\n                  <DrawerDescription>\n                    Adjust your meal preferences\n                  </DrawerDescription>\n                </DrawerHeader>\n                \n                <div className=\"p-4 space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Spice Level</label>\n                    <select\n                      value={customization.spiceLevel}\n                      onChange={(e) => setCustomization(prev => ({\n                        ...prev,\n                        spiceLevel: e.target.value\n                      }))}\n                      className=\"spice-level-select w-full p-2 border rounded\"\n                    >\n                      <option value=\"Mild\">Mild</option>\n                      <option value=\"Medium\">Medium</option>\n                      <option value=\"Hot\">Hot</option>\n                      <option value=\"Extra Hot\">Extra Hot</option>\n                    </select>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-sm font-medium mb-1\">Portion Size</label>\n                    <select\n                      value={customization.portion}\n                      onChange={(e) => setCustomization(prev => ({\n                        ...prev,\n                        portion: e.target.value\n                      }))}\n                      className=\"portion-select w-full p-2 border rounded\"\n                    >\n                      <option value=\"Small\">Small</option>\n                      <option value=\"Regular\">Regular</option>\n                      <option value=\"Large\">Large</option>\n                    </select>\n                  </div>\n                </div>\n                \n                <DrawerFooter>\n                  <button\n                    onClick={handleCustomize}\n                    className=\"customize-confirm-btn bg-primary text-primary-foreground p-3 rounded\"\n                  >\n                    Confirm Customization\n                  </button>\n                  <DrawerClose asChild>\n                    <button className=\"cancel-customize-btn p-2 border rounded\">\n                      Cancel\n                    </button>\n                  </DrawerClose>\n                </DrawerFooter>\n              </DrawerContent>\n            </Drawer>\n          </div>\n        </div>\n      </TooltipProvider>\n    )\n  }\n\n  // Quick Actions Popover\n  const QuickActionsPopover = ({ \n    onAction = jest.fn()\n  }: {\n    onAction?: (action: string) => void\n  }) => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <button className=\"quick-actions-btn bg-secondary p-2 rounded\">\n          ⚡ Quick Actions\n        </button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"space-y-2\">\n          <div className=\"font-medium\">Quick Actions</div>\n          <div className=\"grid gap-2\">\n            <button\n              onClick={() => onAction('reorder')}\n              className=\"reorder-btn text-left p-2 hover:bg-accent rounded\"\n            >\n              🔄 Reorder Last Meal\n            </button>\n            <button\n              onClick={() => onAction('favorites')}\n              className=\"favorites-btn text-left p-2 hover:bg-accent rounded\"\n            >\n              ⭐ View Favorites\n            </button>\n            <button\n              onClick={() => onAction('schedule')}\n              className=\"schedule-btn text-left p-2 hover:bg-accent rounded\"\n            >\n              📅 Schedule Order\n            </button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n\n  // RFID Verification Component\n  const RFIDVerification = ({ \n    onVerificationComplete = jest.fn(),\n    studentName = mockStudent.name,\n    studentId = mockStudent.id\n  }: {\n    onVerificationComplete?: (verified: boolean, rfidCode?: string) => void\n    studentName?: string\n    studentId?: string\n  }) => {\n    const [rfidCode, setRfidCode] = React.useState('')\n    const [isVerifying, setIsVerifying] = React.useState(false)\n    const [error, setError] = React.useState('')\n\n    const handleRfidChange = (value: string) => {\n      setRfidCode(value)\n      setError('')\n      \n      if (value.length === 6) {\n        setIsVerifying(true)\n        \n        // Simulate RFID verification\n        setTimeout(() => {\n          setIsVerifying(false)\n          \n          if (value === mockStudent.rfidCode) {\n            onVerificationComplete(true, value)\n          } else {\n            setError('Invalid RFID code. Please try again.')\n            onVerificationComplete(false)\n          }\n        }, 1000)\n      }\n    }\n\n    return (\n      <div className=\"rfid-verification space-y-4\">\n        <div className=\"text-center\">\n          <h3 className=\"font-medium\">RFID Verification</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Student: {studentName} ({studentId})\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Please scan your RFID card or enter the code\n          </p>\n        </div>\n        \n        <div className=\"flex justify-center\">\n          <InputOTP\n            maxLength={6}\n            value={rfidCode}\n            onChange={handleRfidChange}\n            disabled={isVerifying}\n          >\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n              <InputOTPSlot index={1} />\n              <InputOTPSlot index={2} />\n            </InputOTPGroup>\n            <InputOTPSeparator />\n            <InputOTPGroup>\n              <InputOTPSlot index={3} />\n              <InputOTPSlot index={4} />\n              <InputOTPSlot index={5} />\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n        \n        {isVerifying && (\n          <div className=\"text-center text-sm text-blue-600\">\n            Verifying RFID code...\n          </div>\n        )}\n        \n        {error && (\n          <div className=\"text-center text-sm text-red-600\" role=\"alert\">\n            {error}\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  // Complete Meal Ordering Flow\n  const CompleteMealOrderingFlow = () => {\n    const [step, setStep] = React.useState<'search' | 'customize' | 'verify' | 'complete'>('search')\n    const [selectedMeal, setSelectedMeal] = React.useState<any>(null)\n    const [cart, setCart] = React.useState<any[]>([])\n    const [isRfidVerified, setIsRfidVerified] = React.useState(false)\n\n    const handleMealSelect = (meal: any) => {\n      setSelectedMeal(meal)\n    }\n\n    const handleAddToCart = (meal: any, quantity: number) => {\n      setCart(prev => [...prev, { ...meal, quantity }])\n    }\n\n    const handleQuickAction = (action: string) => {\n      // Handle quick actions\n    }\n\n    const handleRfidVerification = (verified: boolean, rfidCode?: string) => {\n      if (verified) {\n        setIsRfidVerified(true)\n        setStep('complete')\n      }\n    }\n\n    const proceedToVerification = () => {\n      setStep('verify')\n    }\n\n    const completeOrder = () => {\n      setStep('complete')\n    }\n\n    return (\n      <div className=\"meal-ordering-flow space-y-6\">\n        <div className=\"header flex justify-between items-center\">\n          <h1 className=\"text-2xl font-bold\">Order Your Meal</h1>\n          <QuickActionsPopover onAction={handleQuickAction} />\n        </div>\n\n        {step === 'search' && (\n          <div className=\"search-step space-y-4\">\n            <EnhancedMealSearch onSelectMeal={handleMealSelect} />\n            \n            <div className=\"meals-grid grid gap-4\">\n              {mockMeals.map((meal) => (\n                <EnhancedMealCard\n                  key={meal.id}\n                  meal={meal}\n                  onAddToCart={handleAddToCart}\n                />\n              ))}\n            </div>\n            \n            {cart.length > 0 && (\n              <div className=\"cart-summary border-t pt-4\">\n                <h3 className=\"font-medium mb-2\">Cart ({cart.length} items)</h3>\n                <div className=\"space-y-2\">\n                  {cart.map((item, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span>{item.name} x{item.quantity}</span>\n                      <span>₹{item.price * item.quantity}</span>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"flex justify-between font-bold mt-2 pt-2 border-t\">\n                  <span>Total:</span>\n                  <span>₹{cart.reduce((sum, item) => sum + item.price * item.quantity, 0)}</span>\n                </div>\n                <button\n                  onClick={proceedToVerification}\n                  className=\"proceed-to-verification-btn w-full mt-4 bg-primary text-primary-foreground p-3 rounded\"\n                >\n                  Proceed to Verification\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n\n        {step === 'verify' && (\n          <div className=\"verification-step\">\n            <RFIDVerification onVerificationComplete={handleRfidVerification} />\n          </div>\n        )}\n\n        {step === 'complete' && (\n          <div className=\"completion-step text-center space-y-4\">\n            <h2 className=\"text-xl font-medium text-green-600\">Order Confirmed!</h2>\n            <p>Your meal order has been placed successfully.</p>\n            <div className=\"order-details border rounded-lg p-4\">\n              <h3 className=\"font-medium mb-2\">Order Summary</h3>\n              {cart.map((item, index) => (\n                <div key={index} className=\"flex justify-between\">\n                  <span>{item.name} x{item.quantity}</span>\n                  <span>₹{item.price * item.quantity}</span>\n                </div>\n              ))}\n            </div>\n            <button\n              onClick={() => {\n                setStep('search')\n                setCart([])\n                setIsRfidVerified(false)\n              }}\n              className=\"new-order-btn bg-primary text-primary-foreground p-3 rounded\"\n            >\n              Place New Order\n            </button>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  describe('Meal Search Integration', () => {\n    it('opens command dialog and searches for meals', async () => {\n      const user = userEvent.setup()\n      const onSelectMeal = jest.fn()\n      \n      render(<EnhancedMealSearch onSelectMeal={onSelectMeal} />)\n      \n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search for meals...')).toBeInTheDocument()\n        expect(screen.getByText('Available Meals')).toBeInTheDocument()\n        expect(screen.getByText('Chicken Biryani')).toBeInTheDocument()\n      })\n    })\n\n    it('filters meals based on search input', async () => {\n      const user = userEvent.setup()\n      \n      render(<EnhancedMealSearch />)\n      \n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      const searchInput = screen.getByPlaceholderText('Search for meals...')\n      await user.type(searchInput, 'biryani')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Chicken Biryani')).toBeInTheDocument()\n        expect(screen.queryByText('Paneer Butter Masala')).not.toBeInTheDocument()\n      })\n    })\n\n    it('selects meal and updates trigger text', async () => {\n      const user = userEvent.setup()\n      const onSelectMeal = jest.fn()\n      \n      render(<EnhancedMealSearch onSelectMeal={onSelectMeal} />)\n      \n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      const mealOption = screen.getByText('Chicken Biryani')\n      await user.click(mealOption)\n      \n      await waitFor(() => {\n        expect(onSelectMeal).toHaveBeenCalledWith(mockMeals[0])\n        expect(screen.getByText('Selected: Chicken Biryani')).toBeInTheDocument()\n      })\n    })\n\n    it('shows empty state when no meals match search', async () => {\n      const user = userEvent.setup()\n      \n      render(<EnhancedMealSearch />)\n      \n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      const searchInput = screen.getByPlaceholderText('Search for meals...')\n      await user.type(searchInput, 'nonexistent meal')\n      \n      await waitFor(() => {\n        expect(screen.getByText('No meals found.')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Meal Card Integration', () => {\n    it('displays meal information with nutrition tooltip', async () => {\n      const user = userEvent.setup()\n      \n      render(<EnhancedMealCard meal={mockMeals[0]} />)\n      \n      expect(screen.getByText('Chicken Biryani')).toBeInTheDocument()\n      expect(screen.getByText('₹180')).toBeInTheDocument()\n      \n      const nutritionBtn = screen.getByText('ℹ️')\n      await user.hover(nutritionBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Nutrition Facts')).toBeInTheDocument()\n        expect(screen.getByText('Calories: 650')).toBeInTheDocument()\n        expect(screen.getByText('Protein: 35g')).toBeInTheDocument()\n      })\n    })\n\n    it('handles quantity adjustment', async () => {\n      const user = userEvent.setup()\n      \n      render(<EnhancedMealCard meal={mockMeals[0]} />)\n      \n      const quantityDisplay = screen.getByText('1')\n      const increaseBtn = screen.getByText('+')\n      const decreaseBtn = screen.getByText('-')\n      \n      await user.click(increaseBtn)\n      expect(screen.getByText('2')).toBeInTheDocument()\n      \n      await user.click(increaseBtn)\n      expect(screen.getByText('3')).toBeInTheDocument()\n      \n      await user.click(decreaseBtn)\n      expect(screen.getByText('2')).toBeInTheDocument()\n      \n      // Should not decrease below 1\n      await user.click(decreaseBtn)\n      await user.click(decreaseBtn)\n      expect(screen.getByText('1')).toBeInTheDocument()\n      expect(decreaseBtn).toBeDisabled()\n    })\n\n    it('adds meal to cart with correct quantity', async () => {\n      const user = userEvent.setup()\n      const onAddToCart = jest.fn()\n      \n      render(<EnhancedMealCard meal={mockMeals[0]} onAddToCart={onAddToCart} />)\n      \n      const increaseBtn = screen.getByText('+')\n      await user.click(increaseBtn)\n      await user.click(increaseBtn)\n      \n      const addToCartBtn = screen.getByText('Add to Cart')\n      await user.click(addToCartBtn)\n      \n      expect(onAddToCart).toHaveBeenCalledWith(mockMeals[0], 3)\n    })\n\n    it('opens customization drawer and handles customization', async () => {\n      const user = userEvent.setup()\n      const onCustomize = jest.fn()\n      \n      render(<EnhancedMealCard meal={mockMeals[0]} onCustomize={onCustomize} />)\n      \n      const customizeBtn = screen.getByText('Customize')\n      await user.click(customizeBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Customize Chicken Biryani')).toBeInTheDocument()\n        expect(screen.getByText('Adjust your meal preferences')).toBeInTheDocument()\n      })\n      \n      const spiceLevelSelect = screen.getByDisplayValue('Medium')\n      await user.selectOptions(spiceLevelSelect, 'Hot')\n      \n      const portionSelect = screen.getByDisplayValue('Regular')\n      await user.selectOptions(portionSelect, 'Large')\n      \n      const confirmBtn = screen.getByText('Confirm Customization')\n      await user.click(confirmBtn)\n      \n      expect(onCustomize).toHaveBeenCalledWith(mockMeals[0], {\n        spiceLevel: 'Hot',\n        portion: 'Large',\n        extras: []\n      })\n    })\n\n    it('cancels customization and closes drawer', async () => {\n      const user = userEvent.setup()\n      \n      render(<EnhancedMealCard meal={mockMeals[0]} />)\n      \n      const customizeBtn = screen.getByText('Customize')\n      await user.click(customizeBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Customize Chicken Biryani')).toBeInTheDocument()\n      })\n      \n      const cancelBtn = screen.getByText('Cancel')\n      await user.click(cancelBtn)\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Customize Chicken Biryani')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Quick Actions Integration', () => {\n    it('displays quick actions in popover', async () => {\n      const user = userEvent.setup()\n      \n      render(<QuickActionsPopover />)\n      \n      const quickActionsBtn = screen.getByText('⚡ Quick Actions')\n      await user.click(quickActionsBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Quick Actions')).toBeInTheDocument()\n        expect(screen.getByText('🔄 Reorder Last Meal')).toBeInTheDocument()\n        expect(screen.getByText('⭐ View Favorites')).toBeInTheDocument()\n        expect(screen.getByText('📅 Schedule Order')).toBeInTheDocument()\n      })\n    })\n\n    it('handles quick action selections', async () => {\n      const user = userEvent.setup()\n      const onAction = jest.fn()\n      \n      render(<QuickActionsPopover onAction={onAction} />)\n      \n      const quickActionsBtn = screen.getByText('⚡ Quick Actions')\n      await user.click(quickActionsBtn)\n      \n      const reorderBtn = screen.getByText('🔄 Reorder Last Meal')\n      await user.click(reorderBtn)\n      \n      expect(onAction).toHaveBeenCalledWith('reorder')\n    })\n  })\n\n  describe('RFID Verification Integration', () => {\n    it('displays RFID verification interface', () => {\n      render(<RFIDVerification />)\n      \n      expect(screen.getByText('RFID Verification')).toBeInTheDocument()\n      expect(screen.getByText(`Student: ${mockStudent.name} (${mockStudent.id})`)).toBeInTheDocument()\n      expect(screen.getByText('Please scan your RFID card or enter the code')).toBeInTheDocument()\n    })\n\n    it('handles valid RFID code verification', async () => {\n      const user = userEvent.setup()\n      const onVerificationComplete = jest.fn()\n      \n      render(<RFIDVerification onVerificationComplete={onVerificationComplete} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockStudent.rfidCode)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Verifying RFID code...')).toBeInTheDocument()\n      })\n      \n      await waitFor(() => {\n        expect(onVerificationComplete).toHaveBeenCalledWith(true, mockStudent.rfidCode)\n      }, { timeout: 2000 })\n    })\n\n    it('handles invalid RFID code', async () => {\n      const user = userEvent.setup()\n      const onVerificationComplete = jest.fn()\n      \n      render(<RFIDVerification onVerificationComplete={onVerificationComplete} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '999999')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Invalid RFID code. Please try again.')).toBeInTheDocument()\n        expect(onVerificationComplete).toHaveBeenCalledWith(false)\n      }, { timeout: 2000 })\n    })\n  })\n\n  describe('Complete Ordering Flow Integration', () => {\n    it('completes full meal ordering workflow', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Step 1: Search and select meals\n      expect(screen.getByText('Order Your Meal')).toBeInTheDocument()\n      expect(screen.getByText('⚡ Quick Actions')).toBeInTheDocument()\n      \n      // Add a meal to cart\n      const addToCartBtn = screen.getAllByText('Add to Cart')[0]\n      await user.click(addToCartBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Cart (1 items)')).toBeInTheDocument()\n        expect(screen.getByText(`${mockMeals[0].name} x1`)).toBeInTheDocument()\n      })\n      \n      // Proceed to verification\n      const proceedBtn = screen.getByText('Proceed to Verification')\n      await user.click(proceedBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('RFID Verification')).toBeInTheDocument()\n      })\n      \n      // Enter RFID code\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockStudent.rfidCode)\n      \n      // Verify completion\n      await waitFor(() => {\n        expect(screen.getByText('Order Confirmed!')).toBeInTheDocument()\n        expect(screen.getByText('Your meal order has been placed successfully.')).toBeInTheDocument()\n      }, { timeout: 2000 })\n    })\n\n    it('handles multiple meals in cart', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Add multiple meals to cart\n      const addToCartBtns = screen.getAllByText('Add to Cart')\n      await user.click(addToCartBtns[0])\n      await user.click(addToCartBtns[1])\n      \n      await waitFor(() => {\n        expect(screen.getByText('Cart (2 items)')).toBeInTheDocument()\n        expect(screen.getByText(`${mockMeals[0].name} x1`)).toBeInTheDocument()\n        expect(screen.getByText(`${mockMeals[1].name} x1`)).toBeInTheDocument()\n        \n        // Check total calculation\n        const expectedTotal = mockMeals[0].price + mockMeals[1].price\n        expect(screen.getByText(`₹${expectedTotal}`)).toBeInTheDocument()\n      })\n    })\n\n    it('allows starting new order after completion', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Complete an order first\n      const addToCartBtn = screen.getAllByText('Add to Cart')[0]\n      await user.click(addToCartBtn)\n      \n      const proceedBtn = screen.getByText('Proceed to Verification')\n      await user.click(proceedBtn)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockStudent.rfidCode)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Order Confirmed!')).toBeInTheDocument()\n      }, { timeout: 2000 })\n      \n      // Start new order\n      const newOrderBtn = screen.getByText('Place New Order')\n      await user.click(newOrderBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Search for meals...')).toBeInTheDocument()\n        expect(screen.queryByText('Cart')).not.toBeInTheDocument()\n      })\n    })\n\n    it('integrates quick actions with ordering flow', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      const quickActionsBtn = screen.getByText('⚡ Quick Actions')\n      await user.click(quickActionsBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('🔄 Reorder Last Meal')).toBeInTheDocument()\n        expect(screen.getByText('⭐ View Favorites')).toBeInTheDocument()\n        expect(screen.getByText('📅 Schedule Order')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Mobile Touch Integration', () => {\n    it('handles touch events across all components', async () => {\n      render(<CompleteMealOrderingFlow />)\n      \n      // Test touch on search trigger\n      const searchTrigger = screen.getByText('Search for meals...')\n      fireEvent.touchStart(searchTrigger)\n      fireEvent.touchEnd(searchTrigger)\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search for meals...')).toBeInTheDocument()\n      })\n      \n      // Test touch on meal card\n      const addToCartBtn = screen.getAllByText('Add to Cart')[0]\n      fireEvent.touchStart(addToCartBtn)\n      fireEvent.touchEnd(addToCartBtn)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Cart (1 items)')).toBeInTheDocument()\n      })\n    })\n\n    it('supports swipe gestures on mobile', async () => {\n      render(<CompleteMealOrderingFlow />)\n      \n      const mealCard = screen.getAllByText('Add to Cart')[0].closest('.meal-card')\n      \n      // Simulate swipe gesture\n      fireEvent.touchStart(mealCard!, {\n        touches: [{ clientX: 100, clientY: 100 }],\n      })\n      fireEvent.touchMove(mealCard!, {\n        touches: [{ clientX: 200, clientY: 100 }],\n      })\n      fireEvent.touchEnd(mealCard!)\n      \n      // Should handle swipe gracefully\n      expect(mealCard).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility Integration', () => {\n    it('meets WCAG accessibility guidelines for complete flow', async () => {\n      const { container } = render(<CompleteMealOrderingFlow />)\n      \n      const results = await axe(container)\n      expect(results).toHaveNoViolations()\n    })\n\n    it('provides proper focus management across components', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Focus should move correctly through the interface\n      await user.tab()\n      const focusedElement = document.activeElement\n      expect(focusedElement).toBeInTheDocument()\n      \n      // Continue tabbing through elements\n      await user.tab()\n      await user.tab()\n      \n      // Should maintain logical tab order\n      expect(document.activeElement).toBeInTheDocument()\n    })\n\n    it('supports screen reader navigation', () => {\n      render(<CompleteMealOrderingFlow />)\n      \n      // Check for proper ARIA labels and roles\n      const searchButton = screen.getByText('Search for meals...')\n      expect(searchButton).toBeInTheDocument()\n      \n      const quickActionsBtn = screen.getByText('⚡ Quick Actions')\n      expect(quickActionsBtn).toBeInTheDocument()\n      \n      // Nutrition info should be accessible\n      const nutritionBtns = screen.getAllByText('ℹ️')\n      expect(nutritionBtns[0]).toBeInTheDocument()\n    })\n  })\n\n  describe('Error Handling Integration', () => {\n    it('handles network errors gracefully', async () => {\n      const user = userEvent.setup()\n      \n      // Mock network error\n      const mockMealsWithError = []\n      \n      render(<EnhancedMealSearch meals={mockMealsWithError} />)\n      \n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('No meals found.')).toBeInTheDocument()\n      })\n    })\n\n    it('handles RFID verification errors', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Add meal and proceed to verification\n      const addToCartBtn = screen.getAllByText('Add to Cart')[0]\n      await user.click(addToCartBtn)\n      \n      const proceedBtn = screen.getByText('Proceed to Verification')\n      await user.click(proceedBtn)\n      \n      // Enter invalid RFID\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '000000')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Invalid RFID code. Please try again.')).toBeInTheDocument()\n      }, { timeout: 2000 })\n    })\n\n    it('maintains state consistency during errors', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Add meals to cart\n      const addToCartBtns = screen.getAllByText('Add to Cart')\n      await user.click(addToCartBtns[0])\n      await user.click(addToCartBtns[1])\n      \n      await waitFor(() => {\n        expect(screen.getByText('Cart (2 items)')).toBeInTheDocument()\n      })\n      \n      // Even with RFID errors, cart should remain intact\n      const proceedBtn = screen.getByText('Proceed to Verification')\n      await user.click(proceedBtn)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '000000')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Invalid RFID code. Please try again.')).toBeInTheDocument()\n      }, { timeout: 2000 })\n      \n      // Cart state should be preserved\n      expect(screen.getByText('Cart (2 items)')).toBeInTheDocument()\n    })\n  })\n\n  describe('Performance Integration', () => {\n    it('handles large meal datasets efficiently', async () => {\n      const largeMealDataset = Array.from({ length: 100 }, (_, i) => ({\n        ...mockMeals[0],\n        id: `meal-${i}`,\n        name: `Meal ${i}`,\n        price: 100 + i,\n      }))\n      \n      const { container } = render(<EnhancedMealSearch meals={largeMealDataset} />)\n      \n      // Should render without performance issues\n      expect(container).toBeInTheDocument()\n      \n      const user = userEvent.setup()\n      const searchTrigger = screen.getByText('Search for meals...')\n      await user.click(searchTrigger)\n      \n      await waitFor(() => {\n        expect(screen.getByPlaceholderText('Search for meals...')).toBeInTheDocument()\n      })\n    })\n\n    it('handles rapid user interactions', async () => {\n      const user = userEvent.setup()\n      \n      render(<CompleteMealOrderingFlow />)\n      \n      // Rapid interactions\n      const addToCartBtns = screen.getAllByText('Add to Cart')\n      \n      // Click multiple buttons rapidly\n      for (let i = 0; i < 3; i++) {\n        await user.click(addToCartBtns[0])\n      }\n      \n      // Should handle rapid clicks gracefully\n      expect(screen.getByText(/Cart \\(\\d+ items\\)/)).toBeInTheDocument()\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/meal-ordering/types.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/BottomNavigation.tsx",["2159"],[],"\"use client\"\n\nimport React from 'react'\nimport { useRouter, usePathname } from 'next/navigation'\nimport { cn } from '@/lib/utils'\nimport {\n  Home,\n  UtensilsCrossed,\n  Wallet,\n  QrCode,\n  User,\n  ShoppingCart,\n  Bell,\n  Clock\n} from 'lucide-react'\n\ninterface NavigationItem {\n  label: string\n  icon: React.ElementType\n  href: string\n  badge?: number\n  activePattern?: string[]\n}\n\ninterface BottomNavigationProps {\n  userRole?: 'student' | 'parent' | 'admin'\n  className?: string\n}\n\nconst navigationItems = {\n  student: [\n    {\n      label: 'Home',\n      icon: Home,\n      href: '/student',\n      activePattern: ['/student', '/student/dashboard']\n    },\n    {\n      label: 'Order',\n      icon: UtensilsCrossed,\n      href: '/student/order',\n      activePattern: ['/student/order', '/student/menu']\n    },\n    {\n      label: 'Cart',\n      icon: ShoppingCart,\n      href: '/student/cart',\n      badge: 0 // Will be populated from state\n    },\n    {\n      label: 'Wallet',\n      icon: Wallet,\n      href: '/student/wallet'\n    },\n    {\n      label: 'Scan',\n      icon: QrCode,\n      href: '/student/scan'\n    }\n  ] as NavigationItem[],\n  parent: [\n    {\n      label: 'Home',\n      icon: Home,\n      href: '/parent',\n      activePattern: ['/parent', '/parent/dashboard']\n    },\n    {\n      label: 'Orders',\n      icon: UtensilsCrossed,\n      href: '/parent/orders'\n    },\n    {\n      label: 'Wallet',\n      icon: Wallet,\n      href: '/parent/wallet'\n    },\n    {\n      label: 'History',\n      icon: Clock,\n      href: '/parent/history'\n    },\n    {\n      label: 'Profile',\n      icon: User,\n      href: '/parent/profile'\n    }\n  ] as NavigationItem[],\n  admin: [\n    {\n      label: 'Dashboard',\n      icon: Home,\n      href: '/admin',\n      activePattern: ['/admin', '/admin/dashboard']\n    },\n    {\n      label: 'Orders',\n      icon: UtensilsCrossed,\n      href: '/admin/orders',\n      badge: 0 // Will be populated from state\n    },\n    {\n      label: 'Menu',\n      icon: UtensilsCrossed,\n      href: '/admin/menu'\n    },\n    {\n      label: 'Reports',\n      icon: Clock,\n      href: '/admin/reports'\n    },\n    {\n      label: 'Settings',\n      icon: User,\n      href: '/admin/settings'\n    }\n  ] as NavigationItem[]\n}\n\nexport const BottomNavigation: React.FC<BottomNavigationProps> = ({\n  userRole = 'student',\n  className\n}) => {\n  const router = useRouter()\n  const pathname = usePathname()\n  \n  const items = navigationItems[userRole]\n  \n  const isActive = (item: NavigationItem) => {\n    if (!pathname) return false;\n    if (item.activePattern) {\n      return item.activePattern.some(pattern => pathname.startsWith(pattern))\n    }\n    return pathname === item.href\n  }\n  \n  const handleNavigation = (href: string) => {\n    // Add haptic feedback for mobile devices\n    if ('vibrate' in navigator) {\n      navigator.vibrate(50)\n    }\n    router.push(href)\n  }\n  \n  return (\n    <div className={cn(\n      \"fixed bottom-0 left-0 right-0 z-50 bg-background/95 backdrop-blur-sm border-t border-border\",\n      \"safe-area-pb md:hidden\", // Hide on desktop\n      className\n    )}>\n      <nav className=\"flex items-center justify-around px-2 py-2\">\n        {items.map((item) => {\n          const Icon = item.icon\n          const active = isActive(item)\n          \n          return (\n            <button\n              key={item.href}\n              onClick={() => handleNavigation(item.href)}\n              className={cn(\n                \"relative flex flex-col items-center justify-center min-h-[48px] px-3 py-1.5 rounded-lg transition-all duration-200\",\n                \"focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\",\n                \"active:scale-95 active:bg-primary/10\", // Touch feedback\n                active\n                  ? \"bg-primary/10 text-primary\"\n                  : \"text-muted-foreground hover:text-foreground hover:bg-muted/50\"\n              )}\n              aria-label={item.label}\n            >\n              <div className=\"relative\">\n                <Icon className={cn(\n                  \"h-5 w-5 transition-transform duration-200\",\n                  active && \"scale-110\"\n                )} />\n                {item.badge && item.badge > 0 && (\n                  <span className=\"absolute -top-2 -right-2 flex h-4 w-4 items-center justify-center rounded-full bg-destructive text-[10px] font-medium text-destructive-foreground\">\n                    {item.badge > 9 ? '9+' : item.badge}\n                  </span>\n                )}\n              </div>\n              <span className={cn(\n                \"text-[10px] font-medium mt-0.5 transition-colors duration-200\",\n                active ? \"text-primary\" : \"text-muted-foreground\"\n              )}>\n                {item.label}\n              </span>\n            </button>\n          )\n        })}\n      </nav>\n    </div>\n  )\n}\n\nexport default BottomNavigation","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/BottomSheet.tsx",["2160","2161"],[],"\"use client\"\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { createPortal } from 'react-dom'\nimport { cn } from '@/lib/utils'\nimport { X } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\n\ninterface BottomSheetProps {\n  isOpen: boolean\n  onClose: () => void\n  children: React.ReactNode\n  title?: string\n  snapPoints?: number[] // Array of heights in vh (e.g., [30, 60, 90])\n  initialSnapPoint?: number\n  className?: string\n  backdrop?: boolean\n  swipeToClose?: boolean\n  showHandle?: boolean\n  maxHeight?: string\n}\n\nexport const BottomSheet: React.FC<BottomSheetProps> = ({\n  isOpen,\n  onClose,\n  children,\n  title,\n  snapPoints = [90],\n  initialSnapPoint = 0,\n  className,\n  backdrop = true,\n  swipeToClose = true,\n  showHandle = true,\n  maxHeight = \"90vh\"\n}) => {\n  const [currentSnapPoint, setCurrentSnapPoint] = useState(initialSnapPoint)\n  const [isDragging, setIsDragging] = useState(false)\n  const [dragOffset, setDragOffset] = useState(0)\n  const sheetRef = useRef<HTMLDivElement>(null)\n  const touchStartY = useRef<number>(0)\n  const initialHeight = useRef<number>(0)\n\n  // Handle snap point changes\n  const snapToPoint = useCallback((pointIndex: number) => {\n    if (pointIndex < 0 || pointIndex >= snapPoints.length) return\n    \n    setCurrentSnapPoint(pointIndex)\n    setDragOffset(0)\n    \n    if ('vibrate' in navigator) {\n      navigator.vibrate(10)\n    }\n  }, [snapPoints])\n\n  // Handle touch gestures\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (!swipeToClose) return\n    \n    touchStartY.current = e.touches[0].clientY\n    initialHeight.current = sheetRef.current?.clientHeight || 0\n    setIsDragging(true)\n  }, [swipeToClose])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!isDragging || !swipeToClose) return\n    \n    const currentY = e.touches[0].clientY\n    const deltaY = currentY - touchStartY.current\n    \n    // Only allow dragging down\n    if (deltaY > 0) {\n      setDragOffset(deltaY)\n    }\n  }, [isDragging, swipeToClose])\n\n  const handleTouchEnd = useCallback(() => {\n    if (!isDragging || !swipeToClose) return\n    \n    const threshold = 100\n    const velocityThreshold = 10\n    \n    if (dragOffset > threshold) {\n      // Close if dragged far enough\n      onClose()\n    } else if (snapPoints.length > 1) {\n      // Snap to nearest point\n      const currentHeight = snapPoints[currentSnapPoint]\n      const dragPercentage = (dragOffset / window.innerHeight) * 100\n      \n      if (dragPercentage > velocityThreshold) {\n        // Move to next snap point or close\n        if (currentSnapPoint > 0) {\n          snapToPoint(currentSnapPoint - 1)\n        } else {\n          onClose()\n        }\n      } else {\n        // Stay at current snap point\n        setDragOffset(0)\n      }\n    } else {\n      // Reset position\n      setDragOffset(0)\n    }\n    \n    setIsDragging(false)\n  }, [isDragging, dragOffset, snapPoints, currentSnapPoint, onClose, snapToPoint, swipeToClose])\n\n  // Handle escape key\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'hidden'\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'unset'\n    }\n  }, [isOpen, onClose])\n\n  // Reset state when closed\n  useEffect(() => {\n    if (!isOpen) {\n      setCurrentSnapPoint(initialSnapPoint)\n      setDragOffset(0)\n      setIsDragging(false)\n    }\n  }, [isOpen, initialSnapPoint])\n\n  if (!isOpen) return null\n\n  const currentHeight = snapPoints[currentSnapPoint]\n  const translateY = isDragging ? Math.max(0, dragOffset) : 0\n\n  const sheetContent = (\n    <>\n      {/* Backdrop */}\n      {backdrop && (\n        <div \n          className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-40 animate-fade-in\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Bottom Sheet */}\n      <div\n        ref={sheetRef}\n        className={cn(\n          \"fixed bottom-0 left-0 right-0 z-50\",\n          \"bg-white rounded-t-xl shadow-2xl\",\n          \"transition-transform duration-300 ease-out\",\n          isDragging && \"transition-none\",\n          className\n        )}\n        style={{\n          height: `${currentHeight}vh`,\n          maxHeight,\n          transform: `translateY(${translateY}px)`,\n        }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onTouchCancel={handleTouchEnd}\n      >\n        {/* Handle */}\n        {showHandle && (\n          <div className=\"flex justify-center pt-3 pb-2\">\n            <div className=\"w-10 h-1 bg-gray-300 rounded-full\" />\n          </div>\n        )}\n\n        {/* Header */}\n        {title && (\n          <div className=\"flex items-center justify-between px-4 py-3 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">{title}</h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n\n        {/* Content */}\n        <div className=\"flex-1 overflow-auto overscroll-behavior-contain\">\n          <div className=\"pb-safe-bottom\">\n            {children}\n          </div>\n        </div>\n\n        {/* Snap point indicators */}\n        {snapPoints.length > 1 && (\n          <div className=\"absolute right-4 top-1/2 transform -translate-y-1/2 space-y-2\">\n            {snapPoints.map((_, index) => (\n              <button\n                key={index}\n                onClick={() => snapToPoint(index)}\n                className={cn(\n                  \"w-2 h-2 rounded-full transition-colors\",\n                  index === currentSnapPoint ? \"bg-primary\" : \"bg-gray-300\"\n                )}\n                aria-label={`Snap to ${snapPoints[index]}% height`}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </>\n  )\n\n  return createPortal(sheetContent, document.body)\n}\n\n// Hook for managing bottom sheet state\nexport const useBottomSheet = (initialState = false) => {\n  const [isOpen, setIsOpen] = useState(initialState)\n\n  const open = useCallback(() => setIsOpen(true), [])\n  const close = useCallback(() => setIsOpen(false), [])\n  const toggle = useCallback(() => setIsOpen(prev => !prev), [])\n\n  return {\n    isOpen,\n    open,\n    close,\n    toggle,\n    setIsOpen\n  }\n}\n\n// Pre-built bottom sheets for common use cases\n\n// Meal details bottom sheet\ninterface MealDetailsSheetProps {\n  isOpen: boolean\n  onClose: () => void\n  meal: {\n    id: string\n    name: string\n    description: string\n    price: number\n    image: string\n    allergens: string[]\n    nutrition: {\n      calories: number\n      protein: number\n      carbs: number\n      fat: number\n    }\n  } | null\n  onAddToCart?: (meal: any) => void\n}\n\nexport const MealDetailsSheet: React.FC<MealDetailsSheetProps> = ({\n  isOpen,\n  onClose,\n  meal,\n  onAddToCart\n}) => {\n  if (!meal) return null\n\n  return (\n    <BottomSheet\n      isOpen={isOpen}\n      onClose={onClose}\n      snapPoints={[60, 85]}\n      title={meal.name}\n      className=\"max-w-md mx-auto\"\n    >\n      <div className=\"p-4 space-y-4\">\n        {/* Meal Image */}\n        <div className=\"relative h-48 rounded-lg overflow-hidden\">\n          <img\n            src={meal.image}\n            alt={meal.name}\n            className=\"w-full h-full object-cover\"\n          />\n          <div className=\"absolute top-3 right-3 bg-white/90 backdrop-blur-sm rounded-full px-3 py-1\">\n            <span className=\"text-lg font-bold text-green-600\">₹{meal.price}</span>\n          </div>\n        </div>\n\n        {/* Description */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n          <p className=\"text-gray-600 text-sm leading-relaxed\">{meal.description}</p>\n        </div>\n\n        {/* Nutrition */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-3\">Nutrition per serving</h3>\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"bg-gray-50 rounded-lg p-3 text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">{meal.nutrition.calories}</div>\n              <div className=\"text-xs text-gray-500\">Calories</div>\n            </div>\n            <div className=\"bg-gray-50 rounded-lg p-3 text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">{meal.nutrition.protein}g</div>\n              <div className=\"text-xs text-gray-500\">Protein</div>\n            </div>\n            <div className=\"bg-gray-50 rounded-lg p-3 text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">{meal.nutrition.carbs}g</div>\n              <div className=\"text-xs text-gray-500\">Carbs</div>\n            </div>\n            <div className=\"bg-gray-50 rounded-lg p-3 text-center\">\n              <div className=\"text-lg font-bold text-gray-900\">{meal.nutrition.fat}g</div>\n              <div className=\"text-xs text-gray-500\">Fat</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Allergens */}\n        {meal.allergens.length > 0 && (\n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Allergens</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {meal.allergens.map((allergen) => (\n                <span\n                  key={allergen}\n                  className=\"px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full\"\n                >\n                  {allergen}\n                </span>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Add to Cart Button */}\n        {onAddToCart && (\n          <div className=\"pt-4\">\n            <Button\n              onClick={() => onAddToCart(meal)}\n              className=\"w-full h-12 text-lg\"\n              haptic\n            >\n              Add to Cart - ₹{meal.price}\n            </Button>\n          </div>\n        )}\n      </div>\n    </BottomSheet>\n  )\n}\n\n// RFID Scanner Bottom Sheet\ninterface RFIDScannerSheetProps {\n  isOpen: boolean\n  onClose: () => void\n  onScanComplete?: (rfidCode: string) => void\n}\n\nexport const RFIDScannerSheet: React.FC<RFIDScannerSheetProps> = ({\n  isOpen,\n  onClose,\n  onScanComplete\n}) => {\n  const [scanning, setScanning] = useState(false)\n  const [rfidCode, setRfidCode] = useState('')\n\n  const startScan = useCallback(() => {\n    setScanning(true)\n    // Simulate RFID scan\n    setTimeout(() => {\n      const mockRFID = `RFID${Date.now().toString().slice(-6)}`\n      setRfidCode(mockRFID)\n      setScanning(false)\n      onScanComplete?.(mockRFID)\n    }, 2000)\n  }, [onScanComplete])\n\n  return (\n    <BottomSheet\n      isOpen={isOpen}\n      onClose={onClose}\n      title=\"RFID Scanner\"\n      snapPoints={[50]}\n    >\n      <div className=\"p-6 text-center space-y-6\">\n        {/* Scanner Animation */}\n        <div className=\"relative mx-auto w-32 h-32 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\n          <div className={cn(\n            \"w-16 h-16 border-4 border-white rounded-full\",\n            scanning && \"animate-ping\"\n          )} />\n          {scanning && (\n            <div className=\"absolute inset-0 border-4 border-white/30 rounded-full animate-pulse\" />\n          )}\n        </div>\n\n        {/* Status */}\n        <div className=\"space-y-2\">\n          <h3 className=\"text-xl font-bold text-gray-900\">\n            {scanning ? 'Scanning...' : rfidCode ? 'Scan Complete!' : 'Ready to Scan'}\n          </h3>\n          {rfidCode && (\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n              <p className=\"text-green-800 font-mono\">{rfidCode}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Action Button */}\n        <Button\n          onClick={startScan}\n          disabled={scanning}\n          className=\"w-full h-12\"\n          loading={scanning}\n          loadingText=\"Scanning...\"\n          haptic\n        >\n          {rfidCode ? 'Scan Again' : 'Start Scan'}\n        </Button>\n\n        {/* Instructions */}\n        <p className=\"text-sm text-gray-500\">\n          Hold your RFID card near the device to scan\n        </p>\n      </div>\n    </BottomSheet>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/LoadingSkeleton.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileHeader.tsx",["2162","2163"],[],"/**\n * MobileHeader - Mobile-optimized header component\n * Features: Responsive layout, notification badge, quick actions\n */\n\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  Menu, \n  Bell, \n  Search, \n  Wallet, \n  Wifi, \n  WifiOff,\n  Battery,\n  Signal\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { \n  Sheet, \n  SheetContent, \n  SheetTrigger, \n  SheetHeader,\n  SheetTitle \n} from '@/components/ui/sheet';\nimport { cn } from '@/lib/utils';\nimport { formatCurrency } from '@/utils/formatCurrency';\n\ninterface StudentInfo {\n  id: string;\n  name: string;\n  grade: string;\n  section: string;\n  walletBalance: number;\n  profileImage?: string;\n  school: {\n    name: string;\n    logo?: string;\n  };\n}\n\ninterface MobileHeaderProps {\n  student: StudentInfo;\n  title?: string;\n  showSearch?: boolean;\n  showWallet?: boolean;\n  notificationCount?: number;\n  isOnline?: boolean;\n  onSearchClick?: () => void;\n  onNotificationClick?: () => void;\n  onMenuClick?: () => void;\n  className?: string;\n}\n\nexport const MobileHeader: React.FC<MobileHeaderProps> = ({\n  student,\n  title = 'HASIVU',\n  showSearch = true,\n  showWallet = true,\n  notificationCount = 0,\n  isOnline = true,\n  onSearchClick,\n  onNotificationClick,\n  onMenuClick,\n  className\n}) => {\n  const getStudentInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(part => part.charAt(0))\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getBatteryLevel = () => {\n    // Check if Battery API is available\n    if ('getBattery' in navigator) {\n      // This would be implemented with proper battery API\n      return 85; // Mock battery level\n    }\n    return null;\n  };\n\n  const getSignalStrength = () => {\n    // Mock network quality - in real app, this would use Network Information API\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection;\n      return connection?.effectiveType || '4g';\n    }\n    return '4g';\n  };\n\n  return (\n    <header className={cn(\n      'sticky top-0 z-50',\n      'bg-white border-b border-gray-200',\n      'safe-area-inset-top',\n      className\n    )}>\n      {/* Status bar info for PWA */}\n      <div className=\"bg-primary/5 px-4 py-1 text-xs text-gray-600 flex justify-between items-center md:hidden\">\n        <div className=\"flex items-center space-x-2\">\n          <span>{new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}</span>\n          <div className=\"flex items-center space-x-1\">\n            {isOnline ? (\n              <>\n                <Wifi className=\"h-3 w-3\" />\n                <span className=\"text-xs\">{getSignalStrength()}</span>\n              </>\n            ) : (\n              <>\n                <WifiOff className=\"h-3 w-3 text-red-500\" />\n                <span className=\"text-red-500\">Offline</span>\n              </>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {getBatteryLevel() && (\n            <div className=\"flex items-center space-x-1\">\n              <Battery className=\"h-3 w-3\" />\n              <span>{getBatteryLevel()}%</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Main header */}\n      <div className=\"px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          {/* Left side - Menu & Title */}\n          <div className=\"flex items-center space-x-3\">\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-10 w-10 p-0 md:hidden\"\n                  onClick={onMenuClick}\n                >\n                  <Menu className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Open menu</span>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-80\">\n                <SheetHeader>\n                  <SheetTitle className=\"text-left\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarImage src={student.profileImage} alt={student.name} />\n                        <AvatarFallback className=\"bg-primary text-white\">\n                          {getStudentInitials(student.name)}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div>\n                        <p className=\"font-semibold text-gray-900\">{student.name}</p>\n                        <p className=\"text-sm text-gray-500\">\n                          Grade {student.grade}-{student.section}\n                        </p>\n                      </div>\n                    </div>\n                  </SheetTitle>\n                </SheetHeader>\n                \n                {/* Menu content */}\n                <div className=\"mt-6 space-y-4\">\n                  {showWallet && (\n                    <div className=\"p-4 bg-green-50 rounded-lg\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Wallet className=\"h-5 w-5 text-green-600\" />\n                          <span className=\"font-medium text-gray-700\">Wallet Balance</span>\n                        </div>\n                        <span className=\"font-bold text-green-600 text-lg\">\n                          {formatCurrency(student.walletBalance)}\n                        </span>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Quick Actions */}\n                  <div className=\"space-y-2\">\n                    <Button variant=\"ghost\" className=\"w-full justify-start\" size=\"lg\">\n                      <Wallet className=\"h-5 w-5 mr-3\" />\n                      Top up Wallet\n                    </Button>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\" size=\"lg\">\n                      <Bell className=\"h-5 w-5 mr-3\" />\n                      Notifications\n                      {notificationCount > 0 && (\n                        <Badge variant=\"destructive\" className=\"ml-auto\">\n                          {notificationCount}\n                        </Badge>\n                      )}\n                    </Button>\n                    <Button variant=\"ghost\" className=\"w-full justify-start\" size=\"lg\">\n                      <Search className=\"h-5 w-5 mr-3\" />\n                      Order History\n                    </Button>\n                  </div>\n\n                  {/* School info */}\n                  <div className=\"pt-4 border-t border-gray-200\">\n                    <div className=\"flex items-center space-x-2\">\n                      {student.school.logo && (\n                        <img \n                          src={student.school.logo} \n                          alt={student.school.name}\n                          className=\"h-6 w-6 rounded\"\n                        />\n                      )}\n                      <span className=\"text-sm text-gray-600\">{student.school.name}</span>\n                    </div>\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n\n            <div>\n              <h1 className=\"text-lg font-semibold text-gray-900 truncate\">\n                {title}\n              </h1>\n              <p className=\"text-xs text-gray-500 hidden sm:block\">\n                {student.school.name}\n              </p>\n            </div>\n          </div>\n\n          {/* Right side - Actions */}\n          <div className=\"flex items-center space-x-2\">\n            {showSearch && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"h-10 w-10 p-0\"\n                onClick={onSearchClick}\n              >\n                <Search className=\"h-5 w-5\" />\n                <span className=\"sr-only\">Search</span>\n              </Button>\n            )}\n\n            {showWallet && (\n              <motion.div\n                whileTap={{ scale: 0.95 }}\n                className=\"hidden sm:flex items-center space-x-2 bg-green-50 px-3 py-2 rounded-lg\"\n              >\n                <Wallet className=\"h-4 w-4 text-green-600\" />\n                <span className=\"text-sm font-semibold text-green-700\">\n                  {formatCurrency(student.walletBalance)}\n                </span>\n              </motion.div>\n            )}\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-10 w-10 p-0 relative\"\n              onClick={onNotificationClick}\n            >\n              <Bell className=\"h-5 w-5\" />\n              {notificationCount > 0 && (\n                <motion.div\n                  initial={{ scale: 0 }}\n                  animate={{ scale: 1 }}\n                  className=\"absolute -top-1 -right-1\"\n                >\n                  <Badge variant=\"destructive\" className=\"h-5 w-5 p-0 text-xs flex items-center justify-center\">\n                    {notificationCount > 9 ? '9+' : notificationCount}\n                  </Badge>\n                </motion.div>\n              )}\n              <span className=\"sr-only\">Notifications</span>\n            </Button>\n\n            <Avatar className=\"h-8 w-8 sm:h-10 sm:w-10\">\n              <AvatarImage src={student.profileImage} alt={student.name} />\n              <AvatarFallback className=\"bg-primary text-white text-sm\">\n                {getStudentInitials(student.name)}\n              </AvatarFallback>\n            </Avatar>\n          </div>\n        </div>\n      </div>\n\n      {/* Offline indicator */}\n      {!isOnline && (\n        <motion.div\n          initial={{ opacity: 0, y: -20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-yellow-500 text-white text-center py-2 px-4 text-sm\"\n        >\n          <div className=\"flex items-center justify-center space-x-2\">\n            <WifiOff className=\"h-4 w-4\" />\n            <span>You're offline. Some features may be limited.</span>\n          </div>\n        </motion.div>\n      )}\n    </header>\n  );\n};\n\nexport default MobileHeader;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileLayout.tsx",["2164","2165","2166","2167","2168","2169","2170"],[],"'use client';\n\nimport React, { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { cn } from '@/lib/utils'\nimport { useMobileLayout } from '@/hooks/useMobileLayout'\nimport BottomNavigation from './BottomNavigation'\nimport MobileNavSheet from './MobileNavSheet'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Bell,\n  Search,\n  WifiOff,\n  Zap,\n  X\n} from 'lucide-react'\n\ninterface MobileLayoutProps {\n  children: React.ReactNode\n  userRole?: 'student' | 'parent' | 'admin'\n  user?: {\n    name: string\n    email: string\n    avatar?: string\n    id: string\n  }\n  showBottomNav?: boolean\n  showHeader?: boolean\n  className?: string\n  onLogout?: () => void\n}\n\ninterface OfflineBannerProps {\n  isOnline: boolean\n  onRetry: () => void\n}\n\nconst OfflineBanner: React.FC<OfflineBannerProps> = ({ isOnline, onRetry }) => {\n  const [showBanner, setShowBanner] = useState(false)\n\n  useEffect(() => {\n    setShowBanner(!isOnline)\n  }, [isOnline])\n\n  if (!showBanner) return null\n\n  return (\n    <div className=\"fixed top-0 left-0 right-0 z-50 bg-orange-500 text-white p-2 safe-area-pt animate-slide-down\">\n      <div className=\"flex items-center justify-between container mx-auto\">\n        <div className=\"flex items-center space-x-2\">\n          <WifiOff className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">You're offline</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={onRetry}\n            className=\"h-6 px-2 text-white hover:bg-white/20\"\n          >\n            Retry\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowBanner(false)}\n            className=\"h-6 w-6 p-0 text-white hover:bg-white/20\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface PWAInstallPromptProps {\n  onInstall: () => void\n  onDismiss: () => void\n}\n\nconst PWAInstallPrompt: React.FC<PWAInstallPromptProps> = ({ onInstall, onDismiss }) => {\n  return (\n    <Card className=\"fixed bottom-20 left-4 right-4 z-40 md:hidden border-primary/20 bg-primary/5 animate-slide-in-bottom\">\n      <div className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            <Zap className=\"h-5 w-5 text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold text-sm text-gray-900\">Install HASIVU App</h4>\n            <p className=\"text-xs text-gray-600 mt-1\">\n              Get faster access and offline features by installing the app.\n            </p>\n            <div className=\"flex space-x-2 mt-3\">\n              <Button size=\"sm\" onClick={onInstall} className=\"h-8 px-3 text-xs\">\n                Install\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={onDismiss} className=\"h-8 px-3 text-xs\">\n                Not now\n              </Button>\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={onDismiss}\n            className=\"h-6 w-6 p-0\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\nexport const MobileLayout: React.FC<MobileLayoutProps> = ({\n  children,\n  userRole = 'student',\n  user,\n  showBottomNav = true,\n  showHeader = true,\n  className,\n  onLogout\n}) => {\n  const router = useRouter()\n  const { isMobile, isTablet, isDesktop, safeArea } = useMobileLayout()\n  const [isOnline, setIsOnline] = useState(true)\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false)\n  const [deferredPrompt, setDeferredPrompt] = useState<any>(null)\n  const [notificationCount, setNotificationCount] = useState(3)\n\n  // Handle PWA install prompt\n  useEffect(() => {\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault()\n      setDeferredPrompt(e)\n      \n      // Show install prompt after a delay if on mobile\n      if (isMobile) {\n        setTimeout(() => {\n          setShowInstallPrompt(true)\n        }, 3000)\n      }\n    }\n\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n\n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n    }\n  }, [isMobile])\n\n  // Handle online/offline status\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true)\n    const handleOffline = () => setIsOnline(false)\n\n    setIsOnline(navigator.onLine)\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  // Handle PWA installation\n  const handleInstallApp = async () => {\n    if (deferredPrompt) {\n      deferredPrompt.prompt()\n      const { outcome } = await deferredPrompt.userChoice\n      \n      if (outcome === 'accepted') {\n        console.log('PWA installed')\n      }\n      \n      setDeferredPrompt(null)\n    }\n    setShowInstallPrompt(false)\n  }\n\n  const handleRetryConnection = () => {\n    // Simple connectivity check\n    fetch('/api/v1/health', { method: 'HEAD' })\n      .then(() => {\n        setIsOnline(true)\n      })\n      .catch(() => {\n        console.log('Still offline')\n      })\n  }\n\n  const handleSearch = () => {\n    router.push('/search')\n  }\n\n  const handleNotifications = () => {\n    router.push(`/${userRole}/notifications`)\n  }\n\n  return (\n    <div className={cn(\n      \"min-h-screen bg-gray-50\",\n      \"safe-area-p\", // Use safe area padding\n      isMobile && \"pb-16\", // Account for bottom navigation\n      className\n    )}>\n      {/* Offline Banner */}\n      <OfflineBanner isOnline={isOnline} onRetry={handleRetryConnection} />\n\n      {/* Mobile Header */}\n      {showHeader && isMobile && (\n        <header className={cn(\n          \"sticky top-0 z-30 bg-white/95 backdrop-blur-sm border-b\",\n          !isOnline && \"top-12\" // Account for offline banner\n        )}>\n          <div className=\"flex items-center justify-between px-4 py-3\">\n            {/* Left side - Menu */}\n            <div className=\"flex items-center space-x-3\">\n              <MobileNavSheet\n                userRole={userRole}\n                user={user}\n                onLogout={onLogout}\n              />\n              <div>\n                <h1 className=\"text-lg font-bold text-gray-900\">HASIVU</h1>\n                <p className=\"text-xs text-muted-foreground capitalize\">{userRole} Portal</p>\n              </div>\n            </div>\n\n            {/* Right side - Actions */}\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSearch}\n                className=\"h-10 w-10 p-0\"\n                aria-label=\"Search\"\n              >\n                <Search className=\"h-5 w-5\" />\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleNotifications}\n                className=\"h-10 w-10 p-0 relative\"\n                aria-label=\"Notifications\"\n              >\n                <Bell className=\"h-5 w-5\" />\n                {notificationCount > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs flex items-center justify-center\"\n                  >\n                    {notificationCount > 9 ? '9+' : notificationCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </div>\n        </header>\n      )}\n\n      {/* Tablet/Desktop Header */}\n      {showHeader && !isMobile && (\n        <header className=\"sticky top-0 z-30 bg-white/95 backdrop-blur-sm border-b\">\n          <div className=\"container mx-auto px-6 py-4 flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-xl font-bold text-gray-900\">HASIVU</h1>\n              <Badge variant=\"outline\" className=\"capitalize\">\n                {userRole} Portal\n              </Badge>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"outline\" onClick={handleSearch}>\n                <Search className=\"h-4 w-4 mr-2\" />\n                Search\n              </Button>\n              \n              <Button variant=\"outline\" onClick={handleNotifications}>\n                <Bell className=\"h-4 w-4 mr-2\" />\n                Notifications\n                {notificationCount > 0 && (\n                  <Badge variant=\"destructive\" className=\"ml-2\">\n                    {notificationCount}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n          </div>\n        </header>\n      )}\n\n      {/* Main Content */}\n      <main className={cn(\n        \"flex-1\",\n        isMobile && showHeader && \"pt-0\", // Header handles its own spacing\n        !isMobile && \"container mx-auto px-6 py-6\"\n      )}>\n        {children}\n      </main>\n\n      {/* Bottom Navigation - Mobile Only */}\n      {showBottomNav && isMobile && (\n        <BottomNavigation userRole={userRole} />\n      )}\n\n      {/* PWA Install Prompt */}\n      {showInstallPrompt && (\n        <PWAInstallPrompt\n          onInstall={handleInstallApp}\n          onDismiss={() => setShowInstallPrompt(false)}\n        />\n      )}\n    </div>\n  )\n}\n\n// HOC for automatic mobile layout wrapping\nexport const withMobileLayout = <P extends object>(\n  Component: React.ComponentType<P>,\n  layoutProps?: Partial<MobileLayoutProps>\n) => {\n  const WrappedComponent: React.FC<P & { mobileLayoutProps?: Partial<MobileLayoutProps> }> = (props) => {\n    const { mobileLayoutProps, ...componentProps } = props\n    \n    return (\n      <MobileLayout {...layoutProps} {...mobileLayoutProps}>\n        <Component {...(componentProps as P)} />\n      </MobileLayout>\n    )\n  }\n  \n  WrappedComponent.displayName = `withMobileLayout(${Component.displayName || Component.name})`\n  \n  return WrappedComponent\n}\n\nexport default MobileLayout","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileNavSheet.tsx",["2171","2172","2173"],[],"\"use client\"\n\nimport React, { useState } from 'react'\nimport { useRouter, usePathname } from 'next/navigation'\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n  SheetClose\n} from '@/components/ui/sheet'\nimport { Button } from '@/components/ui/button'\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'\nimport { Separator } from '@/components/ui/separator'\nimport { cn } from '@/lib/utils'\nimport {\n  Menu,\n  Home,\n  UtensilsCrossed,\n  Wallet,\n  QrCode,\n  User,\n  ShoppingCart,\n  Bell,\n  Clock,\n  Settings,\n  LogOut,\n  ChevronRight,\n  Star,\n  HelpCircle,\n  Shield,\n  BarChart3\n} from 'lucide-react'\n\ninterface NavigationSection {\n  title?: string\n  items: NavigationItem[]\n}\n\ninterface NavigationItem {\n  label: string\n  icon: React.ElementType\n  href?: string\n  action?: () => void\n  badge?: number\n  description?: string\n  chevron?: boolean\n}\n\ninterface MobileNavSheetProps {\n  userRole?: 'student' | 'parent' | 'admin'\n  user?: {\n    name: string\n    email: string\n    avatar?: string\n    id: string\n  }\n  onLogout?: () => void\n  className?: string\n}\n\nconst navigationSections = {\n  student: [\n    {\n      items: [\n        {\n          label: 'Dashboard',\n          icon: Home,\n          href: '/student',\n          description: 'View your meal summary'\n        },\n        {\n          label: 'Order Food',\n          icon: UtensilsCrossed,\n          href: '/student/order',\n          description: 'Browse and order meals'\n        },\n        {\n          label: 'My Cart',\n          icon: ShoppingCart,\n          href: '/student/cart',\n          badge: 0\n        },\n        {\n          label: 'Wallet',\n          icon: Wallet,\n          href: '/student/wallet',\n          description: 'Check balance and top up'\n        },\n        {\n          label: 'Scan RFID',\n          icon: QrCode,\n          href: '/student/scan',\n          description: 'Scan for meal pickup'\n        }\n      ]\n    },\n    {\n      title: 'Account',\n      items: [\n        {\n          label: 'Order History',\n          icon: Clock,\n          href: '/student/history',\n          chevron: true\n        },\n        {\n          label: 'Notifications',\n          icon: Bell,\n          href: '/student/notifications',\n          badge: 3,\n          chevron: true\n        },\n        {\n          label: 'Profile Settings',\n          icon: User,\n          href: '/student/profile',\n          chevron: true\n        }\n      ]\n    },\n    {\n      title: 'Support',\n      items: [\n        {\n          label: 'Help & FAQ',\n          icon: HelpCircle,\n          href: '/help',\n          chevron: true\n        },\n        {\n          label: 'Rate App',\n          icon: Star,\n          action: () => {\n            // Handle app rating\n            console.log('Rate app')\n          },\n          chevron: true\n        }\n      ]\n    }\n  ] as NavigationSection[],\n  parent: [\n    {\n      items: [\n        {\n          label: 'Dashboard',\n          icon: Home,\n          href: '/parent',\n          description: 'View children\\'s meal activity'\n        },\n        {\n          label: 'Children\\'s Orders',\n          icon: UtensilsCrossed,\n          href: '/parent/orders',\n          description: 'Manage meal orders'\n        },\n        {\n          label: 'Family Wallet',\n          icon: Wallet,\n          href: '/parent/wallet',\n          description: 'Manage family balance'\n        },\n        {\n          label: 'Order History',\n          icon: Clock,\n          href: '/parent/history',\n          description: 'View past orders'\n        }\n      ]\n    },\n    {\n      title: 'Account',\n      items: [\n        {\n          label: 'Notifications',\n          icon: Bell,\n          href: '/parent/notifications',\n          badge: 5,\n          chevron: true\n        },\n        {\n          label: 'Profile Settings',\n          icon: User,\n          href: '/parent/profile',\n          chevron: true\n        },\n        {\n          label: 'Children Management',\n          icon: User,\n          href: '/parent/children',\n          chevron: true\n        }\n      ]\n    },\n    {\n      title: 'Support',\n      items: [\n        {\n          label: 'Help & FAQ',\n          icon: HelpCircle,\n          href: '/help',\n          chevron: true\n        },\n        {\n          label: 'Privacy Policy',\n          icon: Shield,\n          href: '/privacy',\n          chevron: true\n        }\n      ]\n    }\n  ] as NavigationSection[],\n  admin: [\n    {\n      items: [\n        {\n          label: 'Dashboard',\n          icon: Home,\n          href: '/admin',\n          description: 'School overview and analytics'\n        },\n        {\n          label: 'Order Management',\n          icon: UtensilsCrossed,\n          href: '/admin/orders',\n          badge: 12,\n          description: 'Manage all orders'\n        },\n        {\n          label: 'Menu Management',\n          icon: UtensilsCrossed,\n          href: '/admin/menu',\n          description: 'Update daily menus'\n        },\n        {\n          label: 'Reports & Analytics',\n          icon: BarChart3,\n          href: '/admin/reports',\n          description: 'View detailed reports'\n        }\n      ]\n    },\n    {\n      title: 'Management',\n      items: [\n        {\n          label: 'User Management',\n          icon: User,\n          href: '/admin/users',\n          chevron: true\n        },\n        {\n          label: 'Wallet Management',\n          icon: Wallet,\n          href: '/admin/wallets',\n          chevron: true\n        },\n        {\n          label: 'System Settings',\n          icon: Settings,\n          href: '/admin/settings',\n          chevron: true\n        }\n      ]\n    },\n    {\n      title: 'Support',\n      items: [\n        {\n          label: 'Support Tickets',\n          icon: HelpCircle,\n          href: '/admin/support',\n          badge: 2,\n          chevron: true\n        },\n        {\n          label: 'System Health',\n          icon: Shield,\n          href: '/admin/health',\n          chevron: true\n        }\n      ]\n    }\n  ] as NavigationSection[]\n}\n\nexport const MobileNavSheet: React.FC<MobileNavSheetProps> = ({\n  userRole = 'student',\n  user,\n  onLogout,\n  className\n}) => {\n  const [open, setOpen] = useState(false)\n  const router = useRouter()\n  const pathname = usePathname()\n  \n  const sections = navigationSections[userRole]\n  \n  const handleNavigation = (href: string) => {\n    // Add haptic feedback\n    if ('vibrate' in navigator) {\n      navigator.vibrate(30)\n    }\n    router.push(href)\n    setOpen(false)\n  }\n  \n  const handleAction = (action: () => void) => {\n    action()\n    setOpen(false)\n  }\n  \n  const isActive = (href?: string) => {\n    if (!href) return false\n    return pathname === href || pathname.startsWith(href + '/')\n  }\n  \n  return (\n    <Sheet open={open} onOpenChange={setOpen}>\n      <SheetTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className={cn(\n            \"p-2 h-auto w-auto md:hidden\",\n            \"focus:ring-2 focus:ring-primary focus:ring-offset-2\",\n            className\n          )}\n          aria-label=\"Open navigation menu\"\n        >\n          <Menu className=\"h-5 w-5\" />\n        </Button>\n      </SheetTrigger>\n      \n      <SheetContent side=\"left\" className=\"w-[300px] p-0 overflow-y-auto\">\n        <div className=\"flex flex-col h-full\">\n          {/* Header with user info */}\n          <SheetHeader className=\"p-6 pb-4 bg-primary/5\">\n            <div className=\"flex items-center space-x-3\">\n              <Avatar className=\"h-12 w-12\">\n                <AvatarImage src={user?.avatar} alt={user?.name} />\n                <AvatarFallback className=\"bg-primary text-primary-foreground\">\n                  {user?.name?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 text-left\">\n                <SheetTitle className=\"text-base font-semibold\">\n                  {user?.name || 'User'}\n                </SheetTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  {user?.email || 'user@example.com'}\n                </p>\n                <p className=\"text-xs text-muted-foreground capitalize\">\n                  {userRole}\n                </p>\n              </div>\n            </div>\n          </SheetHeader>\n          \n          {/* Navigation sections */}\n          <div className=\"flex-1 px-6 py-4\">\n            {sections.map((section, sectionIndex) => (\n              <div key={sectionIndex} className=\"mb-6 last:mb-0\">\n                {section.title && (\n                  <h3 className=\"text-sm font-medium text-muted-foreground mb-3 px-2\">\n                    {section.title}\n                  </h3>\n                )}\n                \n                <nav className=\"space-y-1\">\n                  {section.items.map((item, itemIndex) => {\n                    const Icon = item.icon\n                    const active = isActive(item.href)\n                    \n                    return (\n                      <button\n                        key={itemIndex}\n                        onClick={() => item.href ? handleNavigation(item.href) : item.action && handleAction(item.action)}\n                        className={cn(\n                          \"w-full flex items-center justify-between p-3 rounded-lg text-left transition-all duration-200\",\n                          \"focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2\",\n                          \"active:scale-[0.98] active:bg-primary/20\",\n                          active\n                            ? \"bg-primary/10 text-primary border border-primary/20\"\n                            : \"hover:bg-muted/50 text-foreground\"\n                        )}\n                      >\n                        <div className=\"flex items-center space-x-3 flex-1\">\n                          <div className=\"relative\">\n                            <Icon className={cn(\n                              \"h-5 w-5 transition-colors duration-200\",\n                              active ? \"text-primary\" : \"text-muted-foreground\"\n                            )} />\n                            {item.badge && item.badge > 0 && (\n                              <span className=\"absolute -top-1 -right-1 flex h-4 w-4 items-center justify-center rounded-full bg-destructive text-[10px] font-medium text-destructive-foreground\">\n                                {item.badge > 9 ? '9+' : item.badge}\n                              </span>\n                            )}\n                          </div>\n                          \n                          <div className=\"flex-1\">\n                            <div className={cn(\n                              \"font-medium text-sm transition-colors duration-200\",\n                              active ? \"text-primary\" : \"text-foreground\"\n                            )}>\n                              {item.label}\n                            </div>\n                            {item.description && (\n                              <div className=\"text-xs text-muted-foreground mt-0.5\">\n                                {item.description}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {item.chevron && (\n                          <ChevronRight className={cn(\n                            \"h-4 w-4 transition-colors duration-200\",\n                            active ? \"text-primary\" : \"text-muted-foreground\"\n                          )} />\n                        )}\n                      </button>\n                    )\n                  })}\n                </nav>\n              </div>\n            ))}\n          </div>\n          \n          {/* Footer with logout */}\n          <div className=\"p-6 pt-0 border-t\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => {\n                onLogout?.()\n                setOpen(false)\n              }}\n              className=\"w-full justify-start p-3 text-destructive hover:text-destructive hover:bg-destructive/10\"\n            >\n              <LogOut className=\"h-5 w-5 mr-3\" />\n              <span className=\"font-medium\">Sign Out</span>\n            </Button>\n          </div>\n        </div>\n      </SheetContent>\n    </Sheet>\n  )\n}\n\nexport default MobileNavSheet","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileNavigation.tsx",["2174","2175","2176"],[],"'use client';\n\n/**\n * MobileNavigation - Bottom Tab Navigation\n * Mobile-optimized navigation with touch-friendly targets and haptic feedback\n */\n\nimport React from 'react';\nimport { useRouter } from 'next/navigation';\nimport { motion } from 'framer-motion';\nimport { \n  Home, \n  UtensilsCrossed, \n  ShoppingCart, \n  Smartphone, \n  Wallet, \n  User,\n  Bell,\n  History\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { Badge } from '@/components/ui/badge';\n\ninterface NavigationItem {\n  id: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  href: string;\n  badge?: number;\n  disabled?: boolean;\n}\n\ninterface MobileNavigationProps {\n  activeTab: string;\n  onTabChange: (tab: string) => void;\n  cartItemCount?: number;\n  notificationCount?: number;\n  className?: string;\n}\n\nexport const MobileNavigation: React.FC<MobileNavigationProps> = ({\n  activeTab,\n  onTabChange,\n  cartItemCount = 0,\n  notificationCount = 0,\n  className\n}) => {\n  const router = useRouter();\n\n  const navigationItems: NavigationItem[] = [\n    {\n      id: 'home',\n      label: 'Home',\n      icon: Home,\n      href: '/',\n    },\n    {\n      id: 'menu',\n      label: 'Menu',\n      icon: UtensilsCrossed,\n      href: '/menu',\n    },\n    {\n      id: 'cart',\n      label: 'Cart',\n      icon: ShoppingCart,\n      href: '/cart',\n      badge: cartItemCount > 0 ? cartItemCount : undefined,\n    },\n    {\n      id: 'scan',\n      label: 'Scan',\n      icon: Smartphone,\n      href: '/scan',\n    },\n    {\n      id: 'profile',\n      label: 'Profile',\n      icon: User,\n      href: '/profile',\n      badge: notificationCount > 0 ? notificationCount : undefined,\n    }\n  ];\n\n  const handleTabPress = (item: NavigationItem) => {\n    if (item.disabled) return;\n\n    // Haptic feedback for supported devices\n    if ('vibrate' in navigator && navigator.vibrate) {\n      navigator.vibrate(10); // Short haptic feedback\n    }\n\n    onTabChange(item.id);\n    \n    // Navigate if href is different from current route\n    if (router.asPath !== item.href) {\n      router.push(item.href);\n    }\n  };\n\n  return (\n    <nav \n      className={cn(\n        'fixed bottom-0 left-0 right-0 z-50',\n        'bg-white border-t border-gray-200',\n        'safe-area-inset-bottom',\n        'md:hidden', // Hide on desktop\n        className\n      )}\n    >\n      {/* Navigation Background with blur effect */}\n      <div className=\"absolute inset-0 bg-white/90 backdrop-blur-md\" />\n      \n      <div className=\"relative px-2 py-1\">\n        <div className=\"flex items-center justify-around\">\n          {navigationItems.map((item) => {\n            const Icon = item.icon;\n            const isActive = activeTab === item.id;\n            \n            return (\n              <button\n                key={item.id}\n                onClick={() => handleTabPress(item)}\n                disabled={item.disabled}\n                className={cn(\n                  'flex flex-col items-center justify-center',\n                  'min-h-[48px] min-w-[48px] p-2',\n                  'rounded-lg transition-all duration-200',\n                  'focus:outline-none focus:ring-2 focus:ring-primary focus:ring-opacity-50',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'active:scale-95', // Touch feedback\n                  isActive \n                    ? 'text-primary bg-primary/10' \n                    : 'text-gray-600 hover:text-gray-900 hover:bg-gray-50'\n                )}\n                aria-label={item.label}\n                role=\"tab\"\n                aria-selected={isActive}\n              >\n                <div className=\"relative\">\n                  <Icon \n                    className={cn(\n                      'h-5 w-5 transition-all duration-200',\n                      isActive ? 'scale-110' : ''\n                    )} \n                  />\n                  \n                  {/* Badge */}\n                  {item.badge && (\n                    <motion.div\n                      initial={{ scale: 0 }}\n                      animate={{ scale: 1 }}\n                      className=\"absolute -top-1 -right-1\"\n                    >\n                      <Badge \n                        variant=\"destructive\" \n                        className={cn(\n                          'h-4 w-4 p-0 text-xs flex items-center justify-center',\n                          'min-w-[16px] rounded-full',\n                          item.badge > 99 ? 'px-1' : ''\n                        )}\n                      >\n                        {item.badge > 99 ? '99+' : item.badge}\n                      </Badge>\n                    </motion.div>\n                  )}\n                </div>\n                \n                {/* Label */}\n                <span className={cn(\n                  'text-xs font-medium mt-1 transition-all duration-200',\n                  isActive ? 'text-primary font-semibold' : 'text-gray-600'\n                )}>\n                  {item.label}\n                </span>\n\n                {/* Active indicator */}\n                {isActive && (\n                  <motion.div\n                    layoutId=\"activeTab\"\n                    className=\"absolute -top-0.5 left-1/2 transform -translate-x-1/2\"\n                    initial={false}\n                    transition={{ type: \"spring\", stiffness: 500, damping: 30 }}\n                  >\n                    <div className=\"w-8 h-1 bg-primary rounded-full\" />\n                  </motion.div>\n                )}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default MobileNavigation;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobileOptimizations.tsx",["2177","2178","2179","2180","2181","2182","2183","2184","2185","2186","2187","2188","2189","2190","2191","2192"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback, useMemo, useRef, ReactNode } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Skeleton } from '@/components/ui/skeleton'\nimport { cn } from '@/lib/utils'\nimport { \n  Loader2, \n  Wifi, \n  WifiOff, \n  Battery, \n  Smartphone,\n  Monitor,\n  Sun,\n  Moon,\n  Volume2,\n  VolumeX,\n  Vibrate,\n  Accessibility,\n  Eye,\n  Contrast\n} from 'lucide-react'\n\n// Performance monitoring hooks\nexport const usePerformanceMonitor = () => {\n  const [metrics, setMetrics] = useState({\n    renderTime: 0,\n    memoryUsage: 0,\n    fps: 60,\n    batteryLevel: null as number | null,\n    networkSpeed: 'unknown' as string\n  })\n\n  useEffect(() => {\n    const measurePerformance = () => {\n      // Measure render time\n      const startTime = performance.now()\n      \n      requestIdleCallback(() => {\n        const renderTime = performance.now() - startTime\n        \n        setMetrics(prev => ({\n          ...prev,\n          renderTime\n        }))\n      })\n\n      // Memory usage (if available)\n      // @ts-ignore\n      if (performance.memory) {\n        // @ts-ignore\n        const memoryUsage = performance.memory.usedJSHeapSize / performance.memory.jsHeapSizeLimit\n        setMetrics(prev => ({\n          ...prev,\n          memoryUsage: memoryUsage * 100\n        }))\n      }\n\n      // Network connection info\n      // @ts-ignore\n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection\n      if (connection) {\n        setMetrics(prev => ({\n          ...prev,\n          networkSpeed: connection.effectiveType || 'unknown'\n        }))\n      }\n\n      // Battery level\n      // @ts-ignore\n      if ('getBattery' in navigator) {\n        // @ts-ignore\n        navigator.getBattery().then(battery => {\n          setMetrics(prev => ({\n            ...prev,\n            batteryLevel: battery.level * 100\n          }))\n        })\n      }\n    }\n\n    measurePerformance()\n    const interval = setInterval(measurePerformance, 5000) // Every 5 seconds\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return metrics\n}\n\n// Battery optimization hook\nexport const useBatteryOptimization = () => {\n  const [isLowPowerMode, setIsLowPowerMode] = useState(false)\n  const [batteryInfo, setBatteryInfo] = useState({\n    level: null as number | null,\n    charging: false,\n    chargingTime: null as number | null,\n    dischargingTime: null as number | null\n  })\n\n  useEffect(() => {\n    const getBatteryInfo = async () => {\n      try {\n        // @ts-ignore\n        if ('getBattery' in navigator) {\n          // @ts-ignore\n          const battery = await navigator.getBattery()\n          \n          const updateBatteryInfo = () => {\n            setBatteryInfo({\n              level: battery.level * 100,\n              charging: battery.charging,\n              chargingTime: battery.chargingTime,\n              dischargingTime: battery.dischargingTime\n            })\n\n            // Enable low power mode if battery is below 20%\n            setIsLowPowerMode(battery.level < 0.2 && !battery.charging)\n          }\n\n          updateBatteryInfo()\n          \n          battery.addEventListener('levelchange', updateBatteryInfo)\n          battery.addEventListener('chargingchange', updateBatteryInfo)\n          \n          return () => {\n            battery.removeEventListener('levelchange', updateBatteryInfo)\n            battery.removeEventListener('chargingchange', updateBatteryInfo)\n          }\n        }\n      } catch (error) {\n        console.warn('Battery API not supported:', error)\n      }\n    }\n\n    getBatteryInfo()\n  }, [])\n\n  const enableLowPowerMode = useCallback(() => {\n    setIsLowPowerMode(true)\n  }, [])\n\n  const disableLowPowerMode = useCallback(() => {\n    setIsLowPowerMode(false)\n  }, [])\n\n  return {\n    isLowPowerMode,\n    batteryInfo,\n    enableLowPowerMode,\n    disableLowPowerMode\n  }\n}\n\n// Data usage optimization hook\nexport const useDataOptimization = () => {\n  const [isDataSaver, setIsDataSaver] = useState(false)\n  const [dataUsage, setDataUsage] = useState(0)\n  const [connectionType, setConnectionType] = useState('unknown')\n\n  useEffect(() => {\n    // @ts-ignore\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection\n    \n    if (connection) {\n      const updateConnectionInfo = () => {\n        setConnectionType(connection.effectiveType || 'unknown')\n        \n        // Enable data saver on slow connections\n        const slowConnections = ['slow-2g', '2g']\n        setIsDataSaver(slowConnections.includes(connection.effectiveType))\n      }\n\n      updateConnectionInfo()\n      connection.addEventListener('change', updateConnectionInfo)\n      \n      return () => {\n        connection.removeEventListener('change', updateConnectionInfo)\n      }\n    }\n  }, [])\n\n  const enableDataSaver = useCallback(() => {\n    setIsDataSaver(true)\n  }, [])\n\n  const disableDataSaver = useCallback(() => {\n    setIsDataSaver(false)\n  }, [])\n\n  return {\n    isDataSaver,\n    dataUsage,\n    connectionType,\n    enableDataSaver,\n    disableDataSaver\n  }\n}\n\n// Accessibility features hook\nexport const useAccessibility = () => {\n  const [settings, setSettings] = useState({\n    highContrast: false,\n    largeText: false,\n    reducedMotion: false,\n    screenReader: false,\n    voiceOver: false\n  })\n\n  useEffect(() => {\n    // Check for user preferences\n    const checkPreferences = () => {\n      setSettings(prev => ({\n        ...prev,\n        reducedMotion: window.matchMedia('(prefers-reduced-motion: reduce)').matches,\n        highContrast: window.matchMedia('(prefers-contrast: high)').matches\n      }))\n    }\n\n    checkPreferences()\n\n    // Listen for changes\n    const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)')\n    const highContrastQuery = window.matchMedia('(prefers-contrast: high)')\n\n    reducedMotionQuery.addEventListener('change', checkPreferences)\n    highContrastQuery.addEventListener('change', checkPreferences)\n\n    return () => {\n      reducedMotionQuery.removeEventListener('change', checkPreferences)\n      highContrastQuery.removeEventListener('change', checkPreferences)\n    }\n  }, [])\n\n  const toggleSetting = useCallback((setting: keyof typeof settings) => {\n    setSettings(prev => ({\n      ...prev,\n      [setting]: !prev[setting]\n    }))\n  }, [])\n\n  return {\n    settings,\n    toggleSetting\n  }\n}\n\n// Optimized Image Component\ninterface OptimizedImageProps {\n  src: string\n  alt: string\n  width?: number\n  height?: number\n  className?: string\n  loading?: 'lazy' | 'eager'\n  priority?: boolean\n  quality?: number\n  placeholder?: 'blur' | 'empty'\n}\n\nexport const OptimizedImage: React.FC<OptimizedImageProps> = ({\n  src,\n  alt,\n  width,\n  height,\n  className,\n  loading = 'lazy',\n  priority = false,\n  quality = 75,\n  placeholder = 'empty'\n}) => {\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [error, setError] = useState(false)\n  const { isDataSaver } = useDataOptimization()\n  const imgRef = useRef<HTMLImageElement>(null)\n\n  // Generate optimized src based on device and connection\n  const optimizedSrc = useMemo(() => {\n    const params = new URLSearchParams()\n    \n    if (width) params.append('w', width.toString())\n    if (height) params.append('h', height.toString())\n    \n    // Reduce quality for data saver mode\n    const adjustedQuality = isDataSaver ? Math.min(quality, 50) : quality\n    params.append('q', adjustedQuality.toString())\n    \n    // Use WebP format if supported\n    if (typeof window !== 'undefined') {\n      const canvas = document.createElement('canvas')\n      const webpSupported = canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0\n      if (webpSupported) {\n        params.append('f', 'webp')\n      }\n    }\n\n    return `${src}?${params.toString()}`\n  }, [src, width, height, quality, isDataSaver])\n\n  const handleLoad = useCallback(() => {\n    setIsLoaded(true)\n  }, [])\n\n  const handleError = useCallback(() => {\n    setError(true)\n  }, [])\n\n  // Intersection Observer for lazy loading\n  useEffect(() => {\n    if (loading === 'eager' || priority) return\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting && imgRef.current) {\n            imgRef.current.src = optimizedSrc\n            observer.unobserve(entry.target)\n          }\n        })\n      },\n      { rootMargin: '50px' }\n    )\n\n    if (imgRef.current) {\n      observer.observe(imgRef.current)\n    }\n\n    return () => {\n      if (imgRef.current) {\n        observer.unobserve(imgRef.current)\n      }\n    }\n  }, [loading, priority, optimizedSrc])\n\n  if (error) {\n    return (\n      <div className={cn(\"bg-gray-200 flex items-center justify-center\", className)}>\n        <span className=\"text-gray-500 text-sm\">Failed to load image</span>\n      </div>\n    )\n  }\n\n  return (\n    <div className={cn(\"relative overflow-hidden\", className)}>\n      {placeholder === 'blur' && !isLoaded && (\n        <div className=\"absolute inset-0 bg-gray-200 animate-pulse\" />\n      )}\n      \n      <img\n        ref={imgRef}\n        src={loading === 'eager' || priority ? optimizedSrc : undefined}\n        alt={alt}\n        width={width}\n        height={height}\n        loading={loading}\n        onLoad={handleLoad}\n        onError={handleError}\n        className={cn(\n          \"transition-opacity duration-300\",\n          isLoaded ? \"opacity-100\" : \"opacity-0\",\n          className\n        )}\n      />\n    </div>\n  )\n}\n\n// Performance Monitor Component\ninterface PerformanceMonitorProps {\n  className?: string\n}\n\nexport const PerformanceMonitor: React.FC<PerformanceMonitorProps> = ({ className }) => {\n  const metrics = usePerformanceMonitor()\n  const { batteryInfo } = useBatteryOptimization()\n  const { connectionType } = useDataOptimization()\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-3 flex items-center\">\n        <Monitor className=\"h-4 w-4 mr-2\" />\n        Performance Monitor\n      </h3>\n      \n      <div className=\"grid grid-cols-2 gap-3 text-sm\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-600\">Render Time:</span>\n          <span className=\"font-mono\">{metrics.renderTime.toFixed(1)}ms</span>\n        </div>\n        \n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-600\">Memory:</span>\n          <span className=\"font-mono\">{metrics.memoryUsage.toFixed(1)}%</span>\n        </div>\n        \n        <div className=\"flex justify-between\">\n          <span className=\"text-gray-600\">Network:</span>\n          <span className=\"font-mono uppercase\">{connectionType}</span>\n        </div>\n        \n        {batteryInfo.level && (\n          <div className=\"flex justify-between\">\n            <span className=\"text-gray-600\">Battery:</span>\n            <span className=\"font-mono\">{batteryInfo.level.toFixed(0)}%</span>\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Battery Optimization Component\ninterface BatteryOptimizationProps {\n  className?: string\n}\n\nexport const BatteryOptimization: React.FC<BatteryOptimizationProps> = ({ className }) => {\n  const { isLowPowerMode, batteryInfo, enableLowPowerMode, disableLowPowerMode } = useBatteryOptimization()\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-3 flex items-center\">\n        <Battery className=\"h-4 w-4 mr-2\" />\n        Battery Optimization\n      </h3>\n      \n      <div className=\"space-y-3\">\n        {batteryInfo.level && (\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-sm text-gray-600\">Battery Level:</span>\n            <div className=\"flex items-center space-x-2\">\n              <div className={cn(\n                \"w-16 h-2 bg-gray-200 rounded-full overflow-hidden\",\n                batteryInfo.level < 20 && \"bg-red-100\"\n              )}>\n                <div \n                  className={cn(\n                    \"h-full transition-all duration-300\",\n                    batteryInfo.level < 20 ? \"bg-red-500\" : \"bg-green-500\"\n                  )}\n                  style={{ width: `${batteryInfo.level}%` }}\n                />\n              </div>\n              <span className=\"text-sm font-mono\">{batteryInfo.level.toFixed(0)}%</span>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Low Power Mode:</span>\n          <Button\n            variant={isLowPowerMode ? \"destructive\" : \"outline\"}\n            size=\"sm\"\n            onClick={isLowPowerMode ? disableLowPowerMode : enableLowPowerMode}\n          >\n            {isLowPowerMode ? \"Disable\" : \"Enable\"}\n          </Button>\n        </div>\n        \n        {isLowPowerMode && (\n          <div className=\"text-xs text-amber-600 bg-amber-50 p-2 rounded\">\n            Low power mode active: Reduced animations, slower background sync\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Data Saver Component\ninterface DataSaverProps {\n  className?: string\n}\n\nexport const DataSaver: React.FC<DataSaverProps> = ({ className }) => {\n  const { isDataSaver, connectionType, enableDataSaver, disableDataSaver } = useDataOptimization()\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-3 flex items-center\">\n        <Wifi className=\"h-4 w-4 mr-2\" />\n        Data Optimization\n      </h3>\n      \n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Connection:</span>\n          <div className=\"flex items-center space-x-2\">\n            {connectionType === 'slow-2g' || connectionType === '2g' ? (\n              <WifiOff className=\"h-4 w-4 text-red-500\" />\n            ) : (\n              <Wifi className=\"h-4 w-4 text-green-500\" />\n            )}\n            <span className=\"text-sm font-mono uppercase\">{connectionType}</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm text-gray-600\">Data Saver:</span>\n          <Button\n            variant={isDataSaver ? \"default\" : \"outline\"}\n            size=\"sm\"\n            onClick={isDataSaver ? disableDataSaver : enableDataSaver}\n          >\n            {isDataSaver ? \"Enabled\" : \"Enable\"}\n          </Button>\n        </div>\n        \n        {isDataSaver && (\n          <div className=\"text-xs text-blue-600 bg-blue-50 p-2 rounded\">\n            Data saver active: Compressed images, limited background sync\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Accessibility Settings Component\ninterface AccessibilitySettingsProps {\n  className?: string\n}\n\nexport const AccessibilitySettings: React.FC<AccessibilitySettingsProps> = ({ className }) => {\n  const { settings, toggleSetting } = useAccessibility()\n\n  const accessibilityOptions = [\n    {\n      key: 'highContrast' as const,\n      label: 'High Contrast',\n      icon: <Contrast className=\"h-4 w-4\" />,\n      description: 'Increase contrast for better visibility'\n    },\n    {\n      key: 'largeText' as const,\n      label: 'Large Text',\n      icon: <Eye className=\"h-4 w-4\" />,\n      description: 'Increase text size for better readability'\n    },\n    {\n      key: 'reducedMotion' as const,\n      label: 'Reduced Motion',\n      icon: <Smartphone className=\"h-4 w-4\" />,\n      description: 'Minimize animations and transitions'\n    },\n    {\n      key: 'voiceOver' as const,\n      label: 'Voice Over',\n      icon: <Volume2 className=\"h-4 w-4\" />,\n      description: 'Enable voice descriptions'\n    }\n  ]\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-3 flex items-center\">\n        <Accessibility className=\"h-4 w-4 mr-2\" />\n        Accessibility\n      </h3>\n      \n      <div className=\"space-y-3\">\n        {accessibilityOptions.map((option) => (\n          <div key={option.key} className=\"flex items-center justify-between\">\n            <div className=\"flex items-start space-x-3\">\n              {option.icon}\n              <div>\n                <div className=\"text-sm font-medium\">{option.label}</div>\n                <div className=\"text-xs text-gray-600\">{option.description}</div>\n              </div>\n            </div>\n            \n            <Button\n              variant={settings[option.key] ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => toggleSetting(option.key)}\n            >\n              {settings[option.key] ? \"On\" : \"Off\"}\n            </Button>\n          </div>\n        ))}\n      </div>\n    </Card>\n  )\n}\n\n// Optimized Loading Skeleton\ninterface OptimizedSkeletonProps {\n  className?: string\n  lines?: number\n  showAvatar?: boolean\n  animate?: boolean\n}\n\nexport const OptimizedSkeleton: React.FC<OptimizedSkeletonProps> = ({\n  className,\n  lines = 3,\n  showAvatar = false,\n  animate = true\n}) => {\n  const { settings } = useAccessibility()\n  \n  // Disable animation if reduced motion is preferred\n  const shouldAnimate = animate && !settings.reducedMotion\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      <div className=\"flex items-start space-x-3\">\n        {showAvatar && (\n          <Skeleton \n            className={cn(\n              \"h-10 w-10 rounded-full\",\n              shouldAnimate && \"animate-pulse\"\n            )} \n          />\n        )}\n        <div className=\"flex-1 space-y-2\">\n          {Array.from({ length: lines }).map((_, i) => (\n            <Skeleton \n              key={i}\n              className={cn(\n                \"h-4\",\n                i === lines - 1 ? \"w-3/4\" : \"w-full\",\n                shouldAnimate && \"animate-pulse\"\n              )} \n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Mobile Performance Dashboard\ninterface MobilePerformanceDashboardProps {\n  className?: string\n}\n\nexport const MobilePerformanceDashboard: React.FC<MobilePerformanceDashboardProps> = ({ className }) => {\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <PerformanceMonitor />\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <BatteryOptimization />\n        <DataSaver />\n      </div>\n      \n      <AccessibilitySettings />\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/MobilePushNotifications.tsx",["2193","2194","2195","2196","2197","2198","2199","2200","2201","2202","2203","2204","2205","2206","2207","2208","2209"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Switch } from '@/components/ui/switch'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { cn } from '@/lib/utils'\nimport { \n  Bell, \n  BellOff,\n  AlertCircle,\n  CheckCircle,\n  Settings,\n  Clock,\n  MessageSquare,\n  ShoppingCart,\n  Wallet,\n  MapPin,\n  Loader2,\n  Volume2,\n  VolumeX,\n  Vibrate,\n  Smartphone,\n  X,\n  Check\n} from 'lucide-react'\n\n// Types for notifications\ninterface NotificationSettings {\n  enabled: boolean\n  orders: boolean\n  delivery: boolean\n  wallet: boolean\n  reminders: boolean\n  promotions: boolean\n  emergency: boolean\n  sound: boolean\n  vibration: boolean\n  quietHours: {\n    enabled: boolean\n    start: string\n    end: string\n  }\n}\n\ninterface PushNotification {\n  id: string\n  title: string\n  body: string\n  icon?: string\n  badge?: string\n  tag: string\n  timestamp: number\n  data?: any\n  actions?: Array<{\n    action: string\n    title: string\n    icon?: string\n  }>\n  silent: boolean\n  requireInteraction: boolean\n  vibrate?: number[]\n}\n\ninterface NotificationHistory {\n  id: string\n  notification: PushNotification\n  status: 'delivered' | 'clicked' | 'dismissed'\n  timestamp: number\n}\n\n// Default notification settings\nconst defaultSettings: NotificationSettings = {\n  enabled: false,\n  orders: true,\n  delivery: true,\n  wallet: true,\n  reminders: true,\n  promotions: false,\n  emergency: true,\n  sound: true,\n  vibration: true,\n  quietHours: {\n    enabled: false,\n    start: '22:00',\n    end: '07:00'\n  }\n}\n\n// Push notification hook\nexport const usePushNotifications = () => {\n  const [permission, setPermission] = useState<NotificationPermission>('default')\n  const [subscription, setSubscription] = useState<PushSubscription | null>(null)\n  const [settings, setSettings] = useState<NotificationSettings>(defaultSettings)\n  const [isSupported, setIsSupported] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [history, setHistory] = useState<NotificationHistory[]>([])\n\n  // Check browser support\n  useEffect(() => {\n    const checkSupport = () => {\n      const supported = \n        'Notification' in window && \n        'serviceWorker' in navigator && \n        'PushManager' in window\n\n      setIsSupported(supported)\n      \n      if (supported) {\n        setPermission(Notification.permission)\n        loadSettings()\n        loadHistory()\n      }\n    }\n\n    checkSupport()\n  }, [])\n\n  // Load settings from localStorage\n  const loadSettings = useCallback(() => {\n    try {\n      const stored = localStorage.getItem('hasivu-notification-settings')\n      if (stored) {\n        setSettings({ ...defaultSettings, ...JSON.parse(stored) })\n      }\n    } catch (error) {\n      console.error('Failed to load notification settings:', error)\n    }\n  }, [])\n\n  // Save settings to localStorage\n  const saveSettings = useCallback((newSettings: NotificationSettings) => {\n    try {\n      localStorage.setItem('hasivu-notification-settings', JSON.stringify(newSettings))\n      setSettings(newSettings)\n    } catch (error) {\n      console.error('Failed to save notification settings:', error)\n    }\n  }, [])\n\n  // Load notification history\n  const loadHistory = useCallback(() => {\n    try {\n      const stored = localStorage.getItem('hasivu-notification-history')\n      if (stored) {\n        const parsed = JSON.parse(stored)\n        setHistory(parsed.slice(-50)) // Keep last 50 notifications\n      }\n    } catch (error) {\n      console.error('Failed to load notification history:', error)\n    }\n  }, [])\n\n  // Save notification to history\n  const saveToHistory = useCallback((notification: PushNotification, status: 'delivered' | 'clicked' | 'dismissed') => {\n    const historyItem: NotificationHistory = {\n      id: `${notification.id}-${Date.now()}`,\n      notification,\n      status,\n      timestamp: Date.now()\n    }\n\n    setHistory(prev => {\n      const updated = [historyItem, ...prev].slice(0, 50)\n      try {\n        localStorage.setItem('hasivu-notification-history', JSON.stringify(updated))\n      } catch (error) {\n        console.error('Failed to save notification history:', error)\n      }\n      return updated\n    })\n  }, [])\n\n  // Request permission\n  const requestPermission = useCallback(async () => {\n    if (!isSupported) return false\n\n    setIsLoading(true)\n    \n    try {\n      const result = await Notification.requestPermission()\n      setPermission(result)\n      \n      if (result === 'granted') {\n        // Update settings\n        saveSettings({ ...settings, enabled: true })\n      }\n      \n      return result === 'granted'\n    } catch (error) {\n      console.error('Permission request failed:', error)\n      return false\n    } finally {\n      setIsLoading(false)\n    }\n  }, [isSupported, settings, saveSettings])\n\n  // Subscribe to push notifications\n  const subscribe = useCallback(async () => {\n    if (!isSupported || permission !== 'granted') return null\n\n    setIsLoading(true)\n\n    try {\n      const registration = await navigator.serviceWorker.ready\n      \n      // Check if already subscribed\n      const existingSubscription = await registration.pushManager.getSubscription()\n      if (existingSubscription) {\n        setSubscription(existingSubscription)\n        return existingSubscription\n      }\n\n      // Create new subscription\n      const newSubscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY\n      })\n\n      setSubscription(newSubscription)\n\n      // Send subscription to server\n      await fetch('/api/v1/notifications/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscription: newSubscription.toJSON(),\n          settings\n        })\n      })\n\n      return newSubscription\n    } catch (error) {\n      console.error('Push subscription failed:', error)\n      return null\n    } finally {\n      setIsLoading(false)\n    }\n  }, [isSupported, permission, settings])\n\n  // Unsubscribe from push notifications\n  const unsubscribe = useCallback(async () => {\n    if (!subscription) return false\n\n    setIsLoading(true)\n\n    try {\n      await subscription.unsubscribe()\n      setSubscription(null)\n\n      // Notify server\n      await fetch('/api/v1/notifications/unsubscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          endpoint: subscription.endpoint\n        })\n      })\n\n      // Update settings\n      saveSettings({ ...settings, enabled: false })\n\n      return true\n    } catch (error) {\n      console.error('Push unsubscription failed:', error)\n      return false\n    } finally {\n      setIsLoading(false)\n    }\n  }, [subscription, settings, saveSettings])\n\n  // Update notification settings\n  const updateSettings = useCallback(async (newSettings: Partial<NotificationSettings>) => {\n    const updated = { ...settings, ...newSettings }\n    saveSettings(updated)\n\n    // If subscribed, update server settings\n    if (subscription) {\n      try {\n        await fetch('/api/v1/notifications/settings', {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            endpoint: subscription.endpoint,\n            settings: updated\n          })\n        })\n      } catch (error) {\n        console.error('Failed to update server settings:', error)\n      }\n    }\n  }, [settings, subscription, saveSettings])\n\n  // Show local notification (for testing)\n  const showLocalNotification = useCallback(async (notification: Partial<PushNotification>) => {\n    if (permission !== 'granted') return false\n\n    try {\n      const notif = new Notification(notification.title || 'HASIVU Notification', {\n        body: notification.body || '',\n        icon: notification.icon || '/icons/icon-192x192.png',\n        badge: notification.badge || '/icons/badge-72x72.png',\n        tag: notification.tag || 'hasivu-local',\n        data: notification.data,\n        requireInteraction: notification.requireInteraction || false,\n        silent: notification.silent || false,\n        vibrate: notification.vibrate || (settings.vibration ? [100, 50, 100] : [])\n      })\n\n      // Handle notification events\n      notif.onclick = (event) => {\n        event.preventDefault()\n        notif.close()\n        \n        // Handle notification click\n        if (notification.data?.url) {\n          window.focus()\n          window.location.href = notification.data.url\n        }\n        \n        saveToHistory(notification as PushNotification, 'clicked')\n      }\n\n      notif.onclose = () => {\n        saveToHistory(notification as PushNotification, 'dismissed')\n      }\n\n      saveToHistory(notification as PushNotification, 'delivered')\n\n      return true\n    } catch (error) {\n      console.error('Local notification failed:', error)\n      return false\n    }\n  }, [permission, settings.vibration, saveToHistory])\n\n  // Check if in quiet hours\n  const isInQuietHours = useCallback(() => {\n    if (!settings.quietHours.enabled) return false\n\n    const now = new Date()\n    const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`\n    \n    const { start, end } = settings.quietHours\n    \n    if (start <= end) {\n      return currentTime >= start && currentTime <= end\n    } else {\n      return currentTime >= start || currentTime <= end\n    }\n  }, [settings.quietHours])\n\n  return {\n    isSupported,\n    permission,\n    subscription,\n    settings,\n    history,\n    isLoading,\n    requestPermission,\n    subscribe,\n    unsubscribe,\n    updateSettings,\n    showLocalNotification,\n    isInQuietHours\n  }\n}\n\n// Notification Settings Component\ninterface NotificationSettingsProps {\n  className?: string\n}\n\nexport const NotificationSettings: React.FC<NotificationSettingsProps> = ({ className }) => {\n  const {\n    isSupported,\n    permission,\n    subscription,\n    settings,\n    isLoading,\n    requestPermission,\n    subscribe,\n    unsubscribe,\n    updateSettings\n  } = usePushNotifications()\n\n  const handleToggleNotifications = async () => {\n    if (subscription) {\n      await unsubscribe()\n    } else {\n      if (permission !== 'granted') {\n        const granted = await requestPermission()\n        if (!granted) return\n      }\n      await subscribe()\n    }\n  }\n\n  const handleSettingChange = (key: keyof NotificationSettings, value: boolean) => {\n    updateSettings({ [key]: value })\n  }\n\n  const handleQuietHoursChange = (field: 'enabled' | 'start' | 'end', value: boolean | string) => {\n    updateSettings({\n      quietHours: {\n        ...settings.quietHours,\n        [field]: value\n      }\n    })\n  }\n\n  if (!isSupported) {\n    return (\n      <Alert className={className}>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Push notifications are not supported in this browser.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <Card className={cn(\"p-6\", className)}>\n      <div className=\"space-y-6\">\n        {/* Main Toggle */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            {subscription ? (\n              <Bell className=\"h-5 w-5 text-green-600\" />\n            ) : (\n              <BellOff className=\"h-5 w-5 text-gray-400\" />\n            )}\n            <div>\n              <h3 className=\"font-semibold\">Push Notifications</h3>\n              <p className=\"text-sm text-gray-600\">\n                {subscription ? 'Enabled' : 'Disabled'}\n              </p>\n            </div>\n          </div>\n          \n          <Button\n            onClick={handleToggleNotifications}\n            disabled={isLoading}\n            variant={subscription ? \"destructive\" : \"default\"}\n          >\n            {isLoading ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : subscription ? (\n              \"Disable\"\n            ) : (\n              \"Enable\"\n            )}\n          </Button>\n        </div>\n\n        {permission === 'denied' && (\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Notifications are blocked. Please enable them in your browser settings and refresh the page.\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Notification Categories */}\n        {subscription && (\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Notification Types</h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <ShoppingCart className=\"h-4 w-4 text-blue-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Order Updates</div>\n                    <div className=\"text-xs text-gray-600\">Order confirmation, preparation, ready for pickup</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.orders}\n                  onCheckedChange={(checked) => handleSettingChange('orders', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <MapPin className=\"h-4 w-4 text-green-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Delivery Tracking</div>\n                    <div className=\"text-xs text-gray-600\">Live delivery updates and location sharing</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.delivery}\n                  onCheckedChange={(checked) => handleSettingChange('delivery', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Wallet className=\"h-4 w-4 text-purple-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Wallet & Payments</div>\n                    <div className=\"text-xs text-gray-600\">Low balance alerts, payment confirmations</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.wallet}\n                  onCheckedChange={(checked) => handleSettingChange('wallet', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Clock className=\"h-4 w-4 text-orange-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Meal Reminders</div>\n                    <div className=\"text-xs text-gray-600\">Lunch time reminders, menu updates</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.reminders}\n                  onCheckedChange={(checked) => handleSettingChange('reminders', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <MessageSquare className=\"h-4 w-4 text-pink-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Promotions</div>\n                    <div className=\"text-xs text-gray-600\">Special offers, discounts, new menu items</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.promotions}\n                  onCheckedChange={(checked) => handleSettingChange('promotions', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                  <div>\n                    <div className=\"text-sm font-medium\">Emergency Alerts</div>\n                    <div className=\"text-xs text-gray-600\">School closures, safety alerts</div>\n                  </div>\n                </div>\n                <Switch\n                  checked={settings.emergency}\n                  onCheckedChange={(checked) => handleSettingChange('emergency', checked)}\n                  disabled // Emergency alerts should always be enabled\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Sound & Vibration Settings */}\n        {subscription && (\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Sound & Vibration</h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Volume2 className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Sound</span>\n                </div>\n                <Switch\n                  checked={settings.sound}\n                  onCheckedChange={(checked) => handleSettingChange('sound', checked)}\n                />\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <Vibrate className=\"h-4 w-4\" />\n                  <span className=\"text-sm\">Vibration</span>\n                </div>\n                <Switch\n                  checked={settings.vibration}\n                  onCheckedChange={(checked) => handleSettingChange('vibration', checked)}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Quiet Hours */}\n        {subscription && (\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium\">Quiet Hours</h4>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm\">Enable quiet hours</span>\n                <Switch\n                  checked={settings.quietHours.enabled}\n                  onCheckedChange={(checked) => handleQuietHoursChange('enabled', checked)}\n                />\n              </div>\n\n              {settings.quietHours.enabled && (\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"text-xs text-gray-600\">Start</label>\n                    <input\n                      type=\"time\"\n                      value={settings.quietHours.start}\n                      onChange={(e) => handleQuietHoursChange('start', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-xs text-gray-600\">End</label>\n                    <input\n                      type=\"time\"\n                      value={settings.quietHours.end}\n                      onChange={(e) => handleQuietHoursChange('end', e.target.value)}\n                      className=\"w-full px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Notification History Component\ninterface NotificationHistoryProps {\n  className?: string\n  limit?: number\n}\n\nexport const NotificationHistory: React.FC<NotificationHistoryProps> = ({ \n  className, \n  limit = 10 \n}) => {\n  const { history } = usePushNotifications()\n\n  const getStatusIcon = (status: NotificationHistory['status']) => {\n    switch (status) {\n      case 'delivered':\n        return <Bell className=\"h-4 w-4 text-blue-500\" />\n      case 'clicked':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      case 'dismissed':\n        return <X className=\"h-4 w-4 text-gray-500\" />\n      default:\n        return <Bell className=\"h-4 w-4 text-gray-500\" />\n    }\n  }\n\n  const getStatusColor = (status: NotificationHistory['status']) => {\n    switch (status) {\n      case 'delivered':\n        return 'bg-blue-50 text-blue-800'\n      case 'clicked':\n        return 'bg-green-50 text-green-800'\n      case 'dismissed':\n        return 'bg-gray-50 text-gray-800'\n      default:\n        return 'bg-gray-50 text-gray-800'\n    }\n  }\n\n  const displayHistory = history.slice(0, limit)\n\n  if (displayHistory.length === 0) {\n    return (\n      <Card className={cn(\"p-6\", className)}>\n        <div className=\"text-center text-gray-500\">\n          <Bell className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">No notification history</p>\n        </div>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-4\">Recent Notifications</h3>\n      \n      <div className=\"space-y-3\">\n        {displayHistory.map((item) => (\n          <div key={item.id} className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n            <div className=\"flex-shrink-0\">\n              {getStatusIcon(item.status)}\n            </div>\n            \n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"text-sm font-medium truncate\">\n                  {item.notification.title}\n                </h4>\n                <Badge className={cn(\"text-xs\", getStatusColor(item.status))}>\n                  {item.status}\n                </Badge>\n              </div>\n              \n              <p className=\"text-sm text-gray-600 mt-1\">\n                {item.notification.body}\n              </p>\n              \n              <div className=\"flex items-center justify-between mt-2\">\n                <span className=\"text-xs text-gray-500\">\n                  {new Date(item.timestamp).toLocaleString()}\n                </span>\n                \n                {item.notification.tag && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {item.notification.tag}\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      {history.length > limit && (\n        <div className=\"text-center mt-4\">\n          <Button variant=\"ghost\" size=\"sm\">\n            View All ({history.length})\n          </Button>\n        </div>\n      )}\n    </Card>\n  )\n}\n\n// Test Notification Component\ninterface TestNotificationProps {\n  className?: string\n}\n\nexport const TestNotification: React.FC<TestNotificationProps> = ({ className }) => {\n  const { showLocalNotification, subscription } = usePushNotifications()\n  const [isLoading, setIsLoading] = useState(false)\n\n  const testNotifications = [\n    {\n      title: 'Order Ready!',\n      body: 'Your lunch order #1234 is ready for pickup at the cafeteria.',\n      tag: 'order-ready',\n      data: { orderId: '1234', url: '/orders/1234' },\n      requireInteraction: true,\n      vibrate: [200, 100, 200]\n    },\n    {\n      title: 'Delivery Update',\n      body: 'Your meal delivery is 5 minutes away. Please be ready!',\n      tag: 'delivery-update',\n      data: { deliveryId: 'del456', url: '/delivery/del456' },\n      vibrate: [100, 50, 100]\n    },\n    {\n      title: 'Low Wallet Balance',\n      body: 'Your wallet balance is low (₹25). Please top up to continue ordering.',\n      tag: 'wallet-balance',\n      data: { balance: 25, url: '/wallet' },\n      vibrate: [50]\n    },\n    {\n      title: 'Lunch Reminder',\n      body: \"Don't forget to order your lunch! Today's special: Butter Chicken Rice.\",\n      tag: 'meal-reminder',\n      data: { url: '/menu' },\n      silent: true\n    }\n  ]\n\n  const handleTestNotification = async (notification: any) => {\n    if (!subscription) return\n\n    setIsLoading(true)\n    \n    try {\n      await showLocalNotification({\n        ...notification,\n        id: `test-${Date.now()}`\n      })\n    } catch (error) {\n      console.error('Test notification failed:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  if (!subscription) {\n    return (\n      <Alert className={className}>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Enable push notifications to test notification delivery.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <h3 className=\"font-semibold mb-4\">Test Notifications</h3>\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n        {testNotifications.map((notification, index) => (\n          <Button\n            key={index}\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => handleTestNotification(notification)}\n            disabled={isLoading}\n            className=\"h-auto p-3 text-left justify-start\"\n          >\n            <div>\n              <div className=\"font-medium text-sm\">{notification.title}</div>\n              <div className=\"text-xs text-gray-600 mt-1\">\n                {notification.body.slice(0, 50)}...\n              </div>\n            </div>\n          </Button>\n        ))}\n      </div>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/NativeFeatures.tsx",["2210","2211","2212","2213","2214","2215"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { cn } from '@/lib/utils'\nimport { \n  MapPin, \n  Camera, \n  QrCode,\n  Navigation,\n  Locate,\n  AlertCircle,\n  CheckCircle,\n  Loader2,\n  X,\n  RotateCcw,\n  Zap,\n  Vibrate\n} from 'lucide-react'\n\n// Geolocation Hook with enhanced accuracy\nexport const useGeolocation = (enableHighAccuracy = true) => {\n  const [location, setLocation] = useState<{\n    latitude: number\n    longitude: number\n    accuracy: number\n    timestamp: number\n  } | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [loading, setLoading] = useState(false)\n  const watchIdRef = useRef<number | null>(null)\n\n  const getCurrentPosition = useCallback(() => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by this device')\n      return\n    }\n\n    setLoading(true)\n    setError(null)\n\n    const options: PositionOptions = {\n      enableHighAccuracy,\n      timeout: 10000,\n      maximumAge: 300000 // 5 minutes\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n          timestamp: position.timestamp\n        })\n        setLoading(false)\n      },\n      (error) => {\n        let errorMessage = 'Unable to get your location'\n        \n        switch (error.code) {\n          case error.PERMISSION_DENIED:\n            errorMessage = 'Location access denied. Please enable location permissions in your browser settings.'\n            break\n          case error.POSITION_UNAVAILABLE:\n            errorMessage = 'Location information unavailable. Please check your GPS settings.'\n            break\n          case error.TIMEOUT:\n            errorMessage = 'Location request timed out. Please try again.'\n            break\n        }\n        \n        setError(errorMessage)\n        setLoading(false)\n      },\n      options\n    )\n  }, [enableHighAccuracy])\n\n  const startWatching = useCallback(() => {\n    if (!navigator.geolocation || watchIdRef.current !== null) return\n\n    const options: PositionOptions = {\n      enableHighAccuracy,\n      timeout: 10000,\n      maximumAge: 60000 // 1 minute\n    }\n\n    watchIdRef.current = navigator.geolocation.watchPosition(\n      (position) => {\n        setLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n          accuracy: position.coords.accuracy,\n          timestamp: position.timestamp\n        })\n      },\n      (error) => {\n        console.error('Geolocation watch error:', error)\n      },\n      options\n    )\n  }, [enableHighAccuracy])\n\n  const stopWatching = useCallback(() => {\n    if (watchIdRef.current !== null) {\n      navigator.geolocation.clearWatch(watchIdRef.current)\n      watchIdRef.current = null\n    }\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      stopWatching()\n    }\n  }, [stopWatching])\n\n  return {\n    location,\n    error,\n    loading,\n    getCurrentPosition,\n    startWatching,\n    stopWatching\n  }\n}\n\n// Delivery Tracking Component\ninterface DeliveryTrackingProps {\n  orderID: string\n  deliveryLocation: {\n    latitude: number\n    longitude: number\n  }\n  onLocationUpdate?: (location: { latitude: number; longitude: number }) => void\n  className?: string\n}\n\nexport const DeliveryTracking: React.FC<DeliveryTrackingProps> = ({\n  orderID,\n  deliveryLocation,\n  onLocationUpdate,\n  className\n}) => {\n  const { location, error, loading, getCurrentPosition, startWatching, stopWatching } = useGeolocation(true)\n  const [isTracking, setIsTracking] = useState(false)\n  const [distance, setDistance] = useState<number | null>(null)\n  const [estimatedTime, setEstimatedTime] = useState<number | null>(null)\n\n  // Calculate distance between two coordinates using Haversine formula\n  const calculateDistance = useCallback((lat1: number, lon1: number, lat2: number, lon2: number) => {\n    const R = 6371 // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180\n    const dLon = (lon2 - lon1) * Math.PI / 180\n    const a = \n      Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n      Math.sin(dLon/2) * Math.sin(dLon/2)\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))\n    return R * c\n  }, [])\n\n  useEffect(() => {\n    if (location && deliveryLocation) {\n      const dist = calculateDistance(\n        location.latitude, \n        location.longitude, \n        deliveryLocation.latitude, \n        deliveryLocation.longitude\n      )\n      setDistance(dist)\n      \n      // Estimate delivery time (assuming 5 km/h walking speed)\n      setEstimatedTime(Math.round((dist / 5) * 60)) // in minutes\n      \n      onLocationUpdate?.(location)\n    }\n  }, [location, deliveryLocation, calculateDistance, onLocationUpdate])\n\n  const toggleTracking = useCallback(() => {\n    if (isTracking) {\n      stopWatching()\n      setIsTracking(false)\n    } else {\n      startWatching()\n      setIsTracking(true)\n      \n      // Haptic feedback\n      if ('vibrate' in navigator) {\n        navigator.vibrate(50)\n      }\n    }\n  }, [isTracking, startWatching, stopWatching])\n\n  return (\n    <Card className={cn(\"p-4 bg-gradient-to-br from-blue-50 to-purple-50\", className)}>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <MapPin className=\"h-5 w-5 text-blue-600\" />\n            <span className=\"font-semibold\">Delivery Tracking</span>\n          </div>\n          <Badge variant=\"outline\" className=\"text-xs\">\n            Order #{orderID.slice(-6)}\n          </Badge>\n        </div>\n\n        {error && (\n          <div className=\"flex items-center space-x-2 p-3 bg-red-50 rounded-lg\">\n            <AlertCircle className=\"h-4 w-4 text-red-600\" />\n            <p className=\"text-sm text-red-700\">{error}</p>\n          </div>\n        )}\n\n        {location && distance !== null && (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"text-center p-3 bg-white/70 rounded-lg\">\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {distance < 1 ? `${Math.round(distance * 1000)}m` : `${distance.toFixed(1)}km`}\n              </p>\n              <p className=\"text-xs text-gray-600\">Distance</p>\n            </div>\n            <div className=\"text-center p-3 bg-white/70 rounded-lg\">\n              <p className=\"text-2xl font-bold text-green-600\">\n                {estimatedTime ? `${estimatedTime}min` : '--'}\n              </p>\n              <p className=\"text-xs text-gray-600\">ETA</p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={getCurrentPosition}\n            disabled={loading}\n            className=\"flex-1\"\n            size=\"sm\"\n          >\n            {loading ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Locate className=\"h-4 w-4 mr-2\" />\n            )}\n            Get Location\n          </Button>\n          \n          <Button\n            onClick={toggleTracking}\n            variant={isTracking ? \"destructive\" : \"outline\"}\n            size=\"sm\"\n            className=\"flex-1\"\n          >\n            {isTracking ? (\n              <>\n                <X className=\"h-4 w-4 mr-2\" />\n                Stop Tracking\n              </>\n            ) : (\n              <>\n                <Navigation className=\"h-4 w-4 mr-2\" />\n                Start Tracking\n              </>\n            )}\n          </Button>\n        </div>\n\n        {location && (\n          <div className=\"text-xs text-gray-500 text-center\">\n            Accuracy: {Math.round(location.accuracy)}m\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Camera Component for QR/Barcode Scanning\ninterface CameraScannerProps {\n  onScanResult: (result: string, type: 'qr' | 'barcode' | 'rfid') => void\n  onError?: (error: string) => void\n  scanType?: 'qr' | 'barcode' | 'rfid' | 'all'\n  className?: string\n}\n\nexport const CameraScanner: React.FC<CameraScannerProps> = ({\n  onScanResult,\n  onError,\n  scanType = 'all',\n  className\n}) => {\n  const [isActive, setIsActive] = useState(false)\n  const [hasPermission, setHasPermission] = useState<boolean | null>(null)\n  const [error, setError] = useState<string | null>(null)\n  const [flashOn, setFlashOn] = useState(false)\n  const [facingMode, setFacingMode] = useState<'user' | 'environment'>('environment')\n  \n  const videoRef = useRef<HTMLVideoElement>(null)\n  const streamRef = useRef<MediaStream | null>(null)\n  const canvasRef = useRef<HTMLCanvasElement>(null)\n  const animationRef = useRef<number>()\n\n  const startCamera = useCallback(async () => {\n    try {\n      setError(null)\n      \n      const constraints: MediaStreamConstraints = {\n        video: {\n          facingMode,\n          width: { ideal: 1280 },\n          height: { ideal: 720 },\n          frameRate: { ideal: 30 }\n        }\n      }\n\n      // Add torch/flash support if available\n      if (flashOn && 'mediaDevices' in navigator && 'getDisplayMedia' in navigator.mediaDevices) {\n        constraints.video = {\n          ...constraints.video,\n          // @ts-ignore - advanced constraints may not be typed\n          advanced: [{ torch: true }]\n        }\n      }\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints)\n      streamRef.current = stream\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = stream\n        videoRef.current.play()\n      }\n      \n      setHasPermission(true)\n      setIsActive(true)\n      \n      // Start scanning process\n      startScanning()\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Camera access denied'\n      setError(errorMessage)\n      setHasPermission(false)\n      onError?.(errorMessage)\n    }\n  }, [facingMode, flashOn, onError])\n\n  const stopCamera = useCallback(() => {\n    if (streamRef.current) {\n      streamRef.current.getTracks().forEach(track => track.stop())\n      streamRef.current = null\n    }\n    \n    if (animationRef.current) {\n      cancelAnimationFrame(animationRef.current)\n    }\n    \n    setIsActive(false)\n  }, [])\n\n  const switchCamera = useCallback(() => {\n    setFacingMode(prev => prev === 'user' ? 'environment' : 'user')\n    if (isActive) {\n      stopCamera()\n      setTimeout(() => {\n        startCamera()\n      }, 100)\n    }\n  }, [isActive, stopCamera, startCamera])\n\n  const toggleFlash = useCallback(async () => {\n    if (streamRef.current) {\n      const videoTrack = streamRef.current.getVideoTracks()[0]\n      \n      try {\n        // Check if torch is supported\n        const capabilities = videoTrack.getCapabilities()\n        \n        if ('torch' in capabilities) {\n          await videoTrack.applyConstraints({\n            advanced: [{ torch: !flashOn }]\n          })\n          setFlashOn(!flashOn)\n        }\n      } catch (err) {\n        console.warn('Flash/torch not supported:', err)\n      }\n    }\n  }, [flashOn])\n\n  // Mock scanning function - in production, integrate with a real barcode/QR scanner library\n  const startScanning = useCallback(() => {\n    if (!videoRef.current || !canvasRef.current) return\n\n    const scan = () => {\n      if (!isActive) return\n\n      const video = videoRef.current!\n      const canvas = canvasRef.current!\n      const context = canvas.getContext('2d')!\n\n      // Set canvas size to match video\n      canvas.width = video.videoWidth\n      canvas.height = video.videoHeight\n\n      // Draw video frame to canvas\n      context.drawImage(video, 0, 0, canvas.width, canvas.height)\n\n      // In production, use a barcode/QR code scanning library here\n      // For demo purposes, we'll simulate scanning\n      \n      // Mock scanning logic - replace with actual scanning library\n      if (Math.random() < 0.01) { // 1% chance to simulate successful scan\n        const mockResults = [\n          { result: 'RFID_123456789', type: 'rfid' as const },\n          { result: 'https://hasivu.com/student/123', type: 'qr' as const },\n          { result: '1234567890123', type: 'barcode' as const }\n        ]\n        \n        const randomResult = mockResults[Math.floor(Math.random() * mockResults.length)]\n        \n        if (scanType === 'all' || scanType === randomResult.type) {\n          onScanResult(randomResult.result, randomResult.type)\n          \n          // Haptic feedback on successful scan\n          if ('vibrate' in navigator) {\n            navigator.vibrate([50, 50, 50])\n          }\n          \n          stopCamera()\n          return\n        }\n      }\n\n      animationRef.current = requestAnimationFrame(scan)\n    }\n\n    scan()\n  }, [isActive, scanType, onScanResult, stopCamera])\n\n  useEffect(() => {\n    return () => {\n      stopCamera()\n    }\n  }, [stopCamera])\n\n  if (!hasPermission && hasPermission !== null) {\n    return (\n      <Card className={cn(\"p-6 text-center\", className)}>\n        <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n        <h3 className=\"text-lg font-semibold mb-2\">Camera Access Required</h3>\n        <p className=\"text-sm text-gray-600 mb-4\">\n          Please allow camera access to scan QR codes and barcodes\n        </p>\n        <Button onClick={startCamera} size=\"sm\">\n          Grant Camera Access\n        </Button>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={cn(\"overflow-hidden bg-black\", className)}>\n      <div className=\"relative\">\n        {/* Video Preview */}\n        <video\n          ref={videoRef}\n          className=\"w-full h-64 object-cover\"\n          autoPlay\n          playsInline\n          muted\n        />\n        \n        {/* Scanning Canvas (hidden) */}\n        <canvas ref={canvasRef} className=\"hidden\" />\n        \n        {/* Scanning Overlay */}\n        {isActive && (\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-48 h-48 border-2 border-white rounded-lg relative\">\n              {/* Scanning animation corners */}\n              <div className=\"absolute top-0 left-0 w-6 h-6 border-l-4 border-t-4 border-green-400\" />\n              <div className=\"absolute top-0 right-0 w-6 h-6 border-r-4 border-t-4 border-green-400\" />\n              <div className=\"absolute bottom-0 left-0 w-6 h-6 border-l-4 border-b-4 border-green-400\" />\n              <div className=\"absolute bottom-0 right-0 w-6 h-6 border-r-4 border-b-4 border-green-400\" />\n              \n              {/* Scanning line animation */}\n              <div className=\"absolute inset-x-0 top-1/2 h-0.5 bg-green-400 animate-pulse\" />\n            </div>\n            \n            {/* Instructions */}\n            <div className=\"absolute bottom-4 left-4 right-4\">\n              <p className=\"text-white text-sm text-center bg-black/50 p-2 rounded\">\n                Position {scanType === 'all' ? 'code' : scanType.toUpperCase()} within the frame\n              </p>\n            </div>\n          </div>\n        )}\n        \n        {/* Error Display */}\n        {error && (\n          <div className=\"absolute inset-0 bg-black/80 flex items-center justify-center\">\n            <div className=\"text-center text-white p-4\">\n              <AlertCircle className=\"h-8 w-8 mx-auto mb-2\" />\n              <p className=\"text-sm\">{error}</p>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Controls */}\n      <div className=\"p-4 bg-gray-900\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex space-x-2\">\n            {!isActive ? (\n              <Button onClick={startCamera} size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                <Camera className=\"h-4 w-4 mr-2\" />\n                Start Scanner\n              </Button>\n            ) : (\n              <Button onClick={stopCamera} size=\"sm\" variant=\"destructive\">\n                <X className=\"h-4 w-4 mr-2\" />\n                Stop\n              </Button>\n            )}\n          </div>\n          \n          {isActive && (\n            <div className=\"flex space-x-2\">\n              <Button onClick={switchCamera} size=\"sm\" variant=\"ghost\" className=\"text-white\">\n                <RotateCcw className=\"h-4 w-4\" />\n              </Button>\n              \n              <Button onClick={toggleFlash} size=\"sm\" variant=\"ghost\" className=\"text-white\">\n                <Zap className={cn(\"h-4 w-4\", flashOn && \"text-yellow-400\")} />\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        {isActive && (\n          <div className=\"mt-2 text-center\">\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              Scanning for {scanType === 'all' ? 'QR/Barcode/RFID' : scanType.toUpperCase()}\n            </Badge>\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Haptic Feedback Component\ninterface HapticFeedbackProps {\n  pattern?: number | number[]\n  children: React.ReactNode\n  className?: string\n  disabled?: boolean\n}\n\nexport const HapticFeedback: React.FC<HapticFeedbackProps> = ({\n  pattern = 50,\n  children,\n  className,\n  disabled = false\n}) => {\n  const triggerHaptic = useCallback(() => {\n    if (disabled || !('vibrate' in navigator)) return\n    \n    navigator.vibrate(pattern)\n  }, [pattern, disabled])\n\n  return (\n    <div \n      className={cn(\"cursor-pointer\", className)} \n      onClick={triggerHaptic}\n    >\n      {children}\n    </div>\n  )\n}\n\n// Native Share API Component\ninterface NativeShareProps {\n  title: string\n  text: string\n  url?: string\n  files?: File[]\n  onSuccess?: () => void\n  onError?: (error: string) => void\n  children: React.ReactNode\n}\n\nexport const NativeShare: React.FC<NativeShareProps> = ({\n  title,\n  text,\n  url = window.location.href,\n  files = [],\n  onSuccess,\n  onError,\n  children\n}) => {\n  const handleShare = useCallback(async () => {\n    if ('share' in navigator) {\n      try {\n        const shareData: ShareData = { title, text, url }\n        \n        // Add files if supported and provided\n        if (files.length > 0 && 'canShare' in navigator && navigator.canShare({ files })) {\n          shareData.files = files\n        }\n        \n        await navigator.share(shareData)\n        onSuccess?.()\n        \n        // Haptic feedback\n        if ('vibrate' in navigator) {\n          navigator.vibrate(25)\n        }\n      } catch (error) {\n        if (error instanceof Error && error.name !== 'AbortError') {\n          onError?.(error.message)\n        }\n      }\n    } else {\n      // Fallback to clipboard\n      try {\n        await navigator.clipboard.writeText(`${title}\\n${text}\\n${url}`)\n        onSuccess?.()\n      } catch (error) {\n        onError?.('Unable to share or copy to clipboard')\n      }\n    }\n  }, [title, text, url, files, onSuccess, onError])\n\n  return (\n    <div onClick={handleShare} className=\"cursor-pointer\">\n      {children}\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/OfflineQueue.tsx",["2216","2217","2218","2219","2220","2221","2222","2223","2224","2225","2226","2227","2228","2229","2230","2231","2232","2233","2234"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { cn } from '@/lib/utils'\nimport { \n  Wifi, \n  WifiOff,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  RefreshCw,\n  Trash2,\n  Upload,\n  Download,\n  Loader2,\n  Database,\n  Sync,\n  CloudOff,\n  Cloud\n} from 'lucide-react'\n\n// Types for offline operations\ninterface OfflineOperation {\n  id: string\n  type: 'order' | 'payment' | 'wallet' | 'feedback' | 'profile'\n  action: string\n  data: any\n  timestamp: number\n  retryCount: number\n  maxRetries: number\n  status: 'pending' | 'retrying' | 'failed' | 'completed'\n  url: string\n  method: 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH'\n  headers?: Record<string, string>\n}\n\ninterface CachedData {\n  key: string\n  data: any\n  timestamp: number\n  expiry: number\n  category: string\n}\n\n// IndexedDB utilities for offline storage\nclass OfflineStorage {\n  private dbName = 'hasivu-offline'\n  private version = 1\n  private db: IDBDatabase | null = null\n\n  async init(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName, this.version)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => {\n        this.db = request.result\n        resolve()\n      }\n      \n      request.onupgradeneeded = (event) => {\n        const db = (event.target as IDBOpenDBRequest).result\n        \n        // Store for offline operations queue\n        if (!db.objectStoreNames.contains('operations')) {\n          const operationsStore = db.createObjectStore('operations', { keyPath: 'id' })\n          operationsStore.createIndex('timestamp', 'timestamp', { unique: false })\n          operationsStore.createIndex('status', 'status', { unique: false })\n          operationsStore.createIndex('type', 'type', { unique: false })\n        }\n        \n        // Store for cached data\n        if (!db.objectStoreNames.contains('cache')) {\n          const cacheStore = db.createObjectStore('cache', { keyPath: 'key' })\n          cacheStore.createIndex('category', 'category', { unique: false })\n          cacheStore.createIndex('timestamp', 'timestamp', { unique: false })\n        }\n        \n        // Store for meal data\n        if (!db.objectStoreNames.contains('meals')) {\n          const mealsStore = db.createObjectStore('meals', { keyPath: 'id' })\n          mealsStore.createIndex('date', 'date', { unique: false })\n          mealsStore.createIndex('category', 'category', { unique: false })\n        }\n      }\n    })\n  }\n\n  async addOperation(operation: OfflineOperation): Promise<void> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['operations'], 'readwrite')\n      const store = transaction.objectStore('operations')\n      const request = store.add(operation)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async getOperations(status?: string): Promise<OfflineOperation[]> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['operations'], 'readonly')\n      const store = transaction.objectStore('operations')\n      \n      let request: IDBRequest\n      if (status) {\n        const index = store.index('status')\n        request = index.getAll(status)\n      } else {\n        request = store.getAll()\n      }\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve(request.result || [])\n    })\n  }\n\n  async updateOperation(operation: OfflineOperation): Promise<void> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['operations'], 'readwrite')\n      const store = transaction.objectStore('operations')\n      const request = store.put(operation)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async deleteOperation(id: string): Promise<void> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['operations'], 'readwrite')\n      const store = transaction.objectStore('operations')\n      const request = store.delete(id)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async cacheData(key: string, data: any, category: string, expiry: number = 24 * 60 * 60 * 1000): Promise<void> {\n    if (!this.db) await this.init()\n    \n    const cachedData: CachedData = {\n      key,\n      data,\n      timestamp: Date.now(),\n      expiry: Date.now() + expiry,\n      category\n    }\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['cache'], 'readwrite')\n      const store = transaction.objectStore('cache')\n      const request = store.put(cachedData)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async getCachedData(key: string): Promise<any | null> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['cache'], 'readonly')\n      const store = transaction.objectStore('cache')\n      const request = store.get(key)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => {\n        const result = request.result\n        if (result && result.expiry > Date.now()) {\n          resolve(result.data)\n        } else {\n          if (result) {\n            // Delete expired data\n            this.deleteCachedData(key)\n          }\n          resolve(null)\n        }\n      }\n    })\n  }\n\n  async deleteCachedData(key: string): Promise<void> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['cache'], 'readwrite')\n      const store = transaction.objectStore('cache')\n      const request = store.delete(key)\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => resolve()\n    })\n  }\n\n  async clearExpiredCache(): Promise<void> {\n    if (!this.db) await this.init()\n    \n    return new Promise((resolve, reject) => {\n      const transaction = this.db!.transaction(['cache'], 'readwrite')\n      const store = transaction.objectStore('cache')\n      const request = store.getAll()\n      \n      request.onerror = () => reject(request.error)\n      request.onsuccess = () => {\n        const now = Date.now()\n        const expired = request.result.filter(item => item.expiry <= now)\n        \n        const deletePromises = expired.map(item => this.deleteCachedData(item.key))\n        Promise.all(deletePromises).then(() => resolve()).catch(reject)\n      }\n    })\n  }\n}\n\n// Initialize storage instance\nconst offlineStorage = new OfflineStorage()\n\n// Offline Queue Hook\nexport const useOfflineQueue = () => {\n  const [operations, setOperations] = useState<OfflineOperation[]>([])\n  const [isOnline, setIsOnline] = useState(navigator.onLine)\n  const [isProcessing, setIsProcessing] = useState(false)\n  const processingRef = useRef(false)\n\n  // Monitor online status\n  useEffect(() => {\n    const handleOnline = () => {\n      setIsOnline(true)\n      processQueue()\n    }\n    \n    const handleOffline = () => {\n      setIsOnline(false)\n    }\n\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  // Load operations from storage\n  const loadOperations = useCallback(async () => {\n    try {\n      const storedOperations = await offlineStorage.getOperations()\n      setOperations(storedOperations.sort((a, b) => a.timestamp - b.timestamp))\n    } catch (error) {\n      console.error('Failed to load offline operations:', error)\n    }\n  }, [])\n\n  // Add operation to queue\n  const addOperation = useCallback(async (\n    type: OfflineOperation['type'],\n    action: string,\n    data: any,\n    url: string,\n    method: OfflineOperation['method'] = 'POST',\n    headers?: Record<string, string>\n  ) => {\n    const operation: OfflineOperation = {\n      id: `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      type,\n      action,\n      data,\n      timestamp: Date.now(),\n      retryCount: 0,\n      maxRetries: 3,\n      status: 'pending',\n      url,\n      method,\n      headers\n    }\n\n    try {\n      await offlineStorage.addOperation(operation)\n      setOperations(prev => [...prev, operation].sort((a, b) => a.timestamp - b.timestamp))\n      \n      // Try to process immediately if online\n      if (isOnline) {\n        processQueue()\n      }\n      \n      return operation.id\n    } catch (error) {\n      console.error('Failed to add offline operation:', error)\n      return null\n    }\n  }, [isOnline])\n\n  // Process offline queue\n  const processQueue = useCallback(async () => {\n    if (!isOnline || processingRef.current) return\n    \n    processingRef.current = true\n    setIsProcessing(true)\n\n    try {\n      const pendingOperations = await offlineStorage.getOperations('pending')\n      const retryingOperations = await offlineStorage.getOperations('retrying')\n      const toProcess = [...pendingOperations, ...retryingOperations]\n\n      for (const operation of toProcess) {\n        try {\n          // Update status to retrying\n          operation.status = 'retrying'\n          await offlineStorage.updateOperation(operation)\n          setOperations(prev => prev.map(op => op.id === operation.id ? operation : op))\n\n          // Execute the operation\n          const response = await fetch(operation.url, {\n            method: operation.method,\n            headers: {\n              'Content-Type': 'application/json',\n              ...operation.headers\n            },\n            body: operation.method !== 'GET' ? JSON.stringify(operation.data) : undefined\n          })\n\n          if (response.ok) {\n            // Success - remove from queue\n            operation.status = 'completed'\n            await offlineStorage.deleteOperation(operation.id)\n            setOperations(prev => prev.filter(op => op.id !== operation.id))\n            \n            // Notify user of successful sync\n            if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n              navigator.serviceWorker.controller.postMessage({\n                type: 'OPERATION_SYNCED',\n                data: { operation, success: true }\n              })\n            }\n          } else {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n          }\n        } catch (error) {\n          console.error('Failed to process operation:', operation.id, error)\n          \n          operation.retryCount++\n          \n          if (operation.retryCount >= operation.maxRetries) {\n            operation.status = 'failed'\n          } else {\n            operation.status = 'pending'\n          }\n          \n          await offlineStorage.updateOperation(operation)\n          setOperations(prev => prev.map(op => op.id === operation.id ? operation : op))\n        }\n      }\n    } catch (error) {\n      console.error('Failed to process offline queue:', error)\n    } finally {\n      processingRef.current = false\n      setIsProcessing(false)\n    }\n  }, [isOnline])\n\n  // Retry failed operation\n  const retryOperation = useCallback(async (operationId: string) => {\n    const operation = operations.find(op => op.id === operationId)\n    if (!operation) return\n\n    operation.status = 'pending'\n    operation.retryCount = 0\n    \n    try {\n      await offlineStorage.updateOperation(operation)\n      setOperations(prev => prev.map(op => op.id === operationId ? operation : op))\n      \n      if (isOnline) {\n        processQueue()\n      }\n    } catch (error) {\n      console.error('Failed to retry operation:', error)\n    }\n  }, [operations, isOnline, processQueue])\n\n  // Delete operation\n  const deleteOperation = useCallback(async (operationId: string) => {\n    try {\n      await offlineStorage.deleteOperation(operationId)\n      setOperations(prev => prev.filter(op => op.id !== operationId))\n    } catch (error) {\n      console.error('Failed to delete operation:', error)\n    }\n  }, [])\n\n  // Clear all operations\n  const clearQueue = useCallback(async () => {\n    try {\n      const allOperations = await offlineStorage.getOperations()\n      await Promise.all(allOperations.map(op => offlineStorage.deleteOperation(op.id)))\n      setOperations([])\n    } catch (error) {\n      console.error('Failed to clear queue:', error)\n    }\n  }, [])\n\n  // Load operations on mount\n  useEffect(() => {\n    loadOperations()\n  }, [loadOperations])\n\n  // Auto-process queue when coming online\n  useEffect(() => {\n    if (isOnline && operations.some(op => op.status === 'pending')) {\n      processQueue()\n    }\n  }, [isOnline, operations, processQueue])\n\n  return {\n    operations,\n    isOnline,\n    isProcessing,\n    addOperation,\n    retryOperation,\n    deleteOperation,\n    clearQueue,\n    processQueue\n  }\n}\n\n// Cached Data Hook\nexport const useCachedData = () => {\n  const [cacheStats, setCacheStats] = useState({\n    totalSize: 0,\n    itemCount: 0,\n    categories: {} as Record<string, number>\n  })\n\n  const getCachedData = useCallback(async (key: string) => {\n    try {\n      return await offlineStorage.getCachedData(key)\n    } catch (error) {\n      console.error('Failed to get cached data:', error)\n      return null\n    }\n  }, [])\n\n  const setCachedData = useCallback(async (\n    key: string,\n    data: any,\n    category: string = 'default',\n    expiry: number = 24 * 60 * 60 * 1000 // 24 hours\n  ) => {\n    try {\n      await offlineStorage.cacheData(key, data, category, expiry)\n      updateCacheStats()\n    } catch (error) {\n      console.error('Failed to cache data:', error)\n    }\n  }, [])\n\n  const clearExpiredCache = useCallback(async () => {\n    try {\n      await offlineStorage.clearExpiredCache()\n      updateCacheStats()\n    } catch (error) {\n      console.error('Failed to clear expired cache:', error)\n    }\n  }, [])\n\n  const updateCacheStats = useCallback(async () => {\n    // This would need to be implemented based on IndexedDB size calculation\n    // For now, we'll use approximate values\n    setCacheStats({\n      totalSize: 0, // Would calculate actual size\n      itemCount: 0, // Would count actual items\n      categories: {} // Would group by category\n    })\n  }, [])\n\n  useEffect(() => {\n    updateCacheStats()\n  }, [updateCacheStats])\n\n  return {\n    cacheStats,\n    getCachedData,\n    setCachedData,\n    clearExpiredCache\n  }\n}\n\n// Offline Queue Component\ninterface OfflineQueueProps {\n  className?: string\n}\n\nexport const OfflineQueue: React.FC<OfflineQueueProps> = ({ className }) => {\n  const {\n    operations,\n    isOnline,\n    isProcessing,\n    retryOperation,\n    deleteOperation,\n    clearQueue,\n    processQueue\n  } = useOfflineQueue()\n\n  const pendingCount = operations.filter(op => op.status === 'pending').length\n  const failedCount = operations.filter(op => op.status === 'failed').length\n\n  const getOperationIcon = (operation: OfflineOperation) => {\n    switch (operation.status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />\n      case 'retrying':\n        return <Loader2 className=\"h-4 w-4 text-blue-500 animate-spin\" />\n      case 'failed':\n        return <AlertCircle className=\"h-4 w-4 text-red-500\" />\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-500\" />\n    }\n  }\n\n  const getOperationTitle = (operation: OfflineOperation) => {\n    const typeLabels = {\n      order: 'Meal Order',\n      payment: 'Payment',\n      wallet: 'Wallet Update',\n      feedback: 'Feedback',\n      profile: 'Profile Update'\n    }\n    \n    return `${typeLabels[operation.type]} - ${operation.action}`\n  }\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-2\">\n          {isOnline ? (\n            <Wifi className=\"h-5 w-5 text-green-500\" />\n          ) : (\n            <WifiOff className=\"h-5 w-5 text-red-500\" />\n          )}\n          <h3 className=\"font-semibold\">Offline Queue</h3>\n          {isProcessing && <Loader2 className=\"h-4 w-4 animate-spin\" />}\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          {pendingCount > 0 && (\n            <Badge variant=\"secondary\">{pendingCount} pending</Badge>\n          )}\n          {failedCount > 0 && (\n            <Badge variant=\"destructive\">{failedCount} failed</Badge>\n          )}\n        </div>\n      </div>\n\n      {!isOnline && (\n        <Alert className=\"mb-4\">\n          <CloudOff className=\"h-4 w-4\" />\n          <AlertDescription>\n            You're offline. Operations will be queued and synced when connection is restored.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {operations.length === 0 ? (\n        <div className=\"text-center py-6 text-gray-500\">\n          <Database className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">No offline operations</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\">\n          {operations.map((operation) => (\n            <div\n              key={operation.id}\n              className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n            >\n              <div className=\"flex items-center space-x-3\">\n                {getOperationIcon(operation)}\n                <div>\n                  <div className=\"text-sm font-medium\">\n                    {getOperationTitle(operation)}\n                  </div>\n                  <div className=\"text-xs text-gray-500\">\n                    {new Date(operation.timestamp).toLocaleString()}\n                    {operation.retryCount > 0 && (\n                      <span className=\"ml-2\">\n                        (Retry {operation.retryCount}/{operation.maxRetries})\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center space-x-1\">\n                {operation.status === 'failed' && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => retryOperation(operation.id)}\n                  >\n                    <RefreshCw className=\"h-3 w-3\" />\n                  </Button>\n                )}\n                \n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => deleteOperation(operation.id)}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n          ))}\n          \n          {operations.length > 1 && (\n            <div className=\"flex justify-between pt-3 border-t\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={processQueue}\n                disabled={!isOnline || isProcessing}\n              >\n                <Sync className=\"h-4 w-4 mr-2\" />\n                Sync Now\n              </Button>\n              \n              <Button\n                variant=\"destructive\"\n                size=\"sm\"\n                onClick={clearQueue}\n              >\n                Clear All\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </Card>\n  )\n}\n\n// Cached Data Manager Component\ninterface CachedDataManagerProps {\n  className?: string\n}\n\nexport const CachedDataManager: React.FC<CachedDataManagerProps> = ({ className }) => {\n  const { cacheStats, clearExpiredCache } = useCachedData()\n  const [isClearing, setIsClearing] = useState(false)\n\n  const handleClearExpired = async () => {\n    setIsClearing(true)\n    await clearExpiredCache()\n    setIsClearing(false)\n  }\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n\n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-semibold flex items-center\">\n          <Database className=\"h-4 w-4 mr-2\" />\n          Cached Data\n        </h3>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleClearExpired}\n          disabled={isClearing}\n        >\n          {isClearing ? (\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n          ) : (\n            <RefreshCw className=\"h-4 w-4\" />\n          )}\n          Clear Expired\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-blue-600\">\n            {cacheStats.itemCount}\n          </div>\n          <div className=\"text-blue-700\">Items Cached</div>\n        </div>\n        \n        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n          <div className=\"text-lg font-bold text-green-600\">\n            {formatBytes(cacheStats.totalSize)}\n          </div>\n          <div className=\"text-green-700\">Storage Used</div>\n        </div>\n      </div>\n\n      {Object.keys(cacheStats.categories).length > 0 && (\n        <div className=\"mt-4\">\n          <h4 className=\"text-sm font-medium mb-2\">By Category</h4>\n          <div className=\"space-y-1\">\n            {Object.entries(cacheStats.categories).map(([category, count]) => (\n              <div key={category} className=\"flex justify-between text-xs\">\n                <span className=\"capitalize\">{category}</span>\n                <span className=\"font-mono\">{count}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/PWAEnhanced.tsx",["2235","2236","2237","2238","2239","2240","2241","2242","2243","2244","2245","2246","2247","2248","2249","2250","2251","2252","2253","2254","2255","2256"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback, useRef } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { cn } from '@/lib/utils'\nimport { \n  Smartphone, \n  Download, \n  Wifi, \n  WifiOff,\n  Bell,\n  BellOff,\n  Battery,\n  Signal,\n  Loader2,\n  CheckCircle,\n  AlertCircle,\n  RefreshCw,\n  Settings,\n  Monitor,\n  HardDrive,\n  Zap,\n  Cloud,\n  CloudOff\n} from 'lucide-react'\n\n// PWA Installation Hook\nexport const usePWAInstall = () => {\n  const [isInstallable, setIsInstallable] = useState(false)\n  const [isInstalled, setIsInstalled] = useState(false)\n  const [installPrompt, setInstallPrompt] = useState<any>(null)\n  \n  useEffect(() => {\n    // Check if already installed\n    const checkInstalled = () => {\n      if (window.matchMedia('(display-mode: standalone)').matches) {\n        setIsInstalled(true)\n      }\n    }\n    \n    // Listen for beforeinstallprompt event\n    const handleBeforeInstallPrompt = (e: Event) => {\n      e.preventDefault()\n      setInstallPrompt(e)\n      setIsInstallable(true)\n    }\n    \n    // Listen for app installed event\n    const handleAppInstalled = () => {\n      setIsInstalled(true)\n      setIsInstallable(false)\n    }\n    \n    checkInstalled()\n    \n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n    window.addEventListener('appinstalled', handleAppInstalled)\n    \n    return () => {\n      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n      window.removeEventListener('appinstalled', handleAppInstalled)\n    }\n  }, [])\n  \n  const installApp = useCallback(async () => {\n    if (!installPrompt) return false\n    \n    try {\n      const result = await installPrompt.prompt()\n      const outcome = await result.userChoice\n      \n      if (outcome === 'accepted') {\n        setIsInstalled(true)\n        setIsInstallable(false)\n      }\n      \n      setInstallPrompt(null)\n      return outcome === 'accepted'\n      \n    } catch (error) {\n      console.error('PWA installation failed:', error)\n      return false\n    }\n  }, [installPrompt])\n  \n  return {\n    isInstallable,\n    isInstalled,\n    installApp\n  }\n}\n\n// Network Status Hook\nexport const useNetworkStatus = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine)\n  const [connectionType, setConnectionType] = useState<string>('unknown')\n  const [effectiveType, setEffectiveType] = useState<string>('unknown')\n  \n  useEffect(() => {\n    const updateOnlineStatus = () => {\n      setIsOnline(navigator.onLine)\n    }\n    \n    const updateConnectionInfo = () => {\n      // @ts-ignore - connection is not in TypeScript definitions\n      const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection\n      \n      if (connection) {\n        setConnectionType(connection.type || 'unknown')\n        setEffectiveType(connection.effectiveType || 'unknown')\n      }\n    }\n    \n    updateConnectionInfo()\n    \n    window.addEventListener('online', updateOnlineStatus)\n    window.addEventListener('offline', updateOnlineStatus)\n    \n    // @ts-ignore\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection\n    if (connection) {\n      connection.addEventListener('change', updateConnectionInfo)\n    }\n    \n    return () => {\n      window.removeEventListener('online', updateOnlineStatus)\n      window.removeEventListener('offline', updateOnlineStatus)\n      \n      if (connection) {\n        connection.removeEventListener('change', updateConnectionInfo)\n      }\n    }\n  }, [])\n  \n  return {\n    isOnline,\n    connectionType,\n    effectiveType,\n    isSlowConnection: effectiveType === 'slow-2g' || effectiveType === '2g'\n  }\n}\n\n// Push Notifications Hook\nexport const usePushNotifications = () => {\n  const [permission, setPermission] = useState<NotificationPermission>('default')\n  const [subscription, setSubscription] = useState<PushSubscription | null>(null)\n  const [isSupported, setIsSupported] = useState(false)\n  \n  useEffect(() => {\n    const checkSupport = () => {\n      const supported = 'Notification' in window && 'serviceWorker' in navigator && 'PushManager' in window\n      setIsSupported(supported)\n      \n      if (supported) {\n        setPermission(Notification.permission)\n      }\n    }\n    \n    checkSupport()\n  }, [])\n  \n  const requestPermission = useCallback(async () => {\n    if (!isSupported) return false\n    \n    try {\n      const result = await Notification.requestPermission()\n      setPermission(result)\n      return result === 'granted'\n    } catch (error) {\n      console.error('Notification permission request failed:', error)\n      return false\n    }\n  }, [isSupported])\n  \n  const subscribeToPush = useCallback(async () => {\n    if (!isSupported || permission !== 'granted') return null\n    \n    try {\n      const registration = await navigator.serviceWorker.ready\n      \n      const subscription = await registration.pushManager.subscribe({\n        userVisibleOnly: true,\n        applicationServerKey: process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY\n      })\n      \n      setSubscription(subscription)\n      \n      // Send subscription to server\n      await fetch('/api/v1/notifications/subscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          subscription: subscription.toJSON()\n        })\n      })\n      \n      return subscription\n      \n    } catch (error) {\n      console.error('Push subscription failed:', error)\n      return null\n    }\n  }, [isSupported, permission])\n  \n  const unsubscribeFromPush = useCallback(async () => {\n    if (!subscription) return false\n    \n    try {\n      await subscription.unsubscribe()\n      setSubscription(null)\n      \n      // Notify server\n      await fetch('/api/v1/notifications/unsubscribe', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          endpoint: subscription.endpoint\n        })\n      })\n      \n      return true\n      \n    } catch (error) {\n      console.error('Push unsubscription failed:', error)\n      return false\n    }\n  }, [subscription])\n  \n  return {\n    isSupported,\n    permission,\n    subscription,\n    requestPermission,\n    subscribeToPush,\n    unsubscribeFromPush\n  }\n}\n\n// Cache Management Hook\nexport const useCacheManagement = () => {\n  const [cacheSize, setCacheSize] = useState<number>(0)\n  const [cacheStatus, setCacheStatus] = useState<any>(null)\n  const [isLoading, setIsLoading] = useState(false)\n  \n  const getCacheInfo = useCallback(async () => {\n    setIsLoading(true)\n    \n    try {\n      // Get cache storage estimate\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\n        const estimate = await navigator.storage.estimate()\n        setCacheSize(estimate.usage || 0)\n      }\n      \n      // Get cache status from service worker\n      if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n        const messageChannel = new MessageChannel()\n        \n        navigator.serviceWorker.controller.postMessage(\n          { type: 'GET_CACHE_STATUS' },\n          [messageChannel.port2]\n        )\n        \n        messageChannel.port1.onmessage = (event) => {\n          setCacheStatus(event.data)\n        }\n      }\n      \n    } catch (error) {\n      console.error('Failed to get cache info:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [])\n  \n  const clearCache = useCallback(async () => {\n    try {\n      if ('serviceWorker' in navigator && navigator.serviceWorker.controller) {\n        navigator.serviceWorker.controller.postMessage({ type: 'CLEAR_CACHES' })\n      }\n      \n      // Refresh cache info\n      setTimeout(() => {\n        getCacheInfo()\n      }, 1000)\n      \n      return true\n      \n    } catch (error) {\n      console.error('Failed to clear cache:', error)\n      return false\n    }\n  }, [getCacheInfo])\n  \n  useEffect(() => {\n    getCacheInfo()\n  }, [getCacheInfo])\n  \n  return {\n    cacheSize,\n    cacheStatus,\n    isLoading,\n    getCacheInfo,\n    clearCache\n  }\n}\n\n// Battery Status Hook\nexport const useBatteryStatus = () => {\n  const [batteryLevel, setBatteryLevel] = useState<number | null>(null)\n  const [isCharging, setIsCharging] = useState<boolean | null>(null)\n  const [isSupported, setIsSupported] = useState(false)\n  \n  useEffect(() => {\n    const getBatteryInfo = async () => {\n      try {\n        // @ts-ignore - battery API not in TypeScript definitions\n        if ('getBattery' in navigator) {\n          // @ts-ignore\n          const battery = await navigator.getBattery()\n          setIsSupported(true)\n          \n          const updateBatteryInfo = () => {\n            setBatteryLevel(battery.level)\n            setIsCharging(battery.charging)\n          }\n          \n          updateBatteryInfo()\n          \n          battery.addEventListener('levelchange', updateBatteryInfo)\n          battery.addEventListener('chargingchange', updateBatteryInfo)\n          \n          return () => {\n            battery.removeEventListener('levelchange', updateBatteryInfo)\n            battery.removeEventListener('chargingchange', updateBatteryInfo)\n          }\n        }\n      } catch (error) {\n        console.warn('Battery API not supported:', error)\n      }\n    }\n    \n    getBatteryInfo()\n  }, [])\n  \n  return {\n    batteryLevel,\n    isCharging,\n    isSupported,\n    isLowBattery: batteryLevel !== null && batteryLevel < 0.2\n  }\n}\n\n// PWA Install Prompt Component\ninterface PWAInstallPromptProps {\n  className?: string\n}\n\nexport const PWAInstallPrompt: React.FC<PWAInstallPromptProps> = ({ className }) => {\n  const { isInstallable, isInstalled, installApp } = usePWAInstall()\n  const [isInstalling, setIsInstalling] = useState(false)\n  \n  const handleInstall = async () => {\n    setIsInstalling(true)\n    const success = await installApp()\n    setIsInstalling(false)\n    \n    if (success) {\n      // Haptic feedback\n      if ('vibrate' in navigator) {\n        navigator.vibrate([100, 50, 100])\n      }\n    }\n  }\n  \n  if (isInstalled) {\n    return (\n      <Alert className={cn(\"border-green-200 bg-green-50\", className)}>\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\n        <AlertDescription className=\"text-green-800\">\n          HASIVU app is installed! You can access it from your home screen.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n  \n  if (!isInstallable) {\n    return null\n  }\n  \n  return (\n    <Card className={cn(\"p-4 border-blue-200 bg-blue-50\", className)}>\n      <div className=\"flex items-start space-x-3\">\n        <Smartphone className=\"h-6 w-6 text-blue-600 mt-1\" />\n        <div className=\"flex-1\">\n          <h3 className=\"font-semibold text-blue-900 mb-1\">\n            Install HASIVU App\n          </h3>\n          <p className=\"text-sm text-blue-800 mb-3\">\n            Install the app for faster access, offline ordering, and push notifications.\n          </p>\n          <Button \n            onClick={handleInstall}\n            disabled={isInstalling}\n            size=\"sm\"\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            {isInstalling ? (\n              <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Download className=\"h-4 w-4 mr-2\" />\n            )}\n            Install App\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\n// Network Status Indicator\ninterface NetworkStatusProps {\n  className?: string\n}\n\nexport const NetworkStatus: React.FC<NetworkStatusProps> = ({ className }) => {\n  const { isOnline, connectionType, effectiveType, isSlowConnection } = useNetworkStatus()\n  \n  return (\n    <div className={cn(\"flex items-center space-x-2 p-2 rounded-lg\", className, {\n      \"bg-green-50 text-green-800\": isOnline && !isSlowConnection,\n      \"bg-yellow-50 text-yellow-800\": isOnline && isSlowConnection,\n      \"bg-red-50 text-red-800\": !isOnline\n    })}>\n      {isOnline ? (\n        <>\n          <Wifi className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">\n            {isSlowConnection ? 'Slow Connection' : 'Online'}\n          </span>\n          {effectiveType !== 'unknown' && (\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {effectiveType.toUpperCase()}\n            </Badge>\n          )}\n        </>\n      ) : (\n        <>\n          <WifiOff className=\"h-4 w-4\" />\n          <span className=\"text-sm font-medium\">Offline</span>\n        </>\n      )}\n    </div>\n  )\n}\n\n// Push Notifications Settings\ninterface PushNotificationSettingsProps {\n  className?: string\n}\n\nexport const PushNotificationSettings: React.FC<PushNotificationSettingsProps> = ({ className }) => {\n  const { \n    isSupported, \n    permission, \n    subscription, \n    requestPermission, \n    subscribeToPush, \n    unsubscribeFromPush \n  } = usePushNotifications()\n  \n  const [isLoading, setIsLoading] = useState(false)\n  \n  const handleToggleNotifications = async () => {\n    setIsLoading(true)\n    \n    try {\n      if (subscription) {\n        await unsubscribeFromPush()\n      } else {\n        if (permission !== 'granted') {\n          const granted = await requestPermission()\n          if (!granted) {\n            setIsLoading(false)\n            return\n          }\n        }\n        await subscribeToPush()\n      }\n    } catch (error) {\n      console.error('Notification toggle failed:', error)\n    } finally {\n      setIsLoading(false)\n    }\n  }\n  \n  if (!isSupported) {\n    return (\n      <Alert className={cn(\"\", className)}>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertDescription>\n          Push notifications are not supported in this browser.\n        </AlertDescription>\n      </Alert>\n    )\n  }\n  \n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          {subscription ? (\n            <Bell className=\"h-5 w-5 text-green-600\" />\n          ) : (\n            <BellOff className=\"h-5 w-5 text-gray-400\" />\n          )}\n          <div>\n            <h3 className=\"font-semibold\">Push Notifications</h3>\n            <p className=\"text-sm text-gray-600\">\n              {subscription ? 'Enabled' : 'Disabled'}\n            </p>\n          </div>\n        </div>\n        \n        <Button\n          onClick={handleToggleNotifications}\n          disabled={isLoading}\n          variant={subscription ? \"destructive\" : \"default\"}\n          size=\"sm\"\n        >\n          {isLoading ? (\n            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n          ) : subscription ? (\n            \"Disable\"\n          ) : (\n            \"Enable\"\n          )}\n        </Button>\n      </div>\n      \n      {permission === 'denied' && (\n        <Alert className=\"mt-3\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>\n            Notifications are blocked. Please enable them in your browser settings.\n          </AlertDescription>\n        </Alert>\n      )}\n    </Card>\n  )\n}\n\n// Cache Management Component\ninterface CacheManagementProps {\n  className?: string\n}\n\nexport const CacheManagement: React.FC<CacheManagementProps> = ({ className }) => {\n  const { cacheSize, cacheStatus, isLoading, getCacheInfo, clearCache } = useCacheManagement()\n  const [isClearing, setIsClearing] = useState(false)\n  \n  const handleClearCache = async () => {\n    setIsClearing(true)\n    await clearCache()\n    setIsClearing(false)\n  }\n  \n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes'\n    const k = 1024\n    const sizes = ['Bytes', 'KB', 'MB', 'GB']\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n  }\n  \n  return (\n    <Card className={cn(\"p-4\", className)}>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <HardDrive className=\"h-5 w-5 text-blue-600\" />\n            <div>\n              <h3 className=\"font-semibold\">Storage & Cache</h3>\n              <p className=\"text-sm text-gray-600\">\n                {cacheSize > 0 ? formatBytes(cacheSize) : 'Calculating...'}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <Button\n              onClick={getCacheInfo}\n              disabled={isLoading}\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              {isLoading ? (\n                <Loader2 className=\"h-4 w-4\" />\n              ) : (\n                <RefreshCw className=\"h-4 w-4\" />\n              )}\n            </Button>\n            \n            <Button\n              onClick={handleClearCache}\n              disabled={isClearing}\n              variant=\"destructive\"\n              size=\"sm\"\n            >\n              {isClearing ? (\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n              ) : (\n                \"Clear\"\n              )}\n            </Button>\n          </div>\n        </div>\n        \n        {cacheStatus && (\n          <div className=\"grid grid-cols-2 gap-2 text-xs\">\n            {Object.entries(cacheStatus.caches).map(([name, count]) => (\n              <div key={name} className=\"flex justify-between p-2 bg-gray-50 rounded\">\n                <span className=\"truncate\">{name.replace('hasivu-', '')}</span>\n                <span className=\"font-mono\">{count}</span>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Battery Status Component\ninterface BatteryStatusProps {\n  className?: string\n}\n\nexport const BatteryStatus: React.FC<BatteryStatusProps> = ({ className }) => {\n  const { batteryLevel, isCharging, isSupported, isLowBattery } = useBatteryStatus()\n  \n  if (!isSupported) {\n    return null\n  }\n  \n  return (\n    <div className={cn(\"flex items-center space-x-2 p-2 rounded-lg\", className, {\n      \"bg-red-50 text-red-800\": isLowBattery && !isCharging,\n      \"bg-yellow-50 text-yellow-800\": isLowBattery && isCharging,\n      \"bg-green-50 text-green-800\": !isLowBattery\n    })}>\n      <Battery className={cn(\"h-4 w-4\", {\n        \"text-red-600\": isLowBattery && !isCharging,\n        \"text-yellow-600\": isCharging,\n        \"text-green-600\": !isLowBattery\n      })} />\n      \n      <span className=\"text-sm font-medium\">\n        {batteryLevel !== null ? `${Math.round(batteryLevel * 100)}%` : 'Unknown'}\n        {isCharging && ' (Charging)'}\n      </span>\n      \n      {isLowBattery && !isCharging && (\n        <Badge variant=\"destructive\" className=\"text-xs\">\n          Low Battery\n        </Badge>\n      )}\n    </div>\n  )\n}\n\n// PWA Status Dashboard\ninterface PWAStatusDashboardProps {\n  className?: string\n}\n\nexport const PWAStatusDashboard: React.FC<PWAStatusDashboardProps> = ({ className }) => {\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <PWAInstallPrompt />\n      \n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n        <NetworkStatus />\n        <BatteryStatus />\n      </div>\n      \n      <PushNotificationSettings />\n      <CacheManagement />\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/PWAFeatures.tsx",["2257","2258","2259","2260","2261","2262","2263","2264","2265"],[],"\"use client\"\n\nimport React, { useState, useEffect, useCallback } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { cn } from '@/lib/utils'\nimport { \n  Bell, \n  Download, \n  Wifi, \n  WifiOff, \n  Battery, \n  Signal,\n  Smartphone,\n  Share,\n  X,\n  CheckCircle,\n  AlertCircle,\n  Clock\n} from 'lucide-react'\n\n// PWA Install Prompt Component\ninterface PWAInstallPromptProps {\n  onInstall: () => void\n  onDismiss: () => void\n  variant?: 'card' | 'banner' | 'fab'\n}\n\nexport const PWAInstallPrompt: React.FC<PWAInstallPromptProps> = ({\n  onInstall,\n  onDismiss,\n  variant = 'card'\n}) => {\n  if (variant === 'banner') {\n    return (\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-primary text-white p-3 safe-area-pt animate-slide-down\">\n        <div className=\"flex items-center justify-between max-w-md mx-auto\">\n          <div className=\"flex items-center space-x-3\">\n            <Smartphone className=\"h-5 w-5\" />\n            <div>\n              <p className=\"text-sm font-medium\">Install HASIVU App</p>\n              <p className=\"text-xs opacity-90\">For a better experience</p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Button size=\"sm\" variant=\"secondary\" onClick={onInstall}>\n              Install\n            </Button>\n            <Button size=\"sm\" variant=\"ghost\" onClick={onDismiss} className=\"text-white\">\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (variant === 'fab') {\n    return (\n      <Button\n        variant=\"fab\"\n        onClick={onInstall}\n        className=\"fixed bottom-20 right-4 z-40 shadow-xl\"\n        haptic\n      >\n        <Download className=\"h-6 w-6\" />\n      </Button>\n    )\n  }\n\n  return (\n    <Card className=\"fixed bottom-20 left-4 right-4 z-40 mx-auto max-w-md border-primary/20 bg-gradient-to-r from-primary/5 to-blue-50 animate-slide-in-bottom\">\n      <div className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            <Smartphone className=\"h-6 w-6 text-primary\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold text-gray-900\">Install HASIVU App</h4>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Get faster access, offline features, and push notifications.\n            </p>\n            <div className=\"flex space-x-2 mt-3\">\n              <Button size=\"sm\" onClick={onInstall} haptic>\n                Install Now\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={onDismiss}>\n                Not now\n              </Button>\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={onDismiss}\n            className=\"h-6 w-6 p-0\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\n// Offline Status Indicator\ninterface OfflineStatusProps {\n  isOnline: boolean\n  onRetry?: () => void\n  className?: string\n}\n\nexport const OfflineStatus: React.FC<OfflineStatusProps> = ({\n  isOnline,\n  onRetry,\n  className\n}) => {\n  const [showBanner, setShowBanner] = useState(false)\n\n  useEffect(() => {\n    setShowBanner(!isOnline)\n  }, [isOnline])\n\n  if (!showBanner) return null\n\n  return (\n    <div className={cn(\n      \"fixed top-0 left-0 right-0 z-50 bg-orange-500 text-white p-3 safe-area-pt animate-slide-down\",\n      className\n    )}>\n      <div className=\"flex items-center justify-between max-w-md mx-auto\">\n        <div className=\"flex items-center space-x-3\">\n          <WifiOff className=\"h-5 w-5\" />\n          <div>\n            <p className=\"text-sm font-medium\">You're offline</p>\n            <p className=\"text-xs opacity-90\">Some features may be limited</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {onRetry && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={onRetry}\n              className=\"text-white hover:bg-white/20\"\n            >\n              Retry\n            </Button>\n          )}\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowBanner(false)}\n            className=\"h-6 w-6 p-0 text-white hover:bg-white/20\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Push Notification Permission\ninterface NotificationPermissionProps {\n  onPermissionGranted?: () => void\n  onPermissionDenied?: () => void\n}\n\nexport const NotificationPermission: React.FC<NotificationPermissionProps> = ({\n  onPermissionGranted,\n  onPermissionDenied\n}) => {\n  const [permission, setPermission] = useState<NotificationPermission>('default')\n  const [showPrompt, setShowPrompt] = useState(false)\n\n  useEffect(() => {\n    if ('Notification' in window) {\n      setPermission(Notification.permission)\n      \n      // Show prompt after 5 seconds if permission is default\n      if (Notification.permission === 'default') {\n        const timer = setTimeout(() => setShowPrompt(true), 5000)\n        return () => clearTimeout(timer)\n      }\n    }\n  }, [])\n\n  const requestPermission = useCallback(async () => {\n    if ('Notification' in window) {\n      try {\n        const result = await Notification.requestPermission()\n        setPermission(result)\n        setShowPrompt(false)\n        \n        if (result === 'granted') {\n          onPermissionGranted?.()\n          // Show test notification\n          new Notification('HASIVU Notifications Enabled', {\n            body: 'You\\'ll now receive updates about your orders and meal schedules.',\n            icon: '/icons/icon-192x192.png',\n            badge: '/icons/icon-72x72.png'\n          })\n        } else {\n          onPermissionDenied?.()\n        }\n      } catch (error) {\n        console.error('Error requesting notification permission:', error)\n      }\n    }\n  }, [onPermissionGranted, onPermissionDenied])\n\n  if (!('Notification' in window) || permission === 'granted' || !showPrompt) {\n    return null\n  }\n\n  return (\n    <Card className=\"fixed bottom-20 left-4 right-4 z-40 mx-auto max-w-md border-blue-200 bg-blue-50 animate-slide-in-bottom\">\n      <div className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          <div className=\"p-2 bg-blue-100 rounded-lg\">\n            <Bell className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold text-gray-900\">Stay Updated</h4>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Get notified about order status, meal schedules, and important updates.\n            </p>\n            <div className=\"flex space-x-2 mt-3\">\n              <Button size=\"sm\" onClick={requestPermission} haptic>\n                Allow Notifications\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={() => setShowPrompt(false)}>\n                Not now\n              </Button>\n            </div>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowPrompt(false)}\n            className=\"h-6 w-6 p-0\"\n          >\n            <X className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\n// Network Status Indicator (for status bar)\nexport const NetworkStatusIndicator: React.FC = () => {\n  const [isOnline, setIsOnline] = useState(navigator.onLine)\n  const [connectionType, setConnectionType] = useState<string>('unknown')\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true)\n    const handleOffline = () => setIsOnline(false)\n\n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n\n    // Get connection info if available\n    if ('connection' in navigator) {\n      const connection = (navigator as any).connection\n      setConnectionType(connection.effectiveType || 'unknown')\n      \n      const handleConnectionChange = () => {\n        setConnectionType(connection.effectiveType || 'unknown')\n      }\n      \n      connection.addEventListener('change', handleConnectionChange)\n      \n      return () => {\n        window.removeEventListener('online', handleOnline)\n        window.removeEventListener('offline', handleOffline)\n        connection.removeEventListener('change', handleConnectionChange)\n      }\n    }\n\n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n\n  return (\n    <div className=\"flex items-center space-x-1\">\n      {isOnline ? (\n        <>\n          <Wifi className=\"h-4 w-4 text-green-600\" />\n          <span className=\"text-xs text-green-600 font-medium\">\n            {connectionType !== 'unknown' ? connectionType.toUpperCase() : 'Online'}\n          </span>\n        </>\n      ) : (\n        <>\n          <WifiOff className=\"h-4 w-4 text-red-600\" />\n          <span className=\"text-xs text-red-600 font-medium\">Offline</span>\n        </>\n      )}\n    </div>\n  )\n}\n\n// Background Sync Status\ninterface BackgroundSyncStatusProps {\n  pendingActions: Array<{\n    id: string\n    type: 'order' | 'payment' | 'feedback'\n    description: string\n    timestamp: Date\n  }>\n  onRetryAction?: (actionId: string) => void\n}\n\nexport const BackgroundSyncStatus: React.FC<BackgroundSyncStatusProps> = ({\n  pendingActions,\n  onRetryAction\n}) => {\n  if (pendingActions.length === 0) return null\n\n  return (\n    <Card className=\"mx-4 mb-4 border-amber-200 bg-amber-50\">\n      <div className=\"p-3\">\n        <div className=\"flex items-center space-x-2 mb-2\">\n          <Clock className=\"h-4 w-4 text-amber-600\" />\n          <span className=\"text-sm font-medium text-amber-800\">\n            Pending Actions ({pendingActions.length})\n          </span>\n        </div>\n        <p className=\"text-xs text-amber-700 mb-3\">\n          These actions will be completed when you're back online.\n        </p>\n        <div className=\"space-y-2\">\n          {pendingActions.slice(0, 3).map((action) => (\n            <div key={action.id} className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-gray-900\">{action.description}</p>\n                <p className=\"text-xs text-gray-500\">\n                  {action.timestamp.toLocaleTimeString()}\n                </p>\n              </div>\n              {onRetryAction && (\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={() => onRetryAction(action.id)}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  Retry\n                </Button>\n              )}\n            </div>\n          ))}\n        </div>\n        {pendingActions.length > 3 && (\n          <p className=\"text-xs text-amber-600 mt-2\">\n            +{pendingActions.length - 3} more actions pending\n          </p>\n        )}\n      </div>\n    </Card>\n  )\n}\n\n// Share functionality for PWA\ninterface ShareButtonProps {\n  title: string\n  text: string\n  url?: string\n  className?: string\n  variant?: 'button' | 'icon'\n}\n\nexport const ShareButton: React.FC<ShareButtonProps> = ({\n  title,\n  text,\n  url = window.location.href,\n  className,\n  variant = 'button'\n}) => {\n  const [canShare, setCanShare] = useState(false)\n\n  useEffect(() => {\n    setCanShare('share' in navigator)\n  }, [])\n\n  const handleShare = useCallback(async () => {\n    if ('share' in navigator) {\n      try {\n        await navigator.share({ title, text, url })\n        \n        if ('vibrate' in navigator) {\n          navigator.vibrate(10)\n        }\n      } catch (error) {\n        // User cancelled or error occurred\n        console.log('Share cancelled or failed:', error)\n      }\n    } else {\n      // Fallback to clipboard\n      try {\n        await navigator.clipboard.writeText(`${title}\\n${text}\\n${url}`)\n        // Show toast notification\n        alert('Link copied to clipboard!')\n      } catch (error) {\n        console.error('Failed to copy to clipboard:', error)\n      }\n    }\n  }, [title, text, url])\n\n  if (!canShare && !('clipboard' in navigator)) {\n    return null\n  }\n\n  if (variant === 'icon') {\n    return (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={handleShare}\n        className={className}\n        haptic\n      >\n        <Share className=\"h-4 w-4\" />\n      </Button>\n    )\n  }\n\n  return (\n    <Button\n      variant=\"outline\"\n      onClick={handleShare}\n      className={className}\n      haptic\n    >\n      <Share className=\"h-4 w-4 mr-2\" />\n      Share\n    </Button>\n  )\n}\n\n// Emergency notification banner for school emergencies\ninterface EmergencyBannerProps {\n  message: string\n  type: 'emergency' | 'alert' | 'info'\n  onDismiss?: () => void\n  actionButton?: {\n    text: string\n    action: () => void\n  }\n}\n\nexport const EmergencyBanner: React.FC<EmergencyBannerProps> = ({\n  message,\n  type,\n  onDismiss,\n  actionButton\n}) => {\n  const colors = {\n    emergency: 'bg-red-600 text-white',\n    alert: 'bg-orange-500 text-white',\n    info: 'bg-blue-600 text-white'\n  }\n\n  const icons = {\n    emergency: <AlertCircle className=\"h-5 w-5\" />,\n    alert: <AlertCircle className=\"h-5 w-5\" />,\n    info: <Bell className=\"h-5 w-5\" />\n  }\n\n  return (\n    <div className={cn(\n      \"fixed top-0 left-0 right-0 z-50 p-3 safe-area-pt animate-slide-down\",\n      colors[type]\n    )}>\n      <div className=\"flex items-center space-x-3 max-w-md mx-auto\">\n        {icons[type]}\n        <p className=\"flex-1 text-sm font-medium\">{message}</p>\n        <div className=\"flex items-center space-x-2\">\n          {actionButton && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={actionButton.action}\n              className=\"text-current border-current hover:bg-white/20\"\n            >\n              {actionButton.text}\n            </Button>\n          )}\n          {onDismiss && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={onDismiss}\n              className=\"h-6 w-6 p-0 text-current hover:bg-white/20\"\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Quick RFID display for easy scanning\ninterface QuickRFIDDisplayProps {\n  rfidCode: string\n  studentName: string\n  onCopy?: () => void\n}\n\nexport const QuickRFIDDisplay: React.FC<QuickRFIDDisplayProps> = ({\n  rfidCode,\n  studentName,\n  onCopy\n}) => {\n  const handleCopy = useCallback(async () => {\n    try {\n      await navigator.clipboard.writeText(rfidCode)\n      onCopy?.()\n      \n      if ('vibrate' in navigator) {\n        navigator.vibrate(20)\n      }\n    } catch (error) {\n      console.error('Failed to copy RFID code:', error)\n    }\n  }, [rfidCode, onCopy])\n\n  return (\n    <Card className=\"mx-4 mb-4 bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200\">\n      <div className=\"p-4 text-center\">\n        <h3 className=\"font-semibold text-gray-900 mb-1\">Your RFID Code</h3>\n        <p className=\"text-sm text-gray-600 mb-3\">{studentName}</p>\n        \n        <div className=\"bg-white rounded-lg p-4 mb-3 border-2 border-dashed border-blue-300\">\n          <div className=\"font-mono text-2xl font-bold text-blue-600 tracking-wider\">\n            {rfidCode}\n          </div>\n        </div>\n        \n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={handleCopy}\n          className=\"text-blue-600 border-blue-300\"\n          haptic\n        >\n          Copy Code\n        </Button>\n        \n        <p className=\"text-xs text-gray-500 mt-2\">\n          Show this code to the scanner during meal pickup\n        </p>\n      </div>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/SchoolMobileComponents.tsx",["2266","2267","2268","2269","2270","2271","2272","2273","2274","2275"],[],"\"use client\"\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\nimport { cn } from '@/lib/utils'\nimport { Button } from '@/components/ui/button'\nimport { Card } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { SwipeableCard, TouchContainer, PullToRefresh } from './TouchOptimized'\nimport { BottomSheet, useBottomSheet } from './BottomSheet'\nimport { ShareButton } from './PWAFeatures'\nimport {\n  Clock,\n  MapPin,\n  Users,\n  Star,\n  Heart,\n  ShoppingCart,\n  CheckCircle,\n  AlertTriangle,\n  Utensils,\n  Timer,\n  Zap,\n  ArrowRight,\n  RefreshCw,\n  MessageCircle,\n  Camera,\n  Smartphone,\n  Plus,\n  Minus,\n  X\n} from 'lucide-react'\n\n// Quick meal ordering carousel for lunch breaks\ninterface QuickMealCarouselProps {\n  meals: Array<{\n    id: string\n    name: string\n    price: number\n    image: string\n    preparationTime: number\n    rating: number\n    isAvailable: boolean\n    isPopular?: boolean\n  }>\n  onOrderMeal: (mealId: string, quantity: number) => void\n  className?: string\n}\n\nexport const QuickMealCarousel: React.FC<QuickMealCarouselProps> = ({\n  meals,\n  onOrderMeal,\n  className\n}) => {\n  const [selectedQuantity, setSelectedQuantity] = useState<{ [key: string]: number }>({})\n  const scrollRef = useRef<HTMLDivElement>(null)\n\n  const updateQuantity = useCallback((mealId: string, delta: number) => {\n    setSelectedQuantity(prev => ({\n      ...prev,\n      [mealId]: Math.max(0, (prev[mealId] || 0) + delta)\n    }))\n  }, [])\n\n  const handleQuickOrder = useCallback((mealId: string) => {\n    const quantity = selectedQuantity[mealId] || 1\n    onOrderMeal(mealId, quantity)\n    \n    // Reset quantity\n    setSelectedQuantity(prev => ({ ...prev, [mealId]: 0 }))\n    \n    // Haptic feedback\n    if ('vibrate' in navigator) {\n      navigator.vibrate([20, 10, 20])\n    }\n  }, [selectedQuantity, onOrderMeal])\n\n  return (\n    <div className={cn(\"space-y-3\", className)}>\n      <div className=\"flex items-center justify-between px-4\">\n        <h2 className=\"text-lg font-bold text-gray-900\">Quick Order</h2>\n        <Badge variant=\"secondary\" className=\"text-xs\">\n          <Clock className=\"h-3 w-3 mr-1\" />\n          Fast pickup\n        </Badge>\n      </div>\n\n      <div\n        ref={scrollRef}\n        className=\"flex space-x-3 overflow-x-auto scrollbar-none px-4 snap-x snap-mandatory\"\n      >\n        {meals.map((meal) => (\n          <TouchContainer\n            key={meal.id}\n            className=\"flex-none w-72 snap-start\"\n            hapticFeedback\n          >\n            <Card className={cn(\n              \"relative overflow-hidden transition-all duration-200\",\n              !meal.isAvailable && \"opacity-60\"\n            )}>\n              {/* Popular badge */}\n              {meal.isPopular && (\n                <div className=\"absolute top-2 left-2 z-10\">\n                  <Badge className=\"bg-orange-500 text-white text-xs px-2 py-1\">\n                    <Star className=\"h-3 w-3 mr-1\" />\n                    Popular\n                  </Badge>\n                </div>\n              )}\n\n              {/* Meal image */}\n              <div className=\"relative h-32 bg-gray-100\">\n                <img\n                  src={meal.image}\n                  alt={meal.name}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent\" />\n                \n                {/* Quick add button */}\n                <div className=\"absolute bottom-2 right-2\">\n                  <Button\n                    size=\"fabSmall\"\n                    variant=\"floating\"\n                    onClick={() => updateQuantity(meal.id, 1)}\n                    disabled={!meal.isAvailable}\n                    haptic\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {/* Meal info */}\n              <div className=\"p-3 space-y-2\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1 min-w-0\">\n                    <h3 className=\"font-semibold text-gray-900 truncate\">{meal.name}</h3>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <span className=\"text-lg font-bold text-green-600\">₹{meal.price}</span>\n                      <div className=\"flex items-center space-x-1\">\n                        <Star className=\"h-3 w-3 text-yellow-500 fill-current\" />\n                        <span className=\"text-xs text-gray-500\">{meal.rating}</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Timer className=\"h-3 w-3\" />\n                    <span>{meal.preparationTime} min</span>\n                  </div>\n                  <div className={cn(\n                    \"flex items-center space-x-1\",\n                    meal.isAvailable ? \"text-green-600\" : \"text-red-600\"\n                  )}>\n                    <div className={cn(\n                      \"w-2 h-2 rounded-full\",\n                      meal.isAvailable ? \"bg-green-500\" : \"bg-red-500\"\n                    )} />\n                    <span>{meal.isAvailable ? \"Available\" : \"Sold out\"}</span>\n                  </div>\n                </div>\n\n                {/* Quantity selector and order button */}\n                {(selectedQuantity[meal.id] || 0) > 0 && (\n                  <div className=\"flex items-center justify-between pt-2 border-t\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateQuantity(meal.id, -1)}\n                        className=\"h-8 w-8 p-0\"\n                        haptic\n                      >\n                        <Minus className=\"h-3 w-3\" />\n                      </Button>\n                      <span className=\"font-semibold text-lg w-8 text-center\">\n                        {selectedQuantity[meal.id]}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => updateQuantity(meal.id, 1)}\n                        className=\"h-8 w-8 p-0\"\n                        haptic\n                      >\n                        <Plus className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    <Button\n                      size=\"sm\"\n                      onClick={() => handleQuickOrder(meal.id)}\n                      disabled={!meal.isAvailable}\n                      className=\"px-4\"\n                      haptic\n                    >\n                      Add ₹{meal.price * selectedQuantity[meal.id]}\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </Card>\n          </TouchContainer>\n        ))}\n      </div>\n    </div>\n  )\n}\n\n// Live order tracking for mobile\ninterface LiveOrderTrackingProps {\n  order: {\n    id: string\n    items: Array<{ name: string; quantity: number }>\n    status: 'placed' | 'preparing' | 'ready' | 'completed'\n    estimatedTime: number\n    actualTime?: number\n    pickupLocation: string\n  }\n  onRefresh?: () => void\n}\n\nexport const LiveOrderTracking: React.FC<LiveOrderTrackingProps> = ({\n  order,\n  onRefresh\n}) => {\n  const [timeRemaining, setTimeRemaining] = useState(order.estimatedTime)\n\n  useEffect(() => {\n    if (order.status === 'preparing') {\n      const interval = setInterval(() => {\n        setTimeRemaining(prev => Math.max(0, prev - 1))\n      }, 60000) // Update every minute\n\n      return () => clearInterval(interval)\n    }\n  }, [order.status])\n\n  const getStatusInfo = (status: string) => {\n    switch (status) {\n      case 'placed':\n        return { color: 'bg-blue-500', icon: <Clock className=\"h-4 w-4\" />, text: 'Order Placed' }\n      case 'preparing':\n        return { color: 'bg-orange-500', icon: <Utensils className=\"h-4 w-4\" />, text: 'Preparing' }\n      case 'ready':\n        return { color: 'bg-green-500', icon: <CheckCircle className=\"h-4 w-4\" />, text: 'Ready for Pickup' }\n      case 'completed':\n        return { color: 'bg-gray-500', icon: <CheckCircle className=\"h-4 w-4\" />, text: 'Completed' }\n      default:\n        return { color: 'bg-gray-400', icon: <Clock className=\"h-4 w-4\" />, text: 'Unknown' }\n    }\n  }\n\n  const statusInfo = getStatusInfo(order.status)\n  const progress = (() => {\n    switch (order.status) {\n      case 'placed': return 25\n      case 'preparing': return 50\n      case 'ready': return 100\n      case 'completed': return 100\n      default: return 0\n    }\n  })()\n\n  return (\n    <Card className=\"mx-4 mb-4 border-l-4 border-l-primary\">\n      <div className=\"p-4\">\n        {/* Header with refresh */}\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={cn(\"p-2 rounded-full text-white\", statusInfo.color)}>\n              {statusInfo.icon}\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Order #{order.id.slice(-6)}</h3>\n              <p className=\"text-sm text-gray-600\">{statusInfo.text}</p>\n            </div>\n          </div>\n          \n          {onRefresh && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={onRefresh}\n              className=\"h-8 w-8 p-0\"\n              haptic\n            >\n              <RefreshCw className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n\n        {/* Progress bar */}\n        <div className=\"mb-4\">\n          <Progress value={progress} className=\"h-2\" />\n        </div>\n\n        {/* Time remaining */}\n        {order.status === 'preparing' && timeRemaining > 0 && (\n          <div className=\"flex items-center justify-center mb-4 p-3 bg-orange-50 rounded-lg\">\n            <Timer className=\"h-5 w-5 text-orange-600 mr-2\" />\n            <div className=\"text-center\">\n              <p className=\"font-semibold text-orange-900\">\n                {timeRemaining} min remaining\n              </p>\n              <p className=\"text-sm text-orange-700\">Estimated time</p>\n            </div>\n          </div>\n        )}\n\n        {/* Ready for pickup */}\n        {order.status === 'ready' && (\n          <div className=\"flex items-center justify-center mb-4 p-3 bg-green-50 rounded-lg animate-pulse\">\n            <CheckCircle className=\"h-5 w-5 text-green-600 mr-2\" />\n            <div className=\"text-center\">\n              <p className=\"font-semibold text-green-900\">Ready for pickup!</p>\n              <p className=\"text-sm text-green-700\">{order.pickupLocation}</p>\n            </div>\n          </div>\n        )}\n\n        {/* Order items */}\n        <div className=\"space-y-2\">\n          <h4 className=\"text-sm font-medium text-gray-700\">Items ordered:</h4>\n          {order.items.map((item, index) => (\n            <div key={index} className=\"flex justify-between text-sm\">\n              <span className=\"text-gray-600\">{item.name}</span>\n              <span className=\"text-gray-900\">x{item.quantity}</span>\n            </div>\n          ))}\n        </div>\n\n        {/* Pickup location */}\n        <div className=\"flex items-center mt-3 pt-3 border-t\">\n          <MapPin className=\"h-4 w-4 text-gray-500 mr-2\" />\n          <span className=\"text-sm text-gray-600\">Pickup: {order.pickupLocation}</span>\n        </div>\n      </div>\n    </Card>\n  )\n}\n\n// Parent approval interface for mobile\ninterface ParentApprovalProps {\n  pendingOrders: Array<{\n    id: string\n    studentName: string\n    items: Array<{ name: string; price: number; quantity: number }>\n    total: number\n    requestedTime: Date\n    dietaryNotes?: string\n  }>\n  onApprove: (orderId: string) => void\n  onReject: (orderId: string, reason?: string) => void\n  onModify: (orderId: string) => void\n}\n\nexport const ParentApprovalInterface: React.FC<ParentApprovalProps> = ({\n  pendingOrders,\n  onApprove,\n  onReject,\n  onModify\n}) => {\n  const rejectSheet = useBottomSheet()\n  const [selectedOrderId, setSelectedOrderId] = useState<string>('')\n  const [rejectReason, setRejectReason] = useState('')\n\n  const handleReject = useCallback((orderId: string) => {\n    setSelectedOrderId(orderId)\n    rejectSheet.open()\n  }, [rejectSheet])\n\n  const confirmReject = useCallback(() => {\n    if (selectedOrderId) {\n      onReject(selectedOrderId, rejectReason)\n      setRejectReason('')\n      rejectSheet.close()\n    }\n  }, [selectedOrderId, rejectReason, onReject, rejectSheet])\n\n  if (pendingOrders.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-3\" />\n        <h3 className=\"font-semibold text-gray-900 mb-1\">All caught up!</h3>\n        <p className=\"text-gray-600\">No pending meal approvals</p>\n      </div>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between px-4\">\n          <h2 className=\"text-lg font-bold text-gray-900\">Pending Approvals</h2>\n          <Badge variant=\"destructive\" className=\"px-2 py-1\">\n            {pendingOrders.length} pending\n          </Badge>\n        </div>\n\n        {pendingOrders.map((order) => (\n          <SwipeableCard\n            key={order.id}\n            className=\"mx-4\"\n            leftAction={{\n              icon: <X className=\"h-5 w-5\" />,\n              color: \"bg-red-500 text-white\",\n              label: \"Reject\"\n            }}\n            rightAction={{\n              icon: <CheckCircle className=\"h-5 w-5\" />,\n              color: \"bg-green-500 text-white\",\n              label: \"Approve\"\n            }}\n            onSwipeLeft={() => handleReject(order.id)}\n            onSwipeRight={() => onApprove(order.id)}\n          >\n            <Card className=\"border-amber-200 bg-amber-50\">\n              <div className=\"p-4\">\n                {/* Header */}\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{order.studentName}</h3>\n                    <p className=\"text-sm text-gray-600\">\n                      Requested {order.requestedTime.toLocaleTimeString()}\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-lg font-bold text-green-600\">₹{order.total}</p>\n                    <p className=\"text-xs text-gray-500\">Total</p>\n                  </div>\n                </div>\n\n                {/* Items */}\n                <div className=\"space-y-1 mb-3\">\n                  {order.items.map((item, index) => (\n                    <div key={index} className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-700\">\n                        {item.name} x{item.quantity}\n                      </span>\n                      <span className=\"text-gray-900\">₹{item.price * item.quantity}</span>\n                    </div>\n                  ))}\n                </div>\n\n                {/* Dietary notes */}\n                {order.dietaryNotes && (\n                  <div className=\"mb-3 p-2 bg-blue-50 rounded-lg\">\n                    <p className=\"text-xs text-blue-800 font-medium\">Dietary Note:</p>\n                    <p className=\"text-sm text-blue-700\">{order.dietaryNotes}</p>\n                  </div>\n                )}\n\n                {/* Action buttons */}\n                <div className=\"flex space-x-2 pt-3 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => handleReject(order.id)}\n                    className=\"flex-1 text-red-600 border-red-300 hover:bg-red-50\"\n                    haptic\n                  >\n                    Reject\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    variant=\"outline\"\n                    onClick={() => onModify(order.id)}\n                    className=\"flex-1\"\n                    haptic\n                  >\n                    Modify\n                  </Button>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => onApprove(order.id)}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                    haptic\n                  >\n                    Approve\n                  </Button>\n                </div>\n              </div>\n            </Card>\n          </SwipeableCard>\n        ))}\n      </div>\n\n      {/* Reject reason bottom sheet */}\n      <BottomSheet\n        isOpen={rejectSheet.isOpen}\n        onClose={rejectSheet.close}\n        title=\"Reject Order\"\n        snapPoints={[50]}\n      >\n        <div className=\"p-4 space-y-4\">\n          <p className=\"text-gray-600\">\n            Please provide a reason for rejecting this meal order:\n          </p>\n          \n          <div className=\"space-y-3\">\n            {[\n              \"Too expensive\",\n              \"Unhealthy choice\",\n              \"Already had lunch\",\n              \"Dietary restrictions\",\n              \"Other\"\n            ].map((reason) => (\n              <button\n                key={reason}\n                onClick={() => setRejectReason(reason)}\n                className={cn(\n                  \"w-full p-3 text-left rounded-lg border transition-colors\",\n                  rejectReason === reason\n                    ? \"border-primary bg-primary/5 text-primary\"\n                    : \"border-gray-200 hover:bg-gray-50\"\n                )}\n              >\n                {reason}\n              </button>\n            ))}\n          </div>\n\n          {rejectReason === \"Other\" && (\n            <textarea\n              placeholder=\"Please specify...\"\n              value={rejectReason === \"Other\" ? \"\" : rejectReason}\n              onChange={(e) => setRejectReason(e.target.value)}\n              className=\"w-full p-3 border rounded-lg resize-none\"\n              rows={3}\n            />\n          )}\n\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              variant=\"outline\"\n              onClick={rejectSheet.close}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={confirmReject}\n              disabled={!rejectReason}\n              className=\"flex-1 bg-red-600 hover:bg-red-700\"\n              haptic\n            >\n              Reject Order\n            </Button>\n          </div>\n        </div>\n      </BottomSheet>\n    </>\n  )\n}\n\n// School schedule integration\ninterface SchoolScheduleIntegrationProps {\n  currentPeriod: {\n    subject: string\n    teacher: string\n    room: string\n    endTime: Date\n  }\n  nextMealTime: {\n    type: 'lunch' | 'snack'\n    time: Date\n    location: string\n  }\n  isOrderingOpen: boolean\n  onQuickOrder: () => void\n}\n\nexport const SchoolScheduleIntegration: React.FC<SchoolScheduleIntegrationProps> = ({\n  currentPeriod,\n  nextMealTime,\n  isOrderingOpen,\n  onQuickOrder\n}) => {\n  const [timeUntilMeal, setTimeUntilMeal] = useState('')\n\n  useEffect(() => {\n    const updateTime = () => {\n      const now = new Date()\n      const diff = nextMealTime.time.getTime() - now.getTime()\n      \n      if (diff > 0) {\n        const hours = Math.floor(diff / (1000 * 60 * 60))\n        const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n        \n        if (hours > 0) {\n          setTimeUntilMeal(`${hours}h ${minutes}m`)\n        } else {\n          setTimeUntilMeal(`${minutes}m`)\n        }\n      } else {\n        setTimeUntilMeal('Now')\n      }\n    }\n\n    updateTime()\n    const interval = setInterval(updateTime, 60000)\n    return () => clearInterval(interval)\n  }, [nextMealTime.time])\n\n  return (\n    <Card className=\"mx-4 mb-4 bg-gradient-to-r from-blue-50 to-purple-50\">\n      <div className=\"p-4\">\n        {/* Current class */}\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-blue-100 rounded-lg\">\n              <Clock className=\"h-5 w-5 text-blue-600\" />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-gray-900\">Current Class</h3>\n              <p className=\"text-sm text-gray-600\">\n                {currentPeriod.subject} • {currentPeriod.teacher}\n              </p>\n              <p className=\"text-xs text-gray-500\">\n                Room {currentPeriod.room} • Ends {currentPeriod.endTime.toLocaleTimeString()}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Next meal */}\n        <div className=\"bg-white rounded-lg p-3 border border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Utensils className=\"h-4 w-4 text-green-600\" />\n              </div>\n              <div>\n                <p className=\"font-medium text-gray-900 capitalize\">\n                  Next {nextMealTime.type}\n                </p>\n                <p className=\"text-sm text-gray-600\">\n                  {nextMealTime.location} • in {timeUntilMeal}\n                </p>\n              </div>\n            </div>\n            \n            {isOrderingOpen && (\n              <Button\n                size=\"sm\"\n                onClick={onQuickOrder}\n                className=\"px-4\"\n                haptic\n              >\n                <Zap className=\"h-4 w-4 mr-1\" />\n                Quick Order\n              </Button>\n            )}\n          </div>\n          \n          {!isOrderingOpen && (\n            <div className=\"mt-2 p-2 bg-amber-50 rounded border border-amber-200\">\n              <p className=\"text-xs text-amber-800\">\n                Ordering opens 30 minutes before {nextMealTime.type} time\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </Card>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/SwipeableCard.tsx",["2276","2277","2278","2279","2280","2281","2282","2283","2284","2285","2286","2287","2288"],[],"/**\n * SwipeableCard - Touch-friendly swipeable card component\n * Features: Swipe gestures, haptic feedback, smooth animations\n */\n\nimport React, { useRef, useState } from 'react';\nimport { motion, PanInfo, useMotionValue, useTransform } from 'framer-motion';\nimport { Heart, ShoppingCart, Info, Star, Clock, MapPin } from 'lucide-react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { cn } from '@/lib/utils';\n\ninterface SwipeAction {\n  id: string;\n  label: string;\n  icon: React.ComponentType<{ className?: string }>;\n  color: string;\n  bgColor: string;\n  action: () => void;\n}\n\ninterface SwipeableCardProps {\n  children: React.ReactNode;\n  leftActions?: SwipeAction[];\n  rightActions?: SwipeAction[];\n  onSwipe?: (direction: 'left' | 'right', actionId?: string) => void;\n  swipeThreshold?: number;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const SwipeableCard: React.FC<SwipeableCardProps> = ({\n  children,\n  leftActions = [],\n  rightActions = [],\n  onSwipe,\n  swipeThreshold = 80,\n  disabled = false,\n  className\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [triggerHaptic, setTriggerHaptic] = useState(false);\n  const cardRef = useRef<HTMLDivElement>(null);\n  \n  const x = useMotionValue(0);\n  const opacity = useTransform(x, [-200, -100, 0, 100, 200], [0.5, 0.8, 1, 0.8, 0.5]);\n  const scale = useTransform(x, [-200, -100, 0, 100, 200], [0.9, 0.95, 1, 0.95, 0.9]);\n\n  const handleDragStart = () => {\n    if (disabled) return;\n    setIsDragging(true);\n    \n    // Light haptic feedback on drag start\n    if ('vibrate' in navigator && navigator.vibrate) {\n      navigator.vibrate(5);\n    }\n  };\n\n  const handleDragEnd = (event: any, info: PanInfo) => {\n    if (disabled) return;\n    \n    setIsDragging(false);\n    const swipeDistance = info.offset.x;\n    const velocity = info.velocity.x;\n    \n    // Determine if swipe threshold is met\n    const shouldSwipe = Math.abs(swipeDistance) > swipeThreshold || Math.abs(velocity) > 500;\n    \n    if (shouldSwipe) {\n      const direction = swipeDistance > 0 ? 'right' : 'left';\n      const actions = direction === 'right' ? rightActions : leftActions;\n      \n      // Find the appropriate action based on swipe distance\n      let selectedAction: SwipeAction | undefined;\n      if (actions.length > 0) {\n        const actionIndex = Math.min(\n          Math.floor(Math.abs(swipeDistance) / swipeThreshold) - 1,\n          actions.length - 1\n        );\n        selectedAction = actions[Math.max(0, actionIndex)];\n      }\n      \n      // Haptic feedback for successful swipe\n      if ('vibrate' in navigator && navigator.vibrate) {\n        navigator.vibrate(15);\n      }\n      \n      onSwipe?.(direction, selectedAction?.id);\n      selectedAction?.action();\n    }\n    \n    // Reset position\n    x.set(0);\n  };\n\n  const handleDrag = (event: any, info: PanInfo) => {\n    if (disabled) return;\n    \n    const swipeDistance = Math.abs(info.offset.x);\n    \n    // Trigger haptic feedback when passing threshold\n    if (swipeDistance > swipeThreshold && !triggerHaptic) {\n      setTriggerHaptic(true);\n      if ('vibrate' in navigator && navigator.vibrate) {\n        navigator.vibrate(10);\n      }\n    } else if (swipeDistance <= swipeThreshold && triggerHaptic) {\n      setTriggerHaptic(false);\n    }\n  };\n\n  const renderActionIndicators = (actions: SwipeAction[], side: 'left' | 'right') => {\n    if (actions.length === 0) return null;\n    \n    return (\n      <div className={cn(\n        'absolute top-0 bottom-0 flex items-center space-x-2 px-4',\n        side === 'left' ? 'left-0' : 'right-0'\n      )}>\n        {actions.map((action, index) => {\n          const Icon = action.icon;\n          return (\n            <motion.div\n              key={action.id}\n              className={cn(\n                'flex items-center justify-center',\n                'w-12 h-12 rounded-full',\n                action.bgColor,\n                'shadow-lg'\n              )}\n              initial={{ scale: 0 }}\n              animate={{ scale: triggerHaptic ? 1.1 : 1 }}\n              transition={{ type: 'spring', stiffness: 400, damping: 30 }}\n            >\n              <Icon className={cn('h-6 w-6', action.color)} />\n            </motion.div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  return (\n    <div className={cn('relative overflow-hidden', className)}>\n      {/* Background action indicators */}\n      {renderActionIndicators(leftActions, 'left')}\n      {renderActionIndicators(rightActions, 'right')}\n      \n      {/* Main card */}\n      <motion.div\n        ref={cardRef}\n        className=\"relative z-10\"\n        drag={disabled ? false : 'x'}\n        dragConstraints={{ left: 0, right: 0 }}\n        dragElastic={0.2}\n        onDragStart={handleDragStart}\n        onDrag={handleDrag}\n        onDragEnd={handleDragEnd}\n        style={{ x, opacity, scale }}\n        whileTap={{ scale: 0.98 }}\n        transition={{\n          type: 'spring',\n          stiffness: 400,\n          damping: 30\n        }}\n      >\n        <Card className={cn(\n          'touch-none select-none',\n          isDragging && 'shadow-xl',\n          disabled && 'opacity-50 cursor-not-allowed'\n        )}>\n          {children}\n        </Card>\n      </motion.div>\n\n      {/* Swipe instruction overlay for first-time users */}\n      {!disabled && (leftActions.length > 0 || rightActions.length > 0) && (\n        <motion.div\n          className=\"absolute inset-0 flex items-center justify-center bg-black/5 rounded-lg pointer-events-none\"\n          initial={{ opacity: 0 }}\n          animate={{ opacity: isDragging ? 0.3 : 0 }}\n          transition={{ duration: 0.2 }}\n        >\n          <div className=\"text-gray-600 text-sm font-medium\">\n            ← Swipe for actions →\n          </div>\n        </motion.div>\n      )}\n    </div>\n  );\n};\n\n// Preset swipe actions for meal cards\nexport const createMealCardActions = (\n  meal: any,\n  onAddToCart: (meal: any) => void,\n  onToggleFavorite: (meal: any) => void,\n  onViewDetails: (meal: any) => void,\n  isFavorite: boolean = false\n) => {\n  const leftActions: SwipeAction[] = [\n    {\n      id: 'favorite',\n      label: isFavorite ? 'Remove Favorite' : 'Add Favorite',\n      icon: Heart,\n      color: isFavorite ? 'text-red-500' : 'text-white',\n      bgColor: isFavorite ? 'bg-gray-100' : 'bg-red-500',\n      action: () => onToggleFavorite(meal),\n    }\n  ];\n\n  const rightActions: SwipeAction[] = [\n    {\n      id: 'info',\n      label: 'View Details',\n      icon: Info,\n      color: 'text-white',\n      bgColor: 'bg-blue-500',\n      action: () => onViewDetails(meal),\n    },\n    {\n      id: 'cart',\n      label: 'Add to Cart',\n      icon: ShoppingCart,\n      color: 'text-white',\n      bgColor: 'bg-green-500',\n      action: () => onAddToCart(meal),\n    }\n  ];\n\n  return { leftActions, rightActions };\n};\n\nexport default SwipeableCard;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/TouchGestures.tsx",["2289","2290","2291","2292","2293","2294","2295","2296","2297"],[],"\"use client\"\n\nimport React, { useState, useRef, useCallback, useEffect, ReactNode } from 'react'\nimport { cn } from '@/lib/utils'\n\n// Touch gesture utilities\ninterface Touch {\n  x: number\n  y: number\n  time: number\n  id: number\n}\n\ninterface SwipeState {\n  startTouch: Touch | null\n  currentTouch: Touch | null\n  direction: 'left' | 'right' | 'up' | 'down' | null\n  distance: number\n  velocity: number\n  isActive: boolean\n}\n\ninterface PinchState {\n  touches: Touch[]\n  scale: number\n  initialDistance: number\n  center: { x: number; y: number }\n  isActive: boolean\n}\n\ninterface LongPressState {\n  touch: Touch | null\n  isActive: boolean\n  timer: NodeJS.Timeout | null\n}\n\n// Swipe Gesture Hook\nexport const useSwipeGesture = (\n  onSwipe?: (direction: 'left' | 'right' | 'up' | 'down', velocity: number) => void,\n  options: {\n    threshold?: number\n    velocityThreshold?: number\n    preventScroll?: boolean\n  } = {}\n) => {\n  const {\n    threshold = 50,\n    velocityThreshold = 0.3,\n    preventScroll = false\n  } = options\n\n  const [swipeState, setSwipeState] = useState<SwipeState>({\n    startTouch: null,\n    currentTouch: null,\n    direction: null,\n    distance: 0,\n    velocity: 0,\n    isActive: false\n  })\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (preventScroll) {\n      e.preventDefault()\n    }\n\n    const touch = e.touches[0]\n    const touchData: Touch = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n      id: touch.identifier\n    }\n\n    setSwipeState(prev => ({\n      ...prev,\n      startTouch: touchData,\n      currentTouch: touchData,\n      isActive: true,\n      direction: null,\n      distance: 0,\n      velocity: 0\n    }))\n  }, [preventScroll])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (preventScroll) {\n      e.preventDefault()\n    }\n\n    const touch = Array.from(e.touches).find(t => t.identifier === swipeState.startTouch?.id)\n    if (!touch || !swipeState.startTouch) return\n\n    const currentTouch: Touch = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n      id: touch.identifier\n    }\n\n    const deltaX = currentTouch.x - swipeState.startTouch.x\n    const deltaY = currentTouch.y - swipeState.startTouch.y\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n    \n    let direction: 'left' | 'right' | 'up' | 'down' | null = null\n    \n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n      direction = deltaX > 0 ? 'right' : 'left'\n    } else {\n      direction = deltaY > 0 ? 'down' : 'up'\n    }\n\n    const timeDelta = currentTouch.time - swipeState.startTouch.time\n    const velocity = timeDelta > 0 ? distance / timeDelta : 0\n\n    setSwipeState(prev => ({\n      ...prev,\n      currentTouch,\n      direction,\n      distance,\n      velocity\n    }))\n  }, [swipeState.startTouch, preventScroll])\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent) => {\n    if (!swipeState.startTouch || !swipeState.currentTouch) return\n\n    const { distance, velocity, direction } = swipeState\n\n    if (distance >= threshold && velocity >= velocityThreshold && direction) {\n      onSwipe?.(direction, velocity)\n      \n      // Haptic feedback\n      if ('vibrate' in navigator) {\n        navigator.vibrate(25)\n      }\n    }\n\n    setSwipeState({\n      startTouch: null,\n      currentTouch: null,\n      direction: null,\n      distance: 0,\n      velocity: 0,\n      isActive: false\n    })\n  }, [swipeState, threshold, velocityThreshold, onSwipe])\n\n  return {\n    swipeState,\n    handlers: {\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd\n    }\n  }\n}\n\n// Pinch Gesture Hook\nexport const usePinchGesture = (\n  onPinch?: (scale: number, center: { x: number; y: number }) => void,\n  onPinchEnd?: (finalScale: number) => void,\n  options: {\n    threshold?: number\n  } = {}\n) => {\n  const { threshold = 0.1 } = options\n\n  const [pinchState, setPinchState] = useState<PinchState>({\n    touches: [],\n    scale: 1,\n    initialDistance: 0,\n    center: { x: 0, y: 0 },\n    isActive: false\n  })\n\n  const getDistance = useCallback((touch1: Touch, touch2: Touch) => {\n    const dx = touch1.x - touch2.x\n    const dy = touch1.y - touch2.y\n    return Math.sqrt(dx * dx + dy * dy)\n  }, [])\n\n  const getCenter = useCallback((touch1: Touch, touch2: Touch) => {\n    return {\n      x: (touch1.x + touch2.x) / 2,\n      y: (touch1.y + touch2.y) / 2\n    }\n  }, [])\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (e.touches.length === 2) {\n      const touches = Array.from(e.touches).map(touch => ({\n        x: touch.clientX,\n        y: touch.clientY,\n        time: Date.now(),\n        id: touch.identifier\n      }))\n\n      const initialDistance = getDistance(touches[0], touches[1])\n      const center = getCenter(touches[0], touches[1])\n\n      setPinchState({\n        touches,\n        scale: 1,\n        initialDistance,\n        center,\n        isActive: true\n      })\n    }\n  }, [getDistance, getCenter])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (e.touches.length === 2 && pinchState.isActive) {\n      const touches = Array.from(e.touches).map(touch => ({\n        x: touch.clientX,\n        y: touch.clientY,\n        time: Date.now(),\n        id: touch.identifier\n      }))\n\n      const currentDistance = getDistance(touches[0], touches[1])\n      const scale = currentDistance / pinchState.initialDistance\n      const center = getCenter(touches[0], touches[1])\n\n      if (Math.abs(scale - 1) > threshold) {\n        onPinch?.(scale, center)\n      }\n\n      setPinchState(prev => ({\n        ...prev,\n        touches,\n        scale,\n        center\n      }))\n    }\n  }, [pinchState.isActive, pinchState.initialDistance, getDistance, getCenter, threshold, onPinch])\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent) => {\n    if (e.touches.length < 2 && pinchState.isActive) {\n      onPinchEnd?.(pinchState.scale)\n      \n      setPinchState({\n        touches: [],\n        scale: 1,\n        initialDistance: 0,\n        center: { x: 0, y: 0 },\n        isActive: false\n      })\n    }\n  }, [pinchState.isActive, pinchState.scale, onPinchEnd])\n\n  return {\n    pinchState,\n    handlers: {\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd\n    }\n  }\n}\n\n// Long Press Hook\nexport const useLongPress = (\n  onLongPress?: (touch: Touch) => void,\n  options: {\n    delay?: number\n    moveTolerance?: number\n  } = {}\n) => {\n  const {\n    delay = 500,\n    moveTolerance = 10\n  } = options\n\n  const [longPressState, setLongPressState] = useState<LongPressState>({\n    touch: null,\n    isActive: false,\n    timer: null\n  })\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    const touch = e.touches[0]\n    const touchData: Touch = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now(),\n      id: touch.identifier\n    }\n\n    const timer = setTimeout(() => {\n      onLongPress?.(touchData)\n      \n      // Haptic feedback\n      if ('vibrate' in navigator) {\n        navigator.vibrate([50, 50, 50])\n      }\n\n      setLongPressState(prev => ({\n        ...prev,\n        isActive: true\n      }))\n    }, delay)\n\n    setLongPressState({\n      touch: touchData,\n      isActive: false,\n      timer\n    })\n  }, [delay, onLongPress])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!longPressState.touch) return\n\n    const touch = Array.from(e.touches).find(t => t.identifier === longPressState.touch?.id)\n    if (!touch) return\n\n    const deltaX = touch.clientX - longPressState.touch.x\n    const deltaY = touch.clientY - longPressState.touch.y\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n\n    if (distance > moveTolerance && longPressState.timer) {\n      clearTimeout(longPressState.timer)\n      setLongPressState({\n        touch: null,\n        isActive: false,\n        timer: null\n      })\n    }\n  }, [longPressState.touch, longPressState.timer, moveTolerance])\n\n  const handleTouchEnd = useCallback(() => {\n    if (longPressState.timer) {\n      clearTimeout(longPressState.timer)\n    }\n\n    setLongPressState({\n      touch: null,\n      isActive: false,\n      timer: null\n    })\n  }, [longPressState.timer])\n\n  return {\n    longPressState,\n    handlers: {\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd\n    }\n  }\n}\n\n// Swipeable Card Component\ninterface SwipeableCardProps {\n  children: ReactNode\n  onSwipeLeft?: () => void\n  onSwipeRight?: () => void\n  onSwipeUp?: () => void\n  onSwipeDown?: () => void\n  className?: string\n  swipeThreshold?: number\n  disabled?: boolean\n}\n\nexport const SwipeableCard: React.FC<SwipeableCardProps> = ({\n  children,\n  onSwipeLeft,\n  onSwipeRight,\n  onSwipeUp,\n  onSwipeDown,\n  className,\n  swipeThreshold = 80,\n  disabled = false\n}) => {\n  const [transform, setTransform] = useState({ x: 0, y: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n\n  const handleSwipe = useCallback((direction: 'left' | 'right' | 'up' | 'down', velocity: number) => {\n    if (disabled) return\n\n    switch (direction) {\n      case 'left':\n        onSwipeLeft?.()\n        break\n      case 'right':\n        onSwipeRight?.()\n        break\n      case 'up':\n        onSwipeUp?.()\n        break\n      case 'down':\n        onSwipeDown?.()\n        break\n    }\n  }, [disabled, onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown])\n\n  const { swipeState, handlers } = useSwipeGesture(handleSwipe, {\n    threshold: swipeThreshold,\n    velocityThreshold: 0.3\n  })\n\n  useEffect(() => {\n    if (disabled) return\n\n    if (swipeState.isActive && swipeState.startTouch && swipeState.currentTouch) {\n      const deltaX = swipeState.currentTouch.x - swipeState.startTouch.x\n      const deltaY = swipeState.currentTouch.y - swipeState.startTouch.y\n      \n      setTransform({ x: deltaX * 0.3, y: deltaY * 0.3 })\n      setIsDragging(true)\n    } else {\n      setTransform({ x: 0, y: 0 })\n      setIsDragging(false)\n    }\n  }, [swipeState, disabled])\n\n  return (\n    <div\n      className={cn(\n        \"transition-transform duration-200 ease-out\",\n        isDragging && \"transition-none\",\n        className\n      )}\n      style={{\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\n      }}\n      {...handlers}\n    >\n      {children}\n    </div>\n  )\n}\n\n// Pull to Refresh Component\ninterface PullToRefreshProps {\n  onRefresh: () => Promise<void>\n  children: ReactNode\n  className?: string\n  threshold?: number\n  disabled?: boolean\n}\n\nexport const PullToRefresh: React.FC<PullToRefreshProps> = ({\n  onRefresh,\n  children,\n  className,\n  threshold = 80,\n  disabled = false\n}) => {\n  const [pullDistance, setPullDistance] = useState(0)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [canRefresh, setCanRefresh] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  const handleSwipe = useCallback(async (direction: 'down', velocity: number) => {\n    if (disabled || direction !== 'down' || !canRefresh) return\n\n    setIsRefreshing(true)\n    \n    try {\n      await onRefresh()\n    } finally {\n      setIsRefreshing(false)\n      setPullDistance(0)\n      setCanRefresh(false)\n    }\n  }, [disabled, onRefresh, canRefresh])\n\n  const { swipeState, handlers } = useSwipeGesture(handleSwipe, {\n    threshold,\n    velocityThreshold: 0.2,\n    preventScroll: true\n  })\n\n  useEffect(() => {\n    if (disabled) return\n\n    const container = containerRef.current\n    if (!container) return\n\n    const isAtTop = container.scrollTop === 0\n\n    if (swipeState.isActive && swipeState.direction === 'down' && isAtTop) {\n      const distance = Math.min(swipeState.distance, threshold * 1.5)\n      setPullDistance(distance)\n      setCanRefresh(distance >= threshold)\n    } else if (!swipeState.isActive) {\n      if (!isRefreshing) {\n        setPullDistance(0)\n        setCanRefresh(false)\n      }\n    }\n  }, [swipeState, threshold, disabled, isRefreshing])\n\n  const refreshIndicatorOpacity = Math.min(pullDistance / threshold, 1)\n  const refreshIndicatorScale = Math.min(pullDistance / threshold, 1)\n\n  return (\n    <div className={cn(\"relative overflow-hidden\", className)}>\n      {/* Pull to refresh indicator */}\n      <div\n        className=\"absolute top-0 left-0 right-0 flex items-center justify-center z-10 pointer-events-none\"\n        style={{\n          height: pullDistance,\n          opacity: refreshIndicatorOpacity,\n          transform: `scale(${refreshIndicatorScale})`\n        }}\n      >\n        <div className=\"flex items-center space-x-2 text-blue-600\">\n          <div className={cn(\n            \"w-6 h-6 border-2 border-blue-600 rounded-full\",\n            isRefreshing && \"animate-spin border-t-transparent\"\n          )} />\n          <span className=\"text-sm font-medium\">\n            {isRefreshing ? 'Refreshing...' : canRefresh ? 'Release to refresh' : 'Pull to refresh'}\n          </span>\n        </div>\n      </div>\n\n      {/* Content container */}\n      <div\n        ref={containerRef}\n        className=\"overflow-auto\"\n        style={{\n          transform: `translateY(${pullDistance}px)`,\n          transition: swipeState.isActive ? 'none' : 'transform 0.2s ease-out'\n        }}\n        {...handlers}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\n// Pinch to Zoom Image Component\ninterface PinchZoomImageProps {\n  src: string\n  alt: string\n  className?: string\n  maxScale?: number\n  minScale?: number\n}\n\nexport const PinchZoomImage: React.FC<PinchZoomImageProps> = ({\n  src,\n  alt,\n  className,\n  maxScale = 3,\n  minScale = 1\n}) => {\n  const [scale, setScale] = useState(1)\n  const [position, setPosition] = useState({ x: 0, y: 0 })\n  const [isDragging, setIsDragging] = useState(false)\n  const containerRef = useRef<HTMLDivElement>(null)\n\n  const handlePinch = useCallback((newScale: number, center: { x: number; y: number }) => {\n    const constrainedScale = Math.max(minScale, Math.min(maxScale, newScale))\n    setScale(constrainedScale)\n  }, [maxScale, minScale])\n\n  const handlePinchEnd = useCallback((finalScale: number) => {\n    const constrainedScale = Math.max(minScale, Math.min(maxScale, finalScale))\n    setScale(constrainedScale)\n    \n    if (constrainedScale === minScale) {\n      setPosition({ x: 0, y: 0 })\n    }\n  }, [maxScale, minScale])\n\n  const { pinchState, handlers: pinchHandlers } = usePinchGesture(\n    handlePinch,\n    handlePinchEnd,\n    { threshold: 0.05 }\n  )\n\n  // Pan gesture for when zoomed in\n  const handleSwipe = useCallback((direction: any, velocity: number) => {\n    if (scale <= 1) return\n\n    const container = containerRef.current\n    if (!container) return\n\n    const rect = container.getBoundingClientRect()\n    const maxX = (rect.width * (scale - 1)) / 2\n    const maxY = (rect.height * (scale - 1)) / 2\n\n    setPosition(prev => ({\n      x: Math.max(-maxX, Math.min(maxX, prev.x + (direction === 'right' ? 20 : direction === 'left' ? -20 : 0))),\n      y: Math.max(-maxY, Math.min(maxY, prev.y + (direction === 'down' ? 20 : direction === 'up' ? -20 : 0)))\n    }))\n  }, [scale])\n\n  const { handlers: swipeHandlers } = useSwipeGesture(handleSwipe, {\n    threshold: 20,\n    velocityThreshold: 0.1\n  })\n\n  // Double tap to zoom\n  const handleDoubleTap = useCallback(() => {\n    if (scale > 1) {\n      setScale(1)\n      setPosition({ x: 0, y: 0 })\n    } else {\n      setScale(2)\n    }\n    \n    // Haptic feedback\n    if ('vibrate' in navigator) {\n      navigator.vibrate(50)\n    }\n  }, [scale])\n\n  const combinedHandlers = {\n    onTouchStart: (e: React.TouchEvent) => {\n      pinchHandlers.onTouchStart(e)\n      if (e.touches.length === 1) {\n        swipeHandlers.onTouchStart(e)\n      }\n    },\n    onTouchMove: (e: React.TouchEvent) => {\n      pinchHandlers.onTouchMove(e)\n      if (e.touches.length === 1 && scale > 1) {\n        swipeHandlers.onTouchMove(e)\n      }\n    },\n    onTouchEnd: (e: React.TouchEvent) => {\n      pinchHandlers.onTouchEnd(e)\n      swipeHandlers.onTouchEnd(e)\n    },\n    onDoubleClick: handleDoubleTap\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\"overflow-hidden select-none\", className)}\n      {...combinedHandlers}\n    >\n      <img\n        src={src}\n        alt={alt}\n        className=\"w-full h-full object-contain transition-transform duration-200 ease-out\"\n        style={{\n          transform: `scale(${scale}) translate(${position.x}px, ${position.y}px)`,\n          transformOrigin: 'center center'\n        }}\n        draggable={false}\n      />\n    </div>\n  )\n}\n\n// Long Press Menu Component\ninterface LongPressMenuProps {\n  children: ReactNode\n  menuItems: Array<{\n    label: string\n    icon?: ReactNode\n    onClick: () => void\n    variant?: 'default' | 'destructive'\n  }>\n  className?: string\n}\n\nexport const LongPressMenu: React.FC<LongPressMenuProps> = ({\n  children,\n  menuItems,\n  className\n}) => {\n  const [showMenu, setShowMenu] = useState(false)\n  const [menuPosition, setMenuPosition] = useState({ x: 0, y: 0 })\n\n  const handleLongPress = useCallback((touch: Touch) => {\n    setMenuPosition({ x: touch.x, y: touch.y })\n    setShowMenu(true)\n  }, [])\n\n  const { handlers } = useLongPress(handleLongPress, {\n    delay: 500,\n    moveTolerance: 10\n  })\n\n  const handleMenuItemClick = useCallback((onClick: () => void) => {\n    onClick()\n    setShowMenu(false)\n  }, [])\n\n  useEffect(() => {\n    const handleClickOutside = () => setShowMenu(false)\n    \n    if (showMenu) {\n      document.addEventListener('touchstart', handleClickOutside)\n      document.addEventListener('click', handleClickOutside)\n      \n      return () => {\n        document.removeEventListener('touchstart', handleClickOutside)\n        document.removeEventListener('click', handleClickOutside)\n      }\n    }\n  }, [showMenu])\n\n  return (\n    <>\n      <div className={className} {...handlers}>\n        {children}\n      </div>\n\n      {showMenu && (\n        <div\n          className=\"fixed z-50 bg-white rounded-lg shadow-lg border border-gray-200 py-2 min-w-[150px]\"\n          style={{\n            left: Math.min(menuPosition.x, window.innerWidth - 150),\n            top: Math.min(menuPosition.y, window.innerHeight - menuItems.length * 40 - 20)\n          }}\n        >\n          {menuItems.map((item, index) => (\n            <button\n              key={index}\n              onClick={() => handleMenuItemClick(item.onClick)}\n              className={cn(\n                \"w-full px-4 py-2 text-left text-sm hover:bg-gray-50 flex items-center space-x-2\",\n                item.variant === 'destructive' && \"text-red-600 hover:bg-red-50\"\n              )}\n            >\n              {item.icon && <span className=\"w-4 h-4\">{item.icon}</span>}\n              <span>{item.label}</span>\n            </button>\n          ))}\n        </div>\n      )}\n    </>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/TouchOptimized.tsx",["2298"],[],"\"use client\"\n\nimport React, { useCallback, useRef, useState, useEffect } from 'react'\nimport { cn } from '@/lib/utils'\nimport { useMobileLayout } from '@/hooks/useMobileLayout'\n\n// Touch-optimized container with gesture support\ninterface TouchContainerProps {\n  children: React.ReactNode\n  className?: string\n  onSwipeLeft?: () => void\n  onSwipeRight?: () => void\n  onSwipeUp?: () => void\n  onSwipeDown?: () => void\n  onDoubleTap?: () => void\n  onLongPress?: () => void\n  hapticFeedback?: boolean\n  swipeThreshold?: number\n  longPressDelay?: number\n}\n\nexport const TouchContainer: React.FC<TouchContainerProps> = ({\n  children,\n  className,\n  onSwipeLeft,\n  onSwipeRight,\n  onSwipeUp,\n  onSwipeDown,\n  onDoubleTap,\n  onLongPress,\n  hapticFeedback = false,\n  swipeThreshold = 50,\n  longPressDelay = 500\n}) => {\n  const { isTouchDevice } = useMobileLayout()\n  const touchStart = useRef<{ x: number; y: number; time: number } | null>(null)\n  const lastTap = useRef<number>(0)\n  const longPressTimer = useRef<NodeJS.Timeout | null>(null)\n  const [isPressed, setIsPressed] = useState(false)\n\n  const triggerHaptic = useCallback((intensity: 'light' | 'medium' | 'heavy' = 'light') => {\n    if (hapticFeedback && 'vibrate' in navigator) {\n      const patterns = {\n        light: 10,\n        medium: 20,\n        heavy: [20, 10, 20]\n      }\n      navigator.vibrate(patterns[intensity])\n    }\n  }, [hapticFeedback])\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    const touch = e.touches[0]\n    touchStart.current = {\n      x: touch.clientX,\n      y: touch.clientY,\n      time: Date.now()\n    }\n    setIsPressed(true)\n\n    // Start long press timer\n    if (onLongPress) {\n      longPressTimer.current = setTimeout(() => {\n        triggerHaptic('medium')\n        onLongPress()\n        setIsPressed(false)\n      }, longPressDelay)\n    }\n  }, [onLongPress, longPressDelay, triggerHaptic])\n\n  const handleTouchEnd = useCallback((e: React.TouchEvent) => {\n    if (!touchStart.current) return\n\n    const touch = e.changedTouches[0]\n    const deltaX = touch.clientX - touchStart.current.x\n    const deltaY = touch.clientY - touchStart.current.y\n    const deltaTime = Date.now() - touchStart.current.time\n\n    setIsPressed(false)\n\n    // Clear long press timer\n    if (longPressTimer.current) {\n      clearTimeout(longPressTimer.current)\n      longPressTimer.current = null\n    }\n\n    // Check for double tap\n    if (onDoubleTap && deltaTime < 300 && Math.abs(deltaX) < 10 && Math.abs(deltaY) < 10) {\n      if (Date.now() - lastTap.current < 300) {\n        triggerHaptic('light')\n        onDoubleTap()\n        lastTap.current = 0\n        return\n      }\n      lastTap.current = Date.now()\n      return\n    }\n\n    // Check for swipe gestures\n    if (Math.abs(deltaX) > swipeThreshold || Math.abs(deltaY) > swipeThreshold) {\n      if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        // Horizontal swipe\n        if (deltaX > 0 && onSwipeRight) {\n          triggerHaptic('light')\n          onSwipeRight()\n        } else if (deltaX < 0 && onSwipeLeft) {\n          triggerHaptic('light')\n          onSwipeLeft()\n        }\n      } else {\n        // Vertical swipe\n        if (deltaY > 0 && onSwipeDown) {\n          triggerHaptic('light')\n          onSwipeDown()\n        } else if (deltaY < 0 && onSwipeUp) {\n          triggerHaptic('light')\n          onSwipeUp()\n        }\n      }\n    }\n\n    touchStart.current = null\n  }, [onSwipeLeft, onSwipeRight, onSwipeUp, onSwipeDown, onDoubleTap, swipeThreshold, triggerHaptic])\n\n  const handleTouchCancel = useCallback(() => {\n    setIsPressed(false)\n    if (longPressTimer.current) {\n      clearTimeout(longPressTimer.current)\n      longPressTimer.current = null\n    }\n    touchStart.current = null\n  }, [])\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (longPressTimer.current) {\n        clearTimeout(longPressTimer.current)\n      }\n    }\n  }, [])\n\n  if (!isTouchDevice) {\n    return <div className={className}>{children}</div>\n  }\n\n  return (\n    <div\n      className={cn(\n        \"touch-manipulation select-none\",\n        isPressed && \"transition-transform duration-75 scale-[0.98]\",\n        className\n      )}\n      onTouchStart={handleTouchStart}\n      onTouchEnd={handleTouchEnd}\n      onTouchCancel={handleTouchCancel}\n    >\n      {children}\n    </div>\n  )\n}\n\n// Touch-optimized card with swipe gestures\ninterface SwipeableCardProps {\n  children: React.ReactNode\n  className?: string\n  onSwipeLeft?: () => void\n  onSwipeRight?: () => void\n  leftAction?: {\n    icon: React.ReactNode\n    color: string\n    label: string\n  }\n  rightAction?: {\n    icon: React.ReactNode\n    color: string\n    label: string\n  }\n  disabled?: boolean\n}\n\nexport const SwipeableCard: React.FC<SwipeableCardProps> = ({\n  children,\n  className,\n  onSwipeLeft,\n  onSwipeRight,\n  leftAction,\n  rightAction,\n  disabled = false\n}) => {\n  const [swipeOffset, setSwipeOffset] = useState(0)\n  const [isSwiming, setIsSwiming] = useState(false)\n  const touchStart = useRef<{ x: number; time: number } | null>(null)\n  const cardRef = useRef<HTMLDivElement>(null)\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (disabled) return\n    \n    const touch = e.touches[0]\n    touchStart.current = {\n      x: touch.clientX,\n      time: Date.now()\n    }\n    setIsSwiming(true)\n  }, [disabled])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!touchStart.current || disabled) return\n\n    const touch = e.touches[0]\n    const deltaX = touch.clientX - touchStart.current.x\n    \n    // Limit swipe range\n    const maxSwipe = 100\n    const clampedDelta = Math.max(-maxSwipe, Math.min(maxSwipe, deltaX))\n    setSwipeOffset(clampedDelta)\n  }, [disabled])\n\n  const handleTouchEnd = useCallback(() => {\n    if (!touchStart.current || disabled) return\n\n    const threshold = 60\n    \n    if (swipeOffset > threshold && onSwipeRight) {\n      onSwipeRight()\n    } else if (swipeOffset < -threshold && onSwipeLeft) {\n      onSwipeLeft()\n    }\n    \n    // Reset state\n    setSwipeOffset(0)\n    setIsSwiming(false)\n    touchStart.current = null\n  }, [swipeOffset, onSwipeLeft, onSwipeRight, disabled])\n\n  return (\n    <div className=\"relative overflow-hidden rounded-lg\">\n      {/* Background actions */}\n      {(leftAction || rightAction) && (\n        <div className=\"absolute inset-0 flex\">\n          {rightAction && (\n            <div className={cn(\n              \"flex-1 flex items-center justify-start pl-4\",\n              rightAction.color\n            )}>\n              <div className=\"flex items-center space-x-2\">\n                {rightAction.icon}\n                <span className=\"text-sm font-medium\">{rightAction.label}</span>\n              </div>\n            </div>\n          )}\n          {leftAction && (\n            <div className={cn(\n              \"flex-1 flex items-center justify-end pr-4\",\n              leftAction.color\n            )}>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium\">{leftAction.label}</span>\n                {leftAction.icon}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Main card content */}\n      <div\n        ref={cardRef}\n        className={cn(\n          \"relative bg-white transition-transform duration-200\",\n          isSwiming ? \"transition-none\" : \"\",\n          className\n        )}\n        style={{\n          transform: `translateX(${swipeOffset}px)`\n        }}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        onTouchCancel={handleTouchEnd}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\n// Pull-to-refresh component\ninterface PullToRefreshProps {\n  children: React.ReactNode\n  onRefresh: () => Promise<void>\n  refreshThreshold?: number\n  className?: string\n}\n\nexport const PullToRefresh: React.FC<PullToRefreshProps> = ({\n  children,\n  onRefresh,\n  refreshThreshold = 100,\n  className\n}) => {\n  const [pullDistance, setPullDistance] = useState(0)\n  const [isRefreshing, setIsRefreshing] = useState(false)\n  const [canRefresh, setCanRefresh] = useState(false)\n  const touchStart = useRef<number>(0)\n  const scrollContainer = useRef<HTMLDivElement>(null)\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    if (!scrollContainer.current || scrollContainer.current.scrollTop > 0) return\n    touchStart.current = e.touches[0].clientY\n  }, [])\n\n  const handleTouchMove = useCallback((e: React.TouchEvent) => {\n    if (!scrollContainer.current || scrollContainer.current.scrollTop > 0 || isRefreshing) return\n    \n    const currentY = e.touches[0].clientY\n    const deltaY = currentY - touchStart.current\n    \n    if (deltaY > 0) {\n      e.preventDefault()\n      const distance = Math.min(deltaY * 0.5, refreshThreshold * 1.5)\n      setPullDistance(distance)\n      setCanRefresh(distance >= refreshThreshold)\n    }\n  }, [refreshThreshold, isRefreshing])\n\n  const handleTouchEnd = useCallback(async () => {\n    if (canRefresh && !isRefreshing) {\n      setIsRefreshing(true)\n      \n      if ('vibrate' in navigator) {\n        navigator.vibrate(20)\n      }\n      \n      try {\n        await onRefresh()\n      } finally {\n        setIsRefreshing(false)\n      }\n    }\n    \n    setPullDistance(0)\n    setCanRefresh(false)\n    touchStart.current = 0\n  }, [canRefresh, isRefreshing, onRefresh])\n\n  const refreshProgress = Math.min(pullDistance / refreshThreshold, 1)\n  const showRefreshIndicator = pullDistance > 20\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      {/* Refresh indicator */}\n      {showRefreshIndicator && (\n        <div \n          className=\"absolute top-0 left-0 right-0 flex items-center justify-center bg-primary/10 transition-all duration-200 z-10\"\n          style={{ \n            height: `${Math.min(pullDistance, refreshThreshold)}px`,\n            transform: `translateY(-${Math.max(0, refreshThreshold - pullDistance)}px)`\n          }}\n        >\n          <div className=\"flex items-center space-x-2 text-primary\">\n            <div \n              className={cn(\n                \"w-6 h-6 border-2 border-primary/30 border-t-primary rounded-full transition-transform duration-200\",\n                isRefreshing ? \"animate-spin\" : \"\",\n                canRefresh && !isRefreshing ? \"rotate-180\" : \"\"\n              )}\n              style={{\n                transform: `rotate(${refreshProgress * 180}deg)`\n              }}\n            />\n            <span className=\"text-sm font-medium\">\n              {isRefreshing ? \"Refreshing...\" : canRefresh ? \"Release to refresh\" : \"Pull to refresh\"}\n            </span>\n          </div>\n        </div>\n      )}\n\n      {/* Content */}\n      <div\n        ref={scrollContainer}\n        className=\"relative overflow-auto\"\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        style={{\n          transform: `translateY(${isRefreshing ? refreshThreshold : pullDistance}px)`,\n          transition: isRefreshing || pullDistance === 0 ? 'transform 0.3s ease-out' : 'none'\n        }}\n      >\n        {children}\n      </div>\n    </div>\n  )\n}\n\n// Touch-optimized input with better mobile UX\ninterface TouchInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label?: string\n  error?: string\n  helpText?: string\n  icon?: React.ReactNode\n  clearable?: boolean\n  onClear?: () => void\n}\n\nexport const TouchInput: React.FC<TouchInputProps> = ({\n  label,\n  error,\n  helpText,\n  icon,\n  clearable = false,\n  onClear,\n  className,\n  value,\n  onChange,\n  ...props\n}) => {\n  const [isFocused, setIsFocused] = useState(false)\n  const inputRef = useRef<HTMLInputElement>(null)\n\n  const handleClear = useCallback(() => {\n    if (onClear) {\n      onClear()\n    } else if (onChange) {\n      onChange({ target: { value: '' } } as React.ChangeEvent<HTMLInputElement>)\n    }\n    \n    if (inputRef.current) {\n      inputRef.current.focus()\n    }\n    \n    if ('vibrate' in navigator) {\n      navigator.vibrate(10)\n    }\n  }, [onClear, onChange])\n\n  return (\n    <div className=\"space-y-2\">\n      {label && (\n        <label className=\"block text-sm font-medium text-gray-700\">\n          {label}\n        </label>\n      )}\n      \n      <div className=\"relative\">\n        {icon && (\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n            {icon}\n          </div>\n        )}\n        \n        <input\n          ref={inputRef}\n          value={value}\n          onChange={onChange}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          className={cn(\n            // Base styles\n            \"w-full px-3 py-3 text-mobile-optimized border border-gray-300 rounded-lg\",\n            \"bg-white text-gray-900 placeholder-gray-500\",\n            \"transition-all duration-200\",\n            // Focus styles\n            \"focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary\",\n            // Touch optimization\n            \"touch-manipulation min-h-touch-target\",\n            // Icon spacing\n            icon && \"pl-10\",\n            clearable && value && \"pr-10\",\n            // Error styles\n            error && \"border-red-500 focus:border-red-500 focus:ring-red-500/20\",\n            // Custom styles\n            className\n          )}\n          {...props}\n        />\n        \n        {clearable && value && (\n          <button\n            type=\"button\"\n            onClick={handleClear}\n            className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 touch-manipulation\"\n            aria-label=\"Clear input\"\n          >\n            <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        )}\n      </div>\n      \n      {error && (\n        <p className=\"text-sm text-red-600\">{error}</p>\n      )}\n      \n      {helpText && !error && (\n        <p className=\"text-sm text-gray-500\">{helpText}</p>\n      )}\n    </div>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/VirtualScrollList.tsx",["2299"],[],"\"use client\"\n\nimport React, { useState, useEffect, useRef, useCallback, useMemo } from 'react'\nimport { cn } from '@/lib/utils'\n\ninterface VirtualScrollListProps<T> {\n  items: T[]\n  itemHeight: number\n  containerHeight: number\n  renderItem: (item: T, index: number) => React.ReactNode\n  keyExtractor: (item: T, index: number) => string | number\n  className?: string\n  onEndReached?: () => void\n  onEndReachedThreshold?: number\n  loading?: boolean\n  loadingComponent?: React.ReactNode\n  overscan?: number\n  emptyComponent?: React.ReactNode\n}\n\ninterface VisibleRange {\n  start: number\n  end: number\n}\n\nexport function VirtualScrollList<T>({\n  items,\n  itemHeight,\n  containerHeight,\n  renderItem,\n  keyExtractor,\n  className,\n  onEndReached,\n  onEndReachedThreshold = 0.8,\n  loading = false,\n  loadingComponent,\n  overscan = 5,\n  emptyComponent\n}: VirtualScrollListProps<T>) {\n  const [scrollTop, setScrollTop] = useState(0)\n  const [isScrolling, setIsScrolling] = useState(false)\n  const scrollElementRef = useRef<HTMLDivElement>(null)\n  const scrollTimeoutRef = useRef<NodeJS.Timeout>()\n\n  // Calculate visible range\n  const visibleRange = useMemo((): VisibleRange => {\n    const itemCount = items.length\n    if (itemCount === 0) {\n      return { start: 0, end: 0 }\n    }\n\n    const visibleStart = Math.floor(scrollTop / itemHeight)\n    const visibleEnd = Math.min(\n      visibleStart + Math.ceil(containerHeight / itemHeight),\n      itemCount\n    )\n\n    // Add overscan\n    const start = Math.max(0, visibleStart - overscan)\n    const end = Math.min(itemCount, visibleEnd + overscan)\n\n    return { start, end }\n  }, [scrollTop, itemHeight, containerHeight, items.length, overscan])\n\n  // Get visible items\n  const visibleItems = useMemo(() => {\n    return items.slice(visibleRange.start, visibleRange.end)\n  }, [items, visibleRange])\n\n  // Handle scroll events\n  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    setScrollTop(scrollTop)\n    setIsScrolling(true)\n\n    // Clear existing timeout\n    if (scrollTimeoutRef.current) {\n      clearTimeout(scrollTimeoutRef.current)\n    }\n\n    // Set new timeout to detect scroll end\n    scrollTimeoutRef.current = setTimeout(() => {\n      setIsScrolling(false)\n    }, 150)\n\n    // Check if we've reached the end\n    if (onEndReached && !loading) {\n      const scrollElement = event.currentTarget\n      const scrollPercentage = \n        (scrollTop + scrollElement.clientHeight) / scrollElement.scrollHeight\n\n      if (scrollPercentage >= onEndReachedThreshold) {\n        onEndReached()\n      }\n    }\n  }, [onEndReached, onEndReachedThreshold, loading])\n\n  // Scroll to specific item\n  const scrollToItem = useCallback((index: number, align: 'start' | 'center' | 'end' = 'start') => {\n    if (!scrollElementRef.current) return\n\n    let targetScrollTop: number\n\n    switch (align) {\n      case 'center':\n        targetScrollTop = (index * itemHeight) - (containerHeight / 2) + (itemHeight / 2)\n        break\n      case 'end':\n        targetScrollTop = (index * itemHeight) - containerHeight + itemHeight\n        break\n      case 'start':\n      default:\n        targetScrollTop = index * itemHeight\n        break\n    }\n\n    // Clamp to valid range\n    const maxScrollTop = (items.length * itemHeight) - containerHeight\n    targetScrollTop = Math.max(0, Math.min(targetScrollTop, maxScrollTop))\n\n    scrollElementRef.current.scrollTo({\n      top: targetScrollTop,\n      behavior: 'smooth'\n    })\n  }, [itemHeight, containerHeight, items.length])\n\n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (scrollTimeoutRef.current) {\n        clearTimeout(scrollTimeoutRef.current)\n      }\n    }\n  }, [])\n\n  // Calculate total height and offset\n  const totalHeight = items.length * itemHeight\n  const offsetY = visibleRange.start * itemHeight\n\n  // Handle empty state\n  if (items.length === 0 && !loading) {\n    return (\n      <div \n        className={cn(\"flex items-center justify-center\", className)}\n        style={{ height: containerHeight }}\n      >\n        {emptyComponent || (\n          <div className=\"text-center text-muted-foreground\">\n            <p>No items to display</p>\n          </div>\n        )}\n      </div>\n    )\n  }\n\n  return (\n    <div\n      ref={scrollElementRef}\n      className={cn(\n        \"overflow-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\",\n        \"touch-manipulation overscroll-behavior-contain\",\n        className\n      )}\n      style={{ height: containerHeight }}\n      onScroll={handleScroll}\n    >\n      {/* Total height spacer */}\n      <div style={{ height: totalHeight, position: 'relative' }}>\n        {/* Visible items container */}\n        <div\n          style={{\n            transform: `translateY(${offsetY}px)`,\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            right: 0,\n          }}\n        >\n          {visibleItems.map((item, relativeIndex) => {\n            const absoluteIndex = visibleRange.start + relativeIndex\n            const key = keyExtractor(item, absoluteIndex)\n            \n            return (\n              <div\n                key={key}\n                style={{ height: itemHeight }}\n                className={cn(\n                  \"flex-shrink-0\",\n                  isScrolling && \"pointer-events-none\" // Disable interactions while scrolling\n                )}\n              >\n                {renderItem(item, absoluteIndex)}\n              </div>\n            )\n          })}\n        </div>\n\n        {/* Loading indicator */}\n        {loading && (\n          <div \n            className=\"absolute inset-x-0 bottom-0 flex items-center justify-center p-4\"\n            style={{ transform: `translateY(${totalHeight}px)` }}\n          >\n            {loadingComponent || (\n              <div className=\"flex items-center space-x-2 text-muted-foreground\">\n                <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                <span>Loading more...</span>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\n// Hook for managing virtual list state\nexport const useVirtualList = <T,>(\n  items: T[],\n  dependencies: React.DependencyList = []\n) => {\n  const [loading, setLoading] = useState(false)\n  const [hasMore, setHasMore] = useState(true)\n\n  const loadMore = useCallback(() => {\n    if (loading || !hasMore) return\n\n    setLoading(true)\n    // Implement your load more logic here\n    // This is typically an async operation\n    \n    // Example:\n    setTimeout(() => {\n      setLoading(false)\n      // Update hasMore based on your logic\n    }, 1000)\n  }, [loading, hasMore])\n\n  const scrollToTop = useCallback(() => {\n    // This would be implemented by the parent component\n    // by passing a ref and calling scrollToItem(0)\n  }, [])\n\n  const refresh = useCallback(() => {\n    setLoading(true)\n    setHasMore(true)\n    // Implement refresh logic\n    setTimeout(() => {\n      setLoading(false)\n    }, 1000)\n  }, dependencies)\n\n  return {\n    loading,\n    hasMore,\n    loadMore,\n    scrollToTop,\n    refresh\n  }\n}\n\n// Performance optimized list item wrapper\nexport const VirtualListItem = React.memo(({\n  children,\n  className,\n  onClick\n}: {\n  children: React.ReactNode\n  className?: string\n  onClick?: () => void\n}) => {\n  return (\n    <div \n      className={cn(\n        \"w-full touch-manipulation select-none\",\n        onClick && \"cursor-pointer active:scale-[0.98] transition-transform duration-150\",\n        className\n      )}\n      onClick={onClick}\n    >\n      {children}\n    </div>\n  )\n})\n\nVirtualListItem.displayName = \"VirtualListItem\"\n\nexport default VirtualScrollList","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/advanced-mobile-experience.tsx",["2300","2301","2302","2303"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { motion, AnimatePresence, PanInfo, useDragControls } from \"framer-motion\"\nimport { \n  Home, \n  Search, \n  ShoppingCart, \n  User, \n  Plus, \n  Minus, \n  Heart,\n  CreditCard,\n  MapPin,\n  Clock,\n  CheckCircle,\n  XCircle,\n  Star,\n  Truck,\n  Wifi,\n  WifiOff,\n  MoreHorizontal,\n  ArrowLeft,\n  Filter,\n  Bell,\n  Settings,\n  LogOut,\n  Eye,\n  EyeOff,\n  Shield,\n  Smartphone,\n  Camera,\n  Share2\n} from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\nimport { formatCurrency, formatTime } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\"\nimport { Progress } from \"@/components/ui/progress\"\nimport { Switch } from \"@/components/ui/switch\"\nimport { Input } from \"@/components/ui/input\"\nimport { useToast } from \"@/hooks/use-toast\"\n\n// Types and Interfaces\ninterface MealItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  image: string\n  category: string\n  rating: number\n  nutritionScore: 'A' | 'B' | 'C' | 'D' | 'E'\n  allergens: string[]\n  isVegetarian: boolean\n  isVegan: boolean\n  isGlutenFree: boolean\n  preparationTime: number\n  availability: number\n  isPopular: boolean\n}\n\ninterface CartItem extends MealItem {\n  quantity: number\n  customizations?: string[]\n}\n\ninterface Order {\n  id: string\n  items: CartItem[]\n  status: 'pending' | 'preparing' | 'ready' | 'delivered' | 'cancelled'\n  orderTime: Date\n  estimatedDelivery: Date\n  total: number\n  pickupLocation: string\n  studentInfo: {\n    name: string\n    class: string\n    rollNumber: string\n  }\n}\n\ninterface UserProfile {\n  id: string\n  name: string\n  email: string\n  phone: string\n  avatar: string\n  class: string\n  rollNumber: string\n  parentName: string\n  parentPhone: string\n  dietaryPreferences: string[]\n  allergens: string[]\n  balance: number\n  monthlyLimit: number\n  monthlySpent: number\n}\n\n// Mock Data\nconst mockMeals: MealItem[] = [\n  {\n    id: \"1\",\n    name: \"Rajma Chawal\",\n    description: \"Traditional red kidney beans curry with steamed basmati rice\",\n    price: 85,\n    image: \"/api/placeholder/300/200\",\n    category: \"Main Course\",\n    rating: 4.5,\n    nutritionScore: 'A',\n    allergens: [\"gluten\"],\n    isVegetarian: true,\n    isVegan: false,\n    isGlutenFree: false,\n    preparationTime: 15,\n    availability: 25,\n    isPopular: true\n  },\n  {\n    id: \"2\",\n    name: \"Paneer Butter Masala\",\n    description: \"Creamy tomato-based curry with cottage cheese and naan\",\n    price: 120,\n    image: \"/api/placeholder/300/200\",\n    category: \"Main Course\",\n    rating: 4.7,\n    nutritionScore: 'B',\n    allergens: [\"dairy\", \"gluten\"],\n    isVegetarian: true,\n    isVegan: false,\n    isGlutenFree: false,\n    preparationTime: 20,\n    availability: 18,\n    isPopular: true\n  },\n  {\n    id: \"3\",\n    name: \"Masala Dosa\",\n    description: \"Crispy fermented crepe with spiced potato filling and chutneys\",\n    price: 75,\n    image: \"/api/placeholder/300/200\",\n    category: \"South Indian\",\n    rating: 4.3,\n    nutritionScore: 'A',\n    allergens: [],\n    isVegetarian: true,\n    isVegan: true,\n    isGlutenFree: true,\n    preparationTime: 12,\n    availability: 30,\n    isPopular: false\n  }\n]\n\nconst mockUser: UserProfile = {\n  id: \"user-1\",\n  name: \"Arjun Sharma\",\n  email: \"arjun.sharma@student.school.edu\",\n  phone: \"+91 98765 43210\",\n  avatar: \"/api/placeholder/100/100\",\n  class: \"Class 10-A\",\n  rollNumber: \"2024001\",\n  parentName: \"Rajesh Sharma\",\n  parentPhone: \"+91 98765 43211\",\n  dietaryPreferences: [\"vegetarian\"],\n  allergens: [\"nuts\"],\n  balance: 2500,\n  monthlyLimit: 5000,\n  monthlySpent: 2100\n}\n\n// Utility Functions\nconst generateHapticFeedback = (type: 'light' | 'medium' | 'heavy' = 'light') => {\n  if ('vibrate' in navigator) {\n    const patterns = {\n      light: [10],\n      medium: [15],\n      heavy: [25]\n    }\n    navigator.vibrate(patterns[type])\n  }\n}\n\nconst useOnlineStatus = () => {\n  const [isOnline, setIsOnline] = React.useState(typeof navigator !== 'undefined' ? navigator.onLine : true)\n  \n  React.useEffect(() => {\n    const handleOnline = () => setIsOnline(true)\n    const handleOffline = () => setIsOnline(false)\n    \n    window.addEventListener('online', handleOnline)\n    window.addEventListener('offline', handleOffline)\n    \n    return () => {\n      window.removeEventListener('online', handleOnline)\n      window.removeEventListener('offline', handleOffline)\n    }\n  }, [])\n  \n  return isOnline\n}\n\n// Gesture Components\ninterface SwipeableCardProps {\n  children: React.ReactNode\n  onSwipeLeft?: () => void\n  onSwipeRight?: () => void\n  className?: string\n}\n\nconst SwipeableCard: React.FC<SwipeableCardProps> = ({ \n  children, \n  onSwipeLeft, \n  onSwipeRight, \n  className \n}) => {\n  const dragControls = useDragControls()\n  \n  return (\n    <motion.div\n      drag=\"x\"\n      dragConstraints={{ left: 0, right: 0 }}\n      dragElastic={0.2}\n      onDragEnd={(_, info: PanInfo) => {\n        if (info.offset.x > 100 && onSwipeRight) {\n          generateHapticFeedback('medium')\n          onSwipeRight()\n        } else if (info.offset.x < -100 && onSwipeLeft) {\n          generateHapticFeedback('medium')\n          onSwipeLeft()\n        }\n      }}\n      className={cn(\"cursor-grab active:cursor-grabbing\", className)}\n      whileTap={{ scale: 0.95 }}\n    >\n      {children}\n    </motion.div>\n  )\n}\n\n// Navigation Components\ninterface BottomNavigationProps {\n  activeTab: string\n  onTabChange: (tab: string) => void\n  cartItemCount: number\n}\n\nconst BottomNavigation: React.FC<BottomNavigationProps> = ({ \n  activeTab, \n  onTabChange, \n  cartItemCount \n}) => {\n  const tabs = [\n    { id: 'home', icon: Home, label: 'Home' },\n    { id: 'search', icon: Search, label: 'Search' },\n    { id: 'cart', icon: ShoppingCart, label: 'Cart', badge: cartItemCount },\n    { id: 'profile', icon: User, label: 'Profile' },\n  ]\n  \n  return (\n    <motion.nav \n      className=\"fixed bottom-0 left-0 right-0 bg-background border-t border-border z-50 safe-area-bottom\"\n      initial={{ y: 100 }}\n      animate={{ y: 0 }}\n      transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n    >\n      <div className=\"flex items-center justify-around px-2 py-1\">\n        {tabs.map((tab) => {\n          const Icon = tab.icon\n          const isActive = activeTab === tab.id\n          \n          return (\n            <Button\n              key={tab.id}\n              variant=\"ghost\"\n              size=\"touch\"\n              className={cn(\n                \"flex flex-col items-center gap-1 h-14 px-3 relative\",\n                isActive && \"text-primary\"\n              )}\n              onClick={() => {\n                generateHapticFeedback('light')\n                onTabChange(tab.id)\n              }}\n              aria-label={tab.label}\n            >\n              <div className=\"relative\">\n                <Icon className=\"h-5 w-5\" />\n                {tab.badge && tab.badge > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 text-xs flex items-center justify-center\"\n                  >\n                    {tab.badge > 99 ? '99+' : tab.badge}\n                  </Badge>\n                )}\n              </div>\n              <span className=\"text-xs\">{tab.label}</span>\n              \n              {/* Active indicator */}\n              {isActive && (\n                <motion.div\n                  className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-primary rounded-full\"\n                  layoutId=\"activeTab\"\n                  transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n                />\n              )}\n            </Button>\n          )\n        })}\n      </div>\n    </motion.nav>\n  )\n}\n\n// Meal Components\ninterface MealCardProps {\n  meal: MealItem\n  onAddToCart: (meal: MealItem) => void\n  onToggleFavorite: (mealId: string) => void\n  isFavorite: boolean\n}\n\nconst MealCard: React.FC<MealCardProps> = ({ \n  meal, \n  onAddToCart, \n  onToggleFavorite, \n  isFavorite \n}) => {\n  const [isAdding, setIsAdding] = React.useState(false)\n  \n  const handleAddToCart = async () => {\n    setIsAdding(true)\n    generateHapticFeedback('medium')\n    \n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 500))\n    \n    onAddToCart(meal)\n    setIsAdding(false)\n  }\n  \n  const nutritionColors = {\n    A: 'bg-green-500',\n    B: 'bg-lime-500', \n    C: 'bg-yellow-500',\n    D: 'bg-orange-500',\n    E: 'bg-red-500'\n  }\n  \n  return (\n    <SwipeableCard\n      onSwipeLeft={() => onToggleFavorite(meal.id)}\n      onSwipeRight={() => handleAddToCart()}\n      className=\"mb-4\"\n    >\n      <motion.div \n        className=\"bg-card rounded-lg border border-border overflow-hidden shadow-sm\"\n        whileHover={{ scale: 1.02 }}\n        transition={{ type: \"spring\", stiffness: 300, damping: 20 }}\n      >\n        {/* Image and badges */}\n        <div className=\"relative\">\n          <img \n            src={meal.image} \n            alt={meal.name}\n            className=\"w-full h-32 object-cover\"\n            loading=\"lazy\"\n          />\n          \n          {/* Badges overlay */}\n          <div className=\"absolute top-2 left-2 flex flex-wrap gap-1\">\n            {meal.isPopular && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                Popular\n              </Badge>\n            )}\n            <Badge \n              className={cn(\"text-xs text-white\", nutritionColors[meal.nutritionScore])}\n            >\n              Nutri-Score {meal.nutritionScore}\n            </Badge>\n          </div>\n          \n          {/* Favorite button */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"absolute top-2 right-2 bg-white/80 backdrop-blur-sm\"\n            onClick={() => onToggleFavorite(meal.id)}\n          >\n            <Heart \n              className={cn(\"h-4 w-4\", isFavorite && \"fill-red-500 text-red-500\")} \n            />\n          </Button>\n          \n          {/* Availability indicator */}\n          <div className=\"absolute bottom-2 right-2 bg-black/50 text-white px-2 py-1 rounded text-xs\">\n            {meal.availability} left\n          </div>\n        </div>\n        \n        {/* Content */}\n        <div className=\"p-4\">\n          <div className=\"flex items-start justify-between mb-2\">\n            <div className=\"flex-1\">\n              <h3 className=\"font-semibold text-base mb-1\">{meal.name}</h3>\n              <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                {meal.description}\n              </p>\n            </div>\n          </div>\n          \n          {/* Rating and timing */}\n          <div className=\"flex items-center gap-4 mb-3 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n              <span>{meal.rating}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-4 w-4\" />\n              <span>{meal.preparationTime}m</span>\n            </div>\n          </div>\n          \n          {/* Dietary indicators */}\n          <div className=\"flex items-center gap-2 mb-3\">\n            {meal.isVegetarian && (\n              <div className=\"w-3 h-3 border-2 border-green-600 rounded-sm bg-green-100 flex items-center justify-center\">\n                <div className=\"w-1 h-1 bg-green-600 rounded-full\" />\n              </div>\n            )}\n            {meal.isVegan && (\n              <Badge variant=\"outline\" className=\"text-xs\">Vegan</Badge>\n            )}\n            {meal.isGlutenFree && (\n              <Badge variant=\"outline\" className=\"text-xs\">Gluten-Free</Badge>\n            )}\n          </div>\n          \n          {/* Price and add to cart */}\n          <div className=\"flex items-center justify-between\">\n            <span className=\"text-lg font-bold\">{formatCurrency(meal.price)}</span>\n            <Button\n              onClick={handleAddToCart}\n              disabled={isAdding || meal.availability === 0}\n              className=\"min-w-[100px]\"\n              haptic\n            >\n              {isAdding ? (\n                <motion.div\n                  className=\"h-4 w-4 border-2 border-current border-t-transparent rounded-full animate-spin\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                />\n              ) : meal.availability === 0 ? (\n                'Sold Out'\n              ) : (\n                'Add to Cart'\n              )}\n            </Button>\n          </div>\n        </div>\n      </motion.div>\n    </SwipeableCard>\n  )\n}\n\n// Cart Components\ninterface CartItemCardProps {\n  item: CartItem\n  onUpdateQuantity: (itemId: string, quantity: number) => void\n  onRemove: (itemId: string) => void\n}\n\nconst CartItemCard: React.FC<CartItemCardProps> = ({ \n  item, \n  onUpdateQuantity, \n  onRemove \n}) => {\n  return (\n    <SwipeableCard\n      onSwipeLeft={() => onRemove(item.id)}\n      className=\"mb-3\"\n    >\n      <motion.div \n        className=\"bg-card rounded-lg border border-border p-4\"\n        layout\n        transition={{ type: \"spring\", stiffness: 300, damping: 25 }}\n      >\n        <div className=\"flex gap-3\">\n          <img \n            src={item.image} \n            alt={item.name}\n            className=\"w-16 h-16 object-cover rounded-md flex-shrink-0\"\n          />\n          \n          <div className=\"flex-1 min-w-0\">\n            <h4 className=\"font-medium text-sm mb-1 truncate\">{item.name}</h4>\n            <p className=\"text-xs text-muted-foreground mb-2\">\n              {formatCurrency(item.price)} each\n            </p>\n            \n            {/* Quantity controls */}\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => onUpdateQuantity(item.id, Math.max(0, item.quantity - 1))}\n                  disabled={item.quantity <= 1}\n                  haptic\n                >\n                  <Minus className=\"h-3 w-3\" />\n                </Button>\n                \n                <span className=\"w-8 text-center font-medium\">{item.quantity}</span>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => onUpdateQuantity(item.id, item.quantity + 1)}\n                  disabled={item.quantity >= item.availability}\n                  haptic\n                >\n                  <Plus className=\"h-3 w-3\" />\n                </Button>\n              </div>\n              \n              <span className=\"font-semibold\">\n                {formatCurrency(item.price * item.quantity)}\n              </span>\n            </div>\n          </div>\n        </div>\n      </motion.div>\n    </SwipeableCard>\n  )\n}\n\n// Payment Components\ninterface PaymentMethodProps {\n  selectedMethod: string\n  onMethodChange: (method: string) => void\n  balance: number\n}\n\nconst PaymentMethod: React.FC<PaymentMethodProps> = ({ \n  selectedMethod, \n  onMethodChange, \n  balance \n}) => {\n  const [showBalance, setShowBalance] = React.useState(false)\n  const [useFingerprint, setUseFingerprint] = React.useState(false)\n  \n  const methods = [\n    {\n      id: 'wallet',\n      name: 'School Wallet',\n      description: `Balance: ${showBalance ? formatCurrency(balance) : '••••••'}`,\n      icon: CreditCard,\n      available: balance > 0\n    },\n    {\n      id: 'upi',\n      name: 'UPI Payment',\n      description: 'Pay via PhonePe, GPay, Paytm',\n      icon: Smartphone,\n      available: true\n    },\n    {\n      id: 'card',\n      name: 'Debit/Credit Card',\n      description: 'Secure card payment',\n      icon: CreditCard,\n      available: true\n    }\n  ]\n  \n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-semibold\">Payment Method</h3>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setShowBalance(!showBalance)}\n          className=\"flex items-center gap-2\"\n        >\n          {showBalance ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n          {showBalance ? 'Hide' : 'Show'} Balance\n        </Button>\n      </div>\n      \n      {methods.map((method) => {\n        const Icon = method.icon\n        const isSelected = selectedMethod === method.id\n        \n        return (\n          <motion.div\n            key={method.id}\n            className={cn(\n              \"p-4 rounded-lg border border-border cursor-pointer transition-all\",\n              isSelected && \"border-primary bg-primary/5\",\n              !method.available && \"opacity-50 cursor-not-allowed\"\n            )}\n            onClick={() => method.available && onMethodChange(method.id)}\n            whileTap={{ scale: 0.98 }}\n          >\n            <div className=\"flex items-center gap-3\">\n              <Icon className=\"h-5 w-5\" />\n              <div className=\"flex-1\">\n                <div className=\"font-medium\">{method.name}</div>\n                <div className=\"text-sm text-muted-foreground\">{method.description}</div>\n              </div>\n              {isSelected && (\n                <CheckCircle className=\"h-5 w-5 text-primary\" />\n              )}\n            </div>\n          </motion.div>\n        )\n      })}\n      \n      {/* Security options */}\n      <div className=\"mt-6 space-y-3\">\n        <div className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n          <div className=\"flex items-center gap-3\">\n            <Shield className=\"h-5 w-5 text-primary\" />\n            <div>\n              <div className=\"font-medium text-sm\">Biometric Authentication</div>\n              <div className=\"text-xs text-muted-foreground\">\n                Use fingerprint for secure payments\n              </div>\n            </div>\n          </div>\n          <Switch\n            checked={useFingerprint}\n            onCheckedChange={setUseFingerprint}\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Order Tracking Components\ninterface OrderTrackingProps {\n  order: Order\n  onCancelOrder?: (orderId: string) => void\n}\n\nconst OrderTracking: React.FC<OrderTrackingProps> = ({ order, onCancelOrder }) => {\n  const statusSteps = [\n    { id: 'pending', label: 'Order Placed', icon: CheckCircle },\n    { id: 'preparing', label: 'Preparing', icon: Clock },\n    { id: 'ready', label: 'Ready for Pickup', icon: Bell },\n    { id: 'delivered', label: 'Delivered', icon: Truck },\n  ]\n  \n  const currentStepIndex = statusSteps.findIndex(step => step.id === order.status)\n  const canCancel = order.status === 'pending'\n  \n  return (\n    <motion.div \n      className=\"bg-card rounded-lg border border-border p-4 mb-4\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: 0.1 }}\n    >\n      <div className=\"flex items-center justify-between mb-4\">\n        <div>\n          <h3 className=\"font-semibold\">Order #{order.id.slice(-6).toUpperCase()}</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Placed at {formatTime(order.orderTime)}\n          </p>\n        </div>\n        <Badge \n          variant={order.status === 'delivered' ? 'default' : 'secondary'}\n          className=\"capitalize\"\n        >\n          {order.status}\n        </Badge>\n      </div>\n      \n      {/* Progress steps */}\n      <div className=\"space-y-3 mb-4\">\n        {statusSteps.map((step, index) => {\n          const Icon = step.icon\n          const isCompleted = index <= currentStepIndex\n          const isCurrent = index === currentStepIndex\n          \n          return (\n            <div key={step.id} className=\"flex items-center gap-3\">\n              <div className={cn(\n                \"w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all\",\n                isCompleted \n                  ? \"border-primary bg-primary text-primary-foreground\" \n                  : \"border-muted-foreground/30\"\n              )}>\n                <Icon className=\"h-4 w-4\" />\n              </div>\n              \n              <div className=\"flex-1\">\n                <div className={cn(\n                  \"font-medium text-sm\",\n                  isCompleted ? \"text-foreground\" : \"text-muted-foreground\"\n                )}>\n                  {step.label}\n                </div>\n                {isCurrent && order.status === 'preparing' && (\n                  <div className=\"text-xs text-muted-foreground\">\n                    Est. {formatTime(order.estimatedDelivery)}\n                  </div>\n                )}\n              </div>\n              \n              {isCurrent && (\n                <motion.div\n                  className=\"w-2 h-2 bg-primary rounded-full\"\n                  animate={{ scale: [1, 1.2, 1] }}\n                  transition={{ repeat: Infinity, duration: 1.5 }}\n                />\n              )}\n            </div>\n          )\n        })}\n      </div>\n      \n      {/* Order details */}\n      <div className=\"border-t border-border pt-3 mb-3\">\n        <div className=\"flex justify-between text-sm mb-1\">\n          <span>Items:</span>\n          <span>{order.items.reduce((sum, item) => sum + item.quantity, 0)}</span>\n        </div>\n        <div className=\"flex justify-between text-sm mb-1\">\n          <span>Total:</span>\n          <span className=\"font-semibold\">{formatCurrency(order.total)}</span>\n        </div>\n        <div className=\"flex justify-between text-sm\">\n          <span>Pickup:</span>\n          <span className=\"text-muted-foreground\">{order.pickupLocation}</span>\n        </div>\n      </div>\n      \n      {/* Actions */}\n      <div className=\"flex gap-2\">\n        <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n          <Share2 className=\"h-4 w-4 mr-2\" />\n          Share Order\n        </Button>\n        \n        {canCancel && onCancelOrder && (\n          <Button \n            variant=\"destructive\" \n            size=\"sm\"\n            onClick={() => onCancelOrder(order.id)}\n            haptic\n          >\n            Cancel Order\n          </Button>\n        )}\n      </div>\n    </motion.div>\n  )\n}\n\n// Profile Components\ninterface ProfileSectionProps {\n  user: UserProfile\n  onLogout: () => void\n}\n\nconst ProfileSection: React.FC<ProfileSectionProps> = ({ user, onLogout }) => {\n  const spendingPercentage = (user.monthlySpent / user.monthlyLimit) * 100\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Profile header */}\n      <div className=\"flex items-center gap-4 p-4 bg-gradient-to-r from-primary/10 to-primary/5 rounded-lg\">\n        <Avatar className=\"h-16 w-16\">\n          <AvatarImage src={user.avatar} alt={user.name} />\n          <AvatarFallback>{user.name.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n        </Avatar>\n        \n        <div className=\"flex-1\">\n          <h2 className=\"font-semibold text-lg\">{user.name}</h2>\n          <p className=\"text-sm text-muted-foreground\">{user.class}</p>\n          <p className=\"text-sm text-muted-foreground\">Roll: {user.rollNumber}</p>\n        </div>\n        \n        <Button variant=\"ghost\" size=\"icon\" onClick={onLogout}>\n          <LogOut className=\"h-5 w-5\" />\n        </Button>\n      </div>\n      \n      {/* Balance card */}\n      <motion.div \n        className=\"bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg p-4\"\n        whileHover={{ scale: 1.02 }}\n        transition={{ type: \"spring\", stiffness: 300 }}\n      >\n        <div className=\"flex items-center justify-between mb-2\">\n          <span className=\"text-sm opacity-90\">Available Balance</span>\n          <CreditCard className=\"h-5 w-5 opacity-90\" />\n        </div>\n        <div className=\"text-2xl font-bold mb-1\">{formatCurrency(user.balance)}</div>\n        <div className=\"text-sm opacity-90\">\n          Monthly spent: {formatCurrency(user.monthlySpent)} / {formatCurrency(user.monthlyLimit)}\n        </div>\n        <Progress \n          value={spendingPercentage} \n          className=\"mt-2 h-2 bg-white/20\"\n        />\n      </motion.div>\n      \n      {/* Quick actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        {[\n          { icon: Plus, label: 'Add Money', action: () => {} },\n          { icon: Clock, label: 'Order History', action: () => {} },\n          { icon: Settings, label: 'Settings', action: () => {} },\n          { icon: Bell, label: 'Notifications', action: () => {} },\n        ].map((item, index) => {\n          const Icon = item.icon\n          return (\n            <Button\n              key={index}\n              variant=\"outline\"\n              className=\"h-16 flex flex-col gap-2\"\n              onClick={item.action}\n              haptic\n            >\n              <Icon className=\"h-5 w-5\" />\n              <span className=\"text-xs\">{item.label}</span>\n            </Button>\n          )\n        })}\n      </div>\n      \n      {/* Dietary preferences */}\n      <div className=\"space-y-3\">\n        <h3 className=\"font-semibold\">Dietary Preferences</h3>\n        <div className=\"flex flex-wrap gap-2\">\n          {user.dietaryPreferences.map((pref, index) => (\n            <Badge key={index} variant=\"secondary\" className=\"capitalize\">\n              {pref}\n            </Badge>\n          ))}\n        </div>\n        \n        {user.allergens.length > 0 && (\n          <div>\n            <h4 className=\"font-medium text-sm mb-2\">Allergens to Avoid</h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {user.allergens.map((allergen, index) => (\n                <Badge key={index} variant=\"destructive\" className=\"capitalize\">\n                  {allergen}\n                </Badge>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Parent contact */}\n      <div className=\"bg-muted/50 rounded-lg p-4\">\n        <h3 className=\"font-semibold mb-2\">Parent Contact</h3>\n        <div className=\"space-y-1 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Name:</span>\n            <span>{user.parentName}</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Phone:</span>\n            <span>{user.parentPhone}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Main Component\nexport const AdvancedMobileExperience: React.FC = () => {\n  // State management\n  const [activeTab, setActiveTab] = React.useState('home')\n  const [meals] = React.useState<MealItem[]>(mockMeals)\n  const [cart, setCart] = React.useState<CartItem[]>([])\n  const [favorites, setFavorites] = React.useState<Set<string>>(new Set())\n  const [orders, setOrders] = React.useState<Order[]>([])\n  const [user] = React.useState<UserProfile>(mockUser)\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = React.useState('wallet')\n  const [searchQuery, setSearchQuery] = React.useState('')\n  const [isCheckingOut, setIsCheckingOut] = React.useState(false)\n  \n  // Hooks\n  const isOnline = useOnlineStatus()\n  const { toast } = useToast()\n  \n  // Cart functions\n  const addToCart = React.useCallback((meal: MealItem) => {\n    setCart(prevCart => {\n      const existingItem = prevCart.find(item => item.id === meal.id)\n      if (existingItem) {\n        return prevCart.map(item =>\n          item.id === meal.id\n            ? { ...item, quantity: item.quantity + 1 }\n            : item\n        )\n      }\n      return [...prevCart, { ...meal, quantity: 1 }]\n    })\n    \n    toast({\n      title: \"Added to cart\",\n      description: `${meal.name} has been added to your cart`,\n      duration: 2000,\n    })\n  }, [toast])\n  \n  const updateCartQuantity = React.useCallback((itemId: string, quantity: number) => {\n    if (quantity === 0) {\n      setCart(prevCart => prevCart.filter(item => item.id !== itemId))\n    } else {\n      setCart(prevCart =>\n        prevCart.map(item =>\n          item.id === itemId ? { ...item, quantity } : item\n        )\n      )\n    }\n    generateHapticFeedback('light')\n  }, [])\n  \n  const removeFromCart = React.useCallback((itemId: string) => {\n    setCart(prevCart => prevCart.filter(item => item.id !== itemId))\n    generateHapticFeedback('medium')\n    toast({\n      title: \"Item removed\",\n      description: \"Item has been removed from your cart\",\n      duration: 2000,\n    })\n  }, [toast])\n  \n  const toggleFavorite = React.useCallback((mealId: string) => {\n    setFavorites(prevFavorites => {\n      const newFavorites = new Set(prevFavorites)\n      if (newFavorites.has(mealId)) {\n        newFavorites.delete(mealId)\n        toast({\n          title: \"Removed from favorites\",\n          duration: 2000,\n        })\n      } else {\n        newFavorites.add(mealId)\n        toast({\n          title: \"Added to favorites\",\n          duration: 2000,\n        })\n      }\n      return newFavorites\n    })\n    generateHapticFeedback('light')\n  }, [toast])\n  \n  // Checkout function\n  const handleCheckout = React.useCallback(async () => {\n    if (cart.length === 0) return\n    \n    setIsCheckingOut(true)\n    generateHapticFeedback('medium')\n    \n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      const newOrder: Order = {\n        id: `order-${Date.now()}`,\n        items: [...cart],\n        status: 'pending',\n        orderTime: new Date(),\n        estimatedDelivery: new Date(Date.now() + 20 * 60 * 1000), // 20 minutes\n        total: cart.reduce((sum, item) => sum + (item.price * item.quantity), 0),\n        pickupLocation: 'School Cafeteria',\n        studentInfo: {\n          name: user.name,\n          class: user.class,\n          rollNumber: user.rollNumber\n        }\n      }\n      \n      setOrders(prevOrders => [newOrder, ...prevOrders])\n      setCart([])\n      \n      toast({\n        title: \"Order placed successfully!\",\n        description: `Order #${newOrder.id.slice(-6).toUpperCase()} will be ready in 20 minutes`,\n        duration: 5000,\n      })\n      \n      setActiveTab('profile') // Switch to show order tracking\n    } catch (error) {\n      toast({\n        title: \"Order failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n        duration: 3000,\n      })\n    } finally {\n      setIsCheckingOut(false)\n    }\n  }, [cart, user, toast])\n  \n  // Filter meals based on search\n  const filteredMeals = React.useMemo(() => {\n    if (!searchQuery) return meals\n    return meals.filter(meal =>\n      meal.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      meal.category.toLowerCase().includes(searchQuery.toLowerCase())\n    )\n  }, [meals, searchQuery])\n  \n  // Calculate cart total\n  const cartTotal = React.useMemo(() => {\n    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0)\n  }, [cart])\n  \n  const cartItemCount = React.useMemo(() => {\n    return cart.reduce((sum, item) => sum + item.quantity, 0)\n  }, [cart])\n  \n  // Render tab content\n  const renderTabContent = () => {\n    switch (activeTab) {\n      case 'home':\n        return (\n          <div className=\"space-y-6\">\n            {/* Online status indicator */}\n            <motion.div \n              className={cn(\n                \"flex items-center gap-2 p-3 rounded-lg text-sm\",\n                isOnline \n                  ? \"bg-green-50 text-green-700 border border-green-200\" \n                  : \"bg-red-50 text-red-700 border border-red-200\"\n              )}\n              initial={{ opacity: 0, y: -20 }}\n              animate={{ opacity: 1, y: 0 }}\n            >\n              {isOnline ? <Wifi className=\"h-4 w-4\" /> : <WifiOff className=\"h-4 w-4\" />}\n              {isOnline ? 'Connected - Real-time updates' : 'Offline - Some features limited'}\n            </motion.div>\n            \n            {/* Active orders */}\n            {orders.filter(order => order.status !== 'delivered').map(order => (\n              <OrderTracking \n                key={order.id} \n                order={order}\n                onCancelOrder={(orderId) => {\n                  setOrders(prevOrders => \n                    prevOrders.filter(o => o.id !== orderId)\n                  )\n                  toast({\n                    title: \"Order cancelled\",\n                    description: \"Your order has been cancelled successfully\",\n                    duration: 3000,\n                  })\n                }}\n              />\n            ))}\n            \n            {/* Featured meals */}\n            <div>\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-xl font-bold\">Today's Menu</h2>\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  Filter\n                </Button>\n              </div>\n              \n              <div className=\"space-y-4\">\n                {meals.map(meal => (\n                  <MealCard\n                    key={meal.id}\n                    meal={meal}\n                    onAddToCart={addToCart}\n                    onToggleFavorite={toggleFavorite}\n                    isFavorite={favorites.has(meal.id)}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        )\n        \n      case 'search':\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"sticky top-0 bg-background/95 backdrop-blur-sm z-10 pb-4\">\n              <Input\n                placeholder=\"Search meals, categories...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full\"\n              />\n            </div>\n            \n            <div className=\"space-y-4\">\n              {filteredMeals.map(meal => (\n                <MealCard\n                  key={meal.id}\n                  meal={meal}\n                  onAddToCart={addToCart}\n                  onToggleFavorite={toggleFavorite}\n                  isFavorite={favorites.has(meal.id)}\n                />\n              ))}\n              \n              {filteredMeals.length === 0 && searchQuery && (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <Search className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No meals found for \"{searchQuery}\"</p>\n                </div>\n              )}\n            </div>\n          </div>\n        )\n        \n      case 'cart':\n        return (\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h2 className=\"text-xl font-bold\">Your Cart</h2>\n              {cart.length > 0 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setCart([])}\n                  className=\"text-destructive\"\n                >\n                  Clear All\n                </Button>\n              )}\n            </div>\n            \n            {cart.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <ShoppingCart className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p>Your cart is empty</p>\n                <Button \n                  variant=\"outline\" \n                  className=\"mt-4\"\n                  onClick={() => setActiveTab('home')}\n                >\n                  Browse Menu\n                </Button>\n              </div>\n            ) : (\n              <>\n                <div className=\"space-y-3\">\n                  {cart.map(item => (\n                    <CartItemCard\n                      key={item.id}\n                      item={item}\n                      onUpdateQuantity={updateCartQuantity}\n                      onRemove={removeFromCart}\n                    />\n                  ))}\n                </div>\n                \n                {/* Order summary */}\n                <div className=\"bg-muted/50 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Subtotal ({cartItemCount} items)</span>\n                    <span>{formatCurrency(cartTotal)}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Service charge</span>\n                    <span>{formatCurrency(5)}</span>\n                  </div>\n                  <div className=\"border-t border-border pt-2 flex justify-between font-semibold\">\n                    <span>Total</span>\n                    <span>{formatCurrency(cartTotal + 5)}</span>\n                  </div>\n                </div>\n                \n                {/* Payment method */}\n                <PaymentMethod\n                  selectedMethod={selectedPaymentMethod}\n                  onMethodChange={setSelectedPaymentMethod}\n                  balance={user.balance}\n                />\n                \n                {/* Checkout button */}\n                <Button\n                  className=\"w-full h-12 text-base font-semibold\"\n                  onClick={handleCheckout}\n                  disabled={isCheckingOut || cartTotal + 5 > user.balance}\n                  haptic\n                >\n                  {isCheckingOut ? (\n                    <motion.div\n                      className=\"h-5 w-5 border-2 border-current border-t-transparent rounded-full animate-spin mr-2\"\n                      initial={{ opacity: 0 }}\n                      animate={{ opacity: 1 }}\n                    />\n                  ) : null}\n                  {isCheckingOut \n                    ? 'Processing...' \n                    : `Place Order • ${formatCurrency(cartTotal + 5)}`\n                  }\n                </Button>\n                \n                {cartTotal + 5 > user.balance && (\n                  <p className=\"text-destructive text-sm text-center\">\n                    Insufficient balance. Please add money to your wallet.\n                  </p>\n                )}\n              </>\n            )}\n          </div>\n        )\n        \n      case 'profile':\n        return (\n          <ProfileSection \n            user={user} \n            onLogout={() => {\n              toast({\n                title: \"Logged out\",\n                description: \"You have been logged out successfully\",\n                duration: 3000,\n              })\n            }}\n          />\n        )\n        \n      default:\n        return null\n    }\n  }\n  \n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <motion.header \n        className=\"sticky top-0 bg-background/95 backdrop-blur-sm border-b border-border z-40 safe-area-top\"\n        initial={{ y: -100 }}\n        animate={{ y: 0 }}\n        transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      >\n        <div className=\"flex items-center justify-between p-4\">\n          <div className=\"flex items-center gap-3\">\n            {activeTab !== 'home' && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => setActiveTab('home')}\n                haptic\n              >\n                <ArrowLeft className=\"h-5 w-5\" />\n              </Button>\n            )}\n            <div>\n              <h1 className=\"font-bold text-lg\">\n                {activeTab === 'home' && 'HASIVU'}\n                {activeTab === 'search' && 'Search Menu'}\n                {activeTab === 'cart' && 'Cart'}\n                {activeTab === 'profile' && 'Profile'}\n              </h1>\n              {activeTab === 'home' && (\n                <p className=\"text-sm text-muted-foreground\">\n                  Good appetite, {user.name.split(' ')[0]}!\n                </p>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {activeTab === 'home' && (\n              <Button variant=\"ghost\" size=\"icon\" haptic>\n                <Bell className=\"h-5 w-5\" />\n              </Button>\n            )}\n            \n            {activeTab === 'search' && (\n              <Button variant=\"ghost\" size=\"icon\" haptic>\n                <Camera className=\"h-5 w-5\" />\n              </Button>\n            )}\n          </div>\n        </div>\n      </motion.header>\n      \n      {/* Main content */}\n      <main className=\"px-4 py-6 pb-20\">\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeTab}\n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            exit={{ opacity: 0, x: -20 }}\n            transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n          >\n            {renderTabContent()}\n          </motion.div>\n        </AnimatePresence>\n      </main>\n      \n      {/* Bottom Navigation */}\n      <BottomNavigation\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        cartItemCount={cartItemCount}\n      />\n      \n      {/* PWA install prompt would go here */}\n      {/* Offline toast notifications would be handled by the toast system */}\n    </div>\n  )\n}\n\nexport default AdvancedMobileExperience","/Users/mahesha/Downloads/hasivu-platform/web/src/components/mobile/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/notifications/RealTimeNotifications.tsx",["2304","2305","2306","2307","2308","2309","2310","2311","2312","2313","2314","2315","2316","2317","2318","2319","2320","2321","2322","2323"],[],"\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Bell,\n  X,\n  Check,\n  AlertTriangle,\n  Info,\n  Clock,\n  ChefHat,\n  Package,\n  Users,\n  TrendingUp,\n  Settings,\n  Volume2,\n  VolumeX,\n  Filter\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\n\n// Notification types and interfaces\ninterface Notification {\n  id: string;\n  type: 'order' | 'inventory' | 'staff' | 'system' | 'alert';\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  title: string;\n  message: string;\n  timestamp: string;\n  isRead: boolean;\n  actionRequired?: boolean;\n  metadata?: Record<string, any>;\n  source: string;\n  category: string;\n}\n\ninterface NotificationSettings {\n  soundEnabled: boolean;\n  showDesktop: boolean;\n  autoMarkRead: boolean;\n  filterByPriority: string[];\n  filterByType: string[];\n}\n\ninterface WebSocketMessage {\n  type: 'notification' | 'order_update' | 'inventory_alert' | 'staff_update';\n  data: any;\n  timestamp: string;\n}\n\n// Real-time notification hook\nexport const useRealTimeNotifications = () => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [settings, setSettings] = useState<NotificationSettings>({\n    soundEnabled: true,\n    showDesktop: true,\n    autoMarkRead: false,\n    filterByPriority: ['medium', 'high', 'urgent'],\n    filterByType: ['order', 'inventory', 'staff', 'alert']\n  });\n\n  const wsRef = useRef<WebSocket | null>(null);\n  const audioRef = useRef<HTMLAudioElement | null>(null);\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    const connectWebSocket = () => {\n      const wsUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:8080/ws';\n      wsRef.current = new WebSocket(wsUrl);\n\n      wsRef.current.onopen = () => {\n        setIsConnected(true);\n        console.log('WebSocket connected');\n        // Send authentication token if needed\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          wsRef.current?.send(JSON.stringify({\n            type: 'auth',\n            token\n          }));\n        }\n      };\n\n      wsRef.current.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleWebSocketMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      wsRef.current.onclose = () => {\n        setIsConnected(false);\n        console.log('WebSocket disconnected, attempting to reconnect...');\n        // Reconnect after 3 seconds\n        setTimeout(connectWebSocket, 3000);\n      };\n\n      wsRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    };\n\n    connectWebSocket();\n\n    // Initialize audio for notifications\n    audioRef.current = new Audio('/sounds/notification.mp3');\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  // Handle incoming WebSocket messages\n  const handleWebSocketMessage = (message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'notification':\n        addNotification(message.data);\n        break;\n      case 'order_update':\n        handleOrderUpdate(message.data);\n        break;\n      case 'inventory_alert':\n        handleInventoryAlert(message.data);\n        break;\n      case 'staff_update':\n        handleStaffUpdate(message.data);\n        break;\n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  };\n\n  // Add new notification\n  const addNotification = (notification: Notification) => {\n    setNotifications(prev => [notification, ...prev]);\n    \n    // Play sound if enabled\n    if (settings.soundEnabled && audioRef.current) {\n      audioRef.current.play().catch(console.error);\n    }\n\n    // Show desktop notification if enabled and supported\n    if (settings.showDesktop && 'Notification' in window && Notification.permission === 'granted') {\n      new Notification(notification.title, {\n        body: notification.message,\n        icon: '/icons/notification-icon.png',\n        tag: notification.id\n      });\n    }\n\n    // Auto-mark as read after 10 seconds if enabled\n    if (settings.autoMarkRead) {\n      setTimeout(() => {\n        markAsRead(notification.id);\n      }, 10000);\n    }\n  };\n\n  // Handle order updates\n  const handleOrderUpdate = (orderData: any) => {\n    const notification: Notification = {\n      id: `order-${orderData.id}-${Date.now()}`,\n      type: 'order',\n      priority: orderData.priority || 'medium',\n      title: `Order ${orderData.orderNumber} Updated`,\n      message: `Status changed to ${orderData.status}`,\n      timestamp: new Date().toISOString(),\n      isRead: false,\n      source: 'kitchen',\n      category: 'order_update',\n      metadata: orderData\n    };\n    addNotification(notification);\n  };\n\n  // Handle inventory alerts\n  const handleInventoryAlert = (inventoryData: any) => {\n    const notification: Notification = {\n      id: `inventory-${inventoryData.id}-${Date.now()}`,\n      type: 'inventory',\n      priority: inventoryData.currentStock === 0 ? 'urgent' : 'high',\n      title: `Inventory Alert: ${inventoryData.name}`,\n      message: inventoryData.currentStock === 0 ? 'Out of stock' : 'Low stock level',\n      timestamp: new Date().toISOString(),\n      isRead: false,\n      actionRequired: true,\n      source: 'inventory',\n      category: 'stock_alert',\n      metadata: inventoryData\n    };\n    addNotification(notification);\n  };\n\n  // Handle staff updates\n  const handleStaffUpdate = (staffData: any) => {\n    const notification: Notification = {\n      id: `staff-${staffData.id}-${Date.now()}`,\n      type: 'staff',\n      priority: 'low',\n      title: `Staff Update: ${staffData.name}`,\n      message: `Status changed to ${staffData.status}`,\n      timestamp: new Date().toISOString(),\n      isRead: false,\n      source: 'staff',\n      category: 'staff_update',\n      metadata: staffData\n    };\n    addNotification(notification);\n  };\n\n  // Mark notification as read\n  const markAsRead = (notificationId: string) => {\n    setNotifications(prev => \n      prev.map(n => n.id === notificationId ? { ...n, isRead: true } : n)\n    );\n  };\n\n  // Mark all as read\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, isRead: true })));\n  };\n\n  // Remove notification\n  const removeNotification = (notificationId: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== notificationId));\n  };\n\n  // Clear all notifications\n  const clearAll = () => {\n    setNotifications([]);\n  };\n\n  // Get unread count\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  // Request desktop notification permission\n  const requestDesktopPermission = async () => {\n    if ('Notification' in window && Notification.permission === 'default') {\n      const permission = await Notification.requestPermission();\n      return permission === 'granted';\n    }\n    return Notification.permission === 'granted';\n  };\n\n  return {\n    notifications,\n    unreadCount,\n    isConnected,\n    settings,\n    setSettings,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n    requestDesktopPermission\n  };\n};\n\n// Notification item component\nconst NotificationItem = ({ \n  notification, \n  onMarkAsRead, \n  onRemove \n}: { \n  notification: Notification;\n  onMarkAsRead: (id: string) => void;\n  onRemove: (id: string) => void;\n}) => {\n  const getIcon = () => {\n    switch (notification.type) {\n      case 'order': return <ChefHat className=\"w-5 h-5\" />;\n      case 'inventory': return <Package className=\"w-5 h-5\" />;\n      case 'staff': return <Users className=\"w-5 h-5\" />;\n      case 'alert': return <AlertTriangle className=\"w-5 h-5\" />;\n      default: return <Info className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getPriorityColor = () => {\n    switch (notification.priority) {\n      case 'urgent': return 'text-red-600 bg-red-100';\n      case 'high': return 'text-orange-600 bg-orange-100';\n      case 'medium': return 'text-blue-600 bg-blue-100';\n      case 'low': return 'text-gray-600 bg-gray-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const timeAgo = (timestamp: string) => {\n    const now = new Date();\n    const notificationTime = new Date(timestamp);\n    const diffInMinutes = Math.floor((now.getTime() - notificationTime.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    return `${Math.floor(diffInMinutes / 1440)}d ago`;\n  };\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: -20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className={`p-4 border-l-4 ${\n        notification.isRead \n          ? 'border-gray-200 bg-gray-50' \n          : `border-${notification.priority === 'urgent' ? 'red' : notification.priority === 'high' ? 'orange' : 'blue'}-500 bg-white`\n      } hover:shadow-md transition-shadow`}\n    >\n      <div className=\"flex items-start space-x-3\">\n        <div className={`p-2 rounded-full ${getPriorityColor()}`}>\n          {getIcon()}\n        </div>\n        \n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center justify-between mb-1\">\n            <h4 className={`font-medium ${notification.isRead ? 'text-gray-600' : 'text-gray-900'}`}>\n              {notification.title}\n            </h4>\n            <div className=\"flex items-center space-x-2\">\n              <Badge \n                variant=\"outline\" \n                className={`${getPriorityColor()} border-0 text-xs`}\n              >\n                {notification.priority}\n              </Badge>\n              <span className=\"text-xs text-gray-500\">\n                {timeAgo(notification.timestamp)}\n              </span>\n            </div>\n          </div>\n          \n          <p className={`text-sm ${notification.isRead ? 'text-gray-500' : 'text-gray-700'}`}>\n            {notification.message}\n          </p>\n          \n          {notification.actionRequired && (\n            <div className=\"mt-2 flex items-center space-x-2\">\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                Action Required\n              </Badge>\n            </div>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-1\">\n          {!notification.isRead && (\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => onMarkAsRead(notification.id)}\n            >\n              <Check className=\"w-4 h-4\" />\n            </Button>\n          )}\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => onRemove(notification.id)}\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\n// Main notification panel component\nexport const RealTimeNotificationPanel: React.FC<{\n  isOpen: boolean;\n  onClose: () => void;\n}> = ({ isOpen, onClose }) => {\n  const {\n    notifications,\n    unreadCount,\n    isConnected,\n    settings,\n    setSettings,\n    markAsRead,\n    markAllAsRead,\n    removeNotification,\n    clearAll,\n    requestDesktopPermission\n  } = useRealTimeNotifications();\n\n  const [filter, setFilter] = useState<string>('all');\n  const [showSettings, setShowSettings] = useState(false);\n\n  // Filter notifications\n  const filteredNotifications = notifications.filter(notification => {\n    if (filter === 'all') return true;\n    if (filter === 'unread') return !notification.isRead;\n    return notification.type === filter;\n  });\n\n  const handleSettingChange = (key: keyof NotificationSettings, value: any) => {\n    setSettings(prev => ({ ...prev, [key]: value }));\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, x: 300 }}\n      animate={{ opacity: 1, x: 0 }}\n      exit={{ opacity: 0, x: 300 }}\n      className=\"fixed right-0 top-0 h-full w-96 bg-white shadow-2xl z-50 overflow-hidden\"\n    >\n      <Card className=\"h-full rounded-none\">\n        <CardHeader className=\"border-b\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"w-5 h-5 text-blue-600\" />\n              <CardTitle>Notifications</CardTitle>\n              {unreadCount > 0 && (\n                <Badge className=\"bg-red-500 text-white\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <div className={`w-2 h-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n              <Button size=\"sm\" variant=\"ghost\" onClick={() => setShowSettings(!showSettings)}>\n                <Settings className=\"w-4 h-4\" />\n              </Button>\n              <Button size=\"sm\" variant=\"ghost\" onClick={onClose}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n          \n          {/* Settings Panel */}\n          {showSettings && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              className=\"mt-4 p-4 bg-gray-50 rounded-lg space-y-3\"\n            >\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Sound Notifications</span>\n                <Switch\n                  checked={settings.soundEnabled}\n                  onCheckedChange={(checked) => handleSettingChange('soundEnabled', checked)}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Desktop Notifications</span>\n                <Switch\n                  checked={settings.showDesktop}\n                  onCheckedChange={(checked) => handleSettingChange('showDesktop', checked)}\n                />\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Auto Mark Read</span>\n                <Switch\n                  checked={settings.autoMarkRead}\n                  onCheckedChange={(checked) => handleSettingChange('autoMarkRead', checked)}\n                />\n              </div>\n              <Button \n                size=\"sm\" \n                variant=\"outline\" \n                onClick={requestDesktopPermission}\n                className=\"w-full\"\n              >\n                Request Desktop Permission\n              </Button>\n            </motion.div>\n          )}\n          \n          {/* Filter Bar */}\n          <div className=\"flex items-center space-x-2 mt-4\">\n            <select\n              value={filter}\n              onChange={(e) => setFilter(e.target.value)}\n              className=\"flex-1 px-3 py-1 border border-gray-200 rounded-md text-sm\"\n            >\n              <option value=\"all\">All Notifications</option>\n              <option value=\"unread\">Unread Only</option>\n              <option value=\"order\">Orders</option>\n              <option value=\"inventory\">Inventory</option>\n              <option value=\"staff\">Staff</option>\n              <option value=\"alert\">Alerts</option>\n            </select>\n            \n            {unreadCount > 0 && (\n              <Button size=\"sm\" variant=\"outline\" onClick={markAllAsRead}>\n                Mark All Read\n              </Button>\n            )}\n            \n            <Button size=\"sm\" variant=\"outline\" onClick={clearAll}>\n              Clear All\n            </Button>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"p-0 h-full overflow-y-auto\">\n          <AnimatePresence>\n            {filteredNotifications.length === 0 ? (\n              <div className=\"flex flex-col items-center justify-center h-64 text-gray-500\">\n                <Bell className=\"w-12 h-12 mb-4 opacity-30\" />\n                <p className=\"text-sm\">No notifications</p>\n              </div>\n            ) : (\n              <div className=\"divide-y divide-gray-200\">\n                {filteredNotifications.map((notification) => (\n                  <NotificationItem\n                    key={notification.id}\n                    notification={notification}\n                    onMarkAsRead={markAsRead}\n                    onRemove={removeNotification}\n                  />\n                ))}\n              </div>\n            )}\n          </AnimatePresence>\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\n// Notification bell component for header\nexport const NotificationBell: React.FC<{\n  onClick: () => void;\n}> = ({ onClick }) => {\n  const { unreadCount, isConnected } = useRealTimeNotifications();\n\n  return (\n    <div className=\"relative\">\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={onClick}\n        className=\"relative\"\n      >\n        <Bell className=\"w-5 h-5\" />\n        {unreadCount > 0 && (\n          <motion.div\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-bold\"\n          >\n            {unreadCount > 99 ? '99+' : unreadCount}\n          </motion.div>\n        )}\n        <div \n          className={`absolute bottom-0 right-0 w-2 h-2 rounded-full ${\n            isConnected ? 'bg-green-500' : 'bg-red-500'\n          }`} \n        />\n      </Button>\n    </div>\n  );\n};\n\nexport default RealTimeNotificationPanel;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/orders/OrderTracker.tsx",["2324","2325"],[],"/**\n * HASIVU Platform - Real-time Order Tracker Component\n * ShadCN-based component for tracking order status with Socket.IO integration\n * Displays order progress, delivery updates, and RFID verification\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { \n  CheckCircle, \n  Clock, \n  Truck, \n  MapPin, \n  AlertCircle,\n  RefreshCw,\n  Eye,\n  Phone,\n  MessageSquare\n} from 'lucide-react';\nimport { useOrderTracking, useSocketConnection } from '@/hooks/useSocket';\nimport { cn, formatTime, formatCurrency } from '@/lib/utils';\nimport { toast } from 'react-hot-toast';\n\ninterface OrderTrackerProps {\n  orderId: string;\n  className?: string;\n  showActions?: boolean;\n  compact?: boolean;\n}\n\ninterface StatusStep {\n  key: string;\n  label: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  color: {\n    bg: string;\n    text: string;\n    border: string;\n    icon: string;\n  };\n}\n\nconst statusSteps: StatusStep[] = [\n  {\n    key: 'pending',\n    label: 'Order Placed',\n    description: 'Your order has been received',\n    icon: AlertCircle,\n    color: {\n      bg: 'bg-gray-100',\n      text: 'text-gray-700',\n      border: 'border-gray-300',\n      icon: 'text-gray-500',\n    },\n  },\n  {\n    key: 'confirmed',\n    label: 'Order Confirmed',\n    description: 'Restaurant has accepted your order',\n    icon: CheckCircle,\n    color: {\n      bg: 'bg-blue-100',\n      text: 'text-blue-700',\n      border: 'border-blue-300',\n      icon: 'text-blue-500',\n    },\n  },\n  {\n    key: 'preparing',\n    label: 'Preparing',\n    description: 'Your meal is being prepared',\n    icon: Clock,\n    color: {\n      bg: 'bg-yellow-100',\n      text: 'text-yellow-700',\n      border: 'border-yellow-300',\n      icon: 'text-yellow-500',\n    },\n  },\n  {\n    key: 'ready',\n    label: 'Ready for Pickup',\n    description: 'Your order is ready',\n    icon: CheckCircle,\n    color: {\n      bg: 'bg-green-100',\n      text: 'text-green-700',\n      border: 'border-green-300',\n      icon: 'text-green-500',\n    },\n  },\n  {\n    key: 'out_for_delivery',\n    label: 'Out for Delivery',\n    description: 'Your order is on the way',\n    icon: Truck,\n    color: {\n      bg: 'bg-purple-100',\n      text: 'text-purple-700',\n      border: 'border-purple-300',\n      icon: 'text-purple-500',\n    },\n  },\n  {\n    key: 'delivered',\n    label: 'Delivered',\n    description: 'Your order has been delivered',\n    icon: MapPin,\n    color: {\n      bg: 'bg-green-100',\n      text: 'text-green-700',\n      border: 'border-green-300',\n      icon: 'text-green-500',\n    },\n  },\n];\n\nexport function OrderTracker({ \n  orderId, \n  className,\n  showActions = true,\n  compact = false \n}: OrderTrackerProps) {\n  const trackingData = useOrderTracking(orderId);\n  const { isConnected, connectionState, reconnect } = useSocketConnection();\n  const [showFullHistory, setShowFullHistory] = useState(false);\n\n  const currentStepIndex = statusSteps.findIndex(\n    step => step.key === trackingData.status\n  );\n\n  const progress = currentStepIndex >= 0 \n    ? ((currentStepIndex + 1) / statusSteps.length) * 100 \n    : 0;\n\n  const currentStep = statusSteps.find(step => step.key === trackingData.status);\n  const isCompleted = trackingData.status === 'delivered';\n  const isCancelled = trackingData.status === 'cancelled';\n\n  // Show connection issues\n  const showConnectionAlert = !isConnected && connectionState !== 'connecting';\n\n  const handleRefresh = () => {\n    if (!isConnected) {\n      reconnect();\n    } else {\n      toast.success('Order status is up to date');\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case 'delivered':\n        return 'default';\n      case 'cancelled':\n        return 'destructive';\n      case 'confirmed':\n      case 'preparing':\n      case 'ready':\n      case 'out_for_delivery':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  if (compact) {\n    return (\n      <div className={cn('flex items-center space-x-3', className)}>\n        <div className=\"flex-shrink-0\">\n          {currentStep && (\n            <div className={cn(\n              'flex items-center justify-center w-8 h-8 rounded-full border-2',\n              currentStep.color.bg,\n              currentStep.color.border\n            )}>\n              <currentStep.icon className={cn('w-4 h-4', currentStep.color.icon)} />\n            </div>\n          )}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center space-x-2\">\n            <p className=\"text-sm font-medium text-gray-900 truncate\">\n              Order #{orderId.slice(-8)}\n            </p>\n            <Badge variant={getStatusBadgeVariant(trackingData.status)}>\n              {trackingData.status.replace('_', ' ').toUpperCase()}\n            </Badge>\n          </div>\n          {trackingData.estimatedTime && (\n            <p className=\"text-xs text-gray-500\">\n              Est. {formatTime(trackingData.estimatedTime)}\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Card className={cn('w-full max-w-md mx-auto', className)}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">\n            Order #{orderId.slice(-8)}\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Badge variant={getStatusBadgeVariant(trackingData.status)}>\n              {trackingData.status.replace('_', ' ').toUpperCase()}\n            </Badge>\n            {showActions && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleRefresh}\n                disabled={connectionState === 'connecting'}\n              >\n                <RefreshCw className={cn(\n                  'w-4 h-4',\n                  connectionState === 'connecting' && 'animate-spin'\n                )} />\n              </Button>\n            )}\n          </div>\n        </div>\n        \n        {trackingData.estimatedTime && !isCompleted && (\n          <p className=\"text-sm text-muted-foreground\">\n            Estimated completion: {formatTime(trackingData.estimatedTime)}\n          </p>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"space-y-6\">\n        {/* Connection Alert */}\n        {showConnectionAlert && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"flex items-center justify-between\">\n              <span>Real-time updates unavailable</span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={reconnect}\n                disabled={connectionState === 'connecting'}\n              >\n                {connectionState === 'connecting' ? 'Connecting...' : 'Reconnect'}\n              </Button>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Progress Bar */}\n        {!isCancelled && (\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-between text-sm\">\n              <span className=\"font-medium\">Progress</span>\n              <span className=\"text-muted-foreground\">{Math.round(progress)}%</span>\n            </div>\n            <Progress \n              value={progress} \n              className={cn(\n                'h-2',\n                isCompleted && 'bg-green-100'\n              )}\n            />\n          </div>\n        )}\n\n        {/* Status Steps */}\n        <div className=\"space-y-4\">\n          {statusSteps.map((step, index) => {\n            const Icon = step.icon;\n            const isCompleted = index <= currentStepIndex;\n            const isCurrent = index === currentStepIndex;\n            const isPending = index > currentStepIndex;\n\n            return (\n              <div\n                key={step.key}\n                className={cn(\n                  'flex items-start space-x-3 transition-all duration-200',\n                  isCompleted && 'opacity-100',\n                  isCurrent && 'opacity-100 scale-105',\n                  isPending && 'opacity-60'\n                )}\n              >\n                <div\n                  className={cn(\n                    'flex items-center justify-center w-10 h-10 rounded-full border-2 transition-all duration-200',\n                    isCompleted && step.color.bg,\n                    isCompleted && step.color.border,\n                    isCurrent && 'ring-2 ring-offset-2 ring-blue-500',\n                    isPending && 'border-gray-200 bg-gray-50'\n                  )}\n                >\n                  <Icon className={cn(\n                    'w-5 h-5 transition-colors duration-200',\n                    isCompleted && step.color.icon,\n                    isPending && 'text-gray-400'\n                  )} />\n                </div>\n                <div className=\"flex-1 pb-4\">\n                  <p className={cn(\n                    'font-medium transition-colors duration-200',\n                    isCurrent && 'text-blue-600',\n                    isCompleted && !isCurrent && step.color.text,\n                    isPending && 'text-gray-500'\n                  )}>\n                    {step.label}\n                  </p>\n                  <p className={cn(\n                    'text-sm transition-colors duration-200',\n                    isCurrent && 'text-blue-500',\n                    isCompleted && !isCurrent && 'text-gray-600',\n                    isPending && 'text-gray-400'\n                  )}>\n                    {step.description}\n                  </p>\n                  \n                  {/* Show current step details */}\n                  {isCurrent && trackingData.estimatedTime && (\n                    <p className=\"text-xs text-blue-500 mt-1\">\n                      Est. completion: {formatTime(trackingData.estimatedTime)}\n                    </p>\n                  )}\n                  \n                  {/* Show delivery person info */}\n                  {isCurrent && step.key === 'out_for_delivery' && trackingData.deliveryPersonId && (\n                    <div className=\"flex items-center space-x-2 mt-2\">\n                      <Button variant=\"outline\" size=\"sm\">\n                        <Phone className=\"w-3 h-3 mr-1\" />\n                        Call Driver\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\">\n                        <MessageSquare className=\"w-3 h-3 mr-1\" />\n                        Message\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {/* RFID Verification Status */}\n        {isCompleted && (\n          <Alert className={cn(\n            trackingData.location ? 'border-green-200 bg-green-50' : 'border-yellow-200 bg-yellow-50'\n          )}>\n            <CheckCircle className={cn(\n              'h-4 w-4',\n              trackingData.location ? 'text-green-600' : 'text-yellow-600'\n            )} />\n            <AlertDescription className={cn(\n              trackingData.location ? 'text-green-800' : 'text-yellow-800'\n            )}>\n              {trackingData.location \n                ? '✅ Delivery verified with RFID' \n                : '⏳ Delivery completed - RFID verification pending'\n              }\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Order Updates History */}\n        {trackingData.updates.length > 0 && (\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between\">\n              <h4 className=\"text-sm font-medium text-gray-900\">Order Updates</h4>\n              {trackingData.updates.length > 3 && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setShowFullHistory(!showFullHistory)}\n                >\n                  <Eye className=\"w-3 h-3 mr-1\" />\n                  {showFullHistory ? 'Show Less' : 'View All'}\n                </Button>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              {(showFullHistory ? trackingData.updates : trackingData.updates.slice(0, 3))\n                .map((update, index) => (\n                  <div key={index} className=\"flex justify-between items-start text-sm\">\n                    <div>\n                      <p className=\"font-medium text-gray-900\">\n                        {update.status.replace('_', ' ').toUpperCase()}\n                      </p>\n                      {update.message && (\n                        <p className=\"text-gray-600\">{update.message}</p>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-gray-500 whitespace-nowrap ml-2\">\n                      {formatTime(update.timestamp)}\n                    </span>\n                  </div>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        {showActions && !isCompleted && !isCancelled && (\n          <div className=\"flex space-x-2 pt-4 border-t\">\n            <Button variant=\"outline\" className=\"flex-1\">\n              <Phone className=\"w-4 h-4 mr-2\" />\n              Call Restaurant\n            </Button>\n            <Button variant=\"outline\" className=\"flex-1\">\n              <MessageSquare className=\"w-4 h-4 mr-2\" />\n              Support\n            </Button>\n          </div>\n        )}\n\n        {/* Connection Status Indicator */}\n        <div className=\"flex items-center justify-center pt-2\">\n          <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n            <div className={cn(\n              'w-2 h-2 rounded-full',\n              isConnected ? 'bg-green-500' : 'bg-red-500'\n            )} />\n            <span>\n              {isConnected ? 'Live updates active' : 'Connection lost'}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default OrderTracker;","/Users/mahesha/Downloads/hasivu-platform/web/src/components/providers/redux-provider.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/providers/theme-provider.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/rfid/RFIDVerificationSystem.tsx",["2326","2327","2328","2329","2330","2331","2332","2333"],[],"\"use client\";\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Shield,\n  CheckCircle,\n  AlertTriangle,\n  Clock,\n  Zap,\n  Eye,\n  Camera,\n  Wifi,\n  WifiOff,\n  RefreshCw,\n  User,\n  MapPin,\n  Calendar,\n  Activity,\n  Signal,\n  Battery,\n  AlertCircle\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Progress } from '@/components/ui/progress';\n\n// Enhanced TypeScript interfaces for RFID system\ninterface RFIDDevice {\n  id: string;\n  name: string;\n  location: string;\n  status: 'online' | 'offline' | 'error';\n  batteryLevel: number;\n  signalStrength: number;\n  lastPing: string;\n  firmware: string;\n}\n\ninterface RFIDTransaction {\n  id: string;\n  studentId: string;\n  studentName: string;\n  avatar: string;\n  mealId: string;\n  mealName: string;\n  timestamp: string;\n  status: 'pending' | 'verified' | 'failed' | 'processing';\n  deviceId: string;\n  location: string;\n  nutritionScore: number;\n  photoUrl?: string;\n  verificationTime?: number; // in seconds\n  fraudScore: number;\n}\n\ninterface Student {\n  id: string;\n  name: string;\n  grade: string;\n  rfidCard: string;\n  avatar: string;\n  allergies: string[];\n  isActive: boolean;\n}\n\n// Mock data for demonstration\nconst mockDevices: RFIDDevice[] = [\n  {\n    id: 'RFID-001',\n    name: 'Cafeteria Main Counter',\n    location: 'Ground Floor - Main Dining',\n    status: 'online',\n    batteryLevel: 85,\n    signalStrength: 95,\n    lastPing: '2024-01-15T12:45:30Z',\n    firmware: 'v2.1.3'\n  },\n  {\n    id: 'RFID-002', \n    name: 'South Wing Counter',\n    location: '1st Floor - South Wing',\n    status: 'online',\n    batteryLevel: 67,\n    signalStrength: 88,\n    lastPing: '2024-01-15T12:45:28Z',\n    firmware: 'v2.1.3'\n  },\n  {\n    id: 'RFID-003',\n    name: 'Sports Complex Counter',\n    location: 'Sports Complex - Ground Floor',\n    status: 'offline',\n    batteryLevel: 23,\n    signalStrength: 0,\n    lastPing: '2024-01-15T11:30:15Z',\n    firmware: 'v2.0.8'\n  }\n];\n\nconst mockTransactions: RFIDTransaction[] = [\n  {\n    id: 'TXN-RFID-001',\n    studentId: 'STU-001',\n    studentName: 'Priya Sharma',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',\n    mealId: 'MEAL-001',\n    mealName: 'Masala Dosa with Sambar',\n    timestamp: '2024-01-15T12:45:00Z',\n    status: 'verified',\n    deviceId: 'RFID-001',\n    location: 'Cafeteria Main Counter',\n    nutritionScore: 88,\n    photoUrl: 'https://images.unsplash.com/photo-1589301760014-d929f3979dbc?w=200&h=150&fit=crop',\n    verificationTime: 0.3,\n    fraudScore: 0.1\n  },\n  {\n    id: 'TXN-RFID-002',\n    studentId: 'STU-002', \n    studentName: 'Arjun Sharma',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n    mealId: 'MEAL-002',\n    mealName: 'Chicken Biryani',\n    timestamp: '2024-01-15T12:47:00Z',\n    status: 'processing',\n    deviceId: 'RFID-001',\n    location: 'Cafeteria Main Counter',\n    nutritionScore: 85,\n    fraudScore: 0.05\n  }\n];\n\n// RFID Scanner Animation Component\nconst RFIDScannerAnimation = ({ isScanning, status }: { isScanning: boolean; status: RFIDTransaction['status'] }) => {\n  return (\n    <div className=\"relative w-32 h-32 mx-auto mb-6\">\n      {/* Base scanner circle */}\n      <div className={`absolute inset-0 rounded-full border-4 transition-colors duration-300 ${\n        status === 'verified' ? 'border-green-500' :\n        status === 'failed' ? 'border-red-500' :\n        status === 'processing' ? 'border-blue-500' :\n        'border-gray-300'\n      }`} />\n      \n      {/* Animated scanning rings */}\n      <AnimatePresence>\n        {isScanning && (\n          <>\n            {[0, 0.5, 1].map((delay, index) => (\n              <motion.div\n                key={index}\n                className={`absolute inset-0 rounded-full border-2 ${\n                  status === 'processing' ? 'border-blue-400' : 'border-orange-400'\n                }`}\n                initial={{ scale: 0, opacity: 1 }}\n                animate={{ scale: 2, opacity: 0 }}\n                exit={{ scale: 0, opacity: 0 }}\n                transition={{\n                  duration: 2,\n                  delay: delay,\n                  repeat: isScanning ? Infinity : 0,\n                  ease: \"easeOut\"\n                }}\n              />\n            ))}\n          </>\n        )}\n      </AnimatePresence>\n      \n      {/* Center icon */}\n      <div className={`absolute inset-0 flex items-center justify-center rounded-full ${\n        status === 'verified' ? 'bg-green-100' :\n        status === 'failed' ? 'bg-red-100' :\n        status === 'processing' ? 'bg-blue-100' :\n        'bg-gray-100'\n      }`}>\n        {status === 'verified' && <CheckCircle className=\"w-12 h-12 text-green-600\" />}\n        {status === 'failed' && <AlertTriangle className=\"w-12 h-12 text-red-600\" />}\n        {status === 'processing' && <Zap className=\"w-12 h-12 text-blue-600 animate-pulse\" />}\n        {status === 'pending' && <Shield className=\"w-12 h-12 text-gray-600\" />}\n      </div>\n    </div>\n  );\n};\n\n// Device Status Component\nconst DeviceStatus = ({ device }: { device: RFIDDevice }) => {\n  const getStatusColor = (status: RFIDDevice['status']) => {\n    switch (status) {\n      case 'online': return 'bg-green-500';\n      case 'offline': return 'bg-red-500';\n      case 'error': return 'bg-yellow-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getBatteryColor = (level: number) => {\n    if (level > 60) return 'text-green-600';\n    if (level > 30) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  return (\n    <Card className=\"hover:shadow-lg transition-shadow\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle className=\"text-lg\">{device.name}</CardTitle>\n            <CardDescription className=\"flex items-center\">\n              <MapPin className=\"w-4 h-4 mr-1\" />\n              {device.location}\n            </CardDescription>\n          </div>\n          <div className={`w-3 h-3 rounded-full ${getStatusColor(device.status)}`} />\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Battery className={`w-5 h-5 ${getBatteryColor(device.batteryLevel)}`} />\n            </div>\n            <div className=\"text-sm font-medium\">{device.batteryLevel}%</div>\n            <div className=\"text-xs text-gray-500\">Battery</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Signal className=\"w-5 h-5 text-blue-600\" />\n            </div>\n            <div className=\"text-sm font-medium\">{device.signalStrength}%</div>\n            <div className=\"text-xs text-gray-500\">Signal</div>\n          </div>\n        </div>\n        \n        <div className=\"pt-2 border-t\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Firmware:</span>\n            <Badge variant=\"outline\">{device.firmware}</Badge>\n          </div>\n          <div className=\"flex items-center justify-between text-sm mt-2\">\n            <span className=\"text-gray-600\">Last Ping:</span>\n            <span className=\"text-xs text-gray-500\">\n              {new Date(device.lastPing).toLocaleTimeString()}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Transaction History Component\nconst TransactionHistory = ({ transactions }: { transactions: RFIDTransaction[] }) => {\n  return (\n    <div className=\"space-y-4\">\n      {transactions.map((transaction) => (\n        <motion.div\n          key={transaction.id}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"flex items-center space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n        >\n          <Avatar className=\"w-12 h-12\">\n            <AvatarImage src={transaction.avatar} alt={transaction.studentName} />\n            <AvatarFallback>{transaction.studentName.split(' ').map(n => n[0]).join('')}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-medium\">{transaction.studentName}</h4>\n              <Badge className={`${\n                transaction.status === 'verified' ? 'bg-green-100 text-green-800' :\n                transaction.status === 'processing' ? 'bg-blue-100 text-blue-800' :\n                transaction.status === 'failed' ? 'bg-red-100 text-red-800' :\n                'bg-gray-100 text-gray-800'\n              }`}>\n                {transaction.status}\n              </Badge>\n            </div>\n            \n            <div className=\"text-sm text-gray-600 mb-2\">\n              {transaction.mealName} • {transaction.location}\n            </div>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                <span>{new Date(transaction.timestamp).toLocaleTimeString()}</span>\n                {transaction.verificationTime && (\n                  <span>Verified in {transaction.verificationTime}s</span>\n                )}\n                <span>Score: {transaction.nutritionScore}%</span>\n              </div>\n              \n              <div className=\"flex items-center space-x-2\">\n                {transaction.photoUrl && (\n                  <Button variant=\"outline\" size=\"sm\">\n                    <Eye className=\"w-3 h-3 mr-1\" />\n                    Photo\n                  </Button>\n                )}\n                {transaction.fraudScore > 0.5 && (\n                  <Badge variant=\"destructive\" className=\"text-xs\">\n                    <AlertCircle className=\"w-3 h-3 mr-1\" />\n                    Flagged\n                  </Badge>\n                )}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n\n// Real-time RFID Monitor Component\nconst RealTimeMonitor = () => {\n  const [activeTransactions, setActiveTransactions] = useState<RFIDTransaction[]>(mockTransactions);\n  const [isScanning, setIsScanning] = useState(false);\n  const [scannerStatus, setScannerStatus] = useState<RFIDTransaction['status']>('pending');\n\n  // Simulate real-time RFID scanning\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Simulate random RFID scans\n      if (Math.random() > 0.7) {\n        setIsScanning(true);\n        setScannerStatus('processing');\n        \n        setTimeout(() => {\n          setScannerStatus(Math.random() > 0.1 ? 'verified' : 'failed');\n          \n          setTimeout(() => {\n            setIsScanning(false);\n            setScannerStatus('pending');\n          }, 2000);\n        }, 1500);\n      }\n    }, 8000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Activity className=\"w-5 h-5 mr-2 text-blue-600\" />\n          Real-Time RFID Monitor\n        </CardTitle>\n        <CardDescription>Live meal verification system</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center\">\n          <RFIDScannerAnimation isScanning={isScanning} status={scannerStatus} />\n          \n          <div className=\"mb-6\">\n            <div className={`text-lg font-semibold mb-2 ${\n              scannerStatus === 'verified' ? 'text-green-600' :\n              scannerStatus === 'failed' ? 'text-red-600' :\n              scannerStatus === 'processing' ? 'text-blue-600' :\n              'text-gray-600'\n            }`}>\n              {scannerStatus === 'verified' && 'Meal Verified Successfully!'}\n              {scannerStatus === 'failed' && 'Verification Failed'}\n              {scannerStatus === 'processing' && 'Processing RFID Scan...'}\n              {scannerStatus === 'pending' && 'Ready to Scan'}\n            </div>\n            \n            <div className=\"text-sm text-gray-600\">\n              {isScanning ? 'Scanning RFID card...' : 'Place RFID card near scanner'}\n            </div>\n          </div>\n\n          <div className=\"flex justify-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                setIsScanning(true);\n                setScannerStatus('processing');\n              }}\n              disabled={isScanning}\n            >\n              <RefreshCw className={`w-4 h-4 mr-2 ${isScanning ? 'animate-spin' : ''}`} />\n              Test Scan\n            </Button>\n            <Button variant=\"outline\">\n              <Camera className=\"w-4 h-4 mr-2\" />\n              Take Photo\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main RFID Verification System Component\nexport const RFIDVerificationSystem: React.FC = () => {\n  const [devices] = useState<RFIDDevice[]>(mockDevices);\n  const [recentTransactions] = useState<RFIDTransaction[]>(mockTransactions);\n  \n  const onlineDevices = devices.filter(d => d.status === 'online').length;\n  const totalScans = 1247;\n  const successRate = 99.7;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">RFID Verification System</h1>\n            <p className=\"text-gray-600\">Real-time meal delivery verification and monitoring</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <div className={`flex items-center px-3 py-2 rounded-full ${\n              onlineDevices === devices.length ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n            }`}>\n              <Wifi className=\"w-4 h-4 mr-2\" />\n              {onlineDevices}/{devices.length} Online\n            </div>\n          </div>\n        </div>\n\n        {/* System Overview Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <Shield className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{totalScans}</p>\n                  <p className=\"text-gray-600\">Total Scans Today</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <CheckCircle className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{successRate}%</p>\n                  <p className=\"text-gray-600\">Success Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-full\">\n                  <Clock className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">0.3s</p>\n                  <p className=\"text-gray-600\">Avg Scan Time</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-full\">\n                  <Activity className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{onlineDevices}</p>\n                  <p className=\"text-gray-600\">Active Devices</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Real-time Monitor */}\n          <div className=\"lg:col-span-1\">\n            <RealTimeMonitor />\n          </div>\n\n          {/* Recent Transactions */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Recent Transactions</CardTitle>\n                <CardDescription>Latest RFID meal verifications</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <TransactionHistory transactions={recentTransactions} />\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Device Status Grid */}\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Device Status</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {devices.map((device) => (\n              <DeviceStatus key={device.id} device={device} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RFIDVerificationSystem;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/rfid/__tests__/RFIDVerificationSystem.test.tsx",["2334","2335","2336","2337","2338","2339","2340","2341","2342","2343","2344","2345","2346"],[],"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { jest } from '@jest/globals';\nimport '@testing-library/jest-dom';\nimport { RFIDVerificationSystem } from '../RFIDVerificationSystem';\n\n// Mock framer-motion\njest.mock('framer-motion', () => ({\n  motion: {\n    div: ({ children, ...props }: any) => <div {...props}>{children}</div>,\n  },\n  AnimatePresence: ({ children }: any) => children,\n}));\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    pathname: '/',\n  }),\n  usePathname: () => '/',\n}));\n\n// Mock UI components\njest.mock('@/components/ui/button', () => ({\n  Button: ({ children, onClick, ...props }: any) => (\n    <button onClick={onClick} {...props}>\n      {children}\n    </button>\n  ),\n}));\n\njest.mock('@/components/ui/card', () => ({\n  Card: ({ children }: any) => <div data-testid=\"card\">{children}</div>,\n  CardContent: ({ children }: any) => <div data-testid=\"card-content\">{children}</div>,\n  CardDescription: ({ children }: any) => <div data-testid=\"card-description\">{children}</div>,\n  CardHeader: ({ children }: any) => <div data-testid=\"card-header\">{children}</div>,\n  CardTitle: ({ children }: any) => <div data-testid=\"card-title\">{children}</div>,\n}));\n\njest.mock('@/components/ui/badge', () => ({\n  Badge: ({ children, className }: any) => (\n    <span className={className} data-testid=\"badge\">\n      {children}\n    </span>\n  ),\n}));\n\njest.mock('@/components/ui/avatar', () => ({\n  Avatar: ({ children }: any) => <div data-testid=\"avatar\">{children}</div>,\n  AvatarFallback: ({ children }: any) => <div data-testid=\"avatar-fallback\">{children}</div>,\n  AvatarImage: ({ src, alt }: any) => <img src={src} alt={alt} data-testid=\"avatar-image\" />,\n}));\n\njest.mock('@/components/ui/progress', () => ({\n  Progress: ({ value }: any) => <div data-testid=\"progress\" data-value={value} />,\n}));\n\ndescribe('RFIDVerificationSystem', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('renders the main RFID verification interface', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('RFID Verification System')).toBeInTheDocument();\n    expect(screen.getByText('Real-time meal delivery verification and monitoring')).toBeInTheDocument();\n  });\n\n  it('displays system statistics', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('1247')).toBeInTheDocument(); // Total scans\n    expect(screen.getByText('99.7%')).toBeInTheDocument(); // Success rate\n    expect(screen.getByText('0.3s')).toBeInTheDocument(); // Avg scan time\n  });\n\n  it('shows device status information', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('Cafeteria Main Counter')).toBeInTheDocument();\n    expect(screen.getByText('South Wing Counter')).toBeInTheDocument();\n    expect(screen.getByText('Sports Complex Counter')).toBeInTheDocument();\n  });\n\n  it('displays transaction history', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('Recent Transactions')).toBeInTheDocument();\n    expect(screen.getByText('Priya Sharma')).toBeInTheDocument();\n    expect(screen.getByText('Arjun Sharma')).toBeInTheDocument();\n    expect(screen.getByText('Masala Dosa with Sambar')).toBeInTheDocument();\n  });\n\n  it('shows real-time monitor with scanner animation', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('Real-Time RFID Monitor')).toBeInTheDocument();\n    expect(screen.getByText('Ready to Scan')).toBeInTheDocument();\n    expect(screen.getByText('Place RFID card near scanner')).toBeInTheDocument();\n  });\n\n  it('handles test scan button click', async () => {\n    render(<RFIDVerificationSystem />);\n    \n    const testScanButton = screen.getByText('Test Scan');\n    fireEvent.click(testScanButton);\n    \n    // The button should be disabled during scanning\n    await waitFor(() => {\n      expect(testScanButton).toBeDisabled();\n    });\n  });\n\n  it('displays online device count', () => {\n    render(<RFIDVerificationSystem />);\n    \n    // Should show 2/3 devices online based on mock data\n    expect(screen.getByText('2/3 Online')).toBeInTheDocument();\n  });\n\n  it('shows device battery levels and signal strength', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('85%')).toBeInTheDocument(); // Battery level\n    expect(screen.getByText('95%')).toBeInTheDocument(); // Signal strength\n    expect(screen.getByText('67%')).toBeInTheDocument(); // Another device battery\n  });\n\n  it('displays firmware versions', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('v2.1.3')).toBeInTheDocument();\n    expect(screen.getByText('v2.0.8')).toBeInTheDocument();\n  });\n\n  it('shows transaction status badges', () => {\n    render(<RFIDVerificationSystem />);\n    \n    const badges = screen.getAllByTestId('badge');\n    expect(badges.length).toBeGreaterThan(0);\n  });\n\n  it('displays nutrition scores in transactions', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('Score: 88%')).toBeInTheDocument();\n    expect(screen.getByText('Score: 85%')).toBeInTheDocument();\n  });\n\n  it('shows photo button for transactions with photos', () => {\n    render(<RFIDVerificationSystem />);\n    \n    expect(screen.getByText('Photo')).toBeInTheDocument();\n  });\n\n  it('handles take photo button', () => {\n    render(<RFIDVerificationSystem />);\n    \n    const takePhotoButton = screen.getByText('Take Photo');\n    expect(takePhotoButton).toBeInTheDocument();\n    \n    fireEvent.click(takePhotoButton);\n    // Photo functionality would be implemented with actual camera integration\n  });\n});\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffManagementSystem.tsx",["2347"],[],"\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Users,\n  Calendar,\n  Clock,\n  CheckCircle,\n  AlertTriangle,\n  TrendingUp,\n  TrendingDown,\n  MapPin,\n  Phone,\n  Mail,\n  Star,\n  Award,\n  Activity,\n  BarChart3,\n  Settings,\n  Plus,\n  Edit,\n  Trash2,\n  Search,\n  Filter,\n  Download,\n  Upload,\n  Eye,\n  UserPlus,\n  UserMinus,\n  Target,\n  Zap,\n  Loader2\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Input } from '@/components/ui/input';\n\n// API hooks\nimport { useStaffMembers, useStaffMetrics } from '@/hooks/useApiIntegration';\n\n// TypeScript interfaces for Staff Management\ninterface StaffMember {\n  id: string;\n  employeeId: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: 'chef' | 'assistant' | 'prep' | 'manager' | 'server' | 'cleaner';\n  department: 'kitchen' | 'service' | 'management' | 'maintenance';\n  status: 'active' | 'break' | 'offline' | 'sick' | 'vacation';\n  avatar?: string;\n  hireDate: string;\n  salary: number;\n  efficiency: number;\n  hoursWorked: number;\n  tasksCompleted: number;\n  currentTask?: string;\n  shift: Shift;\n  skills: string[];\n  certifications: string[];\n  performanceRating: number;\n  attendanceRate: number;\n  lastLogin: string;\n  location: string;\n}\n\ninterface Shift {\n  id: string;\n  name: string;\n  startTime: string;\n  endTime: string;\n  days: string[];\n  isActive: boolean;\n}\n\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  assignedTo: string;\n  assignedBy: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_progress' | 'completed' | 'overdue';\n  dueDate: string;\n  estimatedHours: number;\n  actualHours?: number;\n  category: string;\n  tags: string[];\n}\n\ninterface Schedule {\n  id: string;\n  staffId: string;\n  date: string;\n  shiftId: string;\n  status: 'scheduled' | 'confirmed' | 'absent' | 'sick';\n  checkIn?: string;\n  checkOut?: string;\n  hoursWorked?: number;\n  notes?: string;\n}\n\ninterface StaffMetrics {\n  totalStaff: number;\n  activeStaff: number;\n  averageEfficiency: number;\n  totalHoursWorked: number;\n  tasksCompleted: number;\n  attendanceRate: number;\n  turnoverRate: number;\n  averageSalary: number;\n}\n\n// Mock data for staff management\nconst mockShifts: Shift[] = [\n  {\n    id: 'shift-1',\n    name: 'Morning Shift',\n    startTime: '06:00',\n    endTime: '14:00',\n    days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    isActive: true\n  },\n  {\n    id: 'shift-2',\n    name: 'Afternoon Shift',\n    startTime: '14:00',\n    endTime: '22:00',\n    days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    isActive: true\n  },\n  {\n    id: 'shift-3',\n    name: 'Weekend Shift',\n    startTime: '08:00',\n    endTime: '16:00',\n    days: ['saturday', 'sunday'],\n    isActive: true\n  }\n];\n\nconst mockStaffMembers: StaffMember[] = [\n  {\n    id: 'staff-1',\n    employeeId: 'EMP001',\n    name: 'Rajesh Kumar',\n    email: 'rajesh.kumar@hasivu.com',\n    phone: '+91-9876543210',\n    role: 'chef',\n    department: 'kitchen',\n    status: 'active',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',\n    hireDate: '2023-01-15',\n    salary: 45000,\n    efficiency: 92,\n    hoursWorked: 160,\n    tasksCompleted: 48,\n    currentTask: 'Preparing lunch orders',\n    shift: mockShifts[0],\n    skills: ['Indian Cuisine', 'Grilling', 'Food Safety', 'Team Leadership'],\n    certifications: ['Food Safety Certificate', 'Culinary Arts Diploma'],\n    performanceRating: 4.8,\n    attendanceRate: 96,\n    lastLogin: '2024-01-15T08:30:00Z',\n    location: 'Main Kitchen'\n  },\n  {\n    id: 'staff-2',\n    employeeId: 'EMP002',\n    name: 'Sunita Devi',\n    email: 'sunita.devi@hasivu.com',\n    phone: '+91-9876543211',\n    role: 'assistant',\n    department: 'kitchen',\n    status: 'active',\n    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',\n    hireDate: '2023-03-20',\n    salary: 28000,\n    efficiency: 88,\n    hoursWorked: 168,\n    tasksCompleted: 62,\n    currentTask: 'Cleaning prep station',\n    shift: mockShifts[0],\n    skills: ['Food Prep', 'Cleaning', 'Inventory Management'],\n    certifications: ['Hygiene Certificate'],\n    performanceRating: 4.5,\n    attendanceRate: 94,\n    lastLogin: '2024-01-15T07:45:00Z',\n    location: 'Prep Area'\n  },\n  {\n    id: 'staff-3',\n    employeeId: 'EMP003',\n    name: 'Mohammed Ali',\n    email: 'mohammed.ali@hasivu.com',\n    phone: '+91-9876543212',\n    role: 'prep',\n    department: 'kitchen',\n    status: 'break',\n    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',\n    hireDate: '2023-06-10',\n    salary: 25000,\n    efficiency: 85,\n    hoursWorked: 120,\n    tasksCompleted: 35,\n    shift: mockShifts[1],\n    skills: ['Vegetable Prep', 'Meat Processing', 'Stock Management'],\n    certifications: ['Food Handler Certificate'],\n    performanceRating: 4.2,\n    attendanceRate: 91,\n    lastLogin: '2024-01-15T14:15:00Z',\n    location: 'Storage Area'\n  },\n  {\n    id: 'staff-4',\n    employeeId: 'EMP004',\n    name: 'Priya Sharma',\n    email: 'priya.sharma@hasivu.com',\n    phone: '+91-9876543213',\n    role: 'manager',\n    department: 'management',\n    status: 'active',\n    avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=100&h=100&fit=crop&crop=face',\n    hireDate: '2022-09-01',\n    salary: 65000,\n    efficiency: 95,\n    hoursWorked: 180,\n    tasksCompleted: 28,\n    currentTask: 'Monthly performance review',\n    shift: mockShifts[0],\n    skills: ['Team Management', 'Operations', 'Analytics', 'Training'],\n    certifications: ['Management Certificate', 'HR Certification'],\n    performanceRating: 4.9,\n    attendanceRate: 98,\n    lastLogin: '2024-01-15T09:00:00Z',\n    location: 'Office'\n  }\n];\n\nconst mockTasks: Task[] = [\n  {\n    id: 'task-1',\n    title: 'Prepare lunch menu for 200 students',\n    description: 'Coordinate with team to prepare balanced lunch menu including main course, sides, and beverages',\n    assignedTo: 'staff-1',\n    assignedBy: 'staff-4',\n    priority: 'high',\n    status: 'in_progress',\n    dueDate: '2024-01-15T12:00:00Z',\n    estimatedHours: 4,\n    actualHours: 2.5,\n    category: 'Food Preparation',\n    tags: ['urgent', 'lunch', 'coordination']\n  },\n  {\n    id: 'task-2',\n    title: 'Inventory check for dry goods',\n    description: 'Complete inventory audit for all dry goods and update stock levels in system',\n    assignedTo: 'staff-2',\n    assignedBy: 'staff-4',\n    priority: 'medium',\n    status: 'completed',\n    dueDate: '2024-01-15T10:00:00Z',\n    estimatedHours: 2,\n    actualHours: 1.8,\n    category: 'Inventory',\n    tags: ['inventory', 'audit', 'stock']\n  },\n  {\n    id: 'task-3',\n    title: 'Deep clean prep area',\n    description: 'Thorough cleaning and sanitization of all prep surfaces and equipment',\n    assignedTo: 'staff-3',\n    assignedBy: 'staff-1',\n    priority: 'medium',\n    status: 'pending',\n    dueDate: '2024-01-15T16:00:00Z',\n    estimatedHours: 3,\n    category: 'Cleaning',\n    tags: ['cleaning', 'sanitization', 'maintenance']\n  }\n];\n\nconst mockMetrics: StaffMetrics = {\n  totalStaff: 12,\n  activeStaff: 8,\n  averageEfficiency: 89.5,\n  totalHoursWorked: 2840,\n  tasksCompleted: 173,\n  attendanceRate: 94.7,\n  turnoverRate: 8.3,\n  averageSalary: 38750\n};\n\n// Utility functions\nconst getStatusColor = (status: StaffMember['status']) => {\n  switch (status) {\n    case 'active': return 'bg-green-100 text-green-800 border-green-200';\n    case 'break': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'offline': return 'bg-gray-100 text-gray-800 border-gray-200';\n    case 'sick': return 'bg-red-100 text-red-800 border-red-200';\n    case 'vacation': return 'bg-blue-100 text-blue-800 border-blue-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getTaskStatusColor = (status: Task['status']) => {\n  switch (status) {\n    case 'completed': return 'bg-green-100 text-green-800 border-green-200';\n    case 'in_progress': return 'bg-blue-100 text-blue-800 border-blue-200';\n    case 'pending': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n    case 'overdue': return 'bg-red-100 text-red-800 border-red-200';\n    default: return 'bg-gray-100 text-gray-800 border-gray-200';\n  }\n};\n\nconst getRoleIcon = (role: StaffMember['role']) => {\n  switch (role) {\n    case 'chef': return '👨‍🍳';\n    case 'assistant': return '👩‍🍳';\n    case 'prep': return '🔪';\n    case 'manager': return '👔';\n    case 'server': return '🍽️';\n    case 'cleaner': return '🧹';\n    default: return '👤';\n  }\n};\n\n// Staff Member Card Component\nconst StaffMemberCard = ({ staff }: { staff: StaffMember }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  return (\n    <Card className=\"hover:shadow-lg transition-all duration-200\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-start space-x-4 mb-4\">\n          <div className=\"relative\">\n            <Avatar className=\"w-16 h-16\">\n              <AvatarImage src={staff.avatar} alt={staff.name} />\n              <AvatarFallback className=\"text-lg\">\n                {staff.name.split(' ').map(n => n[0]).join('')}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"absolute -bottom-1 -right-1 text-2xl\">\n              {getRoleIcon(staff.role)}\n            </div>\n            <div className={`absolute -top-1 -right-1 w-4 h-4 rounded-full border-2 border-white ${\n              staff.status === 'active' ? 'bg-green-500' :\n              staff.status === 'break' ? 'bg-yellow-500' :\n              staff.status === 'offline' ? 'bg-gray-500' :\n              staff.status === 'sick' ? 'bg-red-500' :\n              'bg-blue-500'\n            }`} />\n          </div>\n          \n          <div className=\"flex-1\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <div>\n                <h3 className=\"font-semibold text-lg text-gray-900\">{staff.name}</h3>\n                <p className=\"text-sm text-gray-600 capitalize\">{staff.role} • {staff.department}</p>\n                <p className=\"text-xs text-gray-500\">{staff.employeeId}</p>\n              </div>\n              <Badge className={`${getStatusColor(staff.status)} border`}>\n                {staff.status}\n              </Badge>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3 text-sm mb-3\">\n              <div>\n                <p className=\"text-gray-600\">Efficiency</p>\n                <div className=\"flex items-center space-x-2\">\n                  <Progress value={staff.efficiency} className=\"h-2 flex-1\" />\n                  <span className=\"font-semibold\">{staff.efficiency}%</span>\n                </div>\n              </div>\n              <div>\n                <p className=\"text-gray-600\">Rating</p>\n                <div className=\"flex items-center space-x-1\">\n                  <Star className=\"w-4 h-4 text-yellow-500 fill-current\" />\n                  <span className=\"font-semibold\">{staff.performanceRating}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {staff.currentTask && (\n          <div className=\"mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <Activity className=\"w-4 h-4 text-blue-600\" />\n              <span className=\"text-sm font-medium text-blue-800\">Current Task</span>\n            </div>\n            <p className=\"text-sm text-blue-700\">{staff.currentTask}</p>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-3 gap-3 text-center mb-4\">\n          <div className=\"p-2 bg-gray-50 rounded-lg\">\n            <div className=\"text-lg font-bold text-gray-900\">{staff.hoursWorked}h</div>\n            <div className=\"text-xs text-gray-600\">Hours Worked</div>\n          </div>\n          <div className=\"p-2 bg-gray-50 rounded-lg\">\n            <div className=\"text-lg font-bold text-gray-900\">{staff.tasksCompleted}</div>\n            <div className=\"text-xs text-gray-600\">Tasks Done</div>\n          </div>\n          <div className=\"p-2 bg-gray-50 rounded-lg\">\n            <div className=\"text-lg font-bold text-gray-900\">{staff.attendanceRate}%</div>\n            <div className=\"text-xs text-gray-600\">Attendance</div>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between text-xs text-gray-500 mb-4\">\n          <span className=\"flex items-center\">\n            <MapPin className=\"w-3 h-3 mr-1\" />\n            {staff.location}\n          </span>\n          <span className=\"flex items-center\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            {staff.shift.name}\n          </span>\n        </div>\n\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            className=\"space-y-3 pt-3 border-t\"\n          >\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Contact</h4>\n              <div className=\"space-y-1 text-sm text-gray-600\">\n                <div className=\"flex items-center\">\n                  <Mail className=\"w-4 h-4 mr-2\" />\n                  {staff.email}\n                </div>\n                <div className=\"flex items-center\">\n                  <Phone className=\"w-4 h-4 mr-2\" />\n                  {staff.phone}\n                </div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Skills</h4>\n              <div className=\"flex flex-wrap gap-1\">\n                {staff.skills.map((skill, index) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {skill}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Certifications</h4>\n              <div className=\"flex flex-wrap gap-1\">\n                {staff.certifications.map((cert, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    <Award className=\"w-3 h-3 mr-1\" />\n                    {cert}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        <div className=\"flex space-x-2 mt-4\">\n          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n          <Button \n            size=\"sm\" \n            variant=\"outline\" \n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <Eye className=\"w-3 h-3 mr-1\" />\n            {isExpanded ? 'Less' : 'More'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Task Card Component\nconst TaskCard = ({ task, staffMembers }: { task: Task; staffMembers: StaffMember[] }) => {\n  const assignedStaff = staffMembers.find(s => s.id === task.assignedTo);\n  const assignedByStaff = staffMembers.find(s => s.id === task.assignedBy);\n\n  return (\n    <Card className=\"hover:shadow-md transition-shadow\">\n      <CardContent className=\"pt-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex-1\">\n            <h4 className=\"font-semibold text-gray-900 mb-1\">{task.title}</h4>\n            <p className=\"text-sm text-gray-600 mb-2\">{task.description}</p>\n          </div>\n          <Badge className={`${getTaskStatusColor(task.status)} border ml-2`}>\n            {task.status.replace('_', ' ')}\n          </Badge>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3 text-sm mb-3\">\n          <div>\n            <p className=\"text-gray-600\">Assigned to</p>\n            <div className=\"flex items-center space-x-2\">\n              {assignedStaff?.avatar && (\n                <Avatar className=\"w-6 h-6\">\n                  <AvatarImage src={assignedStaff.avatar} alt={assignedStaff.name} />\n                  <AvatarFallback className=\"text-xs\">\n                    {assignedStaff.name.split(' ').map(n => n[0]).join('')}\n                  </AvatarFallback>\n                </Avatar>\n              )}\n              <span className=\"font-medium\">{assignedStaff?.name}</span>\n            </div>\n          </div>\n          <div>\n            <p className=\"text-gray-600\">Priority</p>\n            <Badge className={`${\n              task.priority === 'urgent' ? 'bg-red-100 text-red-800' :\n              task.priority === 'high' ? 'bg-orange-100 text-orange-800' :\n              task.priority === 'medium' ? 'bg-blue-100 text-blue-800' :\n              'bg-gray-100 text-gray-800'\n            }`}>\n              {task.priority}\n            </Badge>\n          </div>\n        </div>\n\n        <div className=\"flex items-center justify-between text-xs text-gray-500 mb-3\">\n          <span className=\"flex items-center\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Due: {new Date(task.dueDate).toLocaleString()}\n          </span>\n          <span>\n            {task.actualHours ? `${task.actualHours}h` : `Est: ${task.estimatedHours}h`}\n          </span>\n        </div>\n\n        <div className=\"flex flex-wrap gap-1 mb-3\">\n          {task.tags.map((tag, index) => (\n            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n\n        <div className=\"flex space-x-2\">\n          <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n            <Eye className=\"w-3 h-3 mr-1\" />\n            View\n          </Button>\n          <Button size=\"sm\" variant=\"outline\">\n            <Edit className=\"w-3 h-3 mr-1\" />\n            Edit\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Main Staff Management System Component\nexport const StaffManagementSystem: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState('staff');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterRole, setFilterRole] = useState('all');\n  const [filterStatus, setFilterStatus] = useState('all');\n\n  // Live data\n  const { data: staffData, loading: staffLoading, error: staffError } = useStaffMembers();\n  const { data: metricsData, loading: metricsLoading, error: metricsError } = useStaffMetrics();\n\n  const staff: any[] = staffData || [];\n  const metrics: any = metricsData || {\n    totalStaff: staff.length,\n    activeStaff: staff.filter((s: any) => s.status === 'active').length,\n    averageEfficiency: 0,\n    totalHoursWorked: 0,\n    tasksCompleted: 0,\n    attendanceRate: 0,\n    turnoverRate: 0,\n    averageSalary: 0,\n  };\n\n  // Filter staff members\n  const filteredStaff = useMemo(() => {\n    return staff.filter((s: any) => {\n      const matchesSearch = (s.name || '').toLowerCase().includes(searchTerm.toLowerCase()) ||\n                            (s.email || '').toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesRole = filterRole === 'all' || (s.role || '').toLowerCase() === filterRole;\n      const matchesStatus = filterStatus === 'all' || (s.status || '').toLowerCase() === filterStatus;\n      return matchesSearch && matchesRole && matchesStatus;\n    });\n  }, [staff, searchTerm, filterRole, filterStatus]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      <div className=\"max-w-7xl mx-auto space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\" data-testid=\"staff-header\">Staff Management</h1>\n            <p className=\"text-gray-600\">Manage staff scheduling, tasks, and performance tracking</p>\n            {(staffError || metricsError) && (\n              <div className=\"mt-2 p-3 rounded bg-red-50 border border-red-200 text-red-800\">Failed to load staff data.</div>\n            )}\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button variant=\"outline\">\n              <Download className=\"w-4 h-4 mr-2\" />\n              Export\n            </Button>\n            <Button variant=\"outline\">\n              <Upload className=\"w-4 h-4 mr-2\" />\n              Import\n            </Button>\n            <Button>\n              <UserPlus className=\"w-4 h-4 mr-2\" />\n              Add Staff\n            </Button>\n          </div>\n        </div>\n\n        {/* Metrics Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <Users className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.totalStaff ?? '-'}</p>\n                  <p className=\"text-gray-600\">Total Staff</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-full\">\n                  <Activity className=\"w-6 h-6 text-green-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.activeStaff ?? 0}</p>\n                  <p className=\"text-gray-600\">Currently Active</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-full\">\n                  <Target className=\"w-6 h-6 text-orange-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.averageEfficiency ?? 0}%</p>\n                  <p className=\"text-gray-600\">Avg Efficiency</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-full\">\n                  <CheckCircle className=\"w-6 h-6 text-purple-600\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-2xl font-bold\">{metrics.attendanceRate ?? 0}%</p>\n                  <p className=\"text-gray-600\">Attendance Rate</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"staff\">Staff Members</TabsTrigger>\n            <TabsTrigger value=\"tasks\">Tasks</TabsTrigger>\n            <TabsTrigger value=\"schedule\">Schedule</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Staff Members Tab */}\n          <TabsContent value=\"staff\" className=\"space-y-6\">\n            <div className=\"flex items-center space-x-4 mb-6\">\n              <div className=\"flex-1\">\n                <Input\n                  placeholder=\"Search staff by name, ID, or email...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"w-full\"\n                />\n              </div>\n              <select\n                className=\"px-3 py-2 border border-gray-200 rounded-md\"\n                value={filterRole}\n                onChange={(e) => setFilterRole(e.target.value)}\n              >\n                <option value=\"all\">All Roles</option>\n                <option value=\"chef\">Chef</option>\n                <option value=\"assistant\">Assistant</option>\n                <option value=\"prep\">Prep Cook</option>\n                <option value=\"manager\">Manager</option>\n                <option value=\"server\">Server</option>\n                <option value=\"cleaner\">Cleaner</option>\n              </select>\n              <select\n                className=\"px-3 py-2 border border-gray-200 rounded-md\"\n                value={filterStatus}\n                onChange={(e) => setFilterStatus(e.target.value)}\n              >\n                <option value=\"all\">All Status</option>\n                <option value=\"active\">Active</option>\n                <option value=\"break\">On Break</option>\n                <option value=\"offline\">Offline</option>\n                <option value=\"sick\">Sick</option>\n                <option value=\"vacation\">Vacation</option>\n              </select>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredStaff.map((s: any) => (\n                <div data-testid=\"staff-card\" key={s.id}>\n                  {/* Narrow mapping to StaffMember shape where possible */}\n                  <StaffMemberCard staff={{\n                    id: s.id,\n                    employeeId: s.employeeId || s.id,\n                    name: s.name || 'Staff',\n                    email: s.email || '-',\n                    phone: s.phone || '-',\n                    role: (s.role || 'chef') as any,\n                    department: (s.department || 'kitchen') as any,\n                    status: (s.status || 'active') as any,\n                    avatar: s.avatar,\n                    hireDate: s.hireDate || new Date().toISOString(),\n                    salary: s.salary || 0,\n                    efficiency: s.efficiency || 0,\n                    hoursWorked: s.hoursWorked || 0,\n                    tasksCompleted: s.tasksCompleted || 0,\n                    currentTask: s.currentTask,\n                    shift: { id: 'shift', name: 'Shift', startTime: '09:00', endTime: '17:00', days: [], isActive: true },\n                    skills: s.skills || [],\n                    certifications: s.certifications || [],\n                    performanceRating: s.performanceRating || 0,\n                    attendanceRate: s.attendanceRate || 0,\n                    lastLogin: s.lastLogin || new Date().toISOString(),\n                    location: s.location || 'Kitchen',\n                  }} />\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Tasks Tab */}\n          <TabsContent value=\"tasks\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Task Management</h2>\n              <Button disabled>\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Task\n              </Button>\n            </div>\n            <div className=\"p-3 rounded bg-gray-50 border border-gray-200 text-gray-700\">\n              Live tasks integration will appear here once backend endpoints are connected.\n            </div>\n          </TabsContent>\n\n          {/* Schedule Tab */}\n          <TabsContent value=\"schedule\" className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Staff Schedule</h2>\n              <Button disabled>\n                <Calendar className=\"w-4 h-4 mr-2\" />\n                Create Schedule\n              </Button>\n            </div>\n            <div className=\"p-3 rounded bg-gray-50 border border-gray-200 text-gray-700\">\n              Live scheduling integration will appear here once backend endpoints are connected.\n            </div>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Clock className=\"w-5 h-5 mr-2 text-blue-600\" />\n                      {shift.name}\n                    </CardTitle>\n                    <CardDescription>\n                      {shift.startTime} - {shift.endTime}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 mb-2\">Days</p>\n                        <div className=\"flex flex-wrap gap-1\">\n                          {shift.days.map((day) => (\n                            <Badge key={day} variant=\"secondary\" className=\"text-xs capitalize\">\n                              {day.slice(0, 3)}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <p className=\"text-sm font-medium text-gray-900 mb-2\">\n                          Assigned Staff ({staffMembers.filter(s => s.shift.id === shift.id).length})\n                        </p>\n                        <div className=\"space-y-2\">\n                          {staffMembers\n                            .filter(s => s.shift.id === shift.id)\n                            .slice(0, 3)\n                            .map((staff) => (\n                              <div key={staff.id} className=\"flex items-center space-x-2\">\n                                <Avatar className=\"w-6 h-6\">\n                                  <AvatarImage src={staff.avatar} alt={staff.name} />\n                                  <AvatarFallback className=\"text-xs\">\n                                    {staff.name.split(' ').map(n => n[0]).join('')}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"text-sm\">{staff.name}</span>\n                                <Badge className={`${getStatusColor(staff.status)} text-xs`}>\n                                  {staff.status}\n                                </Badge>\n                              </div>\n                            ))}\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Performance Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex items-center justify-between text-sm mb-2\">\n                        <span>Average Efficiency</span>\n                        <span className=\"font-semibold\">{metrics.averageEfficiency ?? 0}%</span>\n                      </div>\n                      <Progress value={metrics.averageEfficiency ?? 0} className=\"h-3\" />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex items-center justify-between text-sm mb-2\">\n                        <span>Attendance Rate</span>\n                        <span className=\"font-semibold\">{metrics.attendanceRate ?? 0}%</span>\n                      </div>\n                      <Progress value={metrics.attendanceRate ?? 0} className=\"h-3\" />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">{metrics.tasksCompleted}</div>\n                        <div className=\"text-sm text-gray-600\">Tasks Completed</div>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{metrics.totalHoursWorked}h</div>\n                        <div className=\"text-sm text-gray-600\">Total Hours</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Financial Overview</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-purple-600\">\n                        Rs.{(metrics.averageSalary ?? 0).toLocaleString()}\n                      </div>\n                      <div className=\"text-sm text-gray-600\">Average Salary</div>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4 pt-4\">\n                      <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"text-lg font-bold text-red-600\">{metrics.turnoverRate}%</div>\n                        <div className=\"text-xs text-gray-600\">Turnover Rate</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-gray-50 rounded-lg\">\n                        <div className=\"text-lg font-bold text-green-600\">Rs.465K</div>\n                        <div className=\"text-xs text-gray-600\">Monthly Payroll</div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default StaffManagementSystem;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffScheduling.tsx",["2348","2349","2350","2351","2352","2353","2354","2355","2356","2357","2358","2359"],[],"\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Calendar,\n  Clock,\n  Users,\n  Plus,\n  Edit2,\n  Trash2,\n  ChevronLeft,\n  ChevronRight,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Loader2,\n  User,\n  MapPin,\n  Coffee,\n  Moon,\n  Sun\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { useToast } from '@/hooks/use-toast';\n\n// API hooks\nimport { useStaffSchedules, useStaffMembers, useStaffMutations } from '@/hooks/useApiIntegration';\nimport { useWebSocket } from '@/hooks/useSocket';\n\n// TypeScript interfaces\ninterface Schedule {\n  id: string;\n  staffId: string;\n  date: string;\n  shiftId: string;\n  status: 'scheduled' | 'confirmed' | 'absent' | 'sick' | 'completed';\n  checkIn?: string;\n  checkOut?: string;\n  hoursWorked?: number;\n  notes?: string;\n  staff?: {\n    id: string;\n    name: string;\n    role: string;\n    avatar?: string;\n    email: string;\n    phone: string;\n  };\n  shift?: Shift;\n}\n\ninterface Shift {\n  id: string;\n  name: string;\n  startTime: string;\n  endTime: string;\n  days: string[];\n  isActive: boolean;\n  color?: string;\n}\n\nconst shiftTemplates: Shift[] = [\n  {\n    id: 'morning',\n    name: 'Morning Shift',\n    startTime: '06:00',\n    endTime: '14:00',\n    days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    isActive: true,\n    color: 'bg-yellow-100 text-yellow-800 border-yellow-200'\n  },\n  {\n    id: 'afternoon',\n    name: 'Afternoon Shift',\n    startTime: '14:00',\n    endTime: '22:00',\n    days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday'],\n    isActive: true,\n    color: 'bg-blue-100 text-blue-800 border-blue-200'\n  },\n  {\n    id: 'night',\n    name: 'Night Shift',\n    startTime: '22:00',\n    endTime: '06:00',\n    days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'],\n    isActive: true,\n    color: 'bg-purple-100 text-purple-800 border-purple-200'\n  },\n  {\n    id: 'weekend',\n    name: 'Weekend Shift',\n    startTime: '08:00',\n    endTime: '16:00',\n    days: ['saturday', 'sunday'],\n    isActive: true,\n    color: 'bg-green-100 text-green-800 border-green-200'\n  }\n];\n\nconst getShiftIcon = (shiftId: string) => {\n  switch (shiftId) {\n    case 'morning':\n      return <Sun className=\"w-3 h-3\" />;\n    case 'afternoon':\n      return <Coffee className=\"w-3 h-3\" />;\n    case 'night':\n      return <Moon className=\"w-3 h-3\" />;\n    default:\n      return <Clock className=\"w-3 h-3\" />;\n  }\n};\n\nconst ScheduleStatusBadge = ({ status }: { status: Schedule['status'] }) => {\n  const getStatusStyles = () => {\n    switch (status) {\n      case 'confirmed':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'completed':\n        return 'bg-purple-100 text-purple-800 border-purple-200';\n      case 'absent':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'sick':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'confirmed':\n      case 'completed':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      case 'absent':\n        return <XCircle className=\"w-3 h-3\" />;\n      case 'sick':\n        return <AlertTriangle className=\"w-3 h-3\" />;\n      default:\n        return <Clock className=\"w-3 h-3\" />;\n    }\n  };\n\n  return (\n    <Badge className={`${getStatusStyles()} border capitalize flex items-center gap-1`}>\n      {getStatusIcon()}\n      {status}\n    </Badge>\n  );\n};\n\nconst CalendarView = ({ \n  schedules, \n  staffMembers,\n  currentWeek,\n  onScheduleClick,\n  onCreateSchedule \n}: { \n  schedules: Schedule[];\n  staffMembers: any[];\n  currentWeek: Date;\n  onScheduleClick: (schedule: Schedule) => void;\n  onCreateSchedule: (date: string, staffId: string) => void;\n}) => {\n  const weekDays = useMemo(() => {\n    const days = [];\n    const startOfWeek = new Date(currentWeek);\n    startOfWeek.setDate(startOfWeek.getDate() - startOfWeek.getDay());\n    \n    for (let i = 0; i < 7; i++) {\n      const day = new Date(startOfWeek);\n      day.setDate(startOfWeek.getDate() + i);\n      days.push(day);\n    }\n    return days;\n  }, [currentWeek]);\n\n  const getSchedulesForDay = (date: Date, staffId: string) => {\n    const dateStr = date.toISOString().split('T')[0];\n    return schedules.filter(s => \n      s.date === dateStr && s.staffId === staffId\n    );\n  };\n\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full border-collapse\">\n        <thead>\n          <tr>\n            <th className=\"text-left p-3 border-b font-medium text-gray-700\">Staff</th>\n            {weekDays.map((day, index) => (\n              <th key={index} className=\"text-center p-3 border-b border-l font-medium text-gray-700 min-w-[120px]\">\n                <div>{day.toLocaleDateString('en-US', { weekday: 'short' })}</div>\n                <div className=\"text-sm text-gray-500\">\n                  {day.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })}\n                </div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {staffMembers.map(staff => (\n            <tr key={staff.id} className=\"hover:bg-gray-50\">\n              <td className=\"p-3 border-b\">\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={staff.avatar} alt={staff.name} />\n                    <AvatarFallback>\n                      {staff.name.split(' ').map(n => n[0]).join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{staff.name}</p>\n                    <p className=\"text-xs text-gray-500\">{staff.role}</p>\n                  </div>\n                </div>\n              </td>\n              {weekDays.map((day, dayIndex) => {\n                const daySchedules = getSchedulesForDay(day, staff.id);\n                const isToday = day.toDateString() === new Date().toDateString();\n                \n                return (\n                  <td \n                    key={dayIndex} \n                    className={`p-2 border-b border-l ${\n                      isToday ? 'bg-blue-50/50' : ''\n                    }`}\n                  >\n                    <div className=\"space-y-1 min-h-[80px]\">\n                      {daySchedules.map(schedule => {\n                        const shift = shiftTemplates.find(s => s.id === schedule.shiftId);\n                        return (\n                          <motion.div\n                            key={schedule.id}\n                            initial={{ opacity: 0, scale: 0.9 }}\n                            animate={{ opacity: 1, scale: 1 }}\n                            className={`p-2 rounded text-xs cursor-pointer hover:shadow-md transition-shadow ${\n                              shift?.color || 'bg-gray-100'\n                            }`}\n                            onClick={() => onScheduleClick(schedule)}\n                            data-testid={`schedule-${schedule.id}`}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <div className=\"flex items-center gap-1\">\n                                {getShiftIcon(schedule.shiftId)}\n                                <span className=\"font-medium\">\n                                  {shift?.startTime} - {shift?.endTime}\n                                </span>\n                              </div>\n                            </div>\n                            {schedule.status !== 'scheduled' && (\n                              <div className=\"mt-1\">\n                                <ScheduleStatusBadge status={schedule.status} />\n                              </div>\n                            )}\n                          </motion.div>\n                        );\n                      })}\n                      {daySchedules.length === 0 && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-full h-full opacity-0 hover:opacity-100 transition-opacity\"\n                          onClick={() => onCreateSchedule(day.toISOString().split('T')[0], staff.id)}\n                        >\n                          <Plus className=\"w-3 h-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst CreateScheduleDialog = ({ \n  onCreateSchedule,\n  staffMembers,\n  initialDate,\n  initialStaffId\n}: { \n  onCreateSchedule: (schedule: Partial<Schedule>) => void;\n  staffMembers: any[];\n  initialDate?: string;\n  initialStaffId?: string;\n}) => {\n  const [open, setOpen] = useState(false);\n  const [scheduleData, setScheduleData] = useState<Partial<Schedule>>({\n    staffId: initialStaffId || '',\n    date: initialDate || new Date().toISOString().split('T')[0],\n    shiftId: 'morning',\n    status: 'scheduled',\n    notes: ''\n  });\n\n  const handleSubmit = () => {\n    if (scheduleData.staffId && scheduleData.date && scheduleData.shiftId) {\n      onCreateSchedule(scheduleData);\n      setOpen(false);\n      setScheduleData({\n        staffId: '',\n        date: new Date().toISOString().split('T')[0],\n        shiftId: 'morning',\n        status: 'scheduled',\n        notes: ''\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button data-testid=\"create-schedule-button\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Add Schedule\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create Schedule</DialogTitle>\n          <DialogDescription>\n            Add a new schedule for a staff member\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"staff\">Staff Member</Label>\n            <Select\n              value={scheduleData.staffId}\n              onValueChange={(value) => setScheduleData({ ...scheduleData, staffId: value })}\n            >\n              <SelectTrigger id=\"staff\" data-testid=\"schedule-staff-select\">\n                <SelectValue placeholder=\"Select staff member\" />\n              </SelectTrigger>\n              <SelectContent>\n                {staffMembers.map((staff) => (\n                  <SelectItem key={staff.id} value={staff.id}>\n                    {staff.name} - {staff.role}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"date\">Date</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={scheduleData.date}\n              onChange={(e) => setScheduleData({ ...scheduleData, date: e.target.value })}\n              data-testid=\"schedule-date-input\"\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"shift\">Shift</Label>\n            <Select\n              value={scheduleData.shiftId}\n              onValueChange={(value) => setScheduleData({ ...scheduleData, shiftId: value })}\n            >\n              <SelectTrigger id=\"shift\" data-testid=\"schedule-shift-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {shiftTemplates.map((shift) => (\n                  <SelectItem key={shift.id} value={shift.id}>\n                    <div className=\"flex items-center gap-2\">\n                      {getShiftIcon(shift.id)}\n                      <span>{shift.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        ({shift.startTime} - {shift.endTime})\n                      </span>\n                    </div>\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"notes\">Notes (Optional)</Label>\n            <Input\n              id=\"notes\"\n              placeholder=\"Any special notes...\"\n              value={scheduleData.notes}\n              onChange={(e) => setScheduleData({ ...scheduleData, notes: e.target.value })}\n              data-testid=\"schedule-notes-input\"\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} data-testid=\"submit-schedule-button\">\n            Create Schedule\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default function StaffScheduling() {\n  const { toast } = useToast();\n  const [currentWeek, setCurrentWeek] = useState(new Date());\n  const [viewMode, setViewMode] = useState<'week' | 'day'>('week');\n  const [selectedSchedule, setSelectedSchedule] = useState<Schedule | null>(null);\n\n  // Fetch data from backend\n  const { data: schedulesData, loading: schedulesLoading, error: schedulesError, refetch: refetchSchedules } = useStaffSchedules({\n    startDate: new Date(currentWeek.getFullYear(), currentWeek.getMonth(), currentWeek.getDate() - currentWeek.getDay()).toISOString(),\n    endDate: new Date(currentWeek.getFullYear(), currentWeek.getMonth(), currentWeek.getDate() - currentWeek.getDay() + 6).toISOString()\n  });\n  const { data: staffData, loading: staffLoading } = useStaffMembers();\n  const { createSchedule, loading: mutationLoading } = useStaffMutations();\n\n  // WebSocket for real-time updates\n  const { isConnected } = useWebSocket({\n    onMessage: (event: string, data: any) => {\n      if (event === 'schedule.updated' || event === 'schedule.created' || event === 'schedule.deleted') {\n        refetchSchedules();\n      }\n    }\n  });\n\n  // Process schedules data\n  const schedules = useMemo(() => {\n    if (!schedulesData) return [];\n    return schedulesData;\n  }, [schedulesData]);\n\n  // Calculate metrics\n  const metrics = useMemo(() => {\n    const totalScheduled = schedules.length;\n    const confirmed = schedules.filter(s => s.status === 'confirmed').length;\n    const absent = schedules.filter(s => s.status === 'absent').length;\n    const completed = schedules.filter(s => s.status === 'completed').length;\n    \n    const totalHours = schedules.reduce((sum, s) => {\n      if (s.hoursWorked) return sum + s.hoursWorked;\n      const shift = shiftTemplates.find(sh => sh.id === s.shiftId);\n      if (shift) {\n        const start = parseInt(shift.startTime.split(':')[0]);\n        const end = parseInt(shift.endTime.split(':')[0]);\n        return sum + (end > start ? end - start : 24 - start + end);\n      }\n      return sum;\n    }, 0);\n\n    return {\n      totalScheduled,\n      confirmed,\n      absent,\n      completed,\n      totalHours,\n      attendanceRate: totalScheduled > 0 ? Math.round(((confirmed + completed) / totalScheduled) * 100) : 0\n    };\n  }, [schedules]);\n\n  const handleCreateSchedule = async (scheduleData: Partial<Schedule>) => {\n    try {\n      await createSchedule(scheduleData);\n      toast({\n        title: \"Schedule Created\",\n        description: \"The schedule has been created successfully.\",\n      });\n      refetchSchedules();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create schedule. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWeekChange = (direction: 'prev' | 'next') => {\n    const newWeek = new Date(currentWeek);\n    newWeek.setDate(newWeek.getDate() + (direction === 'next' ? 7 : -7));\n    setCurrentWeek(newWeek);\n  };\n\n  const handleScheduleClick = (schedule: Schedule) => {\n    setSelectedSchedule(schedule);\n  };\n\n  const handleQuickCreateSchedule = (date: string, staffId: string) => {\n    // Open dialog with pre-filled data\n    handleCreateSchedule({\n      staffId,\n      date,\n      shiftId: 'morning',\n      status: 'scheduled'\n    });\n  };\n\n  if (schedulesLoading || staffLoading) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"staff-scheduling\">\n        {/* Header (always visible) */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Staff Scheduling</h2>\n            <p className=\"text-gray-600\">Manage staff shifts and schedules</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => handleWeekChange('prev')}\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <div className=\"px-4 py-2 bg-gray-100 rounded\">\n              <span className=\"font-medium\">\n                {currentWeek.toLocaleDateString('en-US', { \n                  month: 'long', \n                  year: 'numeric' \n                })}\n              </span>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => handleWeekChange('next')}\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n            <CreateScheduleDialog \n              onCreateSchedule={handleCreateSchedule}\n              staffMembers={staffData || []}\n            />\n          </div>\n        </div>\n\n        {/* Loading State */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Weekly Schedule</CardTitle>\n            <CardDescription>\n              Loading schedules...\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-center h-48\">\n              <Loader2 className=\"w-8 h-8 animate-spin text-gray-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (schedulesError) {\n    return (\n      <div className=\"space-y-6\" data-testid=\"staff-scheduling\">\n        {/* Header (always visible) */}\n        <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Staff Scheduling</h2>\n            <p className=\"text-gray-600\">Manage staff shifts and schedules</p>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => handleWeekChange('prev')}\n            >\n              <ChevronLeft className=\"w-4 h-4\" />\n            </Button>\n            <div className=\"px-4 py-2 bg-gray-100 rounded\">\n              <span className=\"font-medium\">\n                {currentWeek.toLocaleDateString('en-US', { \n                  month: 'long', \n                  year: 'numeric' \n                })}\n              </span>\n            </div>\n            <Button\n              variant=\"outline\"\n              size=\"icon\"\n              onClick={() => handleWeekChange('next')}\n            >\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n            <CreateScheduleDialog \n              onCreateSchedule={handleCreateSchedule}\n              staffMembers={staffData || []}\n            />\n          </div>\n        </div>\n\n        {/* Error State */}\n        <div className=\"text-center py-12\">\n          <XCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Failed to load schedules. Please try again.</p>\n          <Button onClick={refetchSchedules} className=\"mt-4\">\n            Retry\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"staff-scheduling\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Staff Scheduling</h2>\n          <p className=\"text-gray-600\">Manage staff shifts and schedules</p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => handleWeekChange('prev')}\n          >\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          <div className=\"px-4 py-2 bg-gray-100 rounded\">\n            <span className=\"font-medium\">\n              {currentWeek.toLocaleDateString('en-US', { \n                month: 'long', \n                year: 'numeric' \n              })}\n            </span>\n          </div>\n          <Button\n            variant=\"outline\"\n            size=\"icon\"\n            onClick={() => handleWeekChange('next')}\n          >\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n          <CreateScheduleDialog \n            onCreateSchedule={handleCreateSchedule}\n            staffMembers={staffData || []}\n          />\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Scheduled</p>\n                <p className=\"text-2xl font-bold\">{metrics.totalScheduled}</p>\n              </div>\n              <Calendar className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Confirmed</p>\n                <p className=\"text-2xl font-bold text-green-600\">{metrics.confirmed}</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Absent</p>\n                <p className=\"text-2xl font-bold text-red-600\">{metrics.absent}</p>\n              </div>\n              <XCircle className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Hours</p>\n                <p className=\"text-2xl font-bold\">{metrics.totalHours}h</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-purple-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Attendance Rate</p>\n                <p className=\"text-2xl font-bold\">{metrics.attendanceRate}%</p>\n              </div>\n              <Users className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Calendar View */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Weekly Schedule</CardTitle>\n          <CardDescription>\n            Click on empty slots to add schedules, or on existing schedules to edit\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <CalendarView\n            schedules={schedules}\n            staffMembers={staffData || []}\n            currentWeek={currentWeek}\n            onScheduleClick={handleScheduleClick}\n            onCreateSchedule={handleQuickCreateSchedule}\n          />\n        </CardContent>\n      </Card>\n\n      {/* Shift Legend */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Shift Types</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-wrap gap-3\">\n            {shiftTemplates.map(shift => (\n              <div\n                key={shift.id}\n                className={`flex items-center gap-2 px-3 py-2 rounded border ${shift.color}`}\n              >\n                {getShiftIcon(shift.id)}\n                <span className=\"font-medium\">{shift.name}</span>\n                <span className=\"text-xs\">({shift.startTime} - {shift.endTime})</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Selected Schedule Details */}\n      {selectedSchedule && (\n        <Dialog open={!!selectedSchedule} onOpenChange={() => setSelectedSchedule(null)}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Schedule Details</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label>Staff Member</Label>\n                <p className=\"font-medium\">{selectedSchedule.staff?.name}</p>\n              </div>\n              <div>\n                <Label>Date</Label>\n                <p className=\"font-medium\">\n                  {new Date(selectedSchedule.date).toLocaleDateString()}\n                </p>\n              </div>\n              <div>\n                <Label>Shift</Label>\n                <p className=\"font-medium\">\n                  {shiftTemplates.find(s => s.id === selectedSchedule.shiftId)?.name}\n                </p>\n              </div>\n              <div>\n                <Label>Status</Label>\n                <ScheduleStatusBadge status={selectedSchedule.status} />\n              </div>\n              {selectedSchedule.notes && (\n                <div>\n                  <Label>Notes</Label>\n                  <p className=\"text-sm text-gray-600\">{selectedSchedule.notes}</p>\n                </div>\n              )}\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setSelectedSchedule(null)}>\n                Close\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      )}\n\n      {/* Connection Status */}\n      {!isConnected && (\n        <div className=\"fixed bottom-4 right-4 bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-2 rounded-lg flex items-center gap-2\">\n          <AlertTriangle className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Real-time updates disconnected</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/staff/StaffTasksManagement.tsx",["2360","2361","2362","2363","2364","2365","2366","2367","2368","2369","2370","2371","2372","2373","2374","2375"],[],"\"use client\";\n\nimport React, { useState, useMemo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  CheckCircle,\n  Clock,\n  AlertTriangle,\n  Calendar,\n  User,\n  Plus,\n  Edit2,\n  Trash2,\n  Filter,\n  Search,\n  ChevronRight,\n  Target,\n  Loader2,\n  CheckSquare,\n  Square,\n  XCircle\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { useToast } from '@/hooks/use-toast';\n\n// API hooks\nimport { useStaffTasks, useStaffMembers, useStaffMutations } from '@/hooks/useApiIntegration';\nimport { useWebSocket } from '@/hooks/useSocket';\n\n// TypeScript interfaces\ninterface Task {\n  id: string;\n  title: string;\n  description: string;\n  assignedTo: string;\n  assignedBy: string;\n  priority: 'low' | 'medium' | 'high' | 'urgent';\n  status: 'pending' | 'in_progress' | 'completed' | 'overdue';\n  dueDate: string;\n  estimatedHours: number;\n  actualHours?: number;\n  category: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n  completedAt?: string;\n  assignedStaff?: {\n    id: string;\n    name: string;\n    role: string;\n    avatar?: string;\n  };\n}\n\nconst TaskPriorityBadge = ({ priority }: { priority: Task['priority'] }) => {\n  const getPriorityStyles = () => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'high':\n        return 'bg-orange-100 text-orange-800 border-orange-200';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  return (\n    <Badge className={`${getPriorityStyles()} border capitalize`}>\n      {priority}\n    </Badge>\n  );\n};\n\nconst TaskStatusBadge = ({ status }: { status: Task['status'] }) => {\n  const getStatusStyles = () => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'in_progress':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'pending':\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n      case 'overdue':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-3 h-3\" />;\n      case 'in_progress':\n        return <Clock className=\"w-3 h-3\" />;\n      case 'overdue':\n        return <AlertTriangle className=\"w-3 h-3\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Badge className={`${getStatusStyles()} border capitalize flex items-center gap-1`}>\n      {getStatusIcon()}\n      {status.replace('_', ' ')}\n    </Badge>\n  );\n};\n\nconst TaskCard = ({ \n  task, \n  onUpdate, \n  onDelete \n}: { \n  task: Task; \n  onUpdate: (taskId: string, status: Task['status']) => void;\n  onDelete: (taskId: string) => void;\n}) => {\n  const isOverdue = task.status !== 'completed' && new Date(task.dueDate) < new Date();\n  const hoursLeft = Math.max(0, Math.floor((new Date(task.dueDate).getTime() - new Date().getTime()) / (1000 * 60 * 60)));\n\n  return (\n    <motion.div\n      layout\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      exit={{ opacity: 0, y: -20 }}\n      className=\"mb-3\"\n    >\n      <Card \n        className={`hover:shadow-md transition-all ${\n          isOverdue ? 'border-red-300 bg-red-50/50' : ''\n        }`}\n        data-testid={`task-card-${task.id}`}\n      >\n        <CardContent className=\"pt-4\">\n          <div className=\"flex items-start justify-between mb-3\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <h3 className=\"font-semibold text-gray-900\">{task.title}</h3>\n                <TaskPriorityBadge priority={task.priority} />\n                <TaskStatusBadge status={isOverdue ? 'overdue' : task.status} />\n              </div>\n              <p className=\"text-sm text-gray-600 mb-3\">{task.description}</p>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              {task.status !== 'completed' && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  onClick={() => onUpdate(task.id, 'completed')}\n                  data-testid={`complete-task-${task.id}`}\n                >\n                  <CheckSquare className=\"w-4 h-4\" />\n                </Button>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => onDelete(task.id)}\n                data-testid={`delete-task-${task.id}`}\n              >\n                <Trash2 className=\"w-4 h-4 text-red-500\" />\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-sm\">\n            <div>\n              <p className=\"text-gray-500\">Assigned to</p>\n              <p className=\"font-medium\">\n                {task.assignedStaff?.name || 'Unassigned'}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-gray-500\">Due Date</p>\n              <p className={`font-medium ${isOverdue ? 'text-red-600' : ''}`}>\n                {new Date(task.dueDate).toLocaleDateString()}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-gray-500\">Time Remaining</p>\n              <p className={`font-medium ${hoursLeft < 24 ? 'text-orange-600' : ''}`}>\n                {hoursLeft < 24 ? `${hoursLeft} hours` : `${Math.floor(hoursLeft / 24)} days`}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-gray-500\">Category</p>\n              <p className=\"font-medium\">{task.category}</p>\n            </div>\n          </div>\n\n          {task.tags.length > 0 && (\n            <div className=\"flex flex-wrap gap-1 mt-3\">\n              {task.tags.map((tag, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n          )}\n\n          {task.status === 'in_progress' && (\n            <div className=\"mt-3 flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-blue-500\" />\n                <span className=\"text-sm text-gray-600\">In Progress</span>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onUpdate(task.id, 'completed')}\n              >\n                Mark Complete\n              </Button>\n            </div>\n          )}\n\n          {task.status === 'pending' && (\n            <div className=\"mt-3\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onUpdate(task.id, 'in_progress')}\n                className=\"w-full\"\n              >\n                Start Task\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </motion.div>\n  );\n};\n\nconst CreateTaskDialog = ({ \n  onCreateTask, \n  staffMembers \n}: { \n  onCreateTask: (task: Partial<Task>) => void;\n  staffMembers: any[];\n}) => {\n  const [open, setOpen] = useState(false);\n  const [taskData, setTaskData] = useState<Partial<Task>>({\n    title: '',\n    description: '',\n    priority: 'medium',\n    category: 'general',\n    assignedTo: '',\n    dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n    estimatedHours: 1,\n    tags: []\n  });\n\n  const handleSubmit = () => {\n    if (taskData.title && taskData.description) {\n      onCreateTask(taskData);\n      setOpen(false);\n      setTaskData({\n        title: '',\n        description: '',\n        priority: 'medium',\n        category: 'general',\n        assignedTo: '',\n        dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        estimatedHours: 1,\n        tags: []\n      });\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button data-testid=\"create-task-button\">\n          <Plus className=\"w-4 h-4 mr-2\" />\n          Create Task\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Task</DialogTitle>\n          <DialogDescription>\n            Add a new task for your staff members\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">Task Title</Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Enter task title\"\n              value={taskData.title}\n              onChange={(e) => setTaskData({ ...taskData, title: e.target.value })}\n              data-testid=\"task-title-input\"\n            />\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Enter task description\"\n              value={taskData.description}\n              onChange={(e) => setTaskData({ ...taskData, description: e.target.value })}\n              data-testid=\"task-description-input\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select\n                value={taskData.priority}\n                onValueChange={(value: Task['priority']) => \n                  setTaskData({ ...taskData, priority: value })\n                }\n              >\n                <SelectTrigger id=\"priority\" data-testid=\"task-priority-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"category\">Category</Label>\n              <Select\n                value={taskData.category}\n                onValueChange={(value) => setTaskData({ ...taskData, category: value })}\n              >\n                <SelectTrigger id=\"category\" data-testid=\"task-category-select\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"kitchen\">Kitchen</SelectItem>\n                  <SelectItem value=\"cleaning\">Cleaning</SelectItem>\n                  <SelectItem value=\"preparation\">Preparation</SelectItem>\n                  <SelectItem value=\"service\">Service</SelectItem>\n                  <SelectItem value=\"maintenance\">Maintenance</SelectItem>\n                  <SelectItem value=\"general\">General</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"assignedTo\">Assign To</Label>\n              <Select\n                value={taskData.assignedTo}\n                onValueChange={(value) => setTaskData({ ...taskData, assignedTo: value })}\n              >\n                <SelectTrigger id=\"assignedTo\" data-testid=\"task-assignee-select\">\n                  <SelectValue placeholder=\"Select staff\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {staffMembers.map((staff) => (\n                    <SelectItem key={staff.id} value={staff.id}>\n                      {staff.name} - {staff.role}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"dueDate\">Due Date</Label>\n              <Input\n                id=\"dueDate\"\n                type=\"date\"\n                value={taskData.dueDate}\n                onChange={(e) => setTaskData({ ...taskData, dueDate: e.target.value })}\n                data-testid=\"task-due-date-input\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"estimatedHours\">Estimated Hours</Label>\n            <Input\n              id=\"estimatedHours\"\n              type=\"number\"\n              min=\"0.5\"\n              step=\"0.5\"\n              value={taskData.estimatedHours}\n              onChange={(e) => setTaskData({ ...taskData, estimatedHours: parseFloat(e.target.value) })}\n              data-testid=\"task-hours-input\"\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => setOpen(false)}>\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} data-testid=\"submit-task-button\">\n            Create Task\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default function StaffTasksManagement() {\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filterStatus, setFilterStatus] = useState<Task['status'] | 'all'>('all');\n  const [filterPriority, setFilterPriority] = useState<Task['priority'] | 'all'>('all');\n\n  // Fetch data from backend\n  const { data: tasksData, loading: tasksLoading, error: tasksError, refetch: refetchTasks } = useStaffTasks();\n  const { data: staffData, loading: staffLoading } = useStaffMembers();\n  const { \n    createTask, \n    updateTaskStatus, \n    loading: mutationLoading \n  } = useStaffMutations();\n\n  // WebSocket for real-time updates\n  const { isConnected } = useWebSocket({\n    onMessage: (event: string, data: any) => {\n      if (event === 'task.updated' || event === 'task.created' || event === 'task.deleted') {\n        refetchTasks();\n      }\n    }\n  });\n\n  // Process tasks data\n  const tasks = useMemo(() => {\n    if (!tasksData) return [];\n    return tasksData;\n  }, [tasksData]);\n\n  // Filter tasks\n  const filteredTasks = useMemo(() => {\n    return tasks.filter(task => {\n      const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           task.description.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = filterStatus === 'all' || task.status === filterStatus;\n      const matchesPriority = filterPriority === 'all' || task.priority === filterPriority;\n      \n      return matchesSearch && matchesStatus && matchesPriority;\n    });\n  }, [tasks, searchTerm, filterStatus, filterPriority]);\n\n  // Group tasks by status\n  const tasksByStatus = useMemo(() => {\n    return {\n      pending: filteredTasks.filter(t => t.status === 'pending'),\n      in_progress: filteredTasks.filter(t => t.status === 'in_progress'),\n      completed: filteredTasks.filter(t => t.status === 'completed'),\n      overdue: filteredTasks.filter(t => \n        t.status !== 'completed' && new Date(t.dueDate) < new Date()\n      )\n    };\n  }, [filteredTasks]);\n\n  // Task metrics\n  const metrics = useMemo(() => {\n    const total = tasks.length;\n    const completed = tasks.filter(t => t.status === 'completed').length;\n    const overdue = tasks.filter(t => \n      t.status !== 'completed' && new Date(t.dueDate) < new Date()\n    ).length;\n    const urgent = tasks.filter(t => t.priority === 'urgent' && t.status !== 'completed').length;\n\n    return {\n      total,\n      completed,\n      completionRate: total > 0 ? Math.round((completed / total) * 100) : 0,\n      overdue,\n      urgent\n    };\n  }, [tasks]);\n\n  const handleCreateTask = async (taskData: Partial<Task>) => {\n    try {\n      await createTask(taskData);\n      toast({\n        title: \"Task Created\",\n        description: \"The task has been created successfully.\",\n      });\n      refetchTasks();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUpdateTaskStatus = async (taskId: string, status: Task['status']) => {\n    try {\n      await updateTaskStatus(taskId, status);\n      toast({\n        title: \"Task Updated\",\n        description: `Task status changed to ${status}.`,\n      });\n      refetchTasks();\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task status.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDeleteTask = async (taskId: string) => {\n    // Implement delete functionality\n    toast({\n      title: \"Task Deleted\",\n      description: \"The task has been deleted.\",\n    });\n    refetchTasks();\n  };\n\n  if (tasksLoading || staffLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <Loader2 className=\"w-8 h-8 animate-spin text-gray-400\" />\n      </div>\n    );\n  }\n\n  if (tasksError) {\n    return (\n      <div className=\"text-center py-12\">\n        <XCircle className=\"w-12 h-12 text-red-500 mx-auto mb-4\" />\n        <p className=\"text-gray-600\">Failed to load tasks. Please try again.</p>\n        <Button onClick={refetchTasks} className=\"mt-4\">\n          Retry\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"staff-tasks-management\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-gray-900\">Staff Tasks</h2>\n          <p className=\"text-gray-600\">Manage and track staff tasks and assignments</p>\n        </div>\n        <CreateTaskDialog \n          onCreateTask={handleCreateTask} \n          staffMembers={staffData || []}\n        />\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Tasks</p>\n                <p className=\"text-2xl font-bold\">{metrics.total}</p>\n              </div>\n              <Target className=\"w-8 h-8 text-blue-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Completion Rate</p>\n                <p className=\"text-2xl font-bold\">{metrics.completionRate}%</p>\n              </div>\n              <CheckCircle className=\"w-8 h-8 text-green-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Overdue</p>\n                <p className=\"text-2xl font-bold text-red-600\">{metrics.overdue}</p>\n              </div>\n              <AlertTriangle className=\"w-8 h-8 text-red-500\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Urgent Tasks</p>\n                <p className=\"text-2xl font-bold text-orange-600\">{metrics.urgent}</p>\n              </div>\n              <Clock className=\"w-8 h-8 text-orange-500\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search tasks...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"search-tasks-input\"\n                />\n              </div>\n            </div>\n            \n            <Select value={filterStatus} onValueChange={(value: any) => setFilterStatus(value)}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"filter-status-select\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"overdue\">Overdue</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={filterPriority} onValueChange={(value: any) => setFilterPriority(value)}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"filter-priority-select\">\n                <SelectValue placeholder=\"Filter by priority\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value=\"low\">Low</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"high\">High</SelectItem>\n                <SelectItem value=\"urgent\">Urgent</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tasks List */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n        {/* Pending Tasks */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">Pending</h3>\n            <Badge variant=\"outline\">{tasksByStatus.pending.length}</Badge>\n          </div>\n          <div className=\"space-y-3\">\n            <AnimatePresence>\n              {tasksByStatus.pending.map(task => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onUpdate={handleUpdateTaskStatus}\n                  onDelete={handleDeleteTask}\n                />\n              ))}\n            </AnimatePresence>\n            {tasksByStatus.pending.length === 0 && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"pt-6 text-center text-gray-500\">\n                  No pending tasks\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* In Progress Tasks */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">In Progress</h3>\n            <Badge variant=\"outline\" className=\"bg-blue-50\">\n              {tasksByStatus.in_progress.length}\n            </Badge>\n          </div>\n          <div className=\"space-y-3\">\n            <AnimatePresence>\n              {tasksByStatus.in_progress.map(task => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onUpdate={handleUpdateTaskStatus}\n                  onDelete={handleDeleteTask}\n                />\n              ))}\n            </AnimatePresence>\n            {tasksByStatus.in_progress.length === 0 && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"pt-6 text-center text-gray-500\">\n                  No tasks in progress\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Completed Tasks */}\n        <div>\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-gray-900\">Completed</h3>\n            <Badge variant=\"outline\" className=\"bg-green-50\">\n              {tasksByStatus.completed.length}\n            </Badge>\n          </div>\n          <div className=\"space-y-3\">\n            <AnimatePresence>\n              {tasksByStatus.completed.slice(0, 5).map(task => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  onUpdate={handleUpdateTaskStatus}\n                  onDelete={handleDeleteTask}\n                />\n              ))}\n            </AnimatePresence>\n            {tasksByStatus.completed.length === 0 && (\n              <Card className=\"border-dashed\">\n                <CardContent className=\"pt-6 text-center text-gray-500\">\n                  No completed tasks\n                </CardContent>\n              </Card>\n            )}\n            {tasksByStatus.completed.length > 5 && (\n              <Button variant=\"ghost\" className=\"w-full\">\n                View all {tasksByStatus.completed.length} completed tasks\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Connection Status */}\n      {!isConnected && (\n        <div className=\"fixed bottom-4 right-4 bg-yellow-100 border border-yellow-300 text-yellow-800 px-4 py-2 rounded-lg flex items-center gap-2\">\n          <AlertTriangle className=\"w-4 h-4\" />\n          <span className=\"text-sm\">Real-time updates disconnected</span>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/command.test.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/cross-browser.test.tsx",["2376","2377","2378","2379","2380"],[],"/**\n * Cross-Browser Compatibility Tests for ShadCN UI Components\n * Tests components across different browser environments and feature support\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from '../command'\nimport {\n  Drawer,\n  DrawerTrigger,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n} from '../drawer'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '../tooltip'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../popover'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from '../input-otp'\n\n// Browser environment mocks\nconst mockUserAgents = {\n  chrome: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',\n  firefox: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',\n  safari: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Safari/605.1.15',\n  edge: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',\n  ios: 'Mozilla/5.0 (iPhone; CPU iPhone OS 17_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.0 Mobile/15E148 Safari/604.1',\n  android: 'Mozilla/5.0 (Linux; Android 13; SM-G991B) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Mobile Safari/537.36'\n}\n\nconst mockBrowserFeatures = {\n  chrome: {\n    css: {\n      containerQueries: true,\n      scrollTimelineBehavior: true,\n      backdropFilter: true,\n      colorScheme: true,\n    },\n    js: {\n      intersectionObserver: true,\n      resizeObserver: true,\n      customElements: true,\n      webAnimations: true,\n    }\n  },\n  firefox: {\n    css: {\n      containerQueries: true,\n      scrollTimelineBehavior: false,\n      backdropFilter: true,\n      colorScheme: true,\n    },\n    js: {\n      intersectionObserver: true,\n      resizeObserver: true,\n      customElements: true,\n      webAnimations: true,\n    }\n  },\n  safari: {\n    css: {\n      containerQueries: true,\n      scrollTimelineBehavior: false,\n      backdropFilter: true,\n      colorScheme: true,\n    },\n    js: {\n      intersectionObserver: true,\n      resizeObserver: true,\n      customElements: true,\n      webAnimations: true,\n    }\n  },\n  edge: {\n    css: {\n      containerQueries: true,\n      scrollTimelineBehavior: true,\n      backdropFilter: true,\n      colorScheme: true,\n    },\n    js: {\n      intersectionObserver: true,\n      resizeObserver: true,\n      customElements: true,\n      webAnimations: true,\n    }\n  }\n}\n\n// Helper to mock browser environment\nconst mockBrowserEnvironment = (browser: keyof typeof mockUserAgents) => {\n  Object.defineProperty(navigator, 'userAgent', {\n    writable: true,\n    value: mockUserAgents[browser],\n  })\n\n  const features = mockBrowserFeatures[browser as keyof typeof mockBrowserFeatures]\n  if (features) {\n    // Mock CSS features\n    Object.defineProperty(CSS, 'supports', {\n      writable: true,\n      value: jest.fn((property: string) => {\n        if (property.includes('container-type')) return features.css.containerQueries\n        if (property.includes('backdrop-filter')) return features.css.backdropFilter\n        if (property.includes('color-scheme')) return features.css.colorScheme\n        return true // Default support for other properties\n      }),\n    })\n\n    // Mock JS features\n    if (!features.js.intersectionObserver) {\n      delete (window as any).IntersectionObserver\n    }\n    if (!features.js.resizeObserver) {\n      delete (window as any).ResizeObserver\n    }\n  }\n}\n\ndescribe('Cross-Browser Compatibility Tests', () => {\n  beforeEach(() => {\n    // Reset mocks\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    // Restore original implementations\n    jest.restoreAllMocks()\n  })\n\n  describe('Chrome Browser Compatibility', () => {\n    beforeEach(() => {\n      mockBrowserEnvironment('chrome')\n    })\n\n    it('renders Command component with full Chrome features', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Search in Chrome...\" />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup heading=\"Meals\">\n              <CommandItem value=\"biryani\">Chicken Biryani</CommandItem>\n              <CommandItem value=\"curry\">Paneer Curry</CommandItem>\n              <CommandItem value=\"naan\">Butter Naan</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Search in Chrome...')\n      await user.type(input, 'curry')\n\n      await waitFor(() => {\n        expect(screen.getByText('Paneer Curry')).toBeInTheDocument()\n        expect(screen.queryByText('Chicken Biryani')).not.toBeInTheDocument()\n      })\n    })\n\n    it('handles Chrome-specific touch events', async () => {\n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Open Chrome Drawer</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Chrome Touch Test</DrawerTitle>\n            </DrawerHeader>\n            <div>Chrome-optimized content</div>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Open Chrome Drawer')\n      \n      // Chrome touch events\n      fireEvent.touchStart(trigger, {\n        touches: [{ clientX: 100, clientY: 100 }],\n      })\n      fireEvent.touchEnd(trigger)\n\n      await waitFor(() => {\n        expect(screen.getByText('Chrome Touch Test')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Firefox Browser Compatibility', () => {\n    beforeEach(() => {\n      mockBrowserEnvironment('firefox')\n    })\n\n    it('renders Tooltip component in Firefox', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button>Firefox Tooltip</button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p>Firefox-compatible tooltip content</p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n\n      const trigger = screen.getByText('Firefox Tooltip')\n      await user.hover(trigger)\n\n      await waitFor(() => {\n        expect(screen.getByText('Firefox-compatible tooltip content')).toBeInTheDocument()\n      })\n    })\n\n    it('handles Firefox keyboard navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Firefox search...\" />\n          <CommandList>\n            <CommandGroup>\n              <CommandItem value=\"item1\">Firefox Item 1</CommandItem>\n              <CommandItem value=\"item2\">Firefox Item 2</CommandItem>\n              <CommandItem value=\"item3\">Firefox Item 3</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Firefox search...')\n      await user.click(input)\n      \n      // Firefox-specific keyboard navigation\n      await user.keyboard('{ArrowDown}')\n      await user.keyboard('{ArrowDown}')\n      await user.keyboard('{Enter}')\n\n      // Should handle keyboard navigation properly\n      expect(input).toBeInTheDocument()\n    })\n  })\n\n  describe('Safari Browser Compatibility', () => {\n    beforeEach(() => {\n      mockBrowserEnvironment('safari')\n    })\n\n    it('renders Popover component in Safari', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger asChild>\n            <button>Safari Popover</button>\n          </PopoverTrigger>\n          <PopoverContent>\n            <div>Safari-compatible popover content</div>\n          </PopoverContent>\n        </Popover>\n      )\n\n      const trigger = screen.getByText('Safari Popover')\n      await user.click(trigger)\n\n      await waitFor(() => {\n        expect(screen.getByText('Safari-compatible popover content')).toBeInTheDocument()\n      })\n    })\n\n    it('handles Safari-specific WebKit features', async () => {\n      // Mock WebKit-specific APIs\n      Object.defineProperty(window, 'webkit', {\n        writable: true,\n        value: {\n          messageHandlers: {\n            test: { postMessage: jest.fn() }\n          }\n        },\n      })\n\n      render(\n        <InputOTP maxLength={6}>\n          <InputOTPGroup>\n            {Array.from({ length: 6 }, (_, i) => (\n              <InputOTPSlot key={i} index={i} />\n            ))}\n          </InputOTPGroup>\n        </InputOTP>\n      )\n\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toBeInTheDocument()\n      \n      // Should handle WebKit-specific behavior\n      fireEvent.focus(otpInput)\n      expect(otpInput).toHaveFocus()\n    })\n  })\n\n  describe('Edge Browser Compatibility', () => {\n    beforeEach(() => {\n      mockBrowserEnvironment('edge')\n    })\n\n    it('renders Command component in Edge', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Edge search...\" />\n          <CommandList>\n            <CommandEmpty>No Edge results.</CommandEmpty>\n            <CommandGroup>\n              <CommandItem value=\"edge-item\">Edge-specific Item</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Edge search...')\n      await user.type(input, 'edge')\n\n      await waitFor(() => {\n        expect(screen.getByText('Edge-specific Item')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Mobile Browser Compatibility', () => {\n    describe('iOS Safari', () => {\n      beforeEach(() => {\n        mockBrowserEnvironment('ios')\n        \n        // Mock iOS viewport\n        Object.defineProperty(window, 'innerWidth', {\n          writable: true,\n          configurable: true,\n          value: 375,\n        })\n        Object.defineProperty(window, 'innerHeight', {\n          writable: true,\n          configurable: true,\n          value: 667,\n        })\n      })\n\n      it('handles iOS touch events properly', async () => {\n        render(\n          <Drawer>\n            <DrawerTrigger asChild>\n              <button>iOS Drawer</button>\n            </DrawerTrigger>\n            <DrawerContent>\n              <div>iOS-optimized content</div>\n            </DrawerContent>\n          </Drawer>\n        )\n\n        const trigger = screen.getByText('iOS Drawer')\n        \n        // iOS-specific touch events\n        fireEvent.touchStart(trigger, {\n          touches: [{ \n            clientX: 100, \n            clientY: 100,\n            force: 1,\n            radiusX: 10,\n            radiusY: 10\n          }],\n        })\n        fireEvent.touchEnd(trigger)\n\n        await waitFor(() => {\n          expect(screen.getByText('iOS-optimized content')).toBeInTheDocument()\n        })\n      })\n\n      it('handles iOS safe area and viewport quirks', () => {\n        // Mock iOS safe area insets\n        Object.defineProperty(document.documentElement, 'style', {\n          writable: true,\n          value: {\n            setProperty: jest.fn(),\n          },\n        })\n\n        render(\n          <div className=\"ios-safe-area\">\n            <TooltipProvider>\n              <Tooltip>\n                <TooltipTrigger>iOS Safe Area Test</TooltipTrigger>\n                <TooltipContent>iOS tooltip</TooltipContent>\n              </Tooltip>\n            </TooltipProvider>\n          </div>\n        )\n\n        expect(screen.getByText('iOS Safe Area Test')).toBeInTheDocument()\n      })\n    })\n\n    describe('Android Chrome', () => {\n      beforeEach(() => {\n        mockBrowserEnvironment('android')\n        \n        // Mock Android viewport\n        Object.defineProperty(window, 'innerWidth', {\n          writable: true,\n          configurable: true,\n          value: 360,\n        })\n        Object.defineProperty(window, 'innerHeight', {\n          writable: true,\n          configurable: true,\n          value: 640,\n        })\n      })\n\n      it('handles Android virtual keyboard', async () => {\n        const user = userEvent.setup()\n        \n        // Mock Android virtual viewport\n        Object.defineProperty(window, 'visualViewport', {\n          writable: true,\n          configurable: true,\n          value: {\n            height: 400, // Reduced when keyboard is open\n            width: 360,\n            addEventListener: jest.fn(),\n            removeEventListener: jest.fn(),\n          },\n        })\n\n        render(\n          <Command>\n            <CommandInput placeholder=\"Android search...\" />\n            <CommandList>\n              <CommandGroup>\n                <CommandItem value=\"android-item\">Android Item</CommandItem>\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        )\n\n        const input = screen.getByPlaceholderText('Android search...')\n        await user.type(input, 'android')\n\n        expect(screen.getByText('Android Item')).toBeInTheDocument()\n      })\n\n      it('handles Android touch gestures', async () => {\n        render(\n          <Drawer>\n            <DrawerTrigger asChild>\n              <button>Android Drawer</button>\n            </DrawerTrigger>\n            <DrawerContent>\n              <div>Android content</div>\n            </DrawerContent>\n          </Drawer>\n        )\n\n        const trigger = screen.getByText('Android Drawer')\n        \n        // Android touch events\n        fireEvent.touchStart(trigger)\n        fireEvent.touchEnd(trigger)\n\n        await waitFor(() => {\n          expect(screen.getByText('Android content')).toBeInTheDocument()\n        })\n      })\n    })\n  })\n\n  describe('Feature Detection and Polyfills', () => {\n    it('gracefully handles missing IntersectionObserver', () => {\n      // Remove IntersectionObserver\n      const originalIntersectionObserver = window.IntersectionObserver\n      delete (window as any).IntersectionObserver\n\n      render(\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger>Fallback Tooltip</TooltipTrigger>\n            <TooltipContent>Should work without IntersectionObserver</TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n\n      expect(screen.getByText('Fallback Tooltip')).toBeInTheDocument()\n\n      // Restore\n      window.IntersectionObserver = originalIntersectionObserver\n    })\n\n    it('gracefully handles missing ResizeObserver', () => {\n      // Remove ResizeObserver\n      const originalResizeObserver = window.ResizeObserver\n      delete (window as any).ResizeObserver\n\n      render(\n        <Drawer>\n          <DrawerTrigger>Test without ResizeObserver</DrawerTrigger>\n          <DrawerContent>Content</DrawerContent>\n        </Drawer>\n      )\n\n      expect(screen.getByText('Test without ResizeObserver')).toBeInTheDocument()\n\n      // Restore\n      window.ResizeObserver = originalResizeObserver\n    })\n\n    it('handles browsers without CSS Container Queries', () => {\n      // Mock CSS.supports to return false for container queries\n      Object.defineProperty(CSS, 'supports', {\n        writable: true,\n        value: jest.fn((property: string) => {\n          if (property.includes('container-type')) return false\n          return true\n        }),\n      })\n\n      render(\n        <Command className=\"container-query-test\">\n          <CommandInput placeholder=\"No container queries...\" />\n          <CommandList>\n            <CommandItem value=\"fallback\">Fallback layout</CommandItem>\n          </CommandList>\n        </Command>\n      )\n\n      expect(screen.getByText('Fallback layout')).toBeInTheDocument()\n    })\n\n    it('handles browsers without backdrop-filter support', () => {\n      // Mock CSS.supports to return false for backdrop-filter\n      Object.defineProperty(CSS, 'supports', {\n        writable: true,\n        value: jest.fn((property: string) => {\n          if (property.includes('backdrop-filter')) return false\n          return true\n        }),\n      })\n\n      render(\n        <Popover>\n          <PopoverTrigger>No backdrop filter</PopoverTrigger>\n          <PopoverContent className=\"backdrop-blur\">\n            Fallback styling\n          </PopoverContent>\n        </Popover>\n      )\n\n      expect(screen.getByText('No backdrop filter')).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility Across Browsers', () => {\n    it('maintains ARIA support across browsers', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command role=\"combobox\" aria-expanded=\"false\">\n          <CommandInput \n            placeholder=\"Cross-browser ARIA...\" \n            aria-label=\"Search meals\"\n          />\n          <CommandList role=\"listbox\">\n            <CommandItem \n              value=\"aria-item\" \n              role=\"option\"\n              aria-selected=\"false\"\n            >\n              ARIA-compliant item\n            </CommandItem>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByLabelText('Search meals')\n      const item = screen.getByRole('option')\n      \n      expect(input).toHaveAttribute('aria-label', 'Search meals')\n      expect(item).toHaveAttribute('role', 'option')\n      expect(item).toHaveAttribute('aria-selected', 'false')\n\n      await user.click(input)\n      await user.keyboard('{ArrowDown}')\n      \n      // Should maintain ARIA states across interactions\n      expect(input).toBeInTheDocument()\n    })\n\n    it('supports screen reader navigation patterns', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <div>\n          <h1>Cross-browser Screen Reader Test</h1>\n          <nav aria-label=\"Main navigation\">\n            <Command>\n              <CommandInput placeholder=\"Navigate...\" />\n              <CommandList>\n                <CommandGroup heading=\"Navigation\">\n                  <CommandItem value=\"home\">Home</CommandItem>\n                  <CommandItem value=\"menu\">Menu</CommandItem>\n                  <CommandItem value=\"orders\">Orders</CommandItem>\n                </CommandGroup>\n              </CommandList>\n            </Command>\n          </nav>\n        </div>\n      )\n\n      const navigation = screen.getByLabelText('Main navigation')\n      const input = screen.getByPlaceholderText('Navigate...')\n      \n      expect(navigation).toBeInTheDocument()\n      expect(input).toBeInTheDocument()\n\n      // Test keyboard navigation\n      await user.click(input)\n      await user.keyboard('{ArrowDown}')\n      await user.keyboard('{Enter}')\n\n      expect(input).toBeInTheDocument()\n    })\n  })\n\n  describe('Browser-Specific Event Handling', () => {\n    it('handles pointer events across browsers', async () => {\n      const pointerDownHandler = jest.fn()\n      const pointerUpHandler = jest.fn()\n\n      render(\n        <div\n          onPointerDown={pointerDownHandler}\n          onPointerUp={pointerUpHandler}\n        >\n          <Tooltip>\n            <TooltipTrigger>Pointer Events Test</TooltipTrigger>\n            <TooltipContent>Cross-browser pointer events</TooltipContent>\n          </Tooltip>\n        </div>\n      )\n\n      const trigger = screen.getByText('Pointer Events Test')\n      \n      fireEvent.pointerDown(trigger)\n      fireEvent.pointerUp(trigger)\n\n      expect(pointerDownHandler).toHaveBeenCalled()\n      expect(pointerUpHandler).toHaveBeenCalled()\n    })\n\n    it('handles wheel events consistently', async () => {\n      const wheelHandler = jest.fn()\n\n      render(\n        <div onWheel={wheelHandler}>\n          <Command>\n            <CommandInput placeholder=\"Wheel events...\" />\n            <CommandList>\n              {Array.from({ length: 20 }, (_, i) => (\n                <CommandItem key={i} value={`item-${i}`}>\n                  Scrollable Item {i}\n                </CommandItem>\n              ))}\n            </CommandList>\n          </Command>\n        </div>\n      )\n\n      const list = screen.getByRole('listbox', { hidden: true })\n      \n      fireEvent.wheel(list, { deltaY: 100 })\n\n      expect(wheelHandler).toHaveBeenCalled()\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/drawer.test.tsx",["2381","2382","2383"],[],"/**\n * Comprehensive Unit Tests for Drawer Component (ShadCN UI)\n * Tests mobile drawer functionality, touch gestures, animations, and accessibility\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n} from '../drawer'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('Drawer Component Suite', () => {\n  // Mock meal ordering data for testing\n  const mockMeal = {\n    id: '1',\n    name: 'Chicken Biryani',\n    description: 'Aromatic basmati rice with tender chicken pieces',\n    price: 180,\n    category: 'Main Course',\n    nutrition: {\n      calories: 650,\n      protein: 35,\n      carbs: 75,\n      fat: 18,\n    },\n  }\n\n  const MealOrderDrawer = ({ \n    open, \n    onOpenChange,\n    meal = mockMeal \n  }: { \n    open: boolean\n    onOpenChange: (open: boolean) => void\n    meal?: typeof mockMeal \n  }) => (\n    <Drawer open={open} onOpenChange={onOpenChange}>\n      <DrawerTrigger asChild>\n        <button>Order {meal.name}</button>\n      </DrawerTrigger>\n      <DrawerContent>\n        <DrawerHeader>\n          <DrawerTitle>{meal.name}</DrawerTitle>\n          <DrawerDescription>{meal.description}</DrawerDescription>\n        </DrawerHeader>\n        <div className=\"p-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between\">\n              <span>Price:</span>\n              <span>₹{meal.price}</span>\n            </div>\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Nutrition Facts</h4>\n              <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                <div>Calories: {meal.nutrition.calories}</div>\n                <div>Protein: {meal.nutrition.protein}g</div>\n                <div>Carbs: {meal.nutrition.carbs}g</div>\n                <div>Fat: {meal.nutrition.fat}g</div>\n              </div>\n            </div>\n            <div className=\"flex gap-2\">\n              <button className=\"flex-1 bg-primary text-primary-foreground p-2 rounded\">\n                Add to Cart\n              </button>\n              <DrawerClose asChild>\n                <button className=\"px-4 py-2 border rounded\">\n                  Cancel\n                </button>\n              </DrawerClose>\n            </div>\n          </div>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n\n  describe('Drawer Root Component', () => {\n    it('renders without crashing', () => {\n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      expect(screen.getByText('Open')).toBeInTheDocument()\n    })\n\n    it('supports shouldScaleBackground prop', () => {\n      render(\n        <Drawer shouldScaleBackground={false}>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      expect(screen.getByText('Open')).toBeInTheDocument()\n    })\n\n    it('passes through additional props', () => {\n      render(\n        <Drawer data-testid=\"drawer-root\">\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Open')\n      expect(trigger).toBeInTheDocument()\n    })\n  })\n\n  describe('DrawerTrigger Component', () => {\n    it('opens drawer when clicked', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open Drawer</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Drawer Content</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Open Drawer')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Drawer Content')).toBeInTheDocument()\n      })\n    })\n\n    it('supports asChild prop', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button type=\"button\">Custom Button</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Drawer Content</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const customButton = screen.getByRole('button', { name: 'Custom Button' })\n      await user.click(customButton)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Drawer Content')).toBeInTheDocument()\n      })\n    })\n\n    it('handles touch events on mobile', async () => {\n      render(\n        <Drawer>\n          <DrawerTrigger>Touch to Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Mobile Drawer</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Touch to Open')\n      \n      // Simulate touch events\n      fireEvent.touchStart(trigger)\n      fireEvent.touchEnd(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Mobile Drawer')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('DrawerContent Component', () => {\n    it('renders content with proper structure', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent data-testid=\"drawer-content\">\n            <DrawerHeader>\n              <DrawerTitle>Test Title</DrawerTitle>\n              <DrawerDescription>Test Description</DrawerDescription>\n            </DrawerHeader>\n            <div>Content Body</div>\n            <DrawerFooter>\n              <button>Action</button>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const content = screen.getByTestId('drawer-content')\n        expect(content).toBeInTheDocument()\n        expect(content).toHaveClass('fixed', 'inset-x-0', 'bottom-0')\n        \n        // Check for drag handle\n        const dragHandle = content.querySelector('.h-2.w-\\\\[100px\\\\]')\n        expect(dragHandle).toBeInTheDocument()\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent className=\"custom-drawer\">\n            <DrawerTitle>Test</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const content = screen.getByRole('dialog')\n        expect(content).toHaveClass('custom-drawer')\n      })\n    })\n\n    it('includes overlay background', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        // Overlay should be present with proper styling\n        const overlay = document.querySelector('.fixed.inset-0.z-50.bg-black\\\\/80')\n        expect(overlay).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('DrawerHeader Component', () => {\n    it('renders header content with proper styling', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader data-testid=\"drawer-header\">\n              <DrawerTitle>Header Title</DrawerTitle>\n              <DrawerDescription>Header Description</DrawerDescription>\n            </DrawerHeader>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const header = screen.getByTestId('drawer-header')\n        expect(header).toHaveClass('grid', 'gap-1.5', 'p-4', 'text-center')\n        expect(screen.getByText('Header Title')).toBeInTheDocument()\n        expect(screen.getByText('Header Description')).toBeInTheDocument()\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader className=\"custom-header\">\n              <DrawerTitle>Title</DrawerTitle>\n            </DrawerHeader>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const header = screen.getByText('Title').closest('.custom-header')\n        expect(header).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('DrawerFooter Component', () => {\n    it('renders footer content with proper styling', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n            <DrawerFooter data-testid=\"drawer-footer\">\n              <button>Primary Action</button>\n              <button>Secondary Action</button>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const footer = screen.getByTestId('drawer-footer')\n        expect(footer).toHaveClass('mt-auto', 'flex', 'flex-col', 'gap-2', 'p-4')\n        expect(screen.getByText('Primary Action')).toBeInTheDocument()\n        expect(screen.getByText('Secondary Action')).toBeInTheDocument()\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test</DrawerTitle>\n            <DrawerFooter className=\"custom-footer\">\n              <button>Action</button>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const footer = screen.getByText('Action').closest('.custom-footer')\n        expect(footer).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('DrawerTitle Component', () => {\n    it('renders title with proper styling', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle data-testid=\"drawer-title\">\n              Important Title\n            </DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const title = screen.getByTestId('drawer-title')\n        expect(title).toHaveClass('text-lg', 'font-semibold', 'leading-none', 'tracking-tight')\n        expect(title).toHaveTextContent('Important Title')\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle className=\"custom-title\">Custom Title</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const title = screen.getByText('Custom Title')\n        expect(title).toHaveClass('custom-title')\n      })\n    })\n  })\n\n  describe('DrawerDescription Component', () => {\n    it('renders description with proper styling', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Title</DrawerTitle>\n            <DrawerDescription data-testid=\"drawer-description\">\n              This is a detailed description of the drawer content.\n            </DrawerDescription>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const description = screen.getByTestId('drawer-description')\n        expect(description).toHaveClass('text-sm', 'text-muted-foreground')\n        expect(description).toHaveTextContent('This is a detailed description of the drawer content.')\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Title</DrawerTitle>\n            <DrawerDescription className=\"custom-description\">\n              Custom Description\n            </DrawerDescription>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const description = screen.getByText('Custom Description')\n        expect(description).toHaveClass('custom-description')\n      })\n    })\n  })\n\n  describe('DrawerClose Component', () => {\n    it('closes drawer when clicked', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test Drawer</DrawerTitle>\n            <DrawerClose>Close Drawer</DrawerClose>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      // Open drawer\n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('Test Drawer')).toBeInTheDocument()\n      })\n      \n      // Close drawer\n      await user.click(screen.getByText('Close Drawer'))\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Test Drawer')).not.toBeInTheDocument()\n      })\n    })\n\n    it('supports asChild prop', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Test Drawer</DrawerTitle>\n            <DrawerClose asChild>\n              <button type=\"button\" className=\"custom-close-btn\">\n                Custom Close\n              </button>\n            </DrawerClose>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('Test Drawer')).toBeInTheDocument()\n      })\n      \n      const customCloseBtn = screen.getByRole('button', { name: 'Custom Close' })\n      await user.click(customCloseBtn)\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Test Drawer')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Touch and Gesture Support', () => {\n    it('supports drag-to-close gesture', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent data-testid=\"drawer-content\">\n            <DrawerTitle>Draggable Drawer</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const content = screen.getByTestId('drawer-content')\n        expect(content).toBeInTheDocument()\n        \n        // Simulate drag down gesture\n        fireEvent.touchStart(content, {\n          touches: [{ clientY: 100 }],\n        })\n        fireEvent.touchMove(content, {\n          touches: [{ clientY: 300 }],\n        })\n        fireEvent.touchEnd(content)\n        \n        // Drawer should handle drag gesture\n        expect(content).toBeInTheDocument()\n      })\n    })\n\n    it('handles touch events on mobile devices', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <MealOrderDrawer open={false} onOpenChange={() => {}} />\n      )\n      \n      const trigger = screen.getByText(`Order ${mockMeal.name}`)\n      \n      // Simulate mobile touch\n      fireEvent.touchStart(trigger, {\n        touches: [{ clientX: 100, clientY: 100 }],\n      })\n      fireEvent.touchEnd(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText(mockMeal.name)).toBeInTheDocument()\n      })\n    })\n\n    it('supports swipe gestures for navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent data-testid=\"swipeable-content\">\n            <DrawerTitle>Swipeable Content</DrawerTitle>\n            <div className=\"p-4\">\n              <p>Swipe down to close</p>\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const content = screen.getByTestId('swipeable-content')\n        \n        // Simulate swipe down\n        fireEvent.touchStart(content, {\n          touches: [{ clientY: 200 }],\n        })\n        fireEvent.touchMove(content, {\n          touches: [{ clientY: 400 }],\n        })\n        fireEvent.touchEnd(content)\n        \n        expect(content).toBeInTheDocument()\n      })\n    })\n\n    it('handles pull-to-refresh gesture', async () => {\n      const user = userEvent.setup()\n      const onRefresh = jest.fn()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Refreshable Content</DrawerTitle>\n            <div \n              data-testid=\"refreshable-area\"\n              onTouchStart={(e) => {\n                if (e.touches[0].clientY < 50) {\n                  onRefresh()\n                }\n              }}\n            >\n              <p>Pull down to refresh</p>\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        const refreshArea = screen.getByTestId('refreshable-area')\n        \n        // Simulate pull down from top\n        fireEvent.touchStart(refreshArea, {\n          touches: [{ clientY: 30 }],\n        })\n        \n        expect(onRefresh).toHaveBeenCalled()\n      })\n    })\n  })\n\n  describe('Meal Ordering Integration', () => {\n    it('displays meal information correctly', async () => {\n      const user = userEvent.setup()\n      \n      render(<MealOrderDrawer open={false} onOpenChange={() => {}} />)\n      \n      await user.click(screen.getByText(`Order ${mockMeal.name}`))\n      \n      await waitFor(() => {\n        expect(screen.getByText(mockMeal.name)).toBeInTheDocument()\n        expect(screen.getByText(mockMeal.description)).toBeInTheDocument()\n        expect(screen.getByText(`₹${mockMeal.price}`)).toBeInTheDocument()\n        expect(screen.getByText(`Calories: ${mockMeal.nutrition.calories}`)).toBeInTheDocument()\n      })\n    })\n\n    it('handles add to cart action', async () => {\n      const user = userEvent.setup()\n      const onOpenChange = jest.fn()\n      \n      render(<MealOrderDrawer open={false} onOpenChange={onOpenChange} />)\n      \n      await user.click(screen.getByText(`Order ${mockMeal.name}`))\n      \n      await waitFor(() => {\n        const addToCartBtn = screen.getByText('Add to Cart')\n        expect(addToCartBtn).toBeInTheDocument()\n      })\n    })\n\n    it('handles cancel action', async () => {\n      const user = userEvent.setup()\n      const onOpenChange = jest.fn()\n      \n      render(<MealOrderDrawer open={false} onOpenChange={onOpenChange} />)\n      \n      await user.click(screen.getByText(`Order ${mockMeal.name}`))\n      \n      await waitFor(() => {\n        expect(screen.getByText(mockMeal.name)).toBeInTheDocument()\n      })\n      \n      await user.click(screen.getByText('Cancel'))\n      \n      await waitFor(() => {\n        expect(onOpenChange).toHaveBeenCalledWith(false)\n      })\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('meets WCAG accessibility guidelines', async () => {\n      const user = userEvent.setup()\n      \n      const { container } = render(\n        <Drawer>\n          <DrawerTrigger>Open Accessible Drawer</DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Accessible Title</DrawerTitle>\n              <DrawerDescription>This drawer is accessible</DrawerDescription>\n            </DrawerHeader>\n            <div>Content</div>\n            <DrawerFooter>\n              <DrawerClose>Close</DrawerClose>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open Accessible Drawer'))\n      \n      await waitFor(async () => {\n        const results = await axe(container)\n        expect(results).toHaveNoViolations()\n      })\n    })\n\n    it('provides proper ARIA labels and roles', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger aria-label=\"Open meal ordering drawer\">\n            Order Now\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Meal Selection</DrawerTitle>\n            <DrawerDescription>Choose your preferred meal options</DrawerDescription>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByLabelText('Open meal ordering drawer')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const dialog = screen.getByRole('dialog')\n        expect(dialog).toBeInTheDocument()\n        expect(screen.getByText('Meal Selection')).toBeInTheDocument()\n      })\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Keyboard Navigation Test</DrawerTitle>\n            <div>\n              <button>First Button</button>\n              <button>Second Button</button>\n              <DrawerClose>Close</DrawerClose>\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Open')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Keyboard Navigation Test')).toBeInTheDocument()\n      })\n      \n      // Tab through elements\n      await user.keyboard('{Tab}')\n      expect(screen.getByText('First Button')).toHaveFocus()\n      \n      await user.keyboard('{Tab}')\n      expect(screen.getByText('Second Button')).toHaveFocus()\n      \n      await user.keyboard('{Tab}')\n      expect(screen.getByText('Close')).toHaveFocus()\n    })\n\n    it('handles escape key to close', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Escape to Close</DrawerTitle>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        expect(screen.getByText('Escape to Close')).toBeInTheDocument()\n      })\n      \n      await user.keyboard('{Escape}')\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Escape to Close')).not.toBeInTheDocument()\n      })\n    })\n\n    it('maintains focus when opened', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open Focus Test</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Focus Management</DrawerTitle>\n            <button>Focusable Element</button>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Open Focus Test')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        // Focus should be managed properly when drawer opens\n        const focusableElement = screen.getByText('Focusable Element')\n        expect(focusableElement).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Performance and Edge Cases', () => {\n    it('handles rapid open/close operations', async () => {\n      const user = userEvent.setup()\n      const onOpenChange = jest.fn()\n      \n      render(\n        <Drawer onOpenChange={onOpenChange}>\n          <DrawerTrigger>Toggle</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Rapid Toggle Test</DrawerTitle>\n            <DrawerClose>Close</DrawerClose>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Toggle')\n      \n      // Rapid clicks\n      await user.click(trigger)\n      await user.click(screen.getByText('Close'))\n      await user.click(trigger)\n      await user.click(screen.getByText('Close'))\n      \n      // Should handle rapid operations gracefully\n      expect(onOpenChange).toHaveBeenCalled()\n    })\n\n    it('handles content overflow gracefully', async () => {\n      const user = userEvent.setup()\n      \n      const longContent = Array.from({ length: 100 }, (_, i) => `Line ${i + 1}`).join('\\n')\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open Long Content</DrawerTrigger>\n          <DrawerContent data-testid=\"overflow-content\">\n            <DrawerTitle>Long Content Test</DrawerTitle>\n            <div style={{ height: '200vh' }}>\n              <pre>{longContent}</pre>\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      await user.click(screen.getByText('Open Long Content'))\n      \n      await waitFor(() => {\n        const content = screen.getByTestId('overflow-content')\n        expect(content).toBeInTheDocument()\n        // Should handle overflow with proper scrolling\n        expect(content).toHaveClass('overflow-hidden')\n      })\n    })\n\n    it('prevents background scroll when opened', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <>\n          <div style={{ height: '200vh' }}>Background Content</div>\n          <Drawer>\n            <DrawerTrigger>Open</DrawerTrigger>\n            <DrawerContent>\n              <DrawerTitle>No Background Scroll</DrawerTitle>\n            </DrawerContent>\n          </Drawer>\n        </>\n      )\n      \n      await user.click(screen.getByText('Open'))\n      \n      await waitFor(() => {\n        // Background scrolling should be prevented\n        expect(document.body.style.overflow).toBe('hidden')\n      })\n    })\n\n    it('handles animation interruptions', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger>Open</DrawerTrigger>\n          <DrawerContent>\n            <DrawerTitle>Animation Test</DrawerTitle>\n            <DrawerClose>Close</DrawerClose>\n          </DrawerContent>\n        </Drawer>\n      )\n      \n      const trigger = screen.getByText('Open')\n      \n      // Open and immediately try to close during animation\n      await user.click(trigger)\n      // Don't wait for animation to complete\n      const closeBtn = screen.getByText('Close')\n      await user.click(closeBtn)\n      \n      // Should handle animation interruption gracefully\n      await waitFor(() => {\n        expect(screen.queryByText('Animation Test')).not.toBeInTheDocument()\n      })\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/error-handling.test.tsx",["2384","2385","2386","2387"],[],"/**\n * Error Handling and Edge Case Tests for ShadCN UI Components\n * Tests component resilience, error boundaries, and edge case scenarios\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n} from '../command'\nimport {\n  Drawer,\n  DrawerTrigger,\n  DrawerContent,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerClose,\n} from '../drawer'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '../tooltip'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../popover'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from '../input-otp'\n\n// Error boundary component for testing\nclass TestErrorBoundary extends React.Component<\n  { children: React.ReactNode; onError?: (error: Error) => void },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode; onError?: (error: Error) => void }) {\n    super(props)\n    this.state = { hasError: false }\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error }\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    this.props.onError?.(error)\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div data-testid=\"error-fallback\">Something went wrong: {this.state.error?.message}</div>\n    }\n\n    return this.props.children\n  }\n}\n\n// Component that throws an error for testing\nconst ErrorThrowingComponent = ({ shouldThrow = false }: { shouldThrow?: boolean }) => {\n  if (shouldThrow) {\n    throw new Error('Test error')\n  }\n  return <div>No error</div>\n}\n\n// Network simulation utilities\nconst mockNetworkFailure = () => {\n  const originalFetch = global.fetch\n  global.fetch = jest.fn().mockRejectedValue(new Error('Network error'))\n  return () => {\n    global.fetch = originalFetch\n  }\n}\n\nconst mockSlowNetwork = (delay: number = 5000) => {\n  const originalFetch = global.fetch\n  global.fetch = jest.fn().mockImplementation(() => \n    new Promise((resolve) => setTimeout(resolve, delay))\n  )\n  return () => {\n    global.fetch = originalFetch\n  }\n}\n\ndescribe('Error Handling and Edge Cases', () => {\n  beforeEach(() => {\n    // Suppress console.error for error boundary tests\n    jest.spyOn(console, 'error').mockImplementation(() => {})\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('Error Boundary Integration', () => {\n    it('handles component errors gracefully', () => {\n      const onError = jest.fn()\n      \n      render(\n        <TestErrorBoundary onError={onError}>\n          <Command>\n            <CommandInput />\n            <CommandList>\n              <ErrorThrowingComponent shouldThrow />\n            </CommandList>\n          </Command>\n        </TestErrorBoundary>\n      )\n\n      expect(screen.getByTestId('error-fallback')).toBeInTheDocument()\n      expect(onError).toHaveBeenCalledWith(expect.any(Error))\n    })\n\n    it('isolates errors to prevent component tree crashes', () => {\n      render(\n        <div>\n          <div data-testid=\"safe-component\">Safe Component</div>\n          <TestErrorBoundary>\n            <Command>\n              <CommandInput />\n              <CommandList>\n                <ErrorThrowingComponent shouldThrow />\n              </CommandList>\n            </Command>\n          </TestErrorBoundary>\n          <div data-testid=\"another-safe-component\">Another Safe Component</div>\n        </div>\n      )\n\n      expect(screen.getByTestId('safe-component')).toBeInTheDocument()\n      expect(screen.getByTestId('another-safe-component')).toBeInTheDocument()\n      expect(screen.getByTestId('error-fallback')).toBeInTheDocument()\n    })\n  })\n\n  describe('Command Component Error Handling', () => {\n    it('handles empty search results gracefully', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Search...\" />\n          <CommandList>\n            <CommandEmpty>No meals found matching your search.</CommandEmpty>\n            <CommandGroup>\n              <CommandItem value=\"biryani\">Chicken Biryani</CommandItem>\n              <CommandItem value=\"curry\">Paneer Curry</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Search...')\n      await user.type(input, 'nonexistent meal')\n\n      await waitFor(() => {\n        expect(screen.getByText('No meals found matching your search.')).toBeInTheDocument()\n      })\n    })\n\n    it('handles extremely long search queries', async () => {\n      const user = userEvent.setup()\n      const longQuery = 'a'.repeat(1000)\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Long query test...\" />\n          <CommandList>\n            <CommandEmpty>No results</CommandEmpty>\n            <CommandGroup>\n              <CommandItem value=\"test\">Test Item</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Long query test...')\n      \n      // Should handle long input without crashing\n      await user.type(input, longQuery)\n      \n      expect(input).toHaveValue(longQuery)\n    })\n\n    it('handles rapid successive search queries', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Rapid search...\" />\n          <CommandList>\n            <CommandGroup>\n              <CommandItem value=\"item1\">Item 1</CommandItem>\n              <CommandItem value=\"item2\">Item 2</CommandItem>\n              <CommandItem value=\"item3\">Item 3</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Rapid search...')\n      \n      // Rapid typing and clearing\n      for (let i = 0; i < 10; i++) {\n        await user.type(input, `query${i}`)\n        await user.clear(input)\n      }\n      \n      // Should still be functional\n      await user.type(input, 'item1')\n      expect(screen.getByText('Item 1')).toBeInTheDocument()\n    })\n\n    it('handles special characters in search', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Special chars...\" />\n          <CommandList>\n            <CommandGroup>\n              <CommandItem value=\"special!@#$%^&*()\">Special!@#$%^&*()</CommandItem>\n              <CommandItem value=\"unicode-🍛\">Unicode 🍛</CommandItem>\n              <CommandItem value=\"quotes'test&quot;\">Quotes'Test&quot;</CommandItem>\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Special chars...')\n      \n      // Test special characters\n      await user.type(input, '!@#$')\n      expect(screen.getByText('Special!@#$%^&*()')).toBeInTheDocument()\n      \n      await user.clear(input)\n      await user.type(input, '🍛')\n      expect(screen.getByText('Unicode 🍛')).toBeInTheDocument()\n      \n      await user.clear(input)\n      await user.type(input, '\"')\n      expect(screen.getByText('Quotes\\'Test\"')).toBeInTheDocument()\n    })\n  })\n\n  describe('Drawer Component Error Handling', () => {\n    it('handles drawer open/close state corruption', async () => {\n      const user = userEvent.setup()\n      \n      const TestDrawer = () => {\n        const [isOpen, setIsOpen] = React.useState(false)\n        \n        return (\n          <div>\n            <button onClick={() => setIsOpen(!isOpen)}>External Toggle</button>\n            <Drawer open={isOpen} onOpenChange={setIsOpen}>\n              <DrawerTrigger asChild>\n                <button>Open Drawer</button>\n              </DrawerTrigger>\n              <DrawerContent>\n                <DrawerHeader>\n                  <DrawerTitle>Test Drawer</DrawerTitle>\n                </DrawerHeader>\n                <div>Drawer content</div>\n                <DrawerClose asChild>\n                  <button>Close</button>\n                </DrawerClose>\n              </DrawerContent>\n            </Drawer>\n          </div>\n        )\n      }\n\n      render(<TestDrawer />)\n\n      const externalToggle = screen.getByText('External Toggle')\n      const drawerTrigger = screen.getByText('Open Drawer')\n      \n      // Create conflicting state by using both external and internal controls\n      await user.click(externalToggle) // Open externally\n      await user.click(drawerTrigger) // Try to open again\n      \n      // Should handle state conflicts gracefully\n      expect(screen.getByText('Test Drawer')).toBeInTheDocument()\n    })\n\n    it('handles rapid drawer open/close operations', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Rapid Toggle</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Rapid Test</DrawerTitle>\n            </DrawerHeader>\n            <DrawerClose asChild>\n              <button>Close</button>\n            </DrawerClose>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Rapid Toggle')\n      \n      // Rapid toggling\n      for (let i = 0; i < 5; i++) {\n        await user.click(trigger)\n        const closeBtn = screen.queryByText('Close')\n        if (closeBtn) {\n          await user.click(closeBtn)\n        }\n      }\n      \n      // Should still be functional\n      await user.click(trigger)\n      expect(screen.getByText('Rapid Test')).toBeInTheDocument()\n    })\n\n    it('handles drawer content overflow', async () => {\n      const user = userEvent.setup()\n      \n      const largeContent = Array.from({ length: 100 }, (_, i) => (\n        <div key={i} style={{ height: '50px', padding: '10px' }}>\n          Very long content item {i} with lots of text that might cause overflow issues\n        </div>\n      ))\n\n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Large Content Drawer</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Large Content Test</DrawerTitle>\n            </DrawerHeader>\n            <div style={{ maxHeight: '400px', overflow: 'auto' }}>\n              {largeContent}\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Large Content Drawer')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Large Content Test')).toBeInTheDocument()\n        expect(screen.getByText('Very long content item 0 with lots of text that might cause overflow issues')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Tooltip Component Error Handling', () => {\n    it('handles tooltip triggers without content', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button>Empty Tooltip</button>\n            </TooltipTrigger>\n            <TooltipContent>\n              {/* Empty content */}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n\n      const trigger = screen.getByText('Empty Tooltip')\n      await user.hover(trigger)\n      \n      // Should handle empty content gracefully\n      expect(trigger).toBeInTheDocument()\n    })\n\n    it('handles tooltips with dynamic content that might fail', async () => {\n      const user = userEvent.setup()\n      \n      const DynamicTooltip = () => {\n        const [data, setData] = React.useState<string | null>(null)\n        const [error, setError] = React.useState<string | null>(null)\n        \n        const fetchData = async () => {\n          try {\n            // Simulate data fetching that might fail\n            if (Math.random() > 0.5) {\n              throw new Error('Data fetch failed')\n            }\n            setData('Dynamic content loaded')\n          } catch (err) {\n            setError('Failed to load content')\n          }\n        }\n\n        React.useEffect(() => {\n          fetchData()\n        }, [])\n\n        return (\n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <button>Dynamic Tooltip</button>\n              </TooltipTrigger>\n              <TooltipContent>\n                {error ? (\n                  <p className=\"text-red-500\">{error}</p>\n                ) : (\n                  <p>{data || 'Loading...'}</p>\n                )}\n              </TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        )\n      }\n\n      render(<DynamicTooltip />)\n\n      const trigger = screen.getByText('Dynamic Tooltip')\n      await user.hover(trigger)\n      \n      await waitFor(() => {\n        // Should show either content or error message\n        const tooltip = screen.queryByText('Dynamic content loaded') || \n                       screen.queryByText('Failed to load content') ||\n                       screen.queryByText('Loading...')\n        expect(tooltip).toBeInTheDocument()\n      })\n    })\n\n    it('handles tooltips with extremely long content', async () => {\n      const user = userEvent.setup()\n      const longContent = 'Very long tooltip content. '.repeat(100)\n      \n      render(\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button>Long Content Tooltip</button>\n            </TooltipTrigger>\n            <TooltipContent>\n              <p style={{ maxWidth: '300px', wordWrap: 'break-word' }}>\n                {longContent}\n              </p>\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n\n      const trigger = screen.getByText('Long Content Tooltip')\n      await user.hover(trigger)\n      \n      await waitFor(() => {\n        // Should handle long content without breaking layout\n        expect(screen.getByText(/Very long tooltip content/)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Popover Component Error Handling', () => {\n    it('handles popover positioning edge cases', async () => {\n      const user = userEvent.setup()\n      \n      // Mock extreme viewport conditions\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 100, // Very small width\n      })\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 100, // Very small height\n      })\n\n      render(\n        <div style={{ position: 'absolute', top: '50px', right: '10px' }}>\n          <Popover>\n            <PopoverTrigger asChild>\n              <button>Edge Position</button>\n            </PopoverTrigger>\n            <PopoverContent>\n              <div>Popover near edge</div>\n            </PopoverContent>\n          </Popover>\n        </div>\n      )\n\n      const trigger = screen.getByText('Edge Position')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Popover near edge')).toBeInTheDocument()\n      })\n    })\n\n    it('handles popover with failing async content', async () => {\n      const user = userEvent.setup()\n      \n      const AsyncPopover = () => {\n        const [content, setContent] = React.useState('Loading...')\n        const [isOpen, setIsOpen] = React.useState(false)\n        \n        React.useEffect(() => {\n          if (isOpen) {\n            // Simulate async operation that might fail\n            setTimeout(() => {\n              if (Math.random() > 0.5) {\n                setContent('Content loaded successfully')\n              } else {\n                setContent('Error: Failed to load content')\n              }\n            }, 100)\n          }\n        }, [isOpen])\n\n        return (\n          <Popover open={isOpen} onOpenChange={setIsOpen}>\n            <PopoverTrigger asChild>\n              <button>Async Popover</button>\n            </PopoverTrigger>\n            <PopoverContent>\n              <div>{content}</div>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n\n      render(<AsyncPopover />)\n\n      const trigger = screen.getByText('Async Popover')\n      await user.click(trigger)\n      \n      // Should show loading state initially\n      await waitFor(() => {\n        expect(screen.getByText('Loading...')).toBeInTheDocument()\n      })\n      \n      // Should eventually show either success or error\n      await waitFor(() => {\n        const result = screen.queryByText('Content loaded successfully') || \n                      screen.queryByText('Error: Failed to load content')\n        expect(result).toBeInTheDocument()\n      }, { timeout: 3000 })\n    })\n  })\n\n  describe('InputOTP Component Error Handling', () => {\n    it('handles invalid OTP input patterns', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      const onError = jest.fn()\n      \n      const ValidatingOTP = () => {\n        const [value, setValue] = React.useState('')\n        const [error, setError] = React.useState('')\n        \n        const handleChange = (newValue: string) => {\n          setValue(newValue)\n          onChange(newValue)\n          \n          // Validate input\n          if (newValue.length === 6) {\n            if (!/^\\d{6}$/.test(newValue)) {\n              const errorMsg = 'OTP must contain only numbers'\n              setError(errorMsg)\n              onError(errorMsg)\n            } else {\n              setError('')\n            }\n          } else {\n            setError('')\n          }\n        }\n\n        return (\n          <div>\n            <InputOTP maxLength={6} value={value} onChange={handleChange}>\n              <InputOTPGroup>\n                {Array.from({ length: 6 }, (_, i) => (\n                  <InputOTPSlot key={i} index={i} />\n                ))}\n              </InputOTPGroup>\n            </InputOTP>\n            {error && (\n              <div className=\"text-red-500\" role=\"alert\">\n                {error}\n              </div>\n            )}\n          </div>\n        )\n      }\n\n      render(<ValidatingOTP />)\n\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Test invalid input (letters instead of numbers)\n      await user.type(otpInput, 'ABCDEF')\n      \n      await waitFor(() => {\n        expect(screen.getByText('OTP must contain only numbers')).toBeInTheDocument()\n        expect(onError).toHaveBeenCalledWith('OTP must contain only numbers')\n      })\n    })\n\n    it('handles OTP input with network verification failures', async () => {\n      const user = userEvent.setup()\n      const restoreNetwork = mockNetworkFailure()\n      \n      const NetworkOTP = () => {\n        const [value, setValue] = React.useState('')\n        const [status, setStatus] = React.useState<'idle' | 'verifying' | 'error' | 'success'>('idle')\n        \n        const handleChange = async (newValue: string) => {\n          setValue(newValue)\n          \n          if (newValue.length === 6) {\n            setStatus('verifying')\n            try {\n              // Simulate network verification\n              await fetch('/api/verify-otp', {\n                method: 'POST',\n                body: JSON.stringify({ otp: newValue }),\n              })\n              setStatus('success')\n            } catch (error) {\n              setStatus('error')\n            }\n          }\n        }\n\n        return (\n          <div>\n            <InputOTP maxLength={6} value={value} onChange={handleChange}>\n              <InputOTPGroup>\n                {Array.from({ length: 6 }, (_, i) => (\n                  <InputOTPSlot key={i} index={i} />\n                ))}\n              </InputOTPGroup>\n            </InputOTP>\n            \n            {status === 'verifying' && <div>Verifying...</div>}\n            {status === 'error' && (\n              <div className=\"text-red-500\" role=\"alert\">\n                Network error: Unable to verify OTP\n              </div>\n            )}\n            {status === 'success' && (\n              <div className=\"text-green-500\">OTP verified successfully</div>\n            )}\n          </div>\n        )\n      }\n\n      render(<NetworkOTP />)\n\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '123456')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Verifying...')).toBeInTheDocument()\n      })\n      \n      await waitFor(() => {\n        expect(screen.getByText('Network error: Unable to verify OTP')).toBeInTheDocument()\n      })\n      \n      restoreNetwork()\n    })\n\n    it('handles OTP input with slow network responses', async () => {\n      const user = userEvent.setup()\n      const restoreNetwork = mockSlowNetwork(1000)\n      \n      const SlowNetworkOTP = () => {\n        const [value, setValue] = React.useState('')\n        const [isVerifying, setIsVerifying] = React.useState(false)\n        \n        const handleChange = async (newValue: string) => {\n          setValue(newValue)\n          \n          if (newValue.length === 6) {\n            setIsVerifying(true)\n            try {\n              await fetch('/api/verify-otp')\n              setIsVerifying(false)\n            } catch (error) {\n              setIsVerifying(false)\n            }\n          }\n        }\n\n        return (\n          <div>\n            <InputOTP \n              maxLength={6} \n              value={value} \n              onChange={handleChange}\n              disabled={isVerifying}\n            >\n              <InputOTPGroup>\n                {Array.from({ length: 6 }, (_, i) => (\n                  <InputOTPSlot key={i} index={i} />\n                ))}\n              </InputOTPGroup>\n            </InputOTP>\n            \n            {isVerifying && (\n              <div>\n                Verifying OTP... This may take a moment.\n              </div>\n            )}\n          </div>\n        )\n      }\n\n      render(<SlowNetworkOTP />)\n\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '123456')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Verifying OTP... This may take a moment.')).toBeInTheDocument()\n        expect(otpInput).toBeDisabled()\n      })\n      \n      restoreNetwork()\n    })\n  })\n\n  describe('Memory Leak Prevention', () => {\n    it('cleans up event listeners on unmount', () => {\n      const addEventListenerSpy = jest.spyOn(document, 'addEventListener')\n      const removeEventListenerSpy = jest.spyOn(document, 'removeEventListener')\n      \n      const { unmount } = render(\n        <div>\n          <Command>\n            <CommandInput />\n            <CommandList>\n              <CommandItem value=\"test\">Test</CommandItem>\n            </CommandList>\n          </Command>\n          \n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger>Trigger</TooltipTrigger>\n              <TooltipContent>Content</TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          \n          <Popover>\n            <PopoverTrigger>Trigger</PopoverTrigger>\n            <PopoverContent>Content</PopoverContent>\n          </Popover>\n        </div>\n      )\n\n      const initialListeners = addEventListenerSpy.mock.calls.length\n      \n      unmount()\n      \n      // Should have corresponding removeEventListener calls\n      expect(removeEventListenerSpy.mock.calls.length).toBeGreaterThan(0)\n      \n      addEventListenerSpy.mockRestore()\n      removeEventListenerSpy.mockRestore()\n    })\n\n    it('handles component unmounting during async operations', async () => {\n      const user = userEvent.setup()\n      \n      const AsyncComponent = () => {\n        const [isLoading, setIsLoading] = React.useState(false)\n        const mountedRef = React.useRef(true)\n        \n        React.useEffect(() => {\n          return () => {\n            mountedRef.current = false\n          }\n        }, [])\n        \n        const handleAsyncOperation = async () => {\n          setIsLoading(true)\n          \n          // Simulate async operation\n          await new Promise(resolve => setTimeout(resolve, 100))\n          \n          // Only update state if component is still mounted\n          if (mountedRef.current) {\n            setIsLoading(false)\n          }\n        }\n\n        return (\n          <div>\n            <button onClick={handleAsyncOperation}>Start Async</button>\n            {isLoading && <div>Loading...</div>}\n            <Command>\n              <CommandInput />\n              <CommandList>\n                <CommandItem value=\"test\">Test Item</CommandItem>\n              </CommandList>\n            </Command>\n          </div>\n        )\n      }\n\n      const { unmount } = render(<AsyncComponent />)\n\n      const button = screen.getByText('Start Async')\n      await user.click(button)\n      \n      // Unmount before async operation completes\n      unmount()\n      \n      // Should not cause errors or warnings\n      expect(screen.queryByText('Start Async')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility Error Handling', () => {\n    it('maintains accessibility during error states', async () => {\n      const user = userEvent.setup()\n      \n      const AccessibleErrorComponent = () => {\n        const [hasError, setHasError] = React.useState(false)\n        \n        return (\n          <div>\n            <button onClick={() => setHasError(!hasError)}>\n              Toggle Error\n            </button>\n            \n            {hasError ? (\n              <div role=\"alert\" aria-live=\"assertive\">\n                <p>An error occurred. Please try again.</p>\n              </div>\n            ) : (\n              <Command>\n                <CommandInput \n                  placeholder=\"Search...\" \n                  aria-label=\"Search meals\"\n                />\n                <CommandList>\n                  <CommandItem value=\"test\" role=\"option\">\n                    Test Item\n                  </CommandItem>\n                </CommandList>\n              </Command>\n            )}\n          </div>\n        )\n      }\n\n      render(<AccessibleErrorComponent />)\n\n      const toggleButton = screen.getByText('Toggle Error')\n      \n      // Initially should show Command component\n      expect(screen.getByLabelText('Search meals')).toBeInTheDocument()\n      \n      // Toggle to error state\n      await user.click(toggleButton)\n      \n      // Should show accessible error message\n      const errorAlert = screen.getByRole('alert')\n      expect(errorAlert).toBeInTheDocument()\n      expect(errorAlert).toHaveAttribute('aria-live', 'assertive')\n      \n      // Toggle back to normal state\n      await user.click(toggleButton)\n      \n      // Should restore Command component\n      expect(screen.getByLabelText('Search meals')).toBeInTheDocument()\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/input-otp.test.tsx",["2388"],[],"/**\n * Comprehensive Unit Tests for InputOTP Component (ShadCN UI)\n * Tests OTP input functionality, RFID verification, and accessibility\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n  InputOTPSeparator,\n} from '../input-otp'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('InputOTP Component Suite', () => {\n  // Mock RFID verification scenarios\n  const mockRFIDCodes = {\n    valid: '123456',\n    expired: '000000',\n    blocked: '999999',\n    student: '456789',\n    teacher: '789012',\n  }\n\n  const RFIDVerificationOTP = ({ \n    maxLength = 6,\n    onComplete = jest.fn(),\n    onError = jest.fn(),\n    studentName = \"John Doe\",\n    studentId = \"ST001\"\n  }: {\n    maxLength?: number\n    onComplete?: (value: string) => void\n    onError?: (error: string) => void\n    studentName?: string\n    studentId?: string\n  }) => {\n    const [value, setValue] = React.useState('')\n    const [isVerifying, setIsVerifying] = React.useState(false)\n    const [error, setError] = React.useState('')\n\n    const handleChange = (newValue: string) => {\n      setValue(newValue)\n      setError('')\n      \n      if (newValue.length === maxLength) {\n        setIsVerifying(true)\n        \n        // Simulate RFID verification\n        setTimeout(() => {\n          setIsVerifying(false)\n          \n          if (newValue === mockRFIDCodes.valid || newValue === mockRFIDCodes.student) {\n            onComplete(newValue)\n          } else if (newValue === mockRFIDCodes.expired) {\n            const errorMsg = 'RFID card has expired. Please contact administration.'\n            setError(errorMsg)\n            onError(errorMsg)\n          } else if (newValue === mockRFIDCodes.blocked) {\n            const errorMsg = 'RFID card is blocked. Please contact administration.'\n            setError(errorMsg)\n            onError(errorMsg)\n          } else {\n            const errorMsg = 'Invalid RFID code. Please try again.'\n            setError(errorMsg)\n            onError(errorMsg)\n          }\n        }, 1000)\n      }\n    }\n\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"text-center\">\n          <h3 className=\"font-medium\">RFID Verification</h3>\n          <p className=\"text-sm text-muted-foreground\">\n            Student: {studentName} ({studentId})\n          </p>\n          <p className=\"text-sm text-muted-foreground\">\n            Please scan your RFID card or enter the code\n          </p>\n        </div>\n        \n        <div className=\"flex justify-center\">\n          <InputOTP \n            maxLength={maxLength} \n            value={value} \n            onChange={handleChange}\n            disabled={isVerifying}\n          >\n            <InputOTPGroup>\n              {Array.from({ length: Math.ceil(maxLength / 2) }, (_, i) => (\n                <InputOTPSlot key={i} index={i} />\n              ))}\n            </InputOTPGroup>\n            <InputOTPSeparator />\n            <InputOTPGroup>\n              {Array.from({ length: Math.floor(maxLength / 2) }, (_, i) => (\n                <InputOTPSlot key={i + Math.ceil(maxLength / 2)} index={i + Math.ceil(maxLength / 2)} />\n              ))}\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n        \n        {isVerifying && (\n          <div className=\"text-center text-sm text-blue-600\">\n            Verifying RFID code...\n          </div>\n        )}\n        \n        {error && (\n          <div className=\"text-center text-sm text-red-600\" role=\"alert\">\n            {error}\n          </div>\n        )}\n        \n        <div className=\"text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Code: {value || 'Enter 6-digit RFID code'}\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  const SimpleOTP = ({ \n    maxLength = 4,\n    value = '',\n    onChange = jest.fn(),\n    ...props \n  }: {\n    maxLength?: number\n    value?: string\n    onChange?: (value: string) => void\n    [key: string]: any\n  }) => (\n    <InputOTP maxLength={maxLength} value={value} onChange={onChange} {...props}>\n      <InputOTPGroup>\n        {Array.from({ length: maxLength }, (_, i) => (\n          <InputOTPSlot key={i} index={i} />\n        ))}\n      </InputOTPGroup>\n    </InputOTP>\n  )\n\n  describe('InputOTP Root Component', () => {\n    it('renders without crashing', () => {\n      render(<SimpleOTP />)\n      \n      // Should render 4 input slots by default\n      const slots = screen.getAllByRole('textbox', { hidden: true })\n      expect(slots).toHaveLength(1) // OTP input is single textbox with multiple visual slots\n    })\n\n    it('supports custom maxLength', () => {\n      render(<SimpleOTP maxLength={6} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toHaveAttribute('maxLength', '6')\n    })\n\n    it('supports controlled value', () => {\n      render(<SimpleOTP value=\"12\" />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toHaveValue('12')\n    })\n\n    it('handles onChange callback', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '1')\n      \n      expect(onChange).toHaveBeenCalledWith('1')\n    })\n\n    it('supports disabled state', () => {\n      render(<SimpleOTP disabled />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toBeDisabled()\n    })\n\n    it('supports custom className', () => {\n      render(<SimpleOTP className=\"custom-otp\" />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toHaveClass('custom-otp')\n    })\n  })\n\n  describe('InputOTPGroup Component', () => {\n    it('renders group with proper structure', () => {\n      render(\n        <InputOTP maxLength={4}>\n          <InputOTPGroup data-testid=\"otp-group\">\n            <InputOTPSlot index={0} />\n            <InputOTPSlot index={1} />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const group = screen.getByTestId('otp-group')\n      expect(group).toBeInTheDocument()\n      expect(group).toHaveClass('flex', 'items-center')\n    })\n\n    it('supports custom className', () => {\n      render(\n        <InputOTP maxLength={2}>\n          <InputOTPGroup className=\"custom-group\">\n            <InputOTPSlot index={0} />\n            <InputOTPSlot index={1} />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const group = screen.getByRole('textbox', { hidden: true }).closest('.custom-group')\n      expect(group).toBeInTheDocument()\n    })\n  })\n\n  describe('InputOTPSlot Component', () => {\n    it('renders individual slots', () => {\n      render(\n        <InputOTP maxLength={3} value=\"12\">\n          <InputOTPGroup>\n            <InputOTPSlot index={0} data-testid=\"slot-0\" />\n            <InputOTPSlot index={1} data-testid=\"slot-1\" />\n            <InputOTPSlot index={2} data-testid=\"slot-2\" />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const slot0 = screen.getByTestId('slot-0')\n      const slot1 = screen.getByTestId('slot-1')\n      const slot2 = screen.getByTestId('slot-2')\n      \n      expect(slot0).toBeInTheDocument()\n      expect(slot1).toBeInTheDocument()\n      expect(slot2).toBeInTheDocument()\n      \n      // First two slots should have content\n      expect(slot0).toHaveTextContent('1')\n      expect(slot1).toHaveTextContent('2')\n      expect(slot2).toHaveTextContent('')\n    })\n\n    it('applies proper styling classes', () => {\n      render(\n        <InputOTP maxLength={1} value=\"\">\n          <InputOTPGroup>\n            <InputOTPSlot index={0} data-testid=\"styled-slot\" />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const slot = screen.getByTestId('styled-slot')\n      expect(slot).toHaveClass(\n        'relative',\n        'flex',\n        'h-10',\n        'w-10',\n        'items-center',\n        'justify-center',\n        'border-y',\n        'border-r',\n        'text-sm'\n      )\n    })\n\n    it('shows active state styling', () => {\n      render(\n        <InputOTP maxLength={2} value=\"1\">\n          <InputOTPGroup>\n            <InputOTPSlot index={0} data-testid=\"filled-slot\" />\n            <InputOTPSlot index={1} data-testid=\"active-slot\" />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const activeSlot = screen.getByTestId('active-slot')\n      // Active slot should have focus ring styling\n      expect(activeSlot).toHaveClass('z-10')\n    })\n\n    it('supports custom className', () => {\n      render(\n        <InputOTP maxLength={1} value=\"\">\n          <InputOTPGroup>\n            <InputOTPSlot index={0} className=\"custom-slot\" />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const slot = document.querySelector('.custom-slot')\n      expect(slot).toBeInTheDocument()\n    })\n\n    it('displays cursor animation in empty active slot', () => {\n      render(\n        <InputOTP maxLength={2} value=\"\">\n          <InputOTPGroup>\n            <InputOTPSlot index={0} data-testid=\"cursor-slot\" />\n            <InputOTPSlot index={1} />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const slot = screen.getByTestId('cursor-slot')\n      // Should show animated cursor\n      const cursor = slot.querySelector('.animate-caret-blink')\n      expect(cursor).toBeInTheDocument()\n    })\n  })\n\n  describe('InputOTPSeparator Component', () => {\n    it('renders separator with dot icon', () => {\n      render(\n        <InputOTP maxLength={4}>\n          <InputOTPGroup>\n            <InputOTPSlot index={0} />\n            <InputOTPSlot index={1} />\n          </InputOTPGroup>\n          <InputOTPSeparator data-testid=\"separator\" />\n          <InputOTPGroup>\n            <InputOTPSlot index={2} />\n            <InputOTPSlot index={3} />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const separator = screen.getByTestId('separator')\n      expect(separator).toBeInTheDocument()\n      expect(separator).toHaveAttribute('role', 'separator')\n      \n      // Should contain dot icon\n      const dotIcon = separator.querySelector('svg')\n      expect(dotIcon).toBeInTheDocument()\n    })\n\n    it('supports custom props', () => {\n      render(\n        <InputOTP maxLength={2}>\n          <InputOTPGroup>\n            <InputOTPSlot index={0} />\n          </InputOTPGroup>\n          <InputOTPSeparator className=\"custom-separator\" />\n          <InputOTPGroup>\n            <InputOTPSlot index={1} />\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const separator = document.querySelector('.custom-separator')\n      expect(separator).toBeInTheDocument()\n    })\n  })\n\n  describe('User Input Handling', () => {\n    it('accepts numeric input', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '1234')\n      \n      expect(onChange).toHaveBeenLastCalledWith('1234')\n    })\n\n    it('accepts alphabetic input when allowed', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(\n        <InputOTP maxLength={4} onChange={onChange}>\n          <InputOTPGroup>\n            {Array.from({ length: 4 }, (_, i) => (\n              <InputOTPSlot key={i} index={i} />\n            ))}\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, 'ABCD')\n      \n      expect(onChange).toHaveBeenLastCalledWith('ABCD')\n    })\n\n    it('handles backspace deletion', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP value=\"123\" onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '{backspace}')\n      \n      expect(onChange).toHaveBeenLastCalledWith('12')\n    })\n\n    it('handles clear all input', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP value=\"1234\" onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.clear(otpInput)\n      \n      expect(onChange).toHaveBeenCalledWith('')\n    })\n\n    it('prevents input beyond maxLength', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP maxLength={4} onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '123456')\n      \n      // Should only accept first 4 characters\n      expect(onChange).toHaveBeenLastCalledWith('1234')\n    })\n\n    it('handles paste input', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.click(otpInput)\n      await user.paste('5678')\n      \n      expect(onChange).toHaveBeenCalledWith('5678')\n    })\n\n    it('truncates pasted input to maxLength', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP maxLength={4} onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.click(otpInput)\n      await user.paste('123456789')\n      \n      expect(onChange).toHaveBeenCalledWith('1234')\n    })\n  })\n\n  describe('RFID Verification Integration', () => {\n    it('displays RFID verification interface', () => {\n      render(<RFIDVerificationOTP />)\n      \n      expect(screen.getByText('RFID Verification')).toBeInTheDocument()\n      expect(screen.getByText('Student: John Doe (ST001)')).toBeInTheDocument()\n      expect(screen.getByText('Please scan your RFID card or enter the code')).toBeInTheDocument()\n    })\n\n    it('handles valid RFID code verification', async () => {\n      const user = userEvent.setup()\n      const onComplete = jest.fn()\n      \n      render(<RFIDVerificationOTP onComplete={onComplete} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockRFIDCodes.valid)\n      \n      // Should show verifying state\n      await waitFor(() => {\n        expect(screen.getByText('Verifying RFID code...')).toBeInTheDocument()\n      })\n      \n      // Should complete verification\n      await waitFor(() => {\n        expect(onComplete).toHaveBeenCalledWith(mockRFIDCodes.valid)\n      }, { timeout: 2000 })\n    })\n\n    it('handles expired RFID code', async () => {\n      const user = userEvent.setup()\n      const onError = jest.fn()\n      \n      render(<RFIDVerificationOTP onError={onError} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockRFIDCodes.expired)\n      \n      await waitFor(() => {\n        expect(screen.getByText('RFID card has expired. Please contact administration.')).toBeInTheDocument()\n        expect(onError).toHaveBeenCalledWith('RFID card has expired. Please contact administration.')\n      }, { timeout: 2000 })\n    })\n\n    it('handles blocked RFID code', async () => {\n      const user = userEvent.setup()\n      const onError = jest.fn()\n      \n      render(<RFIDVerificationOTP onError={onError} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockRFIDCodes.blocked)\n      \n      await waitFor(() => {\n        expect(screen.getByText('RFID card is blocked. Please contact administration.')).toBeInTheDocument()\n        expect(onError).toHaveBeenCalledWith('RFID card is blocked. Please contact administration.')\n      }, { timeout: 2000 })\n    })\n\n    it('handles invalid RFID code', async () => {\n      const user = userEvent.setup()\n      const onError = jest.fn()\n      \n      render(<RFIDVerificationOTP onError={onError} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '111111')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Invalid RFID code. Please try again.')).toBeInTheDocument()\n        expect(onError).toHaveBeenCalledWith('Invalid RFID code. Please try again.')\n      }, { timeout: 2000 })\n    })\n\n    it('clears error when new input is entered', async () => {\n      const user = userEvent.setup()\n      \n      render(<RFIDVerificationOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Enter invalid code\n      await user.type(otpInput, '111111')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Invalid RFID code. Please try again.')).toBeInTheDocument()\n      }, { timeout: 2000 })\n      \n      // Clear and enter new code\n      await user.clear(otpInput)\n      await user.type(otpInput, '1')\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Invalid RFID code. Please try again.')).not.toBeInTheDocument()\n      })\n    })\n\n    it('disables input during verification', async () => {\n      const user = userEvent.setup()\n      \n      render(<RFIDVerificationOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, mockRFIDCodes.valid)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Verifying RFID code...')).toBeInTheDocument()\n        expect(otpInput).toBeDisabled()\n      })\n    })\n  })\n\n  describe('Keyboard Navigation', () => {\n    it('focuses on click', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimpleOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.click(otpInput)\n      \n      expect(otpInput).toHaveFocus()\n    })\n\n    it('supports tab navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <div>\n          <button>Before OTP</button>\n          <SimpleOTP />\n          <button>After OTP</button>\n        </div>\n      )\n      \n      const beforeBtn = screen.getByText('Before OTP')\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      const afterBtn = screen.getByText('After OTP')\n      \n      await user.click(beforeBtn)\n      await user.keyboard('{Tab}')\n      \n      expect(otpInput).toHaveFocus()\n      \n      await user.keyboard('{Tab}')\n      expect(afterBtn).toHaveFocus()\n    })\n\n    it('handles arrow key navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimpleOTP value=\"12\" />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.click(otpInput)\n      \n      // Arrow keys should move cursor within the input\n      await user.keyboard('{ArrowLeft}')\n      await user.keyboard('{ArrowRight}')\n      \n      expect(otpInput).toHaveFocus()\n    })\n\n    it('handles home and end keys', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimpleOTP value=\"1234\" />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.click(otpInput)\n      \n      await user.keyboard('{Home}')\n      await user.keyboard('{End}')\n      \n      expect(otpInput).toHaveFocus()\n    })\n  })\n\n  describe('Touch and Mobile Support', () => {\n    it('handles touch events', async () => {\n      render(<SimpleOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      fireEvent.touchStart(otpInput)\n      fireEvent.touchEnd(otpInput)\n      \n      expect(otpInput).toHaveFocus()\n    })\n\n    it('prevents zoom on mobile focus', () => {\n      render(<SimpleOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Should have proper attributes to prevent zoom\n      expect(otpInput).toBeInTheDocument()\n    })\n\n    it('works with virtual keyboards', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '9876')\n      \n      expect(onChange).toHaveBeenLastCalledWith('9876')\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('meets WCAG accessibility guidelines', async () => {\n      const { container } = render(\n        <div>\n          <label htmlFor=\"rfid-otp\">Enter RFID Code</label>\n          <InputOTP maxLength={6} id=\"rfid-otp\">\n            <InputOTPGroup>\n              {Array.from({ length: 6 }, (_, i) => (\n                <InputOTPSlot key={i} index={i} />\n              ))}\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n      )\n      \n      const results = await axe(container)\n      expect(results).toHaveNoViolations()\n    })\n\n    it('provides proper ARIA attributes', () => {\n      render(\n        <InputOTP maxLength={4} aria-label=\"Enter verification code\">\n          <InputOTPGroup>\n            {Array.from({ length: 4 }, (_, i) => (\n              <InputOTPSlot key={i} index={i} />\n            ))}\n          </InputOTPGroup>\n        </InputOTP>\n      )\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toHaveAttribute('aria-label', 'Enter verification code')\n    })\n\n    it('supports screen reader announcements', () => {\n      render(<RFIDVerificationOTP />)\n      \n      const errorAlert = screen.queryByRole('alert')\n      // Should be ready to show error alerts\n      expect(errorAlert).not.toBeInTheDocument()\n    })\n\n    it('handles high contrast mode', () => {\n      // Mock high contrast media query\n      Object.defineProperty(window, 'matchMedia', {\n        writable: true,\n        value: jest.fn().mockImplementation(query => ({\n          matches: query === '(prefers-contrast: high)',\n          media: query,\n          onchange: null,\n          addListener: jest.fn(),\n          removeListener: jest.fn(),\n          addEventListener: jest.fn(),\n          removeEventListener: jest.fn(),\n          dispatchEvent: jest.fn(),\n        })),\n      })\n      \n      render(<SimpleOTP />)\n      \n      const slots = document.querySelectorAll('[class*=\"border\"]')\n      expect(slots.length).toBeGreaterThan(0)\n      // Should have proper border styling for high contrast\n    })\n\n    it('supports assistive technology navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <div>\n          <h2>RFID Verification</h2>\n          <InputOTP maxLength={6} aria-labelledby=\"rfid-heading\">\n            <InputOTPGroup>\n              {Array.from({ length: 6 }, (_, i) => (\n                <InputOTPSlot key={i} index={i} />\n              ))}\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n      )\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Should be navigable by screen readers\n      await user.click(otpInput)\n      expect(otpInput).toHaveFocus()\n    })\n  })\n\n  describe('Performance and Edge Cases', () => {\n    it('handles rapid input changes', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Rapid typing\n      await user.type(otpInput, '1234567890', { delay: 10 })\n      \n      // Should handle rapid input gracefully\n      expect(onChange).toHaveBeenCalled()\n    })\n\n    it('handles special characters gracefully', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '!@#$')\n      \n      // Should filter or handle special characters based on configuration\n      expect(onChange).toHaveBeenCalled()\n    })\n\n    it('handles large maxLength values', () => {\n      render(<SimpleOTP maxLength={20} />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      expect(otpInput).toHaveAttribute('maxLength', '20')\n    })\n\n    it('handles component unmounting during verification', async () => {\n      const user = userEvent.setup()\n      \n      const { unmount } = render(<RFIDVerificationOTP />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      await user.type(otpInput, '123456')\n      \n      // Unmount before verification completes\n      unmount()\n      \n      // Should not cause errors or memory leaks\n      expect(screen.queryByRole('textbox')).not.toBeInTheDocument()\n    })\n\n    it('maintains state consistency', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(<SimpleOTP onChange={onChange} value=\"12\" />)\n      \n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      // Type additional characters\n      await user.type(otpInput, '34')\n      \n      expect(onChange).toHaveBeenLastCalledWith('1234')\n    })\n\n    it('handles focus management during state changes', async () => {\n      const user = userEvent.setup()\n      \n      const TestComponent = () => {\n        const [disabled, setDisabled] = React.useState(false)\n        \n        return (\n          <div>\n            <button onClick={() => setDisabled(!disabled)}>\n              Toggle Disabled\n            </button>\n            <SimpleOTP disabled={disabled} />\n          </div>\n        )\n      }\n      \n      render(<TestComponent />)\n      \n      const toggleBtn = screen.getByText('Toggle Disabled')\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      await user.click(otpInput)\n      expect(otpInput).toHaveFocus()\n      \n      await user.click(toggleBtn)\n      expect(otpInput).toBeDisabled()\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/performance.test.tsx",["2389","2390","2391","2392","2393","2394"],[],"/**\n * Performance Tests for ShadCN UI Components\n * Tests component rendering performance, mobile optimization, and resource usage\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandSeparator,\n  CommandShortcut,\n} from '../command'\nimport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n} from '../drawer'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '../tooltip'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '../popover'\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n  InputOTPSeparator,\n} from '../input-otp'\n\n// Performance measurement utilities\nconst measureRenderTime = (renderFunction: () => void): number => {\n  const startTime = performance.now()\n  renderFunction()\n  const endTime = performance.now()\n  return endTime - startTime\n}\n\nconst measureMemoryUsage = (): PerformanceNavigatorMemory | null => {\n  if ('memory' in performance) {\n    return (performance as any).memory\n  }\n  return null\n}\n\nconst createLargeDataset = (size: number) => {\n  return Array.from({ length: size }, (_, index) => ({\n    id: `item-${index}`,\n    name: `Test Item ${index}`,\n    description: `Description for test item ${index}`,\n    category: `Category ${Math.floor(index / 10)}`,\n    price: Math.floor(Math.random() * 1000) + 50,\n    tags: [`tag-${index % 5}`, `tag-${(index + 1) % 5}`],\n  }))\n}\n\ndescribe('Performance Tests', () => {\n  beforeEach(() => {\n    // Mock performance.now for consistent testing\n    jest.spyOn(performance, 'now').mockImplementation(() => Date.now())\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  describe('Command Component Performance', () => {\n    it('renders large datasets efficiently', () => {\n      const largeDataset = createLargeDataset(1000)\n      \n      const renderTime = measureRenderTime(() => {\n        render(\n          <Command>\n            <CommandInput placeholder=\"Search meals...\" />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup heading=\"All Meals\">\n                {largeDataset.map((item) => (\n                  <CommandItem key={item.id} value={item.name}>\n                    <span>{item.name}</span>\n                    <CommandShortcut>⌘{item.id.slice(-1)}</CommandShortcut>\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        )\n      })\n\n      // Rendering should complete within 100ms for 1000 items\n      expect(renderTime).toBeLessThan(100)\n    })\n\n    it('handles rapid search input efficiently', async () => {\n      const user = userEvent.setup()\n      const largeDataset = createLargeDataset(500)\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Search meals...\" />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup heading=\"All Meals\">\n              {largeDataset.map((item) => (\n                <CommandItem key={item.id} value={item.name}>\n                  <span>{item.name}</span>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const searchInput = screen.getByPlaceholderText('Search meals...')\n      \n      const startTime = performance.now()\n      \n      // Rapid typing simulation\n      await user.type(searchInput, 'test item 123', { delay: 10 })\n      \n      const endTime = performance.now()\n      const typingTime = endTime - startTime\n\n      // Rapid typing should complete within 200ms\n      expect(typingTime).toBeLessThan(200)\n    })\n\n    it('filters large datasets without performance degradation', async () => {\n      const user = userEvent.setup()\n      const largeDataset = createLargeDataset(1000)\n      \n      render(\n        <Command>\n          <CommandInput placeholder=\"Search meals...\" />\n          <CommandList>\n            <CommandEmpty>No results found.</CommandEmpty>\n            <CommandGroup heading=\"All Meals\">\n              {largeDataset.map((item) => (\n                <CommandItem key={item.id} value={item.name}>\n                  <span>{item.name}</span>\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const searchInput = screen.getByPlaceholderText('Search meals...')\n      \n      const startTime = performance.now()\n      await user.type(searchInput, 'Item 5')\n      const endTime = performance.now()\n      \n      const filterTime = endTime - startTime\n      \n      // Filtering should complete within 150ms\n      expect(filterTime).toBeLessThan(150)\n    })\n  })\n\n  describe('Drawer Component Performance', () => {\n    it('opens and closes smoothly on mobile', async () => {\n      const user = userEvent.setup()\n      \n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n\n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Open Drawer</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Mobile Drawer</DrawerTitle>\n              <DrawerDescription>Performance test drawer</DrawerDescription>\n            </DrawerHeader>\n            <div className=\"p-4\">\n              {Array.from({ length: 50 }, (_, i) => (\n                <div key={i} className=\"mb-2\">Item {i}</div>\n              ))}\n            </div>\n            <DrawerFooter>\n              <DrawerClose asChild>\n                <button>Close</button>\n              </DrawerClose>\n            </DrawerFooter>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Open Drawer')\n      \n      const startTime = performance.now()\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Mobile Drawer')).toBeInTheDocument()\n      })\n      \n      const endTime = performance.now()\n      const openTime = endTime - startTime\n\n      // Drawer should open within 100ms\n      expect(openTime).toBeLessThan(100)\n    })\n\n    it('handles touch gestures efficiently', async () => {\n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Open Drawer</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <DrawerHeader>\n              <DrawerTitle>Touch Test Drawer</DrawerTitle>\n            </DrawerHeader>\n            <div className=\"p-4\">\n              Content that can be swiped\n            </div>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Open Drawer')\n      fireEvent.click(trigger)\n\n      await waitFor(() => {\n        const content = screen.getByText('Touch Test Drawer')\n        expect(content).toBeInTheDocument()\n        \n        const startTime = performance.now()\n        \n        // Simulate swipe gesture\n        fireEvent.touchStart(content, {\n          touches: [{ clientY: 200 }],\n        })\n        fireEvent.touchMove(content, {\n          touches: [{ clientY: 100 }],\n        })\n        fireEvent.touchEnd(content)\n        \n        const endTime = performance.now()\n        const gestureTime = endTime - startTime\n\n        // Touch gesture handling should be under 50ms\n        expect(gestureTime).toBeLessThan(50)\n      })\n    })\n  })\n\n  describe('Tooltip Component Performance', () => {\n    it('handles multiple tooltips efficiently', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <TooltipProvider>\n          <div>\n            {Array.from({ length: 20 }, (_, i) => (\n              <Tooltip key={i}>\n                <TooltipTrigger asChild>\n                  <button>Trigger {i}</button>\n                </TooltipTrigger>\n                <TooltipContent>\n                  <p>Tooltip content {i}</p>\n                </TooltipContent>\n              </Tooltip>\n            ))}\n          </div>\n        </TooltipProvider>\n      )\n\n      const triggers = screen.getAllByText(/Trigger/)\n      \n      const startTime = performance.now()\n      \n      // Hover over multiple tooltips rapidly\n      for (let i = 0; i < 5; i++) {\n        await user.hover(triggers[i])\n        await user.unhover(triggers[i])\n      }\n      \n      const endTime = performance.now()\n      const hoverTime = endTime - startTime\n\n      // Multiple tooltip interactions should complete within 200ms\n      expect(hoverTime).toBeLessThan(200)\n    })\n\n    it('renders complex tooltip content efficiently', async () => {\n      const user = userEvent.setup()\n      \n      const complexContent = (\n        <div>\n          <h3>Nutritional Information</h3>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {Array.from({ length: 10 }, (_, i) => (\n              <div key={i}>Nutrient {i}: {Math.random() * 100}g</div>\n            ))}\n          </div>\n        </div>\n      )\n\n      render(\n        <TooltipProvider>\n          <Tooltip>\n            <TooltipTrigger asChild>\n              <button>Show Nutrition</button>\n            </TooltipTrigger>\n            <TooltipContent>\n              {complexContent}\n            </TooltipContent>\n          </Tooltip>\n        </TooltipProvider>\n      )\n\n      const trigger = screen.getByText('Show Nutrition')\n      \n      const startTime = performance.now()\n      await user.hover(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Nutritional Information')).toBeInTheDocument()\n      })\n      \n      const endTime = performance.now()\n      const tooltipTime = endTime - startTime\n\n      // Complex tooltip should render within 100ms\n      expect(tooltipTime).toBeLessThan(100)\n    })\n  })\n\n  describe('Popover Component Performance', () => {\n    it('renders popover with large content efficiently', async () => {\n      const user = userEvent.setup()\n      \n      const largeContent = Array.from({ length: 100 }, (_, i) => (\n        <div key={i} className=\"p-2 border-b\">\n          Menu Item {i}\n        </div>\n      ))\n\n      render(\n        <Popover>\n          <PopoverTrigger asChild>\n            <button>Open Menu</button>\n          </PopoverTrigger>\n          <PopoverContent>\n            <div className=\"max-h-80 overflow-y-auto\">\n              {largeContent}\n            </div>\n          </PopoverContent>\n        </Popover>\n      )\n\n      const trigger = screen.getByText('Open Menu')\n      \n      const startTime = performance.now()\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Menu Item 0')).toBeInTheDocument()\n      })\n      \n      const endTime = performance.now()\n      const popoverTime = endTime - startTime\n\n      // Large popover content should render within 150ms\n      expect(popoverTime).toBeLessThan(150)\n    })\n\n    it('handles rapid open/close operations efficiently', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger asChild>\n            <button>Toggle Popover</button>\n          </PopoverTrigger>\n          <PopoverContent>\n            <div>Popover content</div>\n          </PopoverContent>\n        </Popover>\n      )\n\n      const trigger = screen.getByText('Toggle Popover')\n      \n      const startTime = performance.now()\n      \n      // Rapid toggle operations\n      for (let i = 0; i < 5; i++) {\n        await user.click(trigger) // Open\n        await user.click(trigger) // Close\n      }\n      \n      const endTime = performance.now()\n      const toggleTime = endTime - startTime\n\n      // Rapid toggle operations should complete within 300ms\n      expect(toggleTime).toBeLessThan(300)\n    })\n  })\n\n  describe('InputOTP Component Performance', () => {\n    it('handles rapid input efficiently', async () => {\n      const user = userEvent.setup()\n      const onChange = jest.fn()\n      \n      render(\n        <InputOTP maxLength={6} onChange={onChange}>\n          <InputOTPGroup>\n            {Array.from({ length: 6 }, (_, i) => (\n              <InputOTPSlot key={i} index={i} />\n            ))}\n          </InputOTPGroup>\n        </InputOTP>\n      )\n\n      const otpInput = screen.getByRole('textbox', { hidden: true })\n      \n      const startTime = performance.now()\n      await user.type(otpInput, '123456', { delay: 10 })\n      const endTime = performance.now()\n      \n      const inputTime = endTime - startTime\n\n      // Rapid OTP input should complete within 100ms\n      expect(inputTime).toBeLessThan(100)\n      expect(onChange).toHaveBeenCalledWith('123456')\n    })\n\n    it('renders multiple OTP inputs efficiently', () => {\n      const renderTime = measureRenderTime(() => {\n        render(\n          <div>\n            {Array.from({ length: 10 }, (_, i) => (\n              <InputOTP key={i} maxLength={4}>\n                <InputOTPGroup>\n                  {Array.from({ length: 4 }, (_, j) => (\n                    <InputOTPSlot key={j} index={j} />\n                  ))}\n                </InputOTPGroup>\n              </InputOTP>\n            ))}\n          </div>\n        )\n      })\n\n      // Multiple OTP inputs should render within 50ms\n      expect(renderTime).toBeLessThan(50)\n    })\n  })\n\n  describe('Mobile Optimization Tests', () => {\n    beforeEach(() => {\n      // Mock mobile environment\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 375,\n      })\n      Object.defineProperty(window, 'innerHeight', {\n        writable: true,\n        configurable: true,\n        value: 667,\n      })\n    })\n\n    it('optimizes component rendering for mobile viewports', () => {\n      const startTime = performance.now()\n      \n      render(\n        <div className=\"mobile-optimized\">\n          <Command>\n            <CommandInput placeholder=\"Search...\" />\n            <CommandList>\n              <CommandGroup>\n                {Array.from({ length: 50 }, (_, i) => (\n                  <CommandItem key={i} value={`item-${i}`}>\n                    Mobile Item {i}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n          \n          <Drawer>\n            <DrawerTrigger>Open</DrawerTrigger>\n            <DrawerContent>\n              <div>Mobile drawer content</div>\n            </DrawerContent>\n          </Drawer>\n          \n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger>Touch me</TooltipTrigger>\n              <TooltipContent>Mobile tooltip</TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n        </div>\n      )\n      \n      const endTime = performance.now()\n      const mobileRenderTime = endTime - startTime\n\n      // Mobile-optimized rendering should complete within 100ms\n      expect(mobileRenderTime).toBeLessThan(100)\n    })\n\n    it('handles touch events with minimal latency', async () => {\n      render(\n        <Drawer>\n          <DrawerTrigger asChild>\n            <button>Touch Target</button>\n          </DrawerTrigger>\n          <DrawerContent>\n            <div>Touch responsive content</div>\n          </DrawerContent>\n        </Drawer>\n      )\n\n      const trigger = screen.getByText('Touch Target')\n      \n      const startTime = performance.now()\n      \n      fireEvent.touchStart(trigger)\n      fireEvent.touchEnd(trigger)\n      \n      const endTime = performance.now()\n      const touchLatency = endTime - startTime\n\n      // Touch event handling should have minimal latency (under 16ms for 60fps)\n      expect(touchLatency).toBeLessThan(16)\n    })\n\n    it('maintains performance with virtual keyboard interactions', async () => {\n      const user = userEvent.setup()\n      \n      // Mock virtual keyboard scenarios\n      Object.defineProperty(window, 'visualViewport', {\n        writable: true,\n        configurable: true,\n        value: {\n          height: 400, // Reduced height when keyboard is open\n          width: 375,\n          addEventListener: jest.fn(),\n          removeEventListener: jest.fn(),\n        },\n      })\n\n      render(\n        <Command>\n          <CommandInput placeholder=\"Search with virtual keyboard...\" />\n          <CommandList>\n            <CommandGroup>\n              {Array.from({ length: 20 }, (_, i) => (\n                <CommandItem key={i} value={`mobile-item-${i}`}>\n                  Mobile Search Result {i}\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      )\n\n      const input = screen.getByPlaceholderText('Search with virtual keyboard...')\n      \n      const startTime = performance.now()\n      await user.type(input, 'search query')\n      const endTime = performance.now()\n      \n      const keyboardInputTime = endTime - startTime\n\n      // Virtual keyboard input should remain performant\n      expect(keyboardInputTime).toBeLessThan(150)\n    })\n  })\n\n  describe('Memory Usage Tests', () => {\n    it('does not leak memory when components are unmounted', () => {\n      const initialMemory = measureMemoryUsage()\n      \n      const { unmount } = render(\n        <div>\n          <Command>\n            <CommandInput />\n            <CommandList>\n              {Array.from({ length: 100 }, (_, i) => (\n                <CommandItem key={i} value={`item-${i}`}>\n                  Item {i}\n                </CommandItem>\n              ))}\n            </CommandList>\n          </Command>\n          \n          <TooltipProvider>\n            {Array.from({ length: 20 }, (_, i) => (\n              <Tooltip key={i}>\n                <TooltipTrigger>Trigger {i}</TooltipTrigger>\n                <TooltipContent>Content {i}</TooltipContent>\n              </Tooltip>\n            ))}\n          </TooltipProvider>\n        </div>\n      )\n\n      unmount()\n\n      const finalMemory = measureMemoryUsage()\n      \n      if (initialMemory && finalMemory) {\n        const memoryIncrease = finalMemory.usedJSHeapSize - initialMemory.usedJSHeapSize\n        \n        // Memory increase should be minimal after unmount (less than 1MB)\n        expect(memoryIncrease).toBeLessThan(1024 * 1024)\n      }\n    })\n\n    it('efficiently handles component state updates', async () => {\n      const user = userEvent.setup()\n      \n      const TestComponent = () => {\n        const [count, setCount] = React.useState(0)\n        \n        return (\n          <div>\n            <button onClick={() => setCount(c => c + 1)}>\n              Count: {count}\n            </button>\n            <Command>\n              <CommandInput />\n              <CommandList>\n                {Array.from({ length: count }, (_, i) => (\n                  <CommandItem key={i} value={`dynamic-item-${i}`}>\n                    Dynamic Item {i}\n                  </CommandItem>\n                ))}\n              </CommandList>\n            </Command>\n          </div>\n        )\n      }\n\n      render(<TestComponent />)\n\n      const button = screen.getByText('Count: 0')\n      \n      const startTime = performance.now()\n      \n      // Trigger multiple state updates\n      for (let i = 0; i < 10; i++) {\n        await user.click(button)\n      }\n      \n      const endTime = performance.now()\n      const updateTime = endTime - startTime\n\n      // State updates should be efficient (under 200ms for 10 updates)\n      expect(updateTime).toBeLessThan(200)\n    })\n  })\n\n  describe('Bundle Size and Resource Loading', () => {\n    it('loads components without blocking main thread', () => {\n      const startTime = performance.now()\n      \n      // Simulate loading all components\n      render(\n        <div>\n          <Command>\n            <CommandInput />\n            <CommandList>\n              <CommandItem value=\"test\">Test</CommandItem>\n            </CommandList>\n          </Command>\n          \n          <Drawer>\n            <DrawerTrigger>Open</DrawerTrigger>\n            <DrawerContent>Content</DrawerContent>\n          </Drawer>\n          \n          <TooltipProvider>\n            <Tooltip>\n              <TooltipTrigger>Trigger</TooltipTrigger>\n              <TooltipContent>Content</TooltipContent>\n            </Tooltip>\n          </TooltipProvider>\n          \n          <Popover>\n            <PopoverTrigger>Trigger</PopoverTrigger>\n            <PopoverContent>Content</PopoverContent>\n          </Popover>\n          \n          <InputOTP maxLength={4}>\n            <InputOTPGroup>\n              <InputOTPSlot index={0} />\n            </InputOTPGroup>\n          </InputOTP>\n        </div>\n      )\n      \n      const endTime = performance.now()\n      const loadTime = endTime - startTime\n\n      // All components should load without blocking (under 50ms)\n      expect(loadTime).toBeLessThan(50)\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/popover.test.tsx",["2395"],[],"/**\n * Comprehensive Unit Tests for Popover Component (ShadCN UI)\n * Tests popover functionality, quick actions, meal customization, and accessibility\n */\n\nimport React from 'react'\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport {\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n} from '../popover'\n\nexpect.extend(toHaveNoViolations)\n\ndescribe('Popover Component Suite', () => {\n  // Mock meal data for testing\n  const mockMeal = {\n    id: '1',\n    name: 'Paneer Butter Masala',\n    description: 'Rich and creamy paneer curry',\n    price: 160,\n    category: 'Main Course',\n    spiceLevel: 'Medium',\n    servingSize: '250g',\n    allergens: ['Dairy', 'Nuts'],\n    customizations: {\n      spiceLevel: ['Mild', 'Medium', 'Hot', 'Extra Hot'],\n      portion: ['Half', 'Full', 'Double'],\n      extras: ['Extra Paneer', 'Extra Gravy', 'Butter Naan', 'Rice'],\n    },\n  }\n\n  const MealCustomizationPopover = ({ \n    meal = mockMeal,\n    onCustomize = jest.fn()\n  }: {\n    meal?: typeof mockMeal\n    onCustomize?: (customization: any) => void\n  }) => {\n    const [customization, setCustomization] = React.useState({\n      spiceLevel: meal.spiceLevel,\n      portion: 'Full',\n      extras: [] as string[],\n    })\n\n    const handleSubmit = () => {\n      onCustomize(customization)\n    }\n\n    return (\n      <Popover>\n        <PopoverTrigger asChild>\n          <button className=\"customize-btn\">\n            Customize {meal.name}\n          </button>\n        </PopoverTrigger>\n        <PopoverContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-medium\">Customize Your Order</h3>\n              <p className=\"text-sm text-muted-foreground\">{meal.name}</p>\n            </div>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"text-sm font-medium\">Spice Level</label>\n                <select \n                  value={customization.spiceLevel}\n                  onChange={(e) => setCustomization(prev => ({ \n                    ...prev, \n                    spiceLevel: e.target.value \n                  }))}\n                  className=\"w-full mt-1 p-2 border rounded\"\n                >\n                  {meal.customizations.spiceLevel.map(level => (\n                    <option key={level} value={level}>{level}</option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium\">Portion Size</label>\n                <select \n                  value={customization.portion}\n                  onChange={(e) => setCustomization(prev => ({ \n                    ...prev, \n                    portion: e.target.value \n                  }))}\n                  className=\"w-full mt-1 p-2 border rounded\"\n                >\n                  {meal.customizations.portion.map(size => (\n                    <option key={size} value={size}>{size}</option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"text-sm font-medium\">Add Extras</label>\n                <div className=\"mt-1 space-y-1\">\n                  {meal.customizations.extras.map(extra => (\n                    <label key={extra} className=\"flex items-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={customization.extras.includes(extra)}\n                        onChange={(e) => {\n                          setCustomization(prev => ({\n                            ...prev,\n                            extras: e.target.checked\n                              ? [...prev.extras, extra]\n                              : prev.extras.filter(item => item !== extra)\n                          }))\n                        }}\n                        className=\"mr-2\"\n                      />\n                      <span className=\"text-sm\">{extra}</span>\n                    </label>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <button \n                onClick={handleSubmit}\n                className=\"flex-1 bg-primary text-primary-foreground p-2 rounded\"\n              >\n                Add to Cart\n              </button>\n              <PopoverTrigger asChild>\n                <button className=\"px-4 py-2 border rounded\">\n                  Cancel\n                </button>\n              </PopoverTrigger>\n            </div>\n          </div>\n        </PopoverContent>\n      </Popover>\n    )\n  }\n\n  const QuickActionsPopover = ({ \n    onAction = jest.fn()\n  }: {\n    onAction?: (action: string) => void\n  }) => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <button className=\"quick-actions-btn\">⚡ Quick Actions</button>\n      </PopoverTrigger>\n      <PopoverContent>\n        <div className=\"space-y-2\">\n          <div className=\"font-medium\">Quick Actions</div>\n          <div className=\"grid gap-2\">\n            <button \n              onClick={() => onAction('reorder')}\n              className=\"text-left p-2 hover:bg-accent rounded\"\n            >\n              🔄 Reorder Last Meal\n            </button>\n            <button \n              onClick={() => onAction('favorites')}\n              className=\"text-left p-2 hover:bg-accent rounded\"\n            >\n              ⭐ View Favorites\n            </button>\n            <button \n              onClick={() => onAction('schedule')}\n              className=\"text-left p-2 hover:bg-accent rounded\"\n            >\n              📅 Schedule Order\n            </button>\n            <button \n              onClick={() => onAction('dietary')}\n              className=\"text-left p-2 hover:bg-accent rounded\"\n            >\n              🥗 Dietary Preferences\n            </button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n\n  const SimplePopover = ({ \n    content = \"Popover content\",\n    triggerText = \"Open Popover\"\n  }: {\n    content?: string\n    triggerText?: string\n  }) => (\n    <Popover>\n      <PopoverTrigger asChild>\n        <button>{triggerText}</button>\n      </PopoverTrigger>\n      <PopoverContent>\n        {content}\n      </PopoverContent>\n    </Popover>\n  )\n\n  describe('Popover Root Component', () => {\n    it('renders without crashing', () => {\n      render(\n        <Popover>\n          <PopoverTrigger>Open</PopoverTrigger>\n          <PopoverContent>Content</PopoverContent>\n        </Popover>\n      )\n      \n      expect(screen.getByText('Open')).toBeInTheDocument()\n    })\n\n    it('supports open state control', () => {\n      render(\n        <Popover open>\n          <PopoverTrigger>Controlled Trigger</PopoverTrigger>\n          <PopoverContent>Controlled Content</PopoverContent>\n        </Popover>\n      )\n      \n      expect(screen.getByText('Controlled Content')).toBeInTheDocument()\n    })\n\n    it('supports defaultOpen prop', () => {\n      render(\n        <Popover defaultOpen>\n          <PopoverTrigger>Default Open</PopoverTrigger>\n          <PopoverContent>Default Content</PopoverContent>\n        </Popover>\n      )\n      \n      expect(screen.getByText('Default Content')).toBeInTheDocument()\n    })\n\n    it('handles onOpenChange callback', async () => {\n      const user = userEvent.setup()\n      const onOpenChange = jest.fn()\n      \n      render(\n        <Popover onOpenChange={onOpenChange}>\n          <PopoverTrigger>Callback Trigger</PopoverTrigger>\n          <PopoverContent>Callback Content</PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Callback Trigger')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(onOpenChange).toHaveBeenCalledWith(true)\n      })\n    })\n  })\n\n  describe('PopoverTrigger Component', () => {\n    it('renders trigger element', () => {\n      render(\n        <Popover>\n          <PopoverTrigger>Click to open</PopoverTrigger>\n          <PopoverContent>Popover content</PopoverContent>\n        </Popover>\n      )\n      \n      expect(screen.getByText('Click to open')).toBeInTheDocument()\n    })\n\n    it('supports asChild prop with custom elements', () => {\n      render(\n        <Popover>\n          <PopoverTrigger asChild>\n            <button type=\"button\" className=\"custom-trigger\">\n              Custom Trigger\n            </button>\n          </PopoverTrigger>\n          <PopoverContent>Custom content</PopoverContent>\n        </Popover>\n      )\n      \n      const customTrigger = screen.getByRole('button', { name: 'Custom Trigger' })\n      expect(customTrigger).toBeInTheDocument()\n      expect(customTrigger).toHaveClass('custom-trigger')\n    })\n\n    it('opens popover when clicked', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Click test content\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Click test content')).toBeInTheDocument()\n      })\n    })\n\n    it('toggles popover on multiple clicks', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Toggle test content\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      \n      // Open\n      await user.click(trigger)\n      await waitFor(() => {\n        expect(screen.getByText('Toggle test content')).toBeInTheDocument()\n      })\n      \n      // Close\n      await user.click(trigger)\n      await waitFor(() => {\n        expect(screen.queryByText('Toggle test content')).not.toBeInTheDocument()\n      })\n    })\n\n    it('handles keyboard activation', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Keyboard activation\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      await user.keyboard('{Enter}')\n      \n      await waitFor(() => {\n        expect(screen.getByText('Keyboard activation')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('PopoverContent Component', () => {\n    it('renders content with proper styling', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger>Trigger</PopoverTrigger>\n          <PopoverContent data-testid=\"popover-content\">\n            Styled content\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Trigger')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByTestId('popover-content')\n        expect(content).toHaveClass(\n          'z-50',\n          'w-72',\n          'rounded-md',\n          'border',\n          'bg-popover',\n          'p-4',\n          'shadow-md'\n        )\n      })\n    })\n\n    it('supports custom className', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger>Trigger</PopoverTrigger>\n          <PopoverContent className=\"custom-popover\">\n            Custom styled content\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Trigger')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByText('Custom styled content')\n        expect(content).toHaveClass('custom-popover')\n      })\n    })\n\n    it('supports custom align prop', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger>Trigger</PopoverTrigger>\n          <PopoverContent align=\"start\">\n            Start aligned content\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Trigger')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Start aligned content')).toBeInTheDocument()\n      })\n    })\n\n    it('supports custom sideOffset', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger>Trigger</PopoverTrigger>\n          <PopoverContent sideOffset={10}>\n            Offset content\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Trigger')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Offset content')).toBeInTheDocument()\n      })\n    })\n\n    it('closes when clicking outside', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <>\n          <SimplePopover content=\"Click outside test\" />\n          <div data-testid=\"outside-area\">Outside area</div>\n        </>\n      )\n      \n      const trigger = screen.getByText('Open Popover')\n      const outsideArea = screen.getByTestId('outside-area')\n      \n      await user.click(trigger)\n      await waitFor(() => {\n        expect(screen.getByText('Click outside test')).toBeInTheDocument()\n      })\n      \n      await user.click(outsideArea)\n      await waitFor(() => {\n        expect(screen.queryByText('Click outside test')).not.toBeInTheDocument()\n      })\n    })\n\n    it('closes on escape key', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Escape to close\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Escape to close')).toBeInTheDocument()\n      })\n      \n      await user.keyboard('{Escape}')\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Escape to close')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Meal Customization Popover', () => {\n    it('displays meal customization options', async () => {\n      const user = userEvent.setup()\n      \n      render(<MealCustomizationPopover />)\n      \n      const trigger = screen.getByText(`Customize ${mockMeal.name}`)\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Customize Your Order')).toBeInTheDocument()\n        expect(screen.getByText(mockMeal.name)).toBeInTheDocument()\n        expect(screen.getByText('Spice Level')).toBeInTheDocument()\n        expect(screen.getByText('Portion Size')).toBeInTheDocument()\n        expect(screen.getByText('Add Extras')).toBeInTheDocument()\n      })\n    })\n\n    it('handles spice level selection', async () => {\n      const user = userEvent.setup()\n      const onCustomize = jest.fn()\n      \n      render(<MealCustomizationPopover onCustomize={onCustomize} />)\n      \n      const trigger = screen.getByText(`Customize ${mockMeal.name}`)\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const spiceLevelSelect = screen.getByDisplayValue('Medium')\n        expect(spiceLevelSelect).toBeInTheDocument()\n      })\n      \n      const spiceLevelSelect = screen.getByDisplayValue('Medium')\n      await user.selectOptions(spiceLevelSelect, 'Hot')\n      \n      const addToCartBtn = screen.getByText('Add to Cart')\n      await user.click(addToCartBtn)\n      \n      expect(onCustomize).toHaveBeenCalledWith({\n        spiceLevel: 'Hot',\n        portion: 'Full',\n        extras: []\n      })\n    })\n\n    it('handles portion size selection', async () => {\n      const user = userEvent.setup()\n      const onCustomize = jest.fn()\n      \n      render(<MealCustomizationPopover onCustomize={onCustomize} />)\n      \n      const trigger = screen.getByText(`Customize ${mockMeal.name}`)\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const portionSelect = screen.getByDisplayValue('Full')\n        expect(portionSelect).toBeInTheDocument()\n      })\n      \n      const portionSelect = screen.getByDisplayValue('Full')\n      await user.selectOptions(portionSelect, 'Double')\n      \n      const addToCartBtn = screen.getByText('Add to Cart')\n      await user.click(addToCartBtn)\n      \n      expect(onCustomize).toHaveBeenCalledWith({\n        spiceLevel: 'Medium',\n        portion: 'Double',\n        extras: []\n      })\n    })\n\n    it('handles extras selection', async () => {\n      const user = userEvent.setup()\n      const onCustomize = jest.fn()\n      \n      render(<MealCustomizationPopover onCustomize={onCustomize} />)\n      \n      const trigger = screen.getByText(`Customize ${mockMeal.name}`)\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Extra Paneer')).toBeInTheDocument()\n        expect(screen.getByText('Butter Naan')).toBeInTheDocument()\n      })\n      \n      const extraPaneerCheckbox = screen.getByLabelText('Extra Paneer')\n      const butterNaanCheckbox = screen.getByLabelText('Butter Naan')\n      \n      await user.click(extraPaneerCheckbox)\n      await user.click(butterNaanCheckbox)\n      \n      const addToCartBtn = screen.getByText('Add to Cart')\n      await user.click(addToCartBtn)\n      \n      expect(onCustomize).toHaveBeenCalledWith({\n        spiceLevel: 'Medium',\n        portion: 'Full',\n        extras: ['Extra Paneer', 'Butter Naan']\n      })\n    })\n\n    it('handles cancel action', async () => {\n      const user = userEvent.setup()\n      \n      render(<MealCustomizationPopover />)\n      \n      const trigger = screen.getByText(`Customize ${mockMeal.name}`)\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Customize Your Order')).toBeInTheDocument()\n      })\n      \n      const cancelBtn = screen.getByText('Cancel')\n      await user.click(cancelBtn)\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Customize Your Order')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Quick Actions Popover', () => {\n    it('displays quick action options', async () => {\n      const user = userEvent.setup()\n      \n      render(<QuickActionsPopover />)\n      \n      const trigger = screen.getByText('⚡ Quick Actions')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Quick Actions')).toBeInTheDocument()\n        expect(screen.getByText('🔄 Reorder Last Meal')).toBeInTheDocument()\n        expect(screen.getByText('⭐ View Favorites')).toBeInTheDocument()\n        expect(screen.getByText('📅 Schedule Order')).toBeInTheDocument()\n        expect(screen.getByText('🥗 Dietary Preferences')).toBeInTheDocument()\n      })\n    })\n\n    it('handles reorder action', async () => {\n      const user = userEvent.setup()\n      const onAction = jest.fn()\n      \n      render(<QuickActionsPopover onAction={onAction} />)\n      \n      const trigger = screen.getByText('⚡ Quick Actions')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const reorderBtn = screen.getByText('🔄 Reorder Last Meal')\n        expect(reorderBtn).toBeInTheDocument()\n      })\n      \n      const reorderBtn = screen.getByText('🔄 Reorder Last Meal')\n      await user.click(reorderBtn)\n      \n      expect(onAction).toHaveBeenCalledWith('reorder')\n    })\n\n    it('handles favorites action', async () => {\n      const user = userEvent.setup()\n      const onAction = jest.fn()\n      \n      render(<QuickActionsPopover onAction={onAction} />)\n      \n      const trigger = screen.getByText('⚡ Quick Actions')\n      await user.click(trigger)\n      \n      const favoritesBtn = screen.getByText('⭐ View Favorites')\n      await user.click(favoritesBtn)\n      \n      expect(onAction).toHaveBeenCalledWith('favorites')\n    })\n\n    it('handles schedule action', async () => {\n      const user = userEvent.setup()\n      const onAction = jest.fn()\n      \n      render(<QuickActionsPopover onAction={onAction} />)\n      \n      const trigger = screen.getByText('⚡ Quick Actions')\n      await user.click(trigger)\n      \n      const scheduleBtn = screen.getByText('📅 Schedule Order')\n      await user.click(scheduleBtn)\n      \n      expect(onAction).toHaveBeenCalledWith('schedule')\n    })\n\n    it('handles dietary preferences action', async () => {\n      const user = userEvent.setup()\n      const onAction = jest.fn()\n      \n      render(<QuickActionsPopover onAction={onAction} />)\n      \n      const trigger = screen.getByText('⚡ Quick Actions')\n      await user.click(trigger)\n      \n      const dietaryBtn = screen.getByText('🥗 Dietary Preferences')\n      await user.click(dietaryBtn)\n      \n      expect(onAction).toHaveBeenCalledWith('dietary')\n    })\n  })\n\n  describe('Touch and Mobile Support', () => {\n    it('handles touch events on mobile', async () => {\n      render(<SimplePopover content=\"Touch popover\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      \n      // Simulate touch events\n      fireEvent.touchStart(trigger)\n      fireEvent.touchEnd(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Touch popover')).toBeInTheDocument()\n      })\n    })\n\n    it('closes on touch outside on mobile', async () => {\n      render(\n        <>\n          <SimplePopover content=\"Touch outside test\" />\n          <div data-testid=\"outside-touch-area\">Outside</div>\n        </>\n      )\n      \n      const trigger = screen.getByText('Open Popover')\n      const outsideArea = screen.getByTestId('outside-touch-area')\n      \n      // Open popover\n      fireEvent.touchStart(trigger)\n      fireEvent.touchEnd(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Touch outside test')).toBeInTheDocument()\n      })\n      \n      // Touch outside\n      fireEvent.touchStart(outsideArea)\n      fireEvent.touchEnd(outsideArea)\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Touch outside test')).not.toBeInTheDocument()\n      })\n    })\n\n    it('handles swipe gestures', async () => {\n      render(<SimplePopover content=\"Swipe test\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      \n      // Open popover\n      fireEvent.touchStart(trigger)\n      fireEvent.touchEnd(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByText('Swipe test')\n        expect(content).toBeInTheDocument()\n        \n        // Simulate swipe up to close\n        fireEvent.touchStart(content, {\n          touches: [{ clientY: 200 }],\n        })\n        fireEvent.touchMove(content, {\n          touches: [{ clientY: 100 }],\n        })\n        fireEvent.touchEnd(content)\n      })\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('meets WCAG accessibility guidelines', async () => {\n      const user = userEvent.setup()\n      \n      const { container } = render(\n        <Popover>\n          <PopoverTrigger aria-label=\"Open meal customization options\">\n            Customize Meal\n          </PopoverTrigger>\n          <PopoverContent>\n            <div role=\"dialog\" aria-labelledby=\"popover-title\">\n              <h3 id=\"popover-title\">Meal Customization</h3>\n              <p>Select your preferences</p>\n            </div>\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByLabelText('Open meal customization options')\n      await user.click(trigger)\n      \n      await waitFor(async () => {\n        const results = await axe(container)\n        expect(results).toHaveNoViolations()\n      })\n    })\n\n    it('provides proper ARIA attributes', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger aria-describedby=\"popover-help\">\n            Accessible trigger\n          </PopoverTrigger>\n          <PopoverContent>\n            <div id=\"popover-help\">This popover provides additional options</div>\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Accessible trigger')\n      expect(trigger).toHaveAttribute('aria-describedby', 'popover-help')\n      \n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByText('This popover provides additional options')\n        expect(content).toBeInTheDocument()\n      })\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger>Keyboard Navigation</PopoverTrigger>\n          <PopoverContent>\n            <div>\n              <button>First Button</button>\n              <button>Second Button</button>\n              <button>Third Button</button>\n            </div>\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByText('Keyboard Navigation')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('First Button')).toBeInTheDocument()\n      })\n      \n      // Tab through elements\n      await user.keyboard('{Tab}')\n      expect(screen.getByText('First Button')).toHaveFocus()\n      \n      await user.keyboard('{Tab}')\n      expect(screen.getByText('Second Button')).toHaveFocus()\n      \n      await user.keyboard('{Tab}')\n      expect(screen.getByText('Third Button')).toHaveFocus()\n    })\n\n    it('maintains focus management', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Focus management test\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Focus management test')).toBeInTheDocument()\n      })\n      \n      await user.keyboard('{Escape}')\n      \n      await waitFor(() => {\n        expect(screen.queryByText('Focus management test')).not.toBeInTheDocument()\n        expect(trigger).toHaveFocus()\n      })\n    })\n\n    it('supports screen reader announcements', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <Popover>\n          <PopoverTrigger aria-label=\"Meal options menu\">\n            Options\n          </PopoverTrigger>\n          <PopoverContent>\n            <div role=\"menu\" aria-label=\"Meal customization options\">\n              <div role=\"menuitem\">Customize spice level</div>\n              <div role=\"menuitem\">Adjust portion size</div>\n              <div role=\"menuitem\">Add extras</div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      )\n      \n      const trigger = screen.getByLabelText('Meal options menu')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const menu = screen.getByLabelText('Meal customization options')\n        expect(menu).toBeInTheDocument()\n        expect(menu).toHaveAttribute('role', 'menu')\n      })\n    })\n  })\n\n  describe('Performance and Edge Cases', () => {\n    it('handles multiple popovers simultaneously', async () => {\n      const user = userEvent.setup()\n      \n      render(\n        <div>\n          <Popover>\n            <PopoverTrigger>First Popover</PopoverTrigger>\n            <PopoverContent>First Content</PopoverContent>\n          </Popover>\n          <Popover>\n            <PopoverTrigger>Second Popover</PopoverTrigger>\n            <PopoverContent>Second Content</PopoverContent>\n          </Popover>\n        </div>\n      )\n      \n      const firstTrigger = screen.getByText('First Popover')\n      const secondTrigger = screen.getByText('Second Popover')\n      \n      await user.click(firstTrigger)\n      await waitFor(() => {\n        expect(screen.getByText('First Content')).toBeInTheDocument()\n      })\n      \n      await user.click(secondTrigger)\n      await waitFor(() => {\n        expect(screen.getByText('Second Content')).toBeInTheDocument()\n        // First popover should be closed\n        expect(screen.queryByText('First Content')).not.toBeInTheDocument()\n      })\n    })\n\n    it('handles rapid open/close operations', async () => {\n      const user = userEvent.setup()\n      \n      render(<SimplePopover content=\"Rapid toggle test\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      \n      // Rapid clicks\n      for (let i = 0; i < 5; i++) {\n        await user.click(trigger)\n      }\n      \n      // Should handle rapid operations gracefully\n      expect(trigger).toBeInTheDocument()\n    })\n\n    it('handles content overflow', async () => {\n      const user = userEvent.setup()\n      \n      const longContent = Array.from({ length: 50 }, (_, i) => \n        `This is line ${i + 1} of very long content that might overflow the popover.`\n      ).join(' ')\n      \n      render(<SimplePopover content={longContent} />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByText(/This is line 1 of very long content/)\n        expect(content).toBeInTheDocument()\n        // Should handle overflow appropriately\n        expect(content.closest('[data-radix-popover-content]')).toHaveClass('w-72')\n      })\n    })\n\n    it('handles positioning edge cases', async () => {\n      const user = userEvent.setup()\n      \n      // Mock viewport dimensions\n      Object.defineProperty(window, 'innerWidth', {\n        writable: true,\n        configurable: true,\n        value: 320, // Small mobile screen\n      })\n      \n      render(<SimplePopover content=\"Positioning test on small screen\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        const content = screen.getByText('Positioning test on small screen')\n        expect(content).toBeInTheDocument()\n        // Should handle small screen positioning\n      })\n    })\n\n    it('prevents memory leaks on unmount', async () => {\n      const user = userEvent.setup()\n      \n      const { unmount } = render(<SimplePopover content=\"Unmount test\" />)\n      \n      const trigger = screen.getByText('Open Popover')\n      await user.click(trigger)\n      \n      await waitFor(() => {\n        expect(screen.getByText('Unmount test')).toBeInTheDocument()\n      })\n      \n      // Unmount component\n      unmount()\n      \n      // Should not cause memory leaks or errors\n      expect(screen.queryByText('Open Popover')).not.toBeInTheDocument()\n    })\n  })\n})","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/simple.test.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/__tests__/tooltip.test.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/accordion.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/advanced-command.tsx",["2396","2397","2398"],[],"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search, Mic, X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\nimport { Button } from \"@/components/ui/button\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-white text-slate-950 dark:bg-slate-950 dark:text-slate-50\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {\n  onVoiceSearch?: () => void\n  showVoiceSearch?: boolean\n}\n\nconst CommandDialog = ({ \n  children, \n  onVoiceSearch,\n  showVoiceSearch = false,\n  ...props \n}: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-slate-500 [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input> & {\n    onVoiceSearch?: () => void\n    showVoiceSearch?: boolean\n  }\n>(({ className, onVoiceSearch, showVoiceSearch = false, ...props }, ref) => (\n  <div \n    className=\"flex items-center border-b border-slate-200 px-3 dark:border-slate-800\" \n    cmdk-input-wrapper=\"\"\n  >\n    <Search className=\"mr-2 h-4 w-4 shrink-0 text-slate-500 dark:text-slate-400\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-slate-500 disabled:cursor-not-allowed disabled:opacity-50 dark:placeholder:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n    {showVoiceSearch && onVoiceSearch && (\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"h-8 w-8 p-0 text-slate-500 hover:text-slate-900 dark:text-slate-400 dark:hover:text-slate-50\"\n        onClick={onVoiceSearch}\n        type=\"button\"\n      >\n        <Mic className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Voice search</span>\n      </Button>\n    )}\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\n      \"max-h-[300px] overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-thumb-slate-200 scrollbar-track-transparent dark:scrollbar-thumb-slate-800\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className={cn(\n      \"py-6 text-center text-sm text-slate-500 dark:text-slate-400\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-slate-950 [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-slate-500 [&_[cmdk-group-heading]]:uppercase [&_[cmdk-group-heading]]:tracking-wider dark:text-slate-50 dark:[&_[cmdk-group-heading]]:text-slate-400\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1 h-px bg-slate-200 dark:bg-slate-800\",\n      className\n    )}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item> & {\n    shortcut?: string\n    nutritionBadge?: 'vegan' | 'vegetarian' | 'gluten-free' | 'high-protein'\n  }\n>(({ className, shortcut, nutritionBadge, children, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-slate-100 aria-selected:text-slate-900 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 dark:aria-selected:bg-slate-800 dark:aria-selected:text-slate-50\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"flex-1 flex items-center space-x-2\">\n      {children}\n      {nutritionBadge && (\n        <span className={cn(\n          \"inline-flex items-center rounded-full px-2 py-1 text-xs font-medium\",\n          nutritionBadge === 'vegan' && \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\",\n          nutritionBadge === 'vegetarian' && \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900/20 dark:text-emerald-400\",\n          nutritionBadge === 'gluten-free' && \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\",\n          nutritionBadge === 'high-protein' && \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\"\n        )}>\n          {nutritionBadge === 'vegan' && '🌱'}\n          {nutritionBadge === 'vegetarian' && '🥬'}\n          {nutritionBadge === 'gluten-free' && '🌾'}\n          {nutritionBadge === 'high-protein' && '💪'}\n          {nutritionBadge.replace('-', ' ')}\n        </span>\n      )}\n    </div>\n    {shortcut && (\n      <span className=\"ml-auto text-xs tracking-widest text-slate-500 dark:text-slate-400\">\n        {shortcut}\n      </span>\n    )}\n  </CommandPrimitive.Item>\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-slate-500 dark:text-slate-400\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/advanced-tooltip.tsx",["2399"],[],"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\ninterface NutritionData {\n  calories: number\n  protein: number\n  carbs: number\n  fats: number\n  fiber: number\n  sugar: number\n  sodium: number\n  dailyValue?: {\n    calories: number\n    protein: number\n    carbs: number\n    fats: number\n  }\n}\n\ninterface AllergenInfo {\n  allergen: string\n  severity: 'mild' | 'moderate' | 'severe'\n  icon: string\n}\n\ninterface TooltipContentProps extends \n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content> {\n  variant?: 'default' | 'nutrition' | 'allergen' | 'info' | 'modal'\n  nutritionData?: NutritionData\n  allergens?: AllergenInfo[]\n  showCloseButton?: boolean\n  onClose?: () => void\n}\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  TooltipContentProps\n>(({ \n  className, \n  sideOffset = 4, \n  variant = 'default',\n  nutritionData,\n  allergens,\n  showCloseButton = false,\n  onClose,\n  children,\n  ...props \n}, ref) => {\n  const [isMobile, setIsMobile] = React.useState(false)\n\n  React.useEffect(() => {\n    const checkMobile = () => setIsMobile(window.innerWidth < 768)\n    checkMobile()\n    window.addEventListener('resize', checkMobile)\n    return () => window.removeEventListener('resize', checkMobile)\n  }, [])\n\n  const renderNutritionContent = () => (\n    <div className=\"space-y-4\">\n      <div className=\"text-sm font-semibold text-slate-900 dark:text-slate-100 border-b pb-2\">\n        Nutrition Facts\n      </div>\n      \n      {/* Main Nutrition Grid */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <div className=\"text-center p-2 bg-slate-50 dark:bg-slate-800 rounded\">\n          <div className=\"text-lg font-bold text-primary-600\">{nutritionData?.calories}</div>\n          <div className=\"text-xs text-slate-500\">Calories</div>\n          {nutritionData?.dailyValue?.calories && (\n            <div className=\"text-xs text-slate-400\">{nutritionData.dailyValue.calories}% DV</div>\n          )}\n        </div>\n        <div className=\"text-center p-2 bg-slate-50 dark:bg-slate-800 rounded\">\n          <div className=\"text-lg font-bold text-blue-600\">{nutritionData?.protein}g</div>\n          <div className=\"text-xs text-slate-500\">Protein</div>\n          {nutritionData?.dailyValue?.protein && (\n            <div className=\"text-xs text-slate-400\">{nutritionData.dailyValue.protein}% DV</div>\n          )}\n        </div>\n      </div>\n\n      {/* Detailed Nutrition */}\n      <div className=\"space-y-2 text-sm\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-slate-600 dark:text-slate-400\">Carbohydrates</span>\n          <span className=\"font-medium\">{nutritionData?.carbs}g</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-slate-600 dark:text-slate-400\">Total Fat</span>\n          <span className=\"font-medium\">{nutritionData?.fats}g</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-slate-600 dark:text-slate-400\">Fiber</span>\n          <span className=\"font-medium\">{nutritionData?.fiber}g</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-slate-600 dark:text-slate-400\">Sugar</span>\n          <span className=\"font-medium\">{nutritionData?.sugar}g</span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-slate-600 dark:text-slate-400\">Sodium</span>\n          <span className=\"font-medium\">{nutritionData?.sodium}mg</span>\n        </div>\n      </div>\n\n      <div className=\"text-xs text-slate-400 pt-2 border-t\">\n        *Percent Daily Values based on a 2000 calorie diet\n      </div>\n    </div>\n  )\n\n  const renderAllergenContent = () => (\n    <div className=\"space-y-3\">\n      <div className=\"text-sm font-semibold text-slate-900 dark:text-slate-100 border-b pb-2\">\n        ⚠️ Allergen Information\n      </div>\n      \n      <div className=\"space-y-2\">\n        {allergens?.map((allergen, index) => (\n          <div key={index} className={cn(\n            \"flex items-center space-x-3 p-2 rounded-lg\",\n            allergen.severity === 'severe' && \"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800\",\n            allergen.severity === 'moderate' && \"bg-orange-50 dark:bg-orange-900/20 border border-orange-200 dark:border-orange-800\",\n            allergen.severity === 'mild' && \"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800\"\n          )}>\n            <span className=\"text-lg\">{allergen.icon}</span>\n            <div className=\"flex-1\">\n              <div className=\"font-medium text-sm\">{allergen.allergen}</div>\n              <div className={cn(\n                \"text-xs capitalize\",\n                allergen.severity === 'severe' && \"text-red-700 dark:text-red-400\",\n                allergen.severity === 'moderate' && \"text-orange-700 dark:text-orange-400\",\n                allergen.severity === 'mild' && \"text-yellow-700 dark:text-yellow-400\"\n              )}>\n                {allergen.severity} risk\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"text-xs text-slate-500 pt-2 border-t\">\n        Always consult with dining staff if you have severe allergies\n      </div>\n    </div>\n  )\n\n  // Mobile Modal Version\n  if (isMobile && (variant === 'nutrition' || variant === 'allergen' || variant === 'modal')) {\n    return (\n      <TooltipPrimitive.Portal>\n        <TooltipPrimitive.Content asChild>\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: 20 }}\n            transition={{ duration: 0.2 }}\n            className=\"fixed inset-x-4 bottom-4 z-50 max-h-[80vh] overflow-y-auto rounded-xl bg-white p-4 shadow-2xl dark:bg-slate-900 border border-slate-200 dark:border-slate-700\"\n          >\n            {showCloseButton && onClose && (\n              <div className=\"flex justify-end mb-2\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-6 w-6 text-slate-400 hover:text-slate-600 dark:hover:text-slate-300\"\n                  onClick={onClose}\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            )}\n            \n            {variant === 'nutrition' && nutritionData && renderNutritionContent()}\n            {variant === 'allergen' && allergens && renderAllergenContent()}\n            {(variant === 'modal' || variant === 'info') && children}\n          </motion.div>\n        </TooltipPrimitive.Content>\n      </TooltipPrimitive.Portal>\n    )\n  }\n\n  // Desktop Tooltip Version\n  return (\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md border border-slate-200 bg-white px-3 py-1.5 text-sm text-slate-950 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50\",\n        // Enhanced styling for nutrition and allergen variants\n        (variant === 'nutrition' || variant === 'allergen') && \"p-4 max-w-sm\",\n        variant === 'nutrition' && \"min-w-64\",\n        variant === 'allergen' && \"min-w-56\",\n        className\n      )}\n      {...props}\n    >\n      {variant === 'nutrition' && nutritionData && renderNutritionContent()}\n      {variant === 'allergen' && allergens && renderAllergenContent()}\n      {(variant === 'default' || variant === 'info') && children}\n    </TooltipPrimitive.Content>\n  )\n})\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\n// Specialized Nutrition Tooltip\ninterface NutritionTooltipProps {\n  children: React.ReactNode\n  nutritionData: NutritionData\n  showOnHover?: boolean\n  showOnClick?: boolean\n}\n\nconst NutritionTooltip = ({ \n  children, \n  nutritionData, \n  showOnHover = true,\n  showOnClick = false \n}: NutritionTooltipProps) => {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <TooltipProvider>\n      <Tooltip open={open} onOpenChange={setOpen}>\n        <TooltipTrigger \n          asChild\n          onMouseEnter={() => showOnHover && setOpen(true)}\n          onMouseLeave={() => showOnHover && setOpen(false)}\n          onClick={() => showOnClick && setOpen(!open)}\n        >\n          {children}\n        </TooltipTrigger>\n        <TooltipContent \n          variant=\"nutrition\" \n          nutritionData={nutritionData}\n          showCloseButton={showOnClick}\n          onClose={() => setOpen(false)}\n        />\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\n// Specialized Allergen Tooltip\ninterface AllergenTooltipProps {\n  children: React.ReactNode\n  allergens: AllergenInfo[]\n  showOnHover?: boolean\n  showOnClick?: boolean\n}\n\nconst AllergenTooltip = ({ \n  children, \n  allergens, \n  showOnHover = true,\n  showOnClick = false \n}: AllergenTooltipProps) => {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <TooltipProvider>\n      <Tooltip open={open} onOpenChange={setOpen}>\n        <TooltipTrigger \n          asChild\n          onMouseEnter={() => showOnHover && setOpen(true)}\n          onMouseLeave={() => showOnHover && setOpen(false)}\n          onClick={() => showOnClick && setOpen(!open)}\n        >\n          {children}\n        </TooltipTrigger>\n        <TooltipContent \n          variant=\"allergen\" \n          allergens={allergens}\n          showCloseButton={showOnClick}\n          onClose={() => setOpen(false)}\n        />\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\n// Quick Info Tooltip for simple text\ninterface QuickTooltipProps {\n  children: React.ReactNode\n  content: string\n  side?: \"top\" | \"right\" | \"bottom\" | \"left\"\n}\n\nconst QuickTooltip = ({ children, content, side = \"top\" }: QuickTooltipProps) => (\n  <TooltipProvider>\n    <Tooltip>\n      <TooltipTrigger asChild>\n        {children}\n      </TooltipTrigger>\n      <TooltipContent side={side}>\n        {content}\n      </TooltipContent>\n    </Tooltip>\n  </TooltipProvider>\n)\n\nexport { \n  Tooltip, \n  TooltipTrigger, \n  TooltipContent, \n  TooltipProvider,\n  NutritionTooltip,\n  AllergenTooltip, \n  QuickTooltip,\n  type NutritionData,\n  type AllergenInfo\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/alert-dialog.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/alert.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/avatar.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/badge.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/breadcrumb.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/button.tsx",["2400"],[],"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ScreenReaderOnly } from \"@/components/accessibility/ScreenReaderOnly\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-hasivu-primary-500 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 touch-manipulation select-none active:scale-[0.98] md:active:scale-100 md:hover:scale-[1.02]\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90 active:bg-primary/95 shadow-sm\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90 active:bg-destructive/95 shadow-sm\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground active:bg-accent/80 shadow-sm\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80 active:bg-secondary/70 shadow-sm\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground active:bg-accent/80\",\n        link: \"text-primary underline-offset-4 hover:underline active:text-primary/80\",\n        // HASIVU Brand variants\n        hasivu: \"bg-hasivu-primary-500 text-white hover:bg-hasivu-primary-600 active:bg-hasivu-primary-700 shadow-md hover:shadow-lg\",\n        hasivuSecondary: \"bg-hasivu-secondary-500 text-white hover:bg-hasivu-secondary-600 active:bg-hasivu-secondary-700 shadow-md hover:shadow-lg\",\n        hasivuOutline: \"border-2 border-hasivu-primary-500 text-hasivu-primary-500 hover:bg-hasivu-primary-50 active:bg-hasivu-primary-100\",\n        hasivuGhost: \"text-hasivu-primary-500 hover:bg-hasivu-primary-50 hover:text-hasivu-primary-600 active:bg-hasivu-primary-100\",\n        // Role-based HASIVU variants\n        admin: \"bg-hasivu-role-admin text-white hover:bg-red-700 active:bg-red-800 shadow-md hover:shadow-lg\",\n        teacher: \"bg-hasivu-role-teacher text-white hover:bg-blue-700 active:bg-blue-800 shadow-md hover:shadow-lg\",\n        parent: \"bg-hasivu-role-parent text-white hover:bg-green-700 active:bg-green-800 shadow-md hover:shadow-lg\",\n        student: \"bg-hasivu-role-student text-white hover:bg-amber-600 active:bg-amber-700 shadow-md hover:shadow-lg\",\n        vendor: \"bg-hasivu-role-vendor text-white hover:bg-purple-700 active:bg-purple-800 shadow-md hover:shadow-lg\",\n        kitchen: \"bg-hasivu-role-kitchen text-white hover:bg-orange-600 active:bg-orange-700 shadow-md hover:shadow-lg\",\n        schoolAdmin: \"bg-hasivu-role-schoolAdmin text-white hover:bg-slate-800 active:bg-slate-900 shadow-md hover:shadow-lg\",\n        // Mobile-optimized variants\n        floating: \"bg-primary text-primary-foreground shadow-lg hover:shadow-xl active:shadow-md rounded-full\",\n        fab: \"bg-primary text-primary-foreground shadow-lg hover:shadow-xl active:shadow-md rounded-full min-w-[56px] min-h-[56px]\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2 min-w-touch-target\",\n        sm: \"h-9 rounded-md px-3 min-w-[36px]\",\n        lg: \"h-11 rounded-md px-8 min-w-touch-target\",\n        icon: \"h-10 w-10 min-w-touch-target min-h-touch-target\",\n        // Mobile-specific sizes\n        touch: \"h-touch-target w-touch-target min-w-touch-target min-h-touch-target\",\n        fab: \"h-14 w-14 min-w-[56px] min-h-[56px]\",\n        fabSmall: \"h-10 w-10 min-w-[40px] min-h-[40px]\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n  haptic?: boolean\n  loading?: boolean\n  loadingText?: string\n  // Accessibility enhancements\n  ariaLabel?: string\n  ariaDescribedBy?: string\n  srOnlyText?: string\n  // Enhanced ARIA support\n  pressed?: boolean\n  expanded?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    haptic = false, \n    loading = false, \n    loadingText, \n    children, \n    disabled, \n    onClick, \n    ariaLabel,\n    ariaDescribedBy,\n    srOnlyText,\n    pressed,\n    expanded,\n    ...props \n  }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    const buttonId = React.useId()\n    \n    // Haptic feedback for mobile devices\n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (haptic && 'vibrate' in navigator) {\n        navigator.vibrate(10) // Light haptic feedback\n      }\n      onClick?.(e)\n    }, [haptic, onClick])\n    \n    // Enhanced accessibility props\n    const accessibilityProps = {\n      'aria-label': ariaLabel,\n      'aria-describedby': ariaDescribedBy,\n      'aria-pressed': pressed !== undefined ? pressed : undefined,\n      'aria-expanded': expanded !== undefined ? expanded : undefined,\n      'aria-busy': loading,\n      'aria-disabled': disabled || loading\n    }\n    \n    return (\n      <Comp\n        className={cn(\n          buttonVariants({ variant, size }),\n          // Enhanced focus styles for accessibility\n          \"focus-visible:ring-2 focus-visible:ring-offset-2\",\n          // High contrast mode support\n          \"contrast-more:border-2 contrast-more:border-current\",\n          // Reduced motion support\n          \"motion-reduce:transition-none motion-reduce:transform-none\",\n          className\n        )}\n        ref={ref}\n        disabled={disabled || loading}\n        onClick={handleClick}\n        {...accessibilityProps}\n        {...props}\n      >\n        {/* Screen reader loading announcement */}\n        {loading && (\n          <ScreenReaderOnly>\n            {loadingText || 'Loading...'}\n          </ScreenReaderOnly>\n        )}\n        \n        {/* Visual loading indicator */}\n        {loading && (\n          <div \n            className=\"animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent\"\n            aria-hidden=\"true\"\n          />\n        )}\n        \n        {/* Button content */}\n        <span className={loading ? \"ml-2\" : \"\"}>\n          {children}\n          {srOnlyText && (\n            <ScreenReaderOnly>{srOnlyText}</ScreenReaderOnly>\n          )}\n        </span>\n      </Comp>\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/calendar.tsx",["2401","2402"],[],"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/card.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/carousel.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/chart.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/checkbox.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/collapsible.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/command.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/context-menu.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/dialog.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/drawer.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/dropdown-menu.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/form.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/hover-card.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/index.ts",["2403"],[],"// Export all UI components for easy importing\nexport { Button, buttonVariants } from './ button'\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent } from './card'\nexport { Input } from './i nput'\nexport { Textarea } from './textarea'\nexport { Label } from './ label'\nexport { Checkbox } from './checkbox'\n} from './ form'\nexport { Separator } from './separator'\nexport { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption } from './ table'\nexport { Badge, badgeVariants } from './badge'\nexport { Avatar, AvatarImage, AvatarFallback } from './ avatar'\nexport { Tabs, TabsList, TabsTrigger, TabsContent } from './tabs'\n} from './ dialog'\nexport { Alert, AlertTitle, AlertDescription } from './alert'\nexport { Progress } from './ progress'\n} from './select'\nexport { Calendar } from './ calendar'\nexport { Toast, ToastProvider, ToastViewport, ToastTitle, ToastDescription, ToastClose, ToastAction } from './toast'\n} from './ dropdown-menu'\n} from './navigation-menu'\nexport { Sheet, SheetPortal, SheetOverlay, SheetTrigger, SheetClose, SheetContent, SheetHeader, SheetFooter, SheetTitle, SheetDescription } from './ sheet'\nexport { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext } from './carousel'\nexport { Chart, ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from './ chart'\nexport { Skeleton } from './skeleton'\nexport { ScrollArea, ScrollBar } from './ scroll-area'\nexport { Slider } from './slider'\nexport { Toaster } from './ sonner'\nexport { ToggleGroup, ToggleGroupItem } from './toggle-group'\nexport { HoverCard, HoverCardTrigger, HoverCardContent } from './ hover-card'\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator } from './input-otp'","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/input-otp.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/input.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/label.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/loading-states.tsx",["2404"],[],"import * as React from \"react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { cn } from \"@/lib/utils\"\n\n// Base Skeleton Component\ninterface SkeletonProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: 'default' | 'shimmer' | 'pulse'\n}\n\nconst Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>(\n  ({ className, variant = 'shimmer', ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        \"rounded-md bg-slate-200 dark:bg-slate-800\",\n        variant === 'shimmer' && \"animate-shimmer bg-gradient-to-r from-slate-200 via-slate-100 to-slate-200 dark:from-slate-800 dark:via-slate-700 dark:to-slate-800 bg-[length:200%_100%]\",\n        variant === 'pulse' && \"animate-pulse\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSkeleton.displayName = \"Skeleton\"\n\n// Meal Card Skeleton\nconst MealCardSkeleton = () => (\n  <div className=\"w-full rounded-lg border border-slate-200 p-4 shadow-sm dark:border-slate-800\">\n    {/* Image skeleton */}\n    <Skeleton className=\"aspect-video w-full mb-4\" />\n    \n    {/* Title and rating */}\n    <div className=\"flex items-start justify-between mb-2\">\n      <div className=\"flex-1\">\n        <Skeleton className=\"h-6 w-3/4 mb-2\" />\n        <Skeleton className=\"h-4 w-1/2\" />\n      </div>\n      <Skeleton className=\"h-5 w-12 ml-4\" />\n    </div>\n    \n    {/* Description */}\n    <div className=\"space-y-2 mb-4\">\n      <Skeleton className=\"h-4 w-full\" />\n      <Skeleton className=\"h-4 w-4/5\" />\n    </div>\n    \n    {/* Tags */}\n    <div className=\"flex space-x-2 mb-4\">\n      <Skeleton className=\"h-6 w-16\" />\n      <Skeleton className=\"h-6 w-20\" />\n      <Skeleton className=\"h-6 w-12\" />\n    </div>\n    \n    {/* Price and button */}\n    <div className=\"flex items-center justify-between\">\n      <Skeleton className=\"h-7 w-16\" />\n      <Skeleton className=\"h-9 w-24\" />\n    </div>\n  </div>\n)\n\n// Dashboard Skeleton with Priority Loading\nconst DashboardSkeleton = ({ role = 'student' }: { role?: 'student' | 'parent' | 'admin' }) => (\n  <div className=\"space-y-6\">\n    {/* Header - loads first */}\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n      className=\"flex items-center justify-between\"\n    >\n      <div>\n        <Skeleton className=\"h-8 w-48 mb-2\" />\n        <Skeleton className=\"h-4 w-32\" />\n      </div>\n      <Skeleton className=\"h-10 w-32\" />\n    </motion.div>\n\n    {/* Quick Stats - loads second */}\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3, delay: 0.1 }}\n      className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"\n    >\n      {[1, 2, 3].map((i) => (\n        <div key={i} className=\"rounded-lg border border-slate-200 p-4 dark:border-slate-800\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <Skeleton className=\"h-4 w-24 mb-2\" />\n              <Skeleton className=\"h-8 w-16\" />\n            </div>\n            <Skeleton className=\"h-10 w-10 rounded-full\" />\n          </div>\n        </div>\n      ))}\n    </motion.div>\n\n    {/* Main Content - loads third */}\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3, delay: 0.2 }}\n      className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\"\n    >\n      {/* Recent Activity */}\n      <div className=\"rounded-lg border border-slate-200 p-6 dark:border-slate-800\">\n        <Skeleton className=\"h-6 w-32 mb-4\" />\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <div key={i} className=\"flex items-center space-x-4\">\n              <Skeleton className=\"h-10 w-10 rounded-full\" />\n              <div className=\"flex-1\">\n                <Skeleton className=\"h-4 w-3/4 mb-1\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </div>\n              <Skeleton className=\"h-4 w-16\" />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Chart/Additional Content */}\n      <div className=\"rounded-lg border border-slate-200 p-6 dark:border-slate-800\">\n        <Skeleton className=\"h-6 w-40 mb-4\" />\n        <Skeleton className=\"h-48 w-full\" />\n      </div>\n    </motion.div>\n\n    {/* Role-specific content */}\n    {role === 'parent' && (\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.3, delay: 0.3 }}\n        className=\"grid grid-cols-1 md:grid-cols-2 gap-4\"\n      >\n        {[1, 2].map((i) => (\n          <div key={i} className=\"rounded-lg border border-slate-200 p-4 dark:border-slate-800\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <Skeleton className=\"h-12 w-12 rounded-full\" />\n              <div>\n                <Skeleton className=\"h-5 w-24 mb-1\" />\n                <Skeleton className=\"h-3 w-16\" />\n              </div>\n            </div>\n            <Skeleton className=\"h-24 w-full\" />\n          </div>\n        ))}\n      </motion.div>\n    )}\n  </div>\n)\n\n// Order Status Loading with Steps\ninterface OrderStatusLoadingProps {\n  currentStep: 'received' | 'preparing' | 'ready' | 'delivering'\n  estimatedTime?: number\n  className?: string\n}\n\nconst OrderStatusLoading = ({ \n  currentStep, \n  estimatedTime,\n  className \n}: OrderStatusLoadingProps) => {\n  const steps = [\n    { id: 'received', label: 'Order Received', icon: '📋' },\n    { id: 'preparing', label: 'Preparing', icon: '👨‍🍳' },\n    { id: 'ready', label: 'Ready', icon: '✅' },\n    { id: 'delivering', label: 'On the Way', icon: '🚚' }\n  ]\n\n  const currentStepIndex = steps.findIndex(step => step.id === currentStep)\n\n  return (\n    <div className={cn(\"space-y-6\", className)}>\n      {/* Progress Bar */}\n      <div className=\"relative\">\n        <div className=\"flex items-center justify-between\">\n          {steps.map((step, index) => (\n            <div key={step.id} className=\"flex flex-col items-center\">\n              <motion.div\n                className={cn(\n                  \"flex h-12 w-12 items-center justify-center rounded-full border-2 text-lg\",\n                  index <= currentStepIndex\n                    ? \"border-primary-500 bg-primary-100 text-primary-700 dark:bg-primary-900/20 dark:text-primary-300\"\n                    : \"border-slate-300 bg-slate-100 text-slate-500 dark:border-slate-600 dark:bg-slate-800 dark:text-slate-400\"\n                )}\n                initial={{ scale: 0.8, opacity: 0 }}\n                animate={{ \n                  scale: index === currentStepIndex ? 1.1 : 1, \n                  opacity: 1 \n                }}\n                transition={{ \n                  duration: 0.3, \n                  delay: index * 0.1,\n                  scale: { repeat: index === currentStepIndex ? Infinity : 0, repeatType: \"reverse\", duration: 1.5 }\n                }}\n              >\n                {step.icon}\n              </motion.div>\n              <span className={cn(\n                \"mt-2 text-sm font-medium\",\n                index <= currentStepIndex\n                  ? \"text-primary-700 dark:text-primary-300\"\n                  : \"text-slate-500 dark:text-slate-400\"\n              )}>\n                {step.label}\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        {/* Progress Line */}\n        <div className=\"absolute top-6 left-6 right-6 -z-10\">\n          <div className=\"h-0.5 bg-slate-300 dark:bg-slate-600\">\n            <motion.div\n              className=\"h-full bg-primary-500\"\n              initial={{ width: \"0%\" }}\n              animate={{ width: `${(currentStepIndex / (steps.length - 1)) * 100}%` }}\n              transition={{ duration: 0.8, ease: \"easeInOut\" }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Estimated Time */}\n      {estimatedTime && currentStepIndex < steps.length - 1 && (\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          className=\"text-center\"\n        >\n          <div className=\"inline-flex items-center space-x-2 rounded-full bg-blue-50 px-4 py-2 text-blue-700 dark:bg-blue-900/20 dark:text-blue-300\">\n            <motion.div\n              animate={{ rotate: 360 }}\n              transition={{ duration: 2, repeat: Infinity, ease: \"linear\" }}\n              className=\"text-sm\"\n            >\n              ⏰\n            </motion.div>\n            <span className=\"text-sm font-medium\">\n              Estimated {estimatedTime} minutes remaining\n            </span>\n          </div>\n        </motion.div>\n      )}\n    </div>\n  )\n}\n\n// File Upload Progress\ninterface FileUploadProgressProps {\n  progress: number\n  fileName: string\n  fileSize: string\n  speed?: string\n  eta?: string\n  status: 'uploading' | 'success' | 'error' | 'paused'\n  onPause?: () => void\n  onResume?: () => void\n  onCancel?: () => void\n}\n\nconst FileUploadProgress = ({\n  progress,\n  fileName,\n  fileSize,\n  speed,\n  eta,\n  status,\n  onPause,\n  onResume,\n  onCancel\n}: FileUploadProgressProps) => (\n  <div className=\"w-full max-w-md rounded-lg border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n    <div className=\"flex items-center justify-between mb-2\">\n      <h3 className=\"font-medium text-sm truncate flex-1 mr-2\">{fileName}</h3>\n      <span className=\"text-xs text-slate-500\">{fileSize}</span>\n    </div>\n    \n    {/* Progress Bar */}\n    <div className=\"relative mb-2 h-2 rounded-full bg-slate-200 dark:bg-slate-700\">\n      <motion.div\n        className={cn(\n          \"h-full rounded-full\",\n          status === 'uploading' && \"bg-blue-500\",\n          status === 'success' && \"bg-green-500\",\n          status === 'error' && \"bg-red-500\",\n          status === 'paused' && \"bg-orange-500\"\n        )}\n        initial={{ width: 0 }}\n        animate={{ width: `${progress}%` }}\n        transition={{ duration: 0.3 }}\n      />\n      {status === 'uploading' && (\n        <motion.div\n          className=\"absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-white/30 to-transparent\"\n          animate={{ x: [-100, 200] }}\n          transition={{ repeat: Infinity, duration: 1.5, ease: \"easeInOut\" }}\n        />\n      )}\n    </div>\n    \n    {/* Status and Controls */}\n    <div className=\"flex items-center justify-between text-xs\">\n      <div className=\"flex items-center space-x-2 text-slate-500\">\n        <span>{progress}%</span>\n        {speed && <span>• {speed}</span>}\n        {eta && <span>• {eta} remaining</span>}\n      </div>\n      \n      <div className=\"flex space-x-1\">\n        {status === 'uploading' && onPause && (\n          <button\n            onClick={onPause}\n            className=\"text-blue-600 hover:text-blue-700\"\n          >\n            ⏸️\n          </button>\n        )}\n        {status === 'paused' && onResume && (\n          <button\n            onClick={onResume}\n            className=\"text-green-600 hover:text-green-700\"\n          >\n            ▶️\n          </button>\n        )}\n        {status !== 'success' && onCancel && (\n          <button\n            onClick={onCancel}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            ❌\n          </button>\n        )}\n      </div>\n    </div>\n  </div>\n)\n\n// HASIVU Branded Loading Spinner\ninterface BrandedSpinnerProps {\n  size?: 'sm' | 'md' | 'lg'\n  className?: string\n}\n\nconst BrandedSpinner = ({ size = 'md', className }: BrandedSpinnerProps) => {\n  const sizeClasses = {\n    sm: 'h-6 w-6',\n    md: 'h-8 w-8', \n    lg: 'h-12 w-12'\n  }\n\n  return (\n    <motion.div\n      className={cn(\n        \"relative inline-flex items-center justify-center\",\n        sizeClasses[size],\n        className\n      )}\n      animate={{ rotate: 360 }}\n      transition={{ duration: 1, repeat: Infinity, ease: \"linear\" }}\n    >\n      {/* Outer ring - HASIVU Primary Color */}\n      <div className={cn(\n        \"absolute inset-0 rounded-full border-2 border-primary-200\",\n        \"border-t-primary-600 dark:border-primary-800 dark:border-t-primary-400\"\n      )} />\n      \n      {/* Inner dot - HASIVU Secondary Color */}\n      <motion.div\n        className={cn(\n          \"rounded-full bg-secondary-500\",\n          size === 'sm' && 'h-1 w-1',\n          size === 'md' && 'h-1.5 w-1.5',\n          size === 'lg' && 'h-2 w-2'\n        )}\n        animate={{ scale: [1, 1.2, 1] }}\n        transition={{ duration: 0.8, repeat: Infinity }}\n      />\n    </motion.div>\n  )\n}\n\n// Loading Page Component\ninterface LoadingPageProps {\n  message?: string\n  submessage?: string\n  showSpinner?: boolean\n}\n\nconst LoadingPage = ({ \n  message = \"Loading your delicious experience...\", \n  submessage,\n  showSpinner = true \n}: LoadingPageProps) => (\n  <div className=\"flex min-h-screen items-center justify-center bg-slate-50 dark:bg-slate-900\">\n    <div className=\"text-center space-y-4\">\n      {showSpinner && <BrandedSpinner size=\"lg\" />}\n      \n      <motion.div\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.2 }}\n      >\n        <h2 className=\"text-xl font-semibold text-slate-900 dark:text-slate-100\">\n          {message}\n        </h2>\n        {submessage && (\n          <p className=\"mt-2 text-sm text-slate-600 dark:text-slate-400\">\n            {submessage}\n          </p>\n        )}\n      </motion.div>\n    </div>\n  </div>\n)\n\nexport {\n  Skeleton,\n  MealCardSkeleton,\n  DashboardSkeleton,\n  OrderStatusLoading,\n  FileUploadProgress,\n  BrandedSpinner,\n  LoadingPage\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/meal-order-drawer.tsx",["2405","2406","2407","2408"],[],"import * as React from \"react\"\nimport { Drawer } from \"vaul\"\nimport { X, Plus, Minus, Clock, MapPin, Heart, Share2 } from \"lucide-react\"\nimport { motion, AnimatePresence } from \"framer-motion\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Separator } from \"@/components/ui/separator\"\n\ninterface NutritionInfo {\n  calories: number\n  protein: number\n  carbs: number\n  fats: number\n  fiber: number\n}\n\ninterface MealItem {\n  id: string\n  name: string\n  description: string\n  price: number\n  image: string\n  category: string\n  preparationTime: number\n  rating: number\n  nutrition: NutritionInfo\n  allergens: string[]\n  dietaryTags: ('vegan' | 'vegetarian' | 'gluten-free' | 'dairy-free' | 'nut-free')[]\n  ingredients: string[]\n  customizations?: {\n    portion: { small: number, regular: number, large: number }\n    addOns?: { id: string, name: string, price: number }[]\n    modifications?: string[]\n  }\n}\n\ninterface MealOrderDrawerProps {\n  meal: MealItem\n  isOpen: boolean\n  onClose: () => void\n  onAddToCart: (meal: MealItem, customizations: any) => void\n  className?: string\n}\n\nconst MealOrderDrawer = ({ \n  meal, \n  isOpen, \n  onClose, \n  onAddToCart,\n  className \n}: MealOrderDrawerProps) => {\n  const [quantity, setQuantity] = React.useState(1)\n  const [selectedPortion, setSelectedPortion] = React.useState<'small' | 'regular' | 'large'>('regular')\n  const [selectedAddOns, setSelectedAddOns] = React.useState<string[]>([])\n  const [showNutrition, setShowNutrition] = React.useState(false)\n  const [isFavorite, setIsFavorite] = React.useState(false)\n\n  const calculatePrice = () => {\n    const basePrice = meal.customizations?.portion?.[selectedPortion] || meal.price\n    const addOnPrice = selectedAddOns.reduce((total, addOnId) => {\n      const addOn = meal.customizations?.addOns?.find(a => a.id === addOnId)\n      return total + (addOn?.price || 0)\n    }, 0)\n    return (basePrice + addOnPrice) * quantity\n  }\n\n  const handleAddToCart = () => {\n    onAddToCart(meal, {\n      quantity,\n      portion: selectedPortion,\n      addOns: selectedAddOns,\n    })\n    onClose()\n  }\n\n  const handleShare = async () => {\n    if (navigator.share) {\n      try {\n        await navigator.share({\n          title: meal.name,\n          text: `Check out this delicious ${meal.name} from HASIVU!`,\n          url: window.location.href,\n        })\n      } catch (error) {\n        console.log('Error sharing:', error)\n      }\n    }\n  }\n\n  return (\n    <Drawer.Root open={isOpen} onOpenChange={onClose}>\n      <Drawer.Portal>\n        <Drawer.Overlay className=\"fixed inset-0 bg-black/40 backdrop-blur-sm\" />\n        <Drawer.Content className={cn(\n          \"fixed bottom-0 left-0 right-0 z-50 mt-24 flex h-[90%] flex-col rounded-t-2xl bg-white outline-none dark:bg-slate-900\",\n          \"scrollbar-thin scrollbar-thumb-slate-300 scrollbar-track-slate-100 dark:scrollbar-thumb-slate-700 dark:scrollbar-track-slate-800\",\n          className\n        )}>\n          {/* Drawer Handle */}\n          <div className=\"mx-auto mt-4 h-2 w-12 rounded-full bg-slate-300 dark:bg-slate-600\" />\n          \n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 pb-2\">\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {meal.category}\n              </Badge>\n              <Badge variant=\"outline\" className=\"text-xs\">\n                <Clock className=\"mr-1 h-3 w-3\" />\n                {meal.preparationTime}min\n              </Badge>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-8 w-8\"\n                onClick={() => setIsFavorite(!isFavorite)}\n              >\n                <Heart className={cn(\n                  \"h-4 w-4\",\n                  isFavorite ? \"fill-red-500 text-red-500\" : \"text-slate-500\"\n                )} />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-8 w-8\"\n                onClick={handleShare}\n              >\n                <Share2 className=\"h-4 w-4 text-slate-500\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className=\"h-8 w-8\"\n                onClick={onClose}\n              >\n                <X className=\"h-4 w-4 text-slate-500\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Scrollable Content */}\n          <div className=\"flex-1 overflow-y-auto px-4\">\n            {/* Meal Preview */}\n            <div className=\"mb-6\">\n              <div className=\"aspect-video relative rounded-xl overflow-hidden mb-4\">\n                <img\n                  src={meal.image}\n                  alt={meal.name}\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute top-4 right-4 bg-white/90 backdrop-blur-sm rounded-full px-2 py-1\">\n                  <div className=\"flex items-center space-x-1\">\n                    <span className=\"text-sm font-medium\">⭐ {meal.rating}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <h2 className=\"text-2xl font-bold text-slate-900 dark:text-slate-100 mb-2\">\n                {meal.name}\n              </h2>\n              \n              <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n                {meal.description}\n              </p>\n\n              {/* Dietary Tags */}\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                {meal.dietaryTags.map((tag) => (\n                  <Badge\n                    key={tag}\n                    variant=\"secondary\"\n                    className={cn(\n                      \"text-xs\",\n                      tag === 'vegan' && \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400\",\n                      tag === 'vegetarian' && \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900/20 dark:text-emerald-400\",\n                      tag === 'gluten-free' && \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400\",\n                      tag === 'dairy-free' && \"bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400\",\n                      tag === 'nut-free' && \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400\"\n                    )}\n                  >\n                    {tag === 'vegan' && '🌱'}\n                    {tag === 'vegetarian' && '🥬'}\n                    {tag === 'gluten-free' && '🌾'}\n                    {tag === 'dairy-free' && '🥛'}\n                    {tag === 'nut-free' && '🥜'}\n                    {tag.replace('-', ' ')}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            {/* Portion Selection */}\n            {meal.customizations?.portion && (\n              <div className=\"mb-6\">\n                <h3 className=\"font-semibold text-slate-900 dark:text-slate-100 mb-3\">\n                  Choose Portion Size\n                </h3>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {Object.entries(meal.customizations.portion).map(([size, price]) => (\n                    <motion.button\n                      key={size}\n                      whileTap={{ scale: 0.95 }}\n                      className={cn(\n                        \"p-3 rounded-lg border-2 text-center transition-all\",\n                        selectedPortion === size\n                          ? \"border-primary-500 bg-primary-50 dark:bg-primary-900/20\"\n                          : \"border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600\"\n                      )}\n                      onClick={() => setSelectedPortion(size as 'small' | 'regular' | 'large')}\n                    >\n                      <div className=\"font-medium text-sm capitalize\">{size}</div>\n                      <div className=\"text-xs text-slate-500 mt-1\">₹{price}</div>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Add-ons */}\n            {meal.customizations?.addOns && meal.customizations.addOns.length > 0 && (\n              <div className=\"mb-6\">\n                <h3 className=\"font-semibold text-slate-900 dark:text-slate-100 mb-3\">\n                  Add-ons\n                </h3>\n                <div className=\"space-y-2\">\n                  {meal.customizations.addOns.map((addOn) => (\n                    <motion.button\n                      key={addOn.id}\n                      whileTap={{ scale: 0.98 }}\n                      className={cn(\n                        \"w-full p-3 rounded-lg border text-left transition-all flex items-center justify-between\",\n                        selectedAddOns.includes(addOn.id)\n                          ? \"border-primary-500 bg-primary-50 dark:bg-primary-900/20\"\n                          : \"border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600\"\n                      )}\n                      onClick={() => {\n                        setSelectedAddOns(prev => \n                          prev.includes(addOn.id)\n                            ? prev.filter(id => id !== addOn.id)\n                            : [...prev, addOn.id]\n                        )\n                      }}\n                    >\n                      <span className=\"font-medium\">{addOn.name}</span>\n                      <span className=\"text-slate-600 dark:text-slate-400\">+₹{addOn.price}</span>\n                    </motion.button>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Nutrition Information */}\n            <div className=\"mb-6\">\n              <button\n                className=\"flex items-center justify-between w-full p-3 rounded-lg bg-slate-50 dark:bg-slate-800 hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors\"\n                onClick={() => setShowNutrition(!showNutrition)}\n              >\n                <span className=\"font-medium\">Nutrition Information</span>\n                <motion.div\n                  animate={{ rotate: showNutrition ? 180 : 0 }}\n                  transition={{ duration: 0.2 }}\n                >\n                  ⌄\n                </motion.div>\n              </button>\n              \n              <AnimatePresence>\n                {showNutrition && (\n                  <motion.div\n                    initial={{ height: 0, opacity: 0 }}\n                    animate={{ height: \"auto\", opacity: 1 }}\n                    exit={{ height: 0, opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                    className=\"overflow-hidden\"\n                  >\n                    <div className=\"pt-3 grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-3 bg-white dark:bg-slate-900 rounded-lg border\">\n                        <div className=\"text-2xl font-bold text-primary-600\">{meal.nutrition.calories}</div>\n                        <div className=\"text-sm text-slate-500\">Calories</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white dark:bg-slate-900 rounded-lg border\">\n                        <div className=\"text-2xl font-bold text-blue-600\">{meal.nutrition.protein}g</div>\n                        <div className=\"text-sm text-slate-500\">Protein</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white dark:bg-slate-900 rounded-lg border\">\n                        <div className=\"text-2xl font-bold text-green-600\">{meal.nutrition.carbs}g</div>\n                        <div className=\"text-sm text-slate-500\">Carbs</div>\n                      </div>\n                      <div className=\"text-center p-3 bg-white dark:bg-slate-900 rounded-lg border\">\n                        <div className=\"text-2xl font-bold text-purple-600\">{meal.nutrition.fats}g</div>\n                        <div className=\"text-sm text-slate-500\">Fats</div>\n                      </div>\n                    </div>\n                    \n                    {meal.allergens.length > 0 && (\n                      <div className=\"mt-4 p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800\">\n                        <div className=\"font-medium text-orange-800 dark:text-orange-400 mb-1\">\n                          ⚠️ Contains Allergens\n                        </div>\n                        <div className=\"text-sm text-orange-700 dark:text-orange-300\">\n                          {meal.allergens.join(', ')}\n                        </div>\n                      </div>\n                    )}\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </div>\n\n            {/* Ingredients */}\n            <div className=\"mb-6\">\n              <h3 className=\"font-semibold text-slate-900 dark:text-slate-100 mb-3\">\n                Ingredients\n              </h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {meal.ingredients.map((ingredient, index) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                    {ingredient}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 bg-slate-50 dark:bg-slate-800 border-t border-slate-200 dark:border-slate-700 space-y-4\">\n            {/* Quantity Selector */}\n            <div className=\"flex items-center justify-between\">\n              <span className=\"font-medium\">Quantity</span>\n              <div className=\"flex items-center space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => setQuantity(Math.max(1, quantity - 1))}\n                  disabled={quantity <= 1}\n                >\n                  <Minus className=\"h-3 w-3\" />\n                </Button>\n                <span className=\"w-8 text-center font-medium\">{quantity}</span>\n                <Button\n                  variant=\"outline\"\n                  size=\"icon\"\n                  className=\"h-8 w-8\"\n                  onClick={() => setQuantity(quantity + 1)}\n                >\n                  <Plus className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Add to Cart Button */}\n            <Button \n              onClick={handleAddToCart}\n              className=\"w-full h-12 text-lg font-medium\"\n              size=\"lg\"\n            >\n              <div className=\"flex items-center justify-between w-full\">\n                <span>Add to Cart</span>\n                <span>₹{calculatePrice()}</span>\n              </div>\n            </Button>\n          </div>\n        </Drawer.Content>\n      </Drawer.Portal>\n    </Drawer.Root>\n  )\n}\n\nexport { MealOrderDrawer, type MealItem }","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/menubar.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/navigation-menu.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/pagination.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/paper-shaders-background.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/popover.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/progress.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/radio-group.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/resizable.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/scroll-area.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/select.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/separator.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sheet.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sidebar.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/skeleton.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/slider.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/smart-popover.tsx",["2409","2410"],[],"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\nimport { motion, AnimatePresence } from \"framer-motion\"\nimport { MoreHorizontal, Heart, Share2, Flag, Star, Clock, MapPin } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Separator } from \"@/components/ui/separator\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\ninterface PopoverContentProps extends \n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content> {\n  variant?: 'default' | 'menu' | 'profile' | 'meal-actions'\n}\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  PopoverContentProps\n>(({ className, align = \"center\", sideOffset = 4, variant = 'default', ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <AnimatePresence>\n      <PopoverPrimitive.Content\n        ref={ref}\n        align={align}\n        sideOffset={sideOffset}\n        asChild\n        {...props}\n      >\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95, y: -10 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.95, y: -10 }}\n          transition={{ \n            type: \"spring\", \n            stiffness: 300, \n            damping: 30,\n            duration: 0.2 \n          }}\n          className={cn(\n            \"z-50 w-72 rounded-md border border-slate-200 bg-white p-1 text-slate-950 shadow-md outline-none dark:border-slate-800 dark:bg-slate-950 dark:text-slate-50\",\n            variant === 'menu' && \"min-w-48\",\n            variant === 'profile' && \"w-80\",\n            variant === 'meal-actions' && \"w-56\",\n            className\n          )}\n        >\n          {props.children}\n        </motion.div>\n      </PopoverPrimitive.Content>\n    </AnimatePresence>\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\n// Quick Action Item Component\ninterface PopoverActionProps {\n  icon: React.ReactNode\n  label: string\n  description?: string\n  shortcut?: string\n  variant?: 'default' | 'destructive' | 'success'\n  onClick?: () => void\n  disabled?: boolean\n}\n\nconst PopoverAction = React.forwardRef<\n  HTMLButtonElement,\n  PopoverActionProps\n>(({ \n  icon, \n  label, \n  description, \n  shortcut, \n  variant = 'default', \n  onClick, \n  disabled = false,\n  ...props \n}, ref) => (\n  <motion.button\n    ref={ref}\n    whileTap={{ scale: 0.98 }}\n    className={cn(\n      \"flex w-full items-center rounded-sm px-3 py-2 text-sm transition-colors hover:bg-slate-100 focus:bg-slate-100 focus:outline-none disabled:pointer-events-none disabled:opacity-50 dark:hover:bg-slate-800 dark:focus:bg-slate-800\",\n      variant === 'destructive' && \"text-red-600 hover:bg-red-50 focus:bg-red-50 dark:text-red-400 dark:hover:bg-red-950/20 dark:focus:bg-red-950/20\",\n      variant === 'success' && \"text-green-600 hover:bg-green-50 focus:bg-green-50 dark:text-green-400 dark:hover:bg-green-950/20 dark:focus:bg-green-950/20\"\n    )}\n    onClick={onClick}\n    disabled={disabled}\n    {...props}\n  >\n    <div className=\"mr-3 flex h-4 w-4 items-center justify-center\">\n      {icon}\n    </div>\n    <div className=\"flex-1 text-left\">\n      <div className=\"font-medium\">{label}</div>\n      {description && (\n        <div className=\"text-xs text-slate-500 dark:text-slate-400\">{description}</div>\n      )}\n    </div>\n    {shortcut && (\n      <div className=\"ml-2 text-xs text-slate-400 dark:text-slate-500\">\n        {shortcut}\n      </div>\n    )}\n  </motion.button>\n))\nPopoverAction.displayName = \"PopoverAction\"\n\n// Meal Quick Actions Popover\ninterface MealQuickActionsProps {\n  children: React.ReactNode\n  mealId: string\n  mealName: string\n  isFavorite?: boolean\n  onFavoriteToggle?: (mealId: string) => void\n  onViewNutrition?: (mealId: string) => void\n  onSetAlert?: (mealId: string) => void\n  onShare?: (mealId: string, mealName: string) => void\n  onReport?: (mealId: string) => void\n}\n\nconst MealQuickActions = ({\n  children,\n  mealId,\n  mealName,\n  isFavorite = false,\n  onFavoriteToggle,\n  onViewNutrition,\n  onSetAlert,\n  onShare,\n  onReport\n}: MealQuickActionsProps) => {\n  const [open, setOpen] = React.useState(false)\n\n  const handleAction = (action: () => void) => {\n    action()\n    setOpen(false)\n  }\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        {children}\n      </PopoverTrigger>\n      <PopoverContent variant=\"meal-actions\" align=\"end\">\n        <div className=\"py-1\">\n          {onFavoriteToggle && (\n            <PopoverAction\n              icon={<Heart className={cn(\"h-4 w-4\", isFavorite && \"fill-current text-red-500\")} />}\n              label={isFavorite ? \"Remove from Favorites\" : \"Add to Favorites\"}\n              variant={isFavorite ? 'default' : 'success'}\n              onClick={() => handleAction(() => onFavoriteToggle(mealId))}\n            />\n          )}\n          \n          {onViewNutrition && (\n            <PopoverAction\n              icon={<div className=\"text-blue-500\">📊</div>}\n              label=\"View Nutrition\"\n              description=\"Calories, protein, allergens\"\n              onClick={() => handleAction(() => onViewNutrition(mealId))}\n            />\n          )}\n\n          {onSetAlert && (\n            <PopoverAction\n              icon={<div className=\"text-orange-500\">⚠️</div>}\n              label=\"Set Dietary Alert\"\n              description=\"Get notified about ingredients\"\n              onClick={() => handleAction(() => onSetAlert(mealId))}\n            />\n          )}\n\n          <Separator className=\"my-1\" />\n\n          {onShare && (\n            <PopoverAction\n              icon={<Share2 className=\"h-4 w-4 text-slate-600\" />}\n              label=\"Share Meal\"\n              shortcut=\"⌘S\"\n              onClick={() => handleAction(() => onShare(mealId, mealName))}\n            />\n          )}\n\n          {onReport && (\n            <PopoverAction\n              icon={<Flag className=\"h-4 w-4 text-slate-600\" />}\n              label=\"Report Issue\"\n              variant=\"destructive\"\n              onClick={() => handleAction(() => onReport(mealId))}\n            />\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\n// Profile Quick Switcher for Parents\ninterface ChildProfile {\n  id: string\n  name: string\n  avatar: string\n  balance: number\n  recentOrder?: string\n  dietaryRestrictions: string[]\n  grade?: string\n}\n\ninterface ProfileSwitcherProps {\n  children: React.ReactNode\n  currentProfile: ChildProfile\n  profiles: ChildProfile[]\n  onProfileSwitch: (profileId: string) => void\n  onManageProfiles?: () => void\n  onAddFunds?: (profileId: string) => void\n}\n\nconst ProfileSwitcher = ({\n  children,\n  currentProfile,\n  profiles,\n  onProfileSwitch,\n  onManageProfiles,\n  onAddFunds\n}: ProfileSwitcherProps) => {\n  const [open, setOpen] = React.useState(false)\n\n  const handleSwitch = (profileId: string) => {\n    onProfileSwitch(profileId)\n    setOpen(false)\n  }\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        {children}\n      </PopoverTrigger>\n      <PopoverContent variant=\"profile\">\n        <div className=\"py-2\">\n          <div className=\"px-3 py-2 mb-2\">\n            <h3 className=\"font-semibold text-sm text-slate-900 dark:text-slate-100\">\n              Switch Profile\n            </h3>\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n              Manage multiple children's accounts\n            </p>\n          </div>\n\n          <div className=\"space-y-1\">\n            {profiles.map((profile) => (\n              <motion.button\n                key={profile.id}\n                whileTap={{ scale: 0.98 }}\n                className={cn(\n                  \"flex w-full items-center space-x-3 rounded-sm px-3 py-2 text-sm transition-colors hover:bg-slate-100 focus:bg-slate-100 focus:outline-none dark:hover:bg-slate-800 dark:focus:bg-slate-800\",\n                  currentProfile.id === profile.id && \"bg-slate-100 dark:bg-slate-800\"\n                )}\n                onClick={() => handleSwitch(profile.id)}\n              >\n                <img\n                  src={profile.avatar}\n                  alt={profile.name}\n                  className=\"h-8 w-8 rounded-full object-cover\"\n                />\n                <div className=\"flex-1 text-left\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"font-medium\">{profile.name}</span>\n                    {profile.grade && (\n                      <span className=\"text-xs bg-slate-200 dark:bg-slate-700 px-1.5 py-0.5 rounded\">\n                        {profile.grade}\n                      </span>\n                    )}\n                  </div>\n                  <div className=\"flex items-center space-x-4 mt-1\">\n                    <span className=\"text-xs text-green-600 font-medium\">\n                      ₹{profile.balance}\n                    </span>\n                    {profile.recentOrder && (\n                      <span className=\"text-xs text-slate-500 truncate max-w-24\">\n                        {profile.recentOrder}\n                      </span>\n                    )}\n                  </div>\n                  {profile.dietaryRestrictions.length > 0 && (\n                    <div className=\"flex items-center space-x-1 mt-1\">\n                      {profile.dietaryRestrictions.slice(0, 2).map((restriction, idx) => (\n                        <span key={idx} className=\"text-xs bg-orange-100 dark:bg-orange-900/20 text-orange-700 dark:text-orange-400 px-1 py-0.5 rounded\">\n                          {restriction}\n                        </span>\n                      ))}\n                      {profile.dietaryRestrictions.length > 2 && (\n                        <span className=\"text-xs text-slate-400\">\n                          +{profile.dietaryRestrictions.length - 2}\n                        </span>\n                      )}\n                    </div>\n                  )}\n                </div>\n                {onAddFunds && profile.balance < 100 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"h-6 px-2 text-xs\"\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onAddFunds(profile.id)\n                      setOpen(false)\n                    }}\n                  >\n                    Top Up\n                  </Button>\n                )}\n              </motion.button>\n            ))}\n          </div>\n\n          {onManageProfiles && (\n            <>\n              <Separator className=\"my-2\" />\n              <PopoverAction\n                icon={<div className=\"text-slate-500\">⚙️</div>}\n                label=\"Manage Profiles\"\n                description=\"Add, edit, or remove children\"\n                onClick={() => {\n                  onManageProfiles()\n                  setOpen(false)\n                }}\n              />\n            </>\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\n// Order Status Quick Actions\ninterface OrderStatusPopoverProps {\n  children: React.ReactNode\n  orderId: string\n  status: 'pending' | 'preparing' | 'ready' | 'delivered'\n  estimatedTime?: number\n  onTrackOrder?: (orderId: string) => void\n  onContactSupport?: (orderId: string) => void\n  onReorder?: (orderId: string) => void\n  onCancelOrder?: (orderId: string) => void\n}\n\nconst OrderStatusPopover = ({\n  children,\n  orderId,\n  status,\n  estimatedTime,\n  onTrackOrder,\n  onContactSupport,\n  onReorder,\n  onCancelOrder\n}: OrderStatusPopoverProps) => {\n  const [open, setOpen] = React.useState(false)\n\n  const handleAction = (action: () => void) => {\n    action()\n    setOpen(false)\n  }\n\n  const canCancel = status === 'pending'\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        {children}\n      </PopoverTrigger>\n      <PopoverContent variant=\"menu\">\n        <div className=\"py-1\">\n          <div className=\"px-3 py-2 mb-2 border-b\">\n            <div className=\"flex items-center space-x-2\">\n              <div className={cn(\n                \"w-2 h-2 rounded-full\",\n                status === 'pending' && \"bg-yellow-500\",\n                status === 'preparing' && \"bg-blue-500 animate-pulse\",\n                status === 'ready' && \"bg-green-500\",\n                status === 'delivered' && \"bg-gray-500\"\n              )} />\n              <span className=\"font-medium text-sm capitalize\">{status}</span>\n            </div>\n            {estimatedTime && status !== 'delivered' && (\n              <div className=\"flex items-center space-x-1 mt-1 text-xs text-slate-500\">\n                <Clock className=\"h-3 w-3\" />\n                <span>{estimatedTime} min remaining</span>\n              </div>\n            )}\n          </div>\n\n          {onTrackOrder && (\n            <PopoverAction\n              icon={<MapPin className=\"h-4 w-4 text-blue-500\" />}\n              label=\"Track Order\"\n              description=\"See real-time progress\"\n              onClick={() => handleAction(() => onTrackOrder(orderId))}\n            />\n          )}\n\n          {onReorder && (\n            <PopoverAction\n              icon={<div className=\"text-green-500\">🔄</div>}\n              label=\"Order Again\"\n              description=\"Repeat this order\"\n              onClick={() => handleAction(() => onReorder(orderId))}\n            />\n          )}\n\n          <Separator className=\"my-1\" />\n\n          {onContactSupport && (\n            <PopoverAction\n              icon={<div className=\"text-blue-500\">💬</div>}\n              label=\"Contact Support\"\n              description=\"Get help with this order\"\n              onClick={() => handleAction(() => onContactSupport(orderId))}\n            />\n          )}\n\n          {onCancelOrder && canCancel && (\n            <PopoverAction\n              icon={<div className=\"text-red-500\">❌</div>}\n              label=\"Cancel Order\"\n              description=\"Cancel before preparation\"\n              variant=\"destructive\"\n              onClick={() => handleAction(() => onCancelOrder(orderId))}\n            />\n          )}\n        </div>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nexport { \n  Popover, \n  PopoverTrigger, \n  PopoverContent, \n  PopoverAction,\n  MealQuickActions,\n  ProfileSwitcher,\n  OrderStatusPopover,\n  type ChildProfile\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/sonner.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/switch.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/table.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/tabs.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/textarea.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toast.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toggle-group.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/toggle.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/ui/tooltip.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/AuthContext.tsx",["2411","2412","2413","2414","2415","2416","2417"],[],"'use client';\n\n/**\n * HASIVU Platform - Authentication Context Provider\n * Wraps Redux auth state with React Context for easy access\n * Handles token refresh, session management, and auth methods\n */\n\nimport React, { createContext, useContext, useEffect, useCallback, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { toast } from 'react-hot-toast';\nimport { useAppDispatch, useAppSelector } from '@/store';\nimport { \n  loginUser, \n  logoutUser, \n  refreshToken, \n  clearError, \n  updateLastActivity, \n  updateUserProfile,\n  clearAuth,\n  getCurrentUser\n} from '@/store/slices/authSlice';\n\n// Import UserRole from constants for consistency\nimport { UserRole } from '@/utils/constants';\n\n// User types definition\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  schoolId?: string;\n  phone?: string;\n  avatar?: string;\n  isActive: boolean;\n  emailVerified: boolean;\n  lastLogin?: string;\n  createdAt: string;\n  preferences?: UserPreferences;\n}\n\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'system';\n  language: string;\n  notifications: {\n    email: boolean;\n    push: boolean;\n    sms: boolean;\n    orderUpdates: boolean;\n    promotions: boolean;\n  };\n  dietary: {\n    restrictions: string[];\n    allergies: string[];\n    preferences: string[];\n  };\n}\n\n// Login credentials interface\nexport interface LoginCredentials {\n  email: string;\n  password: string;\n}\n\n// Auth context interface\nexport interface AuthContextType {\n  // State\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  lastActivity: number;\n\n  // Auth methods\n  login: (credentials: LoginCredentials) => Promise<void>;\n  logout: () => Promise<void>;\n  register: (userData: RegisterData) => Promise<void>;\n  refreshAccessToken: () => Promise<void>;\n  \n  // User methods\n  updateProfile: (updates: Partial<User>) => void;\n  clearAuthError: () => void;\n  updateActivity: () => void;\n  \n  // Utility methods\n  hasRole: (role: UserRole) => boolean;\n  hasAnyRole: (roles: UserRole[]) => boolean;\n  isSessionValid: () => boolean;\n  getTimeUntilExpiry: () => number;\n}\n\nexport interface RegisterData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role: UserRole;\n  phone?: string;\n  schoolId?: string;\n}\n\n// Create context\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Session timeout configuration (30 minutes)\nconst SESSION_TIMEOUT = 30 * 60 * 1000;\nconst REFRESH_THRESHOLD = 5 * 60 * 1000; // Refresh 5 minutes before expiry\n\n/**\n * Auth Provider Component\n */\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const dispatch = useAppDispatch();\n  const router = useRouter();\n  \n  // Get auth state from Redux\n  const { \n    user, \n    token, \n    refreshToken: refreshTokenValue, \n    isAuthenticated, \n    isLoading, \n    error, \n    lastActivity \n  } = useAppSelector((state) => state.auth);\n\n  /**\n   * Login method\n   */\n  const login = useCallback(async (credentials: LoginCredentials): Promise<void> => {\n    try {\n      await dispatch(loginUser(credentials)).unwrap();\n      toast.success('Login successful!');\n      \n      // Redirect based on user role\n      const redirectPath = getRedirectPath(user?.role);\n      router.push(redirectPath);\n    } catch (error: any) {\n      const errorMessage = error.message || 'Login failed';\n      toast.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [dispatch, router, user?.role]);\n\n  /**\n   * Logout method\n   */\n  const logout = useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(logoutUser()).unwrap();\n      toast.success('Logged out successfully');\n      router.push('/auth/login');\n    } catch (error: any) {\n      // Even if API call fails, clear local auth state\n      dispatch(clearAuth());\n      router.push('/auth/login');\n      console.error('Logout error:', error);\n    }\n  }, [dispatch, router]);\n\n  /**\n   * Register method\n   */\n  const register = useCallback(async (userData: RegisterData): Promise<void> => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      \n      const result = await response.json();\n      toast.success('Registration successful! Please verify your email.');\n      \n      // Optionally auto-login after registration\n      if (result.autoLogin) {\n        await login({ email: userData.email, password: userData.password });\n      } else {\n        router.push('/auth/login');\n      }\n    } catch (error: any) {\n      const errorMessage = error.message || 'Registration failed';\n      toast.error(errorMessage);\n      throw new Error(errorMessage);\n    }\n  }, [login, router]);\n\n  /**\n   * Refresh access token\n   */\n  const refreshAccessToken = useCallback(async (): Promise<void> => {\n    try {\n      await dispatch(refreshToken()).unwrap();\n      dispatch(updateLastActivity());\n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      await logout();\n    }\n  }, [dispatch, logout]);\n\n  /**\n   * Update user profile\n   */\n  const updateProfile = useCallback((updates: Partial<User>) => {\n    dispatch(updateUserProfile(updates));\n  }, [dispatch]);\n\n  /**\n   * Clear auth error\n   */\n  const clearAuthError = useCallback(() => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  /**\n   * Update last activity timestamp\n   */\n  const updateActivity = useCallback(() => {\n    dispatch(updateLastActivity());\n  }, [dispatch]);\n\n  /**\n   * Check if user has specific role\n   */\n  const hasRole = useCallback((role: UserRole): boolean => {\n    return user?.role === role;\n  }, [user?.role]);\n\n  /**\n   * Check if user has any of the specified roles\n   */\n  const hasAnyRole = useCallback((roles: UserRole[]): boolean => {\n    return user ? roles.includes(user.role) : false;\n  }, [user]);\n\n  /**\n   * Check if session is still valid\n   */\n  const isSessionValid = useCallback((): boolean => {\n    if (!isAuthenticated || !token || !lastActivity) return false;\n    const timeSinceActivity = Date.now() - lastActivity;\n    return timeSinceActivity < SESSION_TIMEOUT;\n  }, [isAuthenticated, token, lastActivity]);\n\n  /**\n   * Get time until session expiry in milliseconds\n   */\n  const getTimeUntilExpiry = useCallback((): number => {\n    if (!lastActivity) return 0;\n    const expiry = lastActivity + SESSION_TIMEOUT;\n    return Math.max(0, expiry - Date.now());\n  }, [lastActivity]);\n\n  /**\n   * Get redirect path based on user role\n   */\n  const getRedirectPath = (role?: UserRole): string => {\n    switch (role) {\n      case 'student':\n        return '/student/dashboard';\n      case 'parent':\n        return '/parent/dashboard';\n      case 'teacher':\n        return '/teacher/dashboard';\n      case 'admin':\n      case 'school_admin':\n        return '/admin/dashboard';\n      case 'vendor':\n        return '/kitchen/dashboard';\n      case 'delivery_partner':\n        return '/delivery/dashboard';\n      default:\n        return '/dashboard';\n    }\n  };\n\n  /**\n   * Auto token refresh effect\n   */\n  useEffect(() => {\n    if (!isAuthenticated || !token || !refreshTokenValue) return;\n\n    const timeUntilExpiry = getTimeUntilExpiry();\n    \n    // If session is expired, logout\n    if (timeUntilExpiry <= 0) {\n      logout();\n      return;\n    }\n\n    // Set up auto-refresh timer\n    const refreshTime = Math.max(1000, timeUntilExpiry - REFRESH_THRESHOLD);\n    const refreshTimer = setTimeout(() => {\n      refreshAccessToken();\n    }, refreshTime);\n\n    return () => clearTimeout(refreshTimer);\n  }, [isAuthenticated, token, refreshTokenValue, getTimeUntilExpiry, logout, refreshAccessToken]);\n\n  /**\n   * Activity tracking effect\n   */\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const handleUserActivity = () => {\n      updateActivity();\n    };\n\n    // Track user activity\n    const events = ['mousedown', 'keydown', 'scroll', 'touchstart'];\n    events.forEach(event => {\n      document.addEventListener(event, handleUserActivity, { passive: true });\n    });\n\n    return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleUserActivity);\n      });\n    };\n  }, [isAuthenticated, updateActivity]);\n\n  /**\n   * Route protection effect\n   * Note: Using window.location.pathname for Next.js App Router compatibility\n   */\n  useEffect(() => {\n    if (typeof window === 'undefined') return;\n    \n    const publicRoutes = ['/auth/login', '/auth/register', '/auth/forgot-password', '/', '/about', '/contact'];\n    const currentPath = window.location.pathname;\n    \n    // Redirect authenticated users away from auth pages\n    if (isAuthenticated && currentPath.startsWith('/auth/')) {\n      const redirectPath = getRedirectPath(user?.role);\n      router.replace(redirectPath);\n    }\n    \n    // Redirect unauthenticated users to login (except for public routes)\n    if (!isAuthenticated && !publicRoutes.includes(currentPath) && !currentPath.startsWith('/auth/')) {\n      router.replace('/auth/login');\n    }\n  }, [isAuthenticated, user?.role, router]);\n\n  /**\n   * Error handling effect\n   */\n  useEffect(() => {\n    if (error) {\n      toast.error(error);\n      // Auto-clear error after showing\n      const timer = setTimeout(() => {\n        clearAuthError();\n      }, 5000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [error, clearAuthError]);\n\n  // Context value\n  const contextValue: AuthContextType = {\n    // State\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    error,\n    lastActivity,\n\n    // Auth methods\n    login,\n    logout,\n    register,\n    refreshAccessToken,\n\n    // User methods\n    updateProfile,\n    clearAuthError,\n    updateActivity,\n\n    // Utility methods\n    hasRole,\n    hasAnyRole,\n    isSessionValid,\n    getTimeUntilExpiry,\n  };\n\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;\n};\n\n/**\n * Custom hook to use Auth context\n */\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Helper hooks\nexport const useUser = () => {\n  const { user } = useAuth();\n  return user;\n};\n\nexport const useAuthStatus = () => {\n  const { isAuthenticated, isLoading } = useAuth();\n  return { isAuthenticated, isLoading };\n};\n\nexport const useAuthActions = () => {\n  const { login, logout, register, refreshAccessToken } = useAuth();\n  return { login, logout, register, refreshAccessToken };\n};\n\nexport default AuthContext;","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/SocketContext.tsx",["2418","2419","2420","2421","2422","2423","2424","2425","2426","2427","2428","2429","2430","2431","2432","2433","2434"],[],"/**\n * HASIVU Platform - WebSocket Context Provider\n * Manages WebSocket connection for real-time features\n * Handles orders, notifications, RFID events, and system updates\n */\n\nimport React, { createContext, useContext, useEffect, useCallback, useRef, ReactNode, useState } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\nimport { useAppDispatch } from '@/store';\nimport { updateOrder, addOrder } from '@/store/slices/orderSlice';\n\n// WebSocket message types\nexport type SocketEventType = \n  | 'order_status_update'\n  | 'new_order'\n  | 'order_cancelled'\n  | 'payment_update'\n  | 'rfid_scan'\n  | 'delivery_update'\n  | 'kitchen_update'\n  | 'notification'\n  | 'system_message'\n  | 'user_connected'\n  | 'user_disconnected'\n  | 'ping'\n  | 'pong'\n  | 'join_room'\n  | 'leave_room';\n\n// WebSocket message interface\nexport interface SocketMessage {\n  type: SocketEventType;\n  payload: any;\n  timestamp: number;\n  userId?: string;\n  schoolId?: string;\n}\n\n// Order status update payload\nexport interface OrderStatusUpdate {\n  orderId: string;\n  status: 'pending' | 'confirmed' | 'preparing' | 'ready' | 'out_for_delivery' | 'delivered' | 'cancelled';\n  estimatedTime?: number;\n  message?: string;\n  kitchen_notes?: string;\n}\n\n// RFID scan event payload\nexport interface RFIDScanEvent {\n  cardId: string;\n  studentId: string;\n  schoolId: string;\n  timestamp: number;\n  location: string;\n  action: 'entry' | 'exit' | 'meal_verification' | 'access_granted' | 'access_denied';\n  orderId?: string;\n}\n\n// Notification payload\nexport interface NotificationPayload {\n  id: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  title: string;\n  message: string;\n  userId?: string;\n  schoolId?: string;\n  actions?: {\n    label: string;\n    action: string;\n    url?: string;\n  }[];\n  persistent?: boolean;\n  autoClose?: number;\n}\n\n// Connection states\nexport type ConnectionState = 'connecting' | 'connected' | 'disconnected' | 'reconnecting' | 'error';\n\n// Socket context interface\nexport interface SocketContextType {\n  // Connection state\n  isConnected: boolean;\n  connectionState: ConnectionState;\n  lastConnected?: Date;\n  reconnectAttempts: number;\n\n  // Socket methods\n  connect: () => void;\n  disconnect: () => void;\n  reconnect: () => void;\n  \n  // Messaging methods\n  sendMessage: (type: SocketEventType, payload: any) => void;\n  subscribe: (eventType: SocketEventType, callback: (data: any) => void) => () => void;\n  \n  // Room management\n  joinRoom: (roomId: string) => void;\n  leaveRoom: (roomId: string) => void;\n  joinSchoolRoom: () => void;\n  joinUserRoom: () => void;\n  \n  // Utility methods\n  getConnectionStats: () => ConnectionStats;\n  clearReconnectAttempts: () => void;\n}\n\nexport interface ConnectionStats {\n  isConnected: boolean;\n  connectionState: ConnectionState;\n  lastConnected?: Date;\n  reconnectAttempts: number;\n  totalReconnects: number;\n  uptime?: number;\n  latency?: number;\n}\n\n// Create context\nconst SocketContext = createContext<SocketContextType | undefined>(undefined);\n\n// Socket configuration\nconst SOCKET_CONFIG = {\n  url: process.env.NEXT_PUBLIC_SOCKET_URL || 'ws://localhost:8001/ws',\n  reconnectInterval: 3000,\n  maxReconnectAttempts: 10,\n  heartbeatInterval: 30000,\n  connectionTimeout: 10000,\n};\n\n/**\n * Socket Provider Component\n */\nexport const SocketProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const { user, token, isAuthenticated } = useAuth();\n  const dispatch = useAppDispatch();\n  \n  // Socket state\n  const [isConnected, setIsConnected] = useState(false);\n  const [connectionState, setConnectionState] = useState<ConnectionState>('disconnected');\n  const [lastConnected, setLastConnected] = useState<Date | undefined>();\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\n  const [totalReconnects, setTotalReconnects] = useState(0);\n  \n  // Refs for socket and timers\n  const socketRef = useRef<WebSocket | null>(null);\n  const reconnectTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const heartbeatTimerRef = useRef<NodeJS.Timeout | null>(null);\n  const connectionTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const subscriptionsRef = useRef<Map<SocketEventType, Set<(data: any) => void>>>(new Map());\n  const connectTimeRef = useRef<Date | null>(null);\n  const latencyRef = useRef<number | undefined>();\n\n  /**\n   * Clear all timers\n   */\n  const clearTimers = useCallback(() => {\n    if (reconnectTimerRef.current) {\n      clearTimeout(reconnectTimerRef.current);\n      reconnectTimerRef.current = null;\n    }\n    if (heartbeatTimerRef.current) {\n      clearInterval(heartbeatTimerRef.current);\n      heartbeatTimerRef.current = null;\n    }\n    if (connectionTimeoutRef.current) {\n      clearTimeout(connectionTimeoutRef.current);\n      connectionTimeoutRef.current = null;\n    }\n  }, []);\n\n  /**\n   * Start heartbeat to keep connection alive\n   */\n  const startHeartbeat = useCallback(() => {\n    if (heartbeatTimerRef.current) {\n      clearInterval(heartbeatTimerRef.current);\n    }\n    \n    heartbeatTimerRef.current = setInterval(() => {\n      if (socketRef.current?.readyState === WebSocket.OPEN) {\n        const pingTime = Date.now();\n        sendMessage('ping', { timestamp: pingTime });\n      }\n    }, SOCKET_CONFIG.heartbeatInterval);\n  }, []);\n\n  /**\n   * Handle WebSocket connection\n   */\n  const connect = useCallback(() => {\n    if (!isAuthenticated || !token) return;\n    \n    if (socketRef.current?.readyState === WebSocket.OPEN || \n        socketRef.current?.readyState === WebSocket.CONNECTING) {\n      return;\n    }\n\n    clearTimers();\n    setConnectionState('connecting');\n    connectTimeRef.current = new Date();\n\n    try {\n      const wsUrl = `${SOCKET_CONFIG.url}?token=${encodeURIComponent(token)}&userId=${user?.id}`;\n      socketRef.current = new WebSocket(wsUrl);\n\n      // Connection timeout\n      connectionTimeoutRef.current = setTimeout(() => {\n        if (socketRef.current?.readyState !== WebSocket.OPEN) {\n          socketRef.current?.close();\n          setConnectionState('error');\n          handleReconnect();\n        }\n      }, SOCKET_CONFIG.connectionTimeout);\n\n      // Connection opened\n      socketRef.current.onopen = () => {\n        clearTimeout(connectionTimeoutRef.current!);\n        setIsConnected(true);\n        setConnectionState('connected');\n        setLastConnected(new Date());\n        setReconnectAttempts(0);\n        startHeartbeat();\n        \n        // Join relevant rooms\n        joinUserRoom();\n        if (user?.schoolId) {\n          joinSchoolRoom();\n        }\n        \n        toast.success('Connected to real-time updates');\n      };\n\n      // Message received\n      socketRef.current.onmessage = (event) => {\n        try {\n          const message: SocketMessage = JSON.parse(event.data);\n          handleMessage(message);\n        } catch (error) {\n          console.error('Failed to parse socket message:', error);\n        }\n      };\n\n      // Connection closed\n      socketRef.current.onclose = (event) => {\n        setIsConnected(false);\n        setConnectionState('disconnected');\n        clearTimers();\n        \n        if (!event.wasClean && isAuthenticated) {\n          handleReconnect();\n        }\n      };\n\n      // Connection error\n      socketRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setConnectionState('error');\n        if (isConnected) {\n          toast.error('Connection lost. Attempting to reconnect...');\n        }\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n      setConnectionState('error');\n      handleReconnect();\n    }\n  }, [isAuthenticated, token, user?.id, user?.schoolId, isConnected]);\n\n  /**\n   * Disconnect WebSocket\n   */\n  const disconnect = useCallback(() => {\n    clearTimers();\n    \n    if (socketRef.current) {\n      socketRef.current.close(1000, 'User disconnected');\n      socketRef.current = null;\n    }\n    \n    setIsConnected(false);\n    setConnectionState('disconnected');\n  }, [clearTimers]);\n\n  /**\n   * Handle reconnection logic\n   */\n  const handleReconnect = useCallback(() => {\n    if (reconnectAttempts >= SOCKET_CONFIG.maxReconnectAttempts) {\n      setConnectionState('error');\n      toast.error('Unable to connect to real-time updates');\n      return;\n    }\n\n    setConnectionState('reconnecting');\n    setReconnectAttempts(prev => prev + 1);\n    setTotalReconnects(prev => prev + 1);\n\n    reconnectTimerRef.current = setTimeout(() => {\n      connect();\n    }, SOCKET_CONFIG.reconnectInterval * Math.pow(1.5, reconnectAttempts));\n  }, [reconnectAttempts, connect]);\n\n  /**\n   * Manual reconnect\n   */\n  const reconnect = useCallback(() => {\n    disconnect();\n    setReconnectAttempts(0);\n    setTimeout(connect, 1000);\n  }, [disconnect, connect]);\n\n  /**\n   * Send message through WebSocket\n   */\n  const sendMessage = useCallback((type: SocketEventType, payload: any) => {\n    if (socketRef.current?.readyState !== WebSocket.OPEN) {\n      console.warn('Cannot send message: WebSocket not connected');\n      return;\n    }\n\n    const message: SocketMessage = {\n      type,\n      payload,\n      timestamp: Date.now(),\n      userId: user?.id,\n      schoolId: user?.schoolId,\n    };\n\n    try {\n      socketRef.current.send(JSON.stringify(message));\n    } catch (error) {\n      console.error('Failed to send WebSocket message:', error);\n    }\n  }, [user?.id, user?.schoolId]);\n\n  /**\n   * Subscribe to specific event types\n   */\n  const subscribe = useCallback((eventType: SocketEventType, callback: (data: any) => void) => {\n    if (!subscriptionsRef.current.has(eventType)) {\n      subscriptionsRef.current.set(eventType, new Set());\n    }\n    \n    subscriptionsRef.current.get(eventType)!.add(callback);\n    \n    // Return unsubscribe function\n    return () => {\n      const callbacks = subscriptionsRef.current.get(eventType);\n      if (callbacks) {\n        callbacks.delete(callback);\n        if (callbacks.size === 0) {\n          subscriptionsRef.current.delete(eventType);\n        }\n      }\n    };\n  }, []);\n\n  /**\n   * Handle incoming messages\n   */\n  const handleMessage = useCallback((message: SocketMessage) => {\n    // Calculate latency for pong messages\n    if (message.type === 'pong' && message.payload?.timestamp) {\n      latencyRef.current = Date.now() - message.payload.timestamp;\n    }\n\n    // Handle specific message types\n    switch (message.type) {\n      case 'order_status_update':\n        handleOrderStatusUpdate(message.payload as OrderStatusUpdate);\n        break;\n      case 'new_order':\n        dispatch(addOrder(message.payload));\n        toast.success('New order received!');\n        break;\n      case 'notification':\n        handleNotification(message.payload as NotificationPayload);\n        break;\n      case 'rfid_scan':\n        handleRFIDScan(message.payload as RFIDScanEvent);\n        break;\n      default:\n        // Generic handling for subscribed events\n        const callbacks = subscriptionsRef.current.get(message.type);\n        if (callbacks) {\n          callbacks.forEach(callback => {\n            try {\n              callback(message.payload);\n            } catch (error) {\n              console.error(`Error in socket callback for ${message.type}:`, error);\n            }\n          });\n        }\n    }\n  }, [dispatch]);\n\n  /**\n   * Handle order status updates\n   */\n  const handleOrderStatusUpdate = useCallback((update: OrderStatusUpdate) => {\n    dispatch(updateOrder({ \n      id: update.orderId, \n      status: update.status,\n      estimatedTime: update.estimatedTime,\n    } as any));\n    \n    const statusMessages = {\n      confirmed: 'Your order has been confirmed!',\n      preparing: 'Your order is being prepared',\n      ready: 'Your order is ready for pickup!',\n      out_for_delivery: 'Your order is on the way!',\n      delivered: 'Your order has been delivered!',\n      cancelled: 'Your order has been cancelled',\n    };\n    \n    const message = statusMessages[update.status];\n    if (message) {\n      toast.success(message);\n    }\n  }, [dispatch]);\n\n  /**\n   * Handle notifications\n   */\n  const handleNotification = useCallback((notification: NotificationPayload) => {\n    const toastOptions = {\n      duration: notification.autoClose || 4000,\n      id: notification.id,\n    };\n\n    switch (notification.type) {\n      case 'success':\n        toast.success(notification.message, toastOptions);\n        break;\n      case 'error':\n        toast.error(notification.message, toastOptions);\n        break;\n      case 'warning':\n        toast.error(notification.message, toastOptions); // Use error for warnings to make them more visible\n        break;\n      default:\n        toast(notification.message, toastOptions);\n    }\n  }, []);\n\n  /**\n   * Handle RFID scan events\n   */\n  const handleRFIDScan = useCallback((scan: RFIDScanEvent) => {\n    const actions = {\n      meal_verification: 'Meal verified successfully!',\n      access_granted: 'Access granted',\n      access_denied: 'Access denied',\n      entry: 'Entry recorded',\n      exit: 'Exit recorded',\n    };\n    \n    const message = actions[scan.action];\n    if (message) {\n      toast.success(`RFID: ${message}`);\n    }\n  }, []);\n\n  /**\n   * Join user-specific room\n   */\n  const joinUserRoom = useCallback(() => {\n    if (user?.id) {\n      sendMessage('join_room', { room: `user_${user.id}` });\n    }\n  }, [user?.id, sendMessage]);\n\n  /**\n   * Join school-specific room\n   */\n  const joinSchoolRoom = useCallback(() => {\n    if (user?.schoolId) {\n      sendMessage('join_room', { room: `school_${user.schoolId}` });\n    }\n  }, [user?.schoolId, sendMessage]);\n\n  /**\n   * Join specific room\n   */\n  const joinRoom = useCallback((roomId: string) => {\n    sendMessage('join_room', { room: roomId });\n  }, [sendMessage]);\n\n  /**\n   * Leave specific room\n   */\n  const leaveRoom = useCallback((roomId: string) => {\n    sendMessage('leave_room', { room: roomId });\n  }, [sendMessage]);\n\n  /**\n   * Get connection statistics\n   */\n  const getConnectionStats = useCallback((): ConnectionStats => {\n    return {\n      isConnected,\n      connectionState,\n      lastConnected,\n      reconnectAttempts,\n      totalReconnects,\n      uptime: connectTimeRef.current ? Date.now() - connectTimeRef.current.getTime() : undefined,\n      latency: latencyRef.current,\n    };\n  }, [isConnected, connectionState, lastConnected, reconnectAttempts, totalReconnects]);\n\n  /**\n   * Clear reconnect attempts\n   */\n  const clearReconnectAttempts = useCallback(() => {\n    setReconnectAttempts(0);\n  }, []);\n\n  // Auto-connect when authenticated\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      connect();\n    } else {\n      disconnect();\n    }\n    \n    return () => {\n      disconnect();\n    };\n  }, [isAuthenticated, token, connect, disconnect]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      clearTimers();\n      disconnect();\n    };\n  }, [clearTimers, disconnect]);\n\n  // Context value\n  const contextValue: SocketContextType = {\n    // Connection state\n    isConnected,\n    connectionState,\n    lastConnected,\n    reconnectAttempts,\n\n    // Socket methods\n    connect,\n    disconnect,\n    reconnect,\n\n    // Messaging methods\n    sendMessage,\n    subscribe,\n\n    // Room management\n    joinRoom,\n    leaveRoom,\n    joinSchoolRoom,\n    joinUserRoom,\n\n    // Utility methods\n    getConnectionStats,\n    clearReconnectAttempts,\n  };\n\n  return <SocketContext.Provider value={contextValue}>{children}</SocketContext.Provider>;\n};\n\n/**\n * Custom hook to use Socket context\n */\nexport const useSocket = (): SocketContextType => {\n  const context = useContext(SocketContext);\n  if (context === undefined) {\n    throw new Error('useSocket must be used within a SocketProvider');\n  }\n  return context;\n};\n\n// Helper hooks\nexport const useSocketConnection = () => {\n  const { isConnected, connectionState, reconnect } = useSocket();\n  return { isConnected, connectionState, reconnect };\n};\n\nexport const useSocketSubscription = (eventType: SocketEventType, callback: (data: any) => void) => {\n  const { subscribe } = useSocket();\n  \n  useEffect(() => {\n    const unsubscribe = subscribe(eventType, callback);\n    return unsubscribe;\n  }, [subscribe, eventType, callback]);\n};\n\nexport const useRealTimeOrders = () => {\n  const dispatch = useAppDispatch();\n  \n  useSocketSubscription('order_status_update', (update: OrderStatusUpdate) => {\n    dispatch(updateOrder({ \n      id: update.orderId, \n      status: update.status,\n      estimatedTime: update.estimatedTime,\n    } as any));\n  });\n  \n  useSocketSubscription('new_order', (order: any) => {\n    dispatch(addOrder(order));\n  });\n};\n\nexport default SocketContext;","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/auth-context.tsx",["2435","2436","2437","2438"],[],"'use client';\n\n/**\n * HASIVU Platform - Simplified Authentication Context for Demo\n */\n\nimport React, { createContext, useContext, useEffect, useState, useCallback } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { toast } from 'react-hot-toast';\n\n// Simple user type for demo\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n}\n\n// Simple credentials types\ninterface LoginCredentials {\n  email: string;\n  password: string;\n}\n\ninterface RegistrationData {\n  email: string;\n  password: string;\n  firstName: string;\n  lastName: string;\n  role?: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  isInitialized: boolean;\n}\n\ninterface AuthContextType extends AuthState {\n  login: (credentials: LoginCredentials) => Promise<boolean>;\n  register: (userData: RegistrationData) => Promise<boolean>;\n  logout: () => Promise<void>;\n  updateProfile: (data: Partial<User>) => Promise<boolean>;\n  changePassword: (data: {\n    currentPassword: string;\n    newPassword: string;\n    newPasswordConfirm: string;\n  }) => Promise<boolean>;\n  refreshProfile: () => Promise<void>;\n  checkAuth: () => Promise<boolean>;\n  forgotPassword: (email: string) => Promise<boolean>;\n  resetPassword: (token: string, password: string, passwordConfirm: string) => Promise<boolean>;\n  hasRole: (role: string | string[]) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [state, setState] = useState<AuthState>({\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    isInitialized: true,\n  });\n\n  const router = useRouter();\n\n  // Simple demo user for development\n  const demoUser: User = {\n    id: 'demo-user-1',\n    email: 'admin@hasivu.com',\n    firstName: 'Admin',\n    lastName: 'User',\n    role: 'admin'\n  };\n\n  // Simple login method for demo\n  const login = useCallback(async (credentials: LoginCredentials): Promise<boolean> => {\n    try {\n      setState(prev => ({ ...prev, isLoading: true }));\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Demo authentication - accept any email/password\n      if (credentials.email && credentials.password) {\n        setState({\n          user: demoUser,\n          isAuthenticated: true,\n          isLoading: false,\n          isInitialized: true,\n        });\n        \n        // Store demo token\n        if (typeof window !== 'undefined') {\n          localStorage.setItem('demoToken', 'demo-token-123');\n        }\n        \n        toast.success('Login successful!');\n        return true;\n      }\n      \n      toast.error('Please enter email and password');\n      return false;\n    } catch (error) {\n      console.error('Login error:', error);\n      toast.error('Login failed');\n      return false;\n    } finally {\n      setState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n\n  const register = useCallback(async (userData: RegistrationData): Promise<boolean> => {\n    try {\n      setState(prev => ({ ...prev, isLoading: true }));\n      \n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Demo registration\n      const newUser: User = {\n        id: 'demo-user-' + Date.now(),\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: userData.role || 'student'\n      };\n      \n      setState({\n        user: newUser,\n        isAuthenticated: true,\n        isLoading: false,\n        isInitialized: true,\n      });\n      \n      toast.success('Registration successful!');\n      return true;\n    } catch (error) {\n      console.error('Registration error:', error);\n      toast.error('Registration failed');\n      return false;\n    } finally {\n      setState(prev => ({ ...prev, isLoading: false }));\n    }\n  }, []);\n\n  const logout = useCallback(async (): Promise<void> => {\n    setState({\n      user: null,\n      isAuthenticated: false,\n      isLoading: false,\n      isInitialized: true,\n    });\n    \n    // Clear demo token\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('demoToken');\n    }\n    \n    toast.success('Logged out successfully');\n    router.push('/');\n  }, [router]);\n\n  // Simple demo methods\n  const updateProfile = useCallback(async (data: Partial<User>): Promise<boolean> => {\n    if (state.user) {\n      setState(prev => ({\n        ...prev,\n        user: prev.user ? { ...prev.user, ...data } : null\n      }));\n      toast.success('Profile updated successfully');\n      return true;\n    }\n    return false;\n  }, [state.user]);\n\n  const changePassword = useCallback(async (data: {\n    currentPassword: string;\n    newPassword: string;\n    newPasswordConfirm: string;\n  }): Promise<boolean> => {\n    // Simple validation\n    if (data.newPassword !== data.newPasswordConfirm) {\n      toast.error('Passwords do not match');\n      return false;\n    }\n    toast.success('Password changed successfully');\n    return true;\n  }, []);\n\n  const refreshProfile = useCallback(async (): Promise<void> => {\n    // Demo: do nothing\n  }, []);\n\n  const checkAuth = useCallback(async (): Promise<boolean> => {\n    // Check if demo token exists\n    if (typeof window !== 'undefined') {\n      const token = localStorage.getItem('demoToken');\n      if (token) {\n        setState(prev => ({\n          ...prev,\n          user: demoUser,\n          isAuthenticated: true,\n        }));\n        return true;\n      }\n    }\n    return false;\n  }, []);\n\n  const forgotPassword = useCallback(async (email: string): Promise<boolean> => {\n    toast.success('Password reset instructions sent to your email');\n    return true;\n  }, []);\n\n  const resetPassword = useCallback(async (\n    token: string, \n    password: string, \n    passwordConfirm: string\n  ): Promise<boolean> => {\n    if (password !== passwordConfirm) {\n      toast.error('Passwords do not match');\n      return false;\n    }\n    toast.success('Password reset successful');\n    return true;\n  }, []);\n\n  const hasRole = useCallback((role: string | string[]): boolean => {\n    if (!state.user) return false;\n    \n    const userRole = state.user.role;\n    if (Array.isArray(role)) {\n      return role.includes(userRole);\n    }\n    return userRole === role;\n  }, [state.user]);\n\n  const value: AuthContextType = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateProfile,\n    changePassword,\n    refreshProfile,\n    checkAuth,\n    forgotPassword,\n    resetPassword,\n    hasRole,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth(): AuthContextType {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\n// Helper function to get dashboard URL based on role\nfunction getDashboardUrl(role: string): string {\n  const dashboardUrls: Record<string, string> = {\n    admin: '/dashboard/admin',\n    teacher: '/dashboard/teacher',\n    parent: '/dashboard/parent',\n    student: '/dashboard/student',\n    vendor: '/dashboard/vendor',\n    kitchen_staff: '/dashboard/kitchen',\n  };\n  \n  return dashboardUrls[role] || '/dashboard';\n}\n\n// Higher-order component for protected routes\nexport function withAuth<P extends object>(Component: React.ComponentType<P>) {\n  return function AuthenticatedComponent(props: P) {\n    const { isAuthenticated, isLoading, isInitialized } = useAuth();\n    const router = useRouter();\n\n    useEffect(() => {\n      if (isInitialized && !isLoading && !isAuthenticated) {\n        const currentPath = router.asPath;\n        router.push(`/auth/login?redirect=${encodeURIComponent(currentPath)}`);\n      }\n    }, [isAuthenticated, isLoading, isInitialized, router]);\n\n    if (!isInitialized || isLoading) {\n      return (\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      );\n    }\n\n    if (!isAuthenticated) {\n      return null;\n    }\n\n    return <Component {...props} />;\n  };\n}\n\n// Hook for role-based access control\nexport function useRoleGuard(allowedRoles: string | string[]) {\n  const { hasRole, isAuthenticated, isLoading } = useAuth();\n  const router = useRouter();\n\n  useEffect(() => {\n    if (!isLoading && isAuthenticated && !hasRole(allowedRoles)) {\n      toast.error('Access denied. Insufficient permissions.');\n      router.push('/dashboard');\n    }\n  }, [hasRole, allowedRoles, isAuthenticated, isLoading, router]);\n\n  return {\n    hasAccess: hasRole(allowedRoles),\n    isLoading,\n  };\n}\n\nexport default AuthContext;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/contexts/integration-provider.tsx",["2439","2440","2441"],[],"/**\n * HASIVU Platform - Integration Provider\n * Main provider that orchestrates all backend integrations and real-time features\n */\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { AuthProvider } from './auth-context';\nimport { apiClient } from '../lib/api-client';\nimport { socketClient } from '../lib/socket-client';\nimport { toast, Toaster } from 'react-hot-toast';\n\ninterface IntegrationState {\n  isOnline: boolean;\n  apiHealth: {\n    status: 'healthy' | 'degraded' | 'down';\n    responseTime?: number;\n    lastCheck: Date;\n  };\n  socketStatus: {\n    connected: boolean;\n    reconnectAttempts: number;\n    lastConnected?: Date;\n  };\n  systemStatus: {\n    maintenance: boolean;\n    version: string;\n    environment: string;\n  };\n}\n\ninterface IntegrationContextType extends IntegrationState {\n  checkApiHealth: () => Promise<void>;\n  reconnectSocket: () => void;\n  getSystemInfo: () => Promise<any>;\n}\n\nconst IntegrationContext = createContext<IntegrationContextType | undefined>(undefined);\n\ninterface IntegrationProviderProps {\n  children: React.ReactNode;\n}\n\nexport function IntegrationProvider({ children }: IntegrationProviderProps) {\n  const [state, setState] = useState<IntegrationState>({\n    isOnline: navigator.onLine,\n    apiHealth: {\n      status: 'healthy',\n      lastCheck: new Date(),\n    },\n    socketStatus: {\n      connected: false,\n      reconnectAttempts: 0,\n    },\n    systemStatus: {\n      maintenance: false,\n      version: '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n    },\n  });\n\n  // Monitor online/offline status\n  useEffect(() => {\n    const handleOnline = () => {\n      setState(prev => ({ ...prev, isOnline: true }));\n      toast.success('Connection restored', { id: 'connection-status' });\n    };\n\n    const handleOffline = () => {\n      setState(prev => ({ ...prev, isOnline: false }));\n      toast.error('Connection lost', { id: 'connection-status', duration: Infinity });\n    };\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Monitor socket connection status\n  useEffect(() => {\n    const updateSocketStatus = () => {\n      const stats = socketClient.getConnectionStats();\n      setState(prev => ({\n        ...prev,\n        socketStatus: {\n          connected: stats.isConnected,\n          reconnectAttempts: stats.reconnectAttempts,\n          lastConnected: stats.lastConnected,\n        },\n      }));\n    };\n\n    const unsubscribe = socketClient.subscribe('connection_status', (data) => {\n      updateSocketStatus();\n      \n      if (data.status === 'connected') {\n        toast.dismiss('socket-disconnected');\n      } else if (data.status === 'disconnected') {\n        toast.error('Real-time updates disconnected', {\n          id: 'socket-disconnected',\n          duration: 5000,\n        });\n      }\n    });\n\n    // Initial status check\n    updateSocketStatus();\n\n    return unsubscribe;\n  }, []);\n\n  // API health check\n  const checkApiHealth = async () => {\n    try {\n      const startTime = Date.now();\n      const response = await apiClient.get('/health');\n      const responseTime = Date.now() - startTime;\n\n      setState(prev => ({\n        ...prev,\n        apiHealth: {\n          status: response.success ? 'healthy' : 'degraded',\n          responseTime,\n          lastCheck: new Date(),\n        },\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        apiHealth: {\n          status: 'down',\n          lastCheck: new Date(),\n        },\n      }));\n    }\n  };\n\n  // Socket reconnection\n  const reconnectSocket = () => {\n    socketClient.reconnect();\n    toast.loading('Reconnecting...', { id: 'socket-reconnecting' });\n  };\n\n  // Get system information\n  const getSystemInfo = async () => {\n    try {\n      const [versionResponse, statusResponse] = await Promise.all([\n        apiClient.get('/system/version'),\n        apiClient.get('/system/status'),\n      ]);\n\n      if (versionResponse.success && statusResponse.success) {\n        setState(prev => ({\n          ...prev,\n          systemStatus: {\n            maintenance: statusResponse.data.maintenance || false,\n            version: versionResponse.data.version || '1.0.0',\n            environment: versionResponse.data.environment || 'production',\n          },\n        }));\n\n        return {\n          version: versionResponse.data,\n          status: statusResponse.data,\n        };\n      }\n    } catch (error) {\n      console.error('Error getting system info:', error);\n    }\n\n    return null;\n  };\n\n  // Periodic health checks\n  useEffect(() => {\n    checkApiHealth();\n    getSystemInfo();\n\n    // Check API health every 60 seconds\n    const healthInterval = setInterval(checkApiHealth, 60000);\n\n    // Check system status every 5 minutes\n    const statusInterval = setInterval(getSystemInfo, 5 * 60 * 1000);\n\n    return () => {\n      clearInterval(healthInterval);\n      clearInterval(statusInterval);\n    };\n  }, []);\n\n  const value: IntegrationContextType = {\n    ...state,\n    checkApiHealth,\n    reconnectSocket,\n    getSystemInfo,\n  };\n\n  return (\n    <IntegrationContext.Provider value={value}>\n      <AuthProvider>\n        {children}\n        <Toaster\n          position=\"top-right\"\n          toastOptions={{\n            duration: 4000,\n            style: {\n              background: '#363636',\n              color: '#fff',\n            },\n            success: {\n              style: {\n                background: '#10b981',\n              },\n            },\n            error: {\n              style: {\n                background: '#ef4444',\n              },\n            },\n          }}\n        />\n      </AuthProvider>\n    </IntegrationContext.Provider>\n  );\n}\n\nexport function useIntegration(): IntegrationContextType {\n  const context = useContext(IntegrationContext);\n  if (context === undefined) {\n    throw new Error('useIntegration must be used within an IntegrationProvider');\n  }\n  return context;\n}\n\n// Connection status indicator component\nexport function ConnectionStatusIndicator() {\n  const { isOnline, apiHealth, socketStatus } = useIntegration();\n\n  const getStatusColor = () => {\n    if (!isOnline || apiHealth.status === 'down') return 'bg-red-500';\n    if (apiHealth.status === 'degraded' || !socketStatus.connected) return 'bg-yellow-500';\n    return 'bg-green-500';\n  };\n\n  const getStatusText = () => {\n    if (!isOnline) return 'Offline';\n    if (apiHealth.status === 'down') return 'API Down';\n    if (apiHealth.status === 'degraded') return 'Degraded';\n    if (!socketStatus.connected) return 'Real-time Disconnected';\n    return 'Connected';\n  };\n\n  return (\n    <div className=\"flex items-center space-x-2 text-sm\">\n      <div className={`w-2 h-2 rounded-full ${getStatusColor()}`} />\n      <span className=\"text-gray-600 dark:text-gray-300\">\n        {getStatusText()}\n      </span>\n      {apiHealth.responseTime && (\n        <span className=\"text-xs text-gray-500\">\n          ({apiHealth.responseTime}ms)\n        </span>\n      )}\n    </div>\n  );\n}\n\n// System maintenance banner\nexport function MaintenanceBanner() {\n  const { systemStatus } = useIntegration();\n\n  if (!systemStatus.maintenance) return null;\n\n  return (\n    <div className=\"bg-yellow-500 text-yellow-900 px-4 py-2 text-center text-sm font-medium\">\n      ⚠️ System maintenance in progress. Some features may be unavailable.\n    </div>\n  );\n}\n\n// Error boundary for integration errors\nexport class IntegrationErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean; error?: Error }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('Integration error:', error, errorInfo);\n    \n    // Report error to monitoring service\n    if (process.env.NODE_ENV === 'production') {\n      // Add error reporting here (e.g., Sentry)\n    }\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n          <div className=\"max-w-md w-full bg-white dark:bg-gray-800 shadow-lg rounded-lg p-6\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"flex-shrink-0\">\n                <svg className=\"h-8 w-8 text-red-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} \n                    d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.082 16.5c-.77.833.192 2.5 1.732 2.5z\" \n                  />\n                </svg>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  Something went wrong\n                </h3>\n                <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                  An error occurred while loading the application.\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"mt-4\">\n              <button\n                onClick={() => window.location.reload()}\n                className=\"w-full bg-red-600 hover:bg-red-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\n              >\n                Reload Application\n              </button>\n            </div>\n            \n            {process.env.NODE_ENV === 'development' && this.state.error && (\n              <details className=\"mt-4\">\n                <summary className=\"text-sm text-gray-500 cursor-pointer\">\n                  Error Details\n                </summary>\n                <pre className=\"mt-2 text-xs bg-gray-100 dark:bg-gray-700 p-3 rounded overflow-auto\">\n                  {this.state.error.stack}\n                </pre>\n              </details>\n            )}\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// Hook for API status monitoring\nexport function useApiStatus() {\n  const { apiHealth, checkApiHealth } = useIntegration();\n  \n  return {\n    status: apiHealth.status,\n    responseTime: apiHealth.responseTime,\n    lastCheck: apiHealth.lastCheck,\n    refresh: checkApiHealth,\n    isHealthy: apiHealth.status === 'healthy',\n  };\n}\n\n// Hook for real-time connection monitoring\nexport function useConnectionStatus() {\n  const { isOnline, socketStatus, reconnectSocket } = useIntegration();\n  \n  return {\n    isOnline,\n    socketConnected: socketStatus.connected,\n    reconnectAttempts: socketStatus.reconnectAttempts,\n    lastConnected: socketStatus.lastConnected,\n    reconnect: reconnectSocket,\n    isFullyConnected: isOnline && socketStatus.connected,\n  };\n}\n\nexport default IntegrationProvider;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-dashboard.ts",["2442"],[]," * HASIVU Platform - Dashboard Data Integration Hook\n * Real-time dashboard updates with analytics and live metrics;\nimport { useState, useCallback, useEffect, useMemo } from 'react';\nimport { api } from '../lib/api-client';\nimport { useAuth } from '../contexts/auth-context';\nimport { useLiveAnalytics } from './use-realtime';\n  }>;\n  }>;\n  recentOrders: any[];\n  notifications: any[];\n  isLoading: boolean;\n  lastUpdated: Date | null;\n// TODO: Refactor this function - it may be too long\n  const { user, hasRole } = useAuth();\n  const [dashboardData, setDashboardData] = useState<DashboardData>({}\n    orderTrends: { labels: [], datasets: [] },\n    revenueTrends: { labels: [], datasets: [] },\n    userEngagement: { labels: [], datasets: [] },\n    popularItems: [],\n    recentOrders: [],\n    notifications: [],\n    isLoading: false,\n    lastUpdated: null\n  const [refreshInterval, setRefreshInterval] = useState(30000);\n  const liveAnalytics = useLiveAnalytics(hasRole(['admin', 'teacher']) ? 'school' : 'user');\n  // Load dashboard data\n  const loadDashboardData = useCallback(async (\n      setDashboardData(prev => ({ ...prev, isLoading: true }));\n      const params = {}\n  // Load different data based on user role\n      const dataPromises = []\n];\n  // Add user engagement for admins/ teachers\n      if (hasRole(['admin', 'teacher'])) {}\n      const []\n] = await Promise.all(dataPromises);\n      // Process dashboard metrics\n      let metrics: DashboardMetrics = {}\n      if (dashboardResponse.success) {}\n        metrics = { ...metrics, ...dashboardResponse.data };\n  // Process chart data\n      let orderTrends: ChartData = { labels: [], datasets: [] };\n      if (orderStatsResponse.success) {}\n]\n      let revenueTrends: ChartData = { labels: [], datasets: [] };\n      if (revenueStatsResponse.success) {}\n]\n      let userEngagement: ChartData = { labels: [], datasets: [] };\n      if (userEngagementResponse?.success) {}\n]\n  // Process popular items\n      const popularItems = popularItemsResponse.success\n        ? popularItemsResponse.data.map((item: any) => ({}\n        : [];\n      setDashboardData({}\n      setDashboardData(prev => ({ ...prev, isLoading: false }));\n  }, [period, user, hasRole]);\n  // Apply live analytics updates\n  useEffect((\n        lastUpdated: new Date(value.timestamp)\n  }, [liveAnalytics.metrics]);\n  // Auto-refresh dashboard data\n  useEffect((\n  }, [loadDashboardData, refreshInterval]);\n  // Calculate percentage changes\n  const percentageChanges = useMemo((\n  }, [dashboardData.lastUpdated]);\n  // Export dashboard data\n  const exportDashboard = useCallback(async (format: 'pdf' | 'excel' = 'pdf'\n      if (response) {}\n        link.download = `dashboard-report-${period}.${format}``\n          { label: 'Total Revenue', value: `₹${dashboard.metrics.totalRevenue}``\n          { label: 'Customer Satisfaction', value: `${dashboard.metrics.customerSatisfaction}%``\n          { label: 'Today Revenue', value: `₹${dashboard.metrics.todayRevenue}``\n          { label: 'Today Revenue', value: `₹${dashboard.metrics.todayRevenue}``\n          { label: 'Avg Prep Time', value: `${dashboard.metrics.averageDeliveryTime}min``\n          { label: 'Fulfillment Rate', value: `${dashboard.metrics.orderFulfillmentRate}%``\n        { label: 'Wallet Balance', value: `₹${user?.wallet?.balance || 0}``\n        { label: 'This Month Spent', value: `₹${dashboard.metrics.monthlyRevenue}``\n        { label: 'Avg Order Value', value: `₹${dashboard.metrics.averageOrderValue}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-meal-ordering.ts",["2443"],[]," * HASIVU Platform - Meal Ordering Integration Hook\n * Complete meal ordering system with cart management, real-time updates, and payment integration;\nimport { useState, useCallback, useEffect, useReducer, useMemo } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { api, MealItem } from '../lib/api-client';\nimport { useAuth } from '../contexts/auth-context';\nimport { useOrderTracking } from './use-realtime';\nimport { usePaymentFlow } from './u se-payment';\ninterface CartItem extends MealItem {}\n  priceRange?: { min: number; max: number };\n  vendor?: string;\n  available?: boolean;\n  search?: string;\n// Cart reducer\ntype CartAction;\n  | { type: 'ADD_ITEM'; payload: { item: MealItem; quantity: number; notes?: string; customizations?: any } }\n  | { type: 'UPDATE_QUANTITY'; payload: { itemId: string; quantity: number } }\n  | { type: 'REMOVE_ITEM'; payload: { itemId: string } }\n  | { type: 'UPDATE_NOTES'; payload: { itemId: string; notes: string } }\n  | { type: 'UPDATE_CUSTOMIZATIONS'; payload: { itemId: string; customizations: any } }\n  | { type: 'CLEAR_CART' }\n  | { type: 'SET_LOADING'; payload: boolean }\n  | { type: 'LOAD_CART'; payload: CartItem[] };\nfunction cartReducer(state: CartState, action: CartAction): CartState {}\n      const { item, quantity, notes, customizations } = action.payload;\n      const existingItemIndex = state.items.findIndex(cartItem;\n        cartItem.id === item.id;\n        JSON.stringify(cartItem.customizations) === JSON.stringify(customizations)\n      let newItems: CartItem[];\n      if (existingItemIndex >= 0) {}\n            : cartItem\n        newItems = [...state.items, cartItem];\n      const total = newItems.reduce((sum, item) => sum + item.subtotal, 0);\n      const itemCount = newItems.reduce((sum, item) => sum + item.quantity, 0);\n      return {}\n    case 'UPDATE_QUANTITY': {}\n      const { itemId, quantity } = action.payload;\n      if (quantity <= 0) {}\n        return cartReducer(state, { type: 'REMOVE_ITEM', payload: { itemId } });\n      const newItems = state.items.map(item;\n        item.id === itemId\n          ? { ...item, quantity, subtotal: quantity * item.price }\n          : item\n      const total = newItems.reduce((sum, item) => sum + item.subtotal, 0);\n      const itemCount = newItems.reduce((sum, item) => sum + item.quantity, 0);\n      return {}\n    case 'REMOVE_ITEM': {}\n      const { itemId } = action.payload;\n      const newItems = state.items.filter(item => item.id !== itemId);\n      const total = newItems.reduce((sum, item) => sum + item.subtotal, 0);\n      const itemCount = newItems.reduce((sum, item) => sum + item.quantity, 0);\n      return {}\n    case 'UPDATE_NOTES': {}\n      const { itemId, notes } = action.payload;\n      const newItems = state.items.map(item;\n        item.id === itemId ? { ...item, notes } : item\n      return {}\n    case 'UPDATE_CUSTOMIZATIONS': {}\n      const { itemId, customizations } = action.payload;\n      const newItems = state.items.map(item;\n        item.id === itemId ? { ...item, customizations } : item\n      return {}\n    case 'CLEAR_CART'\n    case 'SET_LOADING'\n    case 'LOAD_CART'\n    default: undefined\n      return state;\n// TODO: Refactor this function - it may be too long\n  const { user, hasWalletBalance } = useAuth();\n  const [cart, dispatch] = useReducer(cartReducer, {}\n  const [meals, setMeals] = useState<MealItem[]>([]);\n  const [categories, setCategories] = useState<any[]>([]);\n  const [vendors, setVendors] = useState<any[]>([]);\n  const [filters, setFilters] = useState<MealFilters>({});\n  const [orderPreferences, setOrderPreferences] = useState<OrderPreferences>({}\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentOrder, setCurrentOrder] = useState<string | null>(null);\n  const orderTracking = useOrderTracking(currentOrder || undefined);\n  const paymentFlow = usePaymentFlow(currentOrder || undefined);\n  // Load cart from localStorage on mount\n  useEffect((\n        dispatch({ type: 'LOAD_CART', payload: cartData.items || [] });\n  }, []);\n  // Save cart to localStorage whenever it changes\n  useEffect((\n  }, [cart]);\n  // Load meals and categories\n  const loadMeals = useCallback(async (newFilters?: MealFilters\n      const filterParams = { ...filters, ...newFilters };\n      const [mealsResponse, categoriesResponse, vendorsResponse] = await Promise.all([]\n]);\n      if (mealsResponse.success) {}\n      if (categoriesResponse.success) {}\n      if (vendorsResponse.success) {}\n  }, [filters]);\n  // Search meals\n  const searchMeals = useCallback(async (query: string\n  }, [filters]);\n  // Get meal recommendations\n  const loadRecommendations = useCallback(async (\n    return [];\n  }, [user?.id]);\n  // Cart management\n  const addToCart = useCallback((item: MealItem, quantity: number = 1, notes?: string, customizations?: any\n    dispatch({}\n      payload: { item, quantity, notes, customizations }\n    toast.success(`${item.name} added to cart``\n            description: `Food order #${orderId.slice(-8)}``\n              name: `${user?.firstName} ${user?.lastName}``\n              toast.error(`Payment failed: ${error.message}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-payment.ts",["2444"],[]," * HASIVU Platform - Payment Integration Hook\n * Comprehensive payment processing with Razorpay integration and wallet management;\nimport { useState, useCallback, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { api } from '../lib/api-client';\nimport { useAuth } from '../contexts/auth-context';\nimport { usePaymentTracking } from './use-realtime';\n  // Extend Window interface for Razorpay\ndeclare global {}\n  theme?: {}\n  onSuccess?: (response: RazorpayResponse) => void;\n  onFailure?: (error: any) => void;\n  isDefault: boolean;\n// TODO: Refactor this function - it may be too long\n  const { user, getWalletBalance } = useAuth();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  // Load Razorpay script dynamically\n  const loadRazorpayScript = useCallback((): Promise<boolean> => {}\n      const script = document.createElement('script');\n      script.src = 'https://checkout.razorpay.com/ v1/checkout.js';\n      script.onload = () => resolve(true);\n      script.onerror = () => resolve(false);\n      document.head.appendChild(script);\n  }, []);\n  // Initialize payment with Razorpay\n  const initializePayment = useCallback(async (options: PaymentOptions\n  // Create payment order on backend\n      const response = await api.payments.initialize({}\n      if (!response.success) {}\n      const { razorpayOrderId, amount, currency, key } = response.data;\n  // Configure Razorpay options\n      const razorpayOptions = {}\n        theme: {}\n        handler: async (response: RazorpayResponse\n            if (verificationResponse.success) {}\n        modal\n  // Open Razorpay checkout\n      const razorpay = new window.Razorpay(razorpayOptions);\n      razorpay.open();\n  }, [user, loadRazorpayScript]);\n  // Process wallet payment\n  const processWalletPayment = useCallback(async (orderId: string, amount: number\n        razorpay_payment_id: `wallet_${Date.now()}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-realtime.ts",["2445"],[]," * HASIVU Platform - Real-time Features Hook\n * Provides comprehensive real-time functionality for orders, payments, and notifications;\nimport { useEffect, useState, useCallback, useRef } from 'react';\nimport { socketClient, SocketEventName, SocketEvents } from '../lib/socket-client';\nimport { useAuth } from '../contexts/auth-context';\nimport { toast } from 'react-hot-toast';\nexport // TODO: Refactor this function - it may be too long\n  const { autoConnect = true, events = [], rooms = [] } = options;\n  const { user, isAuthenticated } = useAuth();\n  const [connectionState, setConnectionState] = useState<ConnectionState>({}\n  const unsubscribeRefs = useRef<Array<() => void>>([]);\n  // Connection management\n  useEffect((\n    return (\n  }, [autoConnect, isAuthenticated, user?.id]);\n  // Subscribe to connection status updates\n  useEffect((\n  // Update connection state with current status\n    const stats = socketClient.getConnectionStats();\n    setConnectionState({}\n    return unsubscribe;\n  }, []);\n  // Join rooms when connected\n  useEffect((\n  }, [connectionState.isConnected, rooms]);\n  const connect = useCallback((\n      setConnectionState(prev => ({ ...prev, isConnecting: true }));\n      socketClient.connect(token, user.id);\n  }, [user]);\n  const disconnect = useCallback((\n  }, []);\n  const subscribe = useCallback(<T extends SocketEventName>(\n    eventName: T,\n    callback: SocketEvents[T]\n  }, []);\n  const emit = useCallback((eventName: string, data?: any\n  }, []);\n  const joinRoom = useCallback((roomId: string\n  }, []);\n  const leaveRoom = useCallback((roomId: string\n  }, []);\n  return {}\n  // Hook for order tracking with real-time updates\n    rooms: orderId ? [`order_${orderId}``\n        toast.error(`Delivery delayed: ${data.reason}``\n    rooms: orderId ? [`payment_${orderId}``\n        toast.error(`Payment failed: ${data.error}``\n      const message = `RFID ${data.action}: ${data.success ? 'Success' : 'Failed'}``\n        `System maintenance scheduled: ${data.message}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-rfid.ts",["2446"],[]," * HASIVU Platform - RFID Integration Hook\n * Comprehensive RFID functionality for meal verification and access control;\nimport { useState, useCallback, useEffect } from 'react';\nimport { toast } from 'react-hot-toast';\nimport { api } from '../lib/api-client';\nimport { useAuth } from '../contexts/auth-context';\nimport { useRFIDScanning } from './use-realtime';\n// TODO: Refactor this function - it may be too long\n  const { user, hasRole, hasPermission } = useAuth();\n  const [cards, setCards] = useState<RFIDCard[]>([]);\n  const [devices, setDevices] = useState<RFIDDevice[]>([]);\n  const [scanHistory, setScanHistory] = useState<any[]>([]);\n  const [stats, setStats] = useState<RFIDStats>({}\n  const [isLoading, setIsLoading] = useState(false);\n  const rfidScanning = useRFIDScanning();\n  // Load RFID cards\n  const loadCards = useCallback(async (filters?: {}\n  }, []);\n  // Load RFID devices\n  const loadDevices = useCallback(async (\n    try {}\n  }, [hasPermission]);\n  // Load scan history\n  const loadScanHistory = useCallback(async (filters?: {}\n  }, []);\n  // Verify RFID card\n  const verifyCard = useCallback(async (cardId: string): Promise<ScanResult> => {}\n            ? `Verified: ${response.data.student?.name}``\n          ? `Meal verified for ${result.studentName}``\n          `✅ Meal verified for ${result.studentName}``\n        toast.error(`❌ ${result.message}``\n      toast.error(`❌ ${error.message || 'Verification failed'}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/use-toast.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useAccessibility.ts",["2447"],[]," * Accessibility Hooks\n * Custom hooks for managing accessibility features and user preferences;\nimport { useState, useEffect, useCallback } from 'react';\n * Hook for managing user accessibility preferences;\nexport const // TODO: Refactor this function - it may be too long\nuseAccessibilityPreferences = (\n  useEffect((\n      setPreferences(prev => ({ ...prev, reducedMotion: mediaQuery.matches }));\n    updateReducedMotion();\n    mediaQuery.addEventListener('change', updateReducedMotion);\n  // Check for high contrast preference\n    const contrastQuery = window.matchMedia('(prefers-contrast: high)');\n    const updateHighContrast = (\n      setPreferences(prev => ({ ...prev, highContrast: contrastQuery.matches }));\n    updateHighContrast();\n    contrastQuery.addEventListener('change', updateHighContrast);\n  // Check for screen reader\n    const hasScreenReader = 'speechSynthesis' in window;\n                           navigator.userAgent.includes('NVDA');\n                           navigator.userAgent.includes('JAWS');\n                           navigator.userAgent.includes('VoiceOver');\n    setPreferences(prev => ({ ...prev, screenReader: hasScreenReader }));\n  // Load user preferences from localStorage\n    const stored = localStorage.getItem('accessibility-preferences');\n    if (stored) {}\n        setPreferences(prev => ({ ...prev, ...parsed }));\n    return (\n  }, []);\n  const updatePreference = useCallback(<K extends keyof AccessibilityPreferences>(\n    key: K,\n    value: AccessibilityPreferences[K]\n      const updated = { ...prev, [key]: value };\n      localStorage.setItem('accessibility-preferences', JSON.stringify(updated));\n      return updated;\n  }, []);\n  return { preferences, updatePreference };\n * Hook for managing keyboard navigation;\nexport const useKeyboardNavigation = (\n  containerRef: React.RefObject<HTMLElement>,\n  options: {}\n  } = options;\n  const handleKeyDown = useCallback((event: KeyboardEvent\n        break;\n      case 'ArrowUp': undefined\n        if (orientation === 'vertical' || orientation === 'both') {}\n        break;\n      case 'ArrowRight': undefined\n        if (orientation === 'horizontal' || orientation === 'both') {}\n        break;\n      case 'ArrowLeft': undefined\n        if (orientation === 'horizontal' || orientation === 'both') {}\n        break;\n      case 'Home': undefined\n        event.preventDefault();\n        nextIndex = 0;\n        break;\n      case 'End': undefined\n        event.preventDefault();\n        nextIndex = focusableElements.length - 1;\n        break;\n      default: undefined\n        return;\n    if (nextIndex !== currentIndex && focusableElements[nextIndex]) {}\n  }, [containerRef, orientation, loop, selector]);\n  useEffect((\n  }, [handleKeyDown]);\n * Hook for managing announcements to screen readers;\nexport const useAnnouncements = (\n    }, 1000);\n  }, []);\n  return { announcements, announce };\n * Hook for managing focus trapping;\nexport const useFocusTrap = (\n  isActive: boolean,\n  containerRef: React.RefObject<HTMLElement;\n    const handleKeyDown = (event: KeyboardEvent\n      const firstElement = focusableElements[0];\n      const lastElement = focusableElements[focusableElements.length - 1];\n      if (event.shiftKey) {}\n  // Focus the first focusable element\n    const focusableElements = getFocusableElements();\n    if (focusableElements.length > 0) {}\n    document.addEventListener('keydown', handleKeyDown);\n    return (\n  }, [isActive, containerRef]);\n * Hook for detecting if user prefers reduced motion;\nexport const useReducedMotion = (\n  }, []);\n  return reducedMotion;\n * Hook for managing high contrast mode;\nexport const useHighContrast = (\n  }, []);\n  return highContrast;\n * Hook for managing roving focus (useful for menus, toolbars);\nexport const useRovingFocus = (\n  items: HTMLElement[],\n  currentIndex: number,\n  onChange: (index: number) => void,\n  orientation: 'horizontal' | 'vertical' = 'vertical'\n        break;\n      case 'ArrowUp': undefined\n        if (orientation === 'vertical') {}\n        break;\n      case 'ArrowRight': undefined\n        if (orientation === 'horizontal') {}\n        break;\n      case 'ArrowLeft': undefined\n        if (orientation === 'horizontal') {}\n        break;\n      case 'Home': undefined\n        event.preventDefault();\n        nextIndex = 0;\n        break;\n      case 'End': undefined\n        event.preventDefault();\n        nextIndex = items.length - 1;\n        break;\n      default: undefined\n        return;\n    if (nextIndex !== currentIndex) {}\n  }, [currentIndex, items, onChange, orientation]);\n  useEffect((\n  }, [currentIndex, items, handleKeyDown]);","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useApiIntegration.ts",["2448","2449","2450","2451","2452","2453","2454","2455","2456","2457","2458","2459","2460","2461","2462","2463","2464","2465","2466","2467"],[],"// React hooks for API integration and data management\nimport { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  kitchenApi, \n  inventoryApi, \n  staffApi, \n  notificationsApi, \n  userApi,\n  rfidApi,\n  analyticsApi,\n  wsManager,\n  handleApiError \n} from '../services/api';\n\n// Generic hook for API data fetching with loading, error, and caching\nexport function useApiData<T>(\n  apiCall: () => Promise<{ data: T }>,\n  dependencies: any[] = [],\n  options?: {\n    refetchInterval?: number;\n    enabled?: boolean;\n    onSuccess?: (data: T) => void;\n    onError?: (error: string) => void;\n  }\n) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const intervalRef = useRef<NodeJS.Timeout>();\n\n  const fetchData = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await apiCall();\n      setData(response.data);\n      options?.onSuccess?.(response.data);\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      options?.onError?.(errorMessage);\n    } finally {\n      setLoading(false);\n    }\n  }, [apiCall, options?.onSuccess, options?.onError]);\n\n  useEffect(() => {\n    if (options?.enabled !== false) {\n      fetchData();\n    }\n\n    // Setup auto-refetch interval\n    if (options?.refetchInterval && options.refetchInterval > 0) {\n      intervalRef.current = setInterval(fetchData, options.refetchInterval);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [fetchData, options?.refetchInterval, options?.enabled]);\n\n  // Separate effect for dependency changes to prevent infinite loops\n  useEffect(() => {\n    if (options?.enabled !== false) {\n      fetchData();\n    }\n  }, dependencies);\n\n  const refetch = useCallback(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return { data, loading, error, refetch };\n}\n\n// Kitchen Management Hooks\nexport function useKitchenOrders(filters?: any) {\n  return useApiData(\n    () => kitchenApi.getOrders(filters),\n    [filters],\n    { refetchInterval: 30000 } // Refetch every 30 seconds\n  );\n}\n\nexport function useKitchenMetrics(period?: string) {\n  return useApiData(\n    () => kitchenApi.getKitchenMetrics(period),\n    [period],\n    { refetchInterval: 60000 } // Refetch every minute\n  );\n}\n\nexport function useOrderMutations() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const updateOrderStatus = useCallback(async (orderId: string, status: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await kitchenApi.updateOrderStatus(orderId, status);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const assignOrder = useCallback(async (orderId: string, staffId: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await kitchenApi.assignOrder(orderId, staffId);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createOrder = useCallback(async (orderData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await kitchenApi.createOrder(orderData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    updateOrderStatus,\n    assignOrder,\n    createOrder,\n    loading,\n    error\n  };\n}\n\n// Inventory Management Hooks\nexport function useInventoryItems(filters?: any) {\n  return useApiData(\n    () => inventoryApi.getItems(filters),\n    [filters],\n    { refetchInterval: 120000 } // Refetch every 2 minutes\n  );\n}\n\nexport function useInventorySuppliers() {\n  return useApiData(\n    () => inventoryApi.getSuppliers(),\n    [],\n    { refetchInterval: 300000 } // Refetch every 5 minutes\n  );\n}\n\nexport function usePurchaseOrders(filters?: any) {\n  return useApiData(\n    () => inventoryApi.getPurchaseOrders(filters),\n    [filters],\n    { refetchInterval: 120000 }\n  );\n}\n\nexport function useInventoryMetrics() {\n  return useApiData(\n    () => inventoryApi.getInventoryMetrics(),\n    [],\n    { refetchInterval: 60000 }\n  );\n}\n\nexport function useLowStockAlerts() {\n  return useApiData(\n    () => inventoryApi.getLowStockAlerts(),\n    [],\n    { refetchInterval: 30000 } // Check frequently for stock alerts\n  );\n}\n\nexport function useInventoryMutations() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createItem = useCallback(async (itemData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await inventoryApi.createItem(itemData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateItem = useCallback(async (itemId: string, itemData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await inventoryApi.updateItem(itemId, itemData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateStock = useCallback(async (itemId: string, quantity: number, type: 'add' | 'remove') => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await inventoryApi.updateStock(itemId, quantity, type);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createPurchaseOrder = useCallback(async (orderData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await inventoryApi.createPurchaseOrder(orderData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updatePurchaseOrderStatus = useCallback(async (orderId: string, status: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await inventoryApi.updatePurchaseOrderStatus(orderId, status);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    createItem,\n    updateItem,\n    updateStock,\n    createPurchaseOrder,\n    updatePurchaseOrderStatus,\n    loading,\n    error\n  };\n}\n\n// Staff Management Hooks\nexport function useStaffMembers(filters?: any) {\n  return useApiData(\n    () => staffApi.getStaff(filters),\n    [filters],\n    { refetchInterval: 180000 } // Refetch every 3 minutes\n  );\n}\n\nexport function useStaffTasks(filters?: any) {\n  return useApiData(\n    () => staffApi.getTasks(filters),\n    [filters],\n    { refetchInterval: 60000 }\n  );\n}\n\nexport function useStaffSchedules(filters?: any) {\n  return useApiData(\n    () => staffApi.getSchedules(filters),\n    [filters],\n    { refetchInterval: 300000 } // Refetch every 5 minutes\n  );\n}\n\nexport function useStaffMetrics() {\n  return useApiData(\n    () => staffApi.getStaffMetrics(),\n    [],\n    { refetchInterval: 180000 }\n  );\n}\n\nexport function useStaffMutations() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const createStaff = useCallback(async (staffData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.createStaff(staffData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateStaff = useCallback(async (staffId: string, staffData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.updateStaff(staffId, staffData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateStaffStatus = useCallback(async (staffId: string, status: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.updateStaffStatus(staffId, status);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createTask = useCallback(async (taskData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.createTask(taskData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateTaskStatus = useCallback(async (taskId: string, status: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.updateTaskStatus(taskId, status);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const createSchedule = useCallback(async (scheduleData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await staffApi.createSchedule(scheduleData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    createStaff,\n    updateStaff,\n    updateStaffStatus,\n    createTask,\n    updateTaskStatus,\n    createSchedule,\n    loading,\n    error\n  };\n}\n\n// Notifications Hooks\nexport function useNotifications(filters?: any) {\n  return useApiData(\n    () => notificationsApi.getNotifications(filters),\n    [filters],\n    { refetchInterval: 15000 } // Refetch every 15 seconds\n  );\n}\n\nexport function useNotificationSettings() {\n  return useApiData(\n    () => notificationsApi.getSettings(),\n    []\n  );\n}\n\nexport function useNotificationMutations() {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const markAsRead = useCallback(async (notificationIds: string[]) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await notificationsApi.markAsRead(notificationIds);\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const markAllAsRead = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      await notificationsApi.markAllAsRead();\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const deleteNotification = useCallback(async (notificationId: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      await notificationsApi.deleteNotification(notificationId);\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const updateSettings = useCallback(async (settings: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await notificationsApi.updateSettings(settings);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    updateSettings,\n    loading,\n    error\n  };\n}\n\n// Authentication Hooks\nexport function useAuth() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    // Check for existing auth token on mount\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      userApi.getProfile()\n        .then(response => {\n          setUser(response.data);\n          setLoading(false);\n        })\n        .catch(() => {\n          localStorage.removeItem('authToken');\n          setLoading(false);\n        });\n    } else {\n      setLoading(false);\n    }\n  }, []);\n\n  const login = useCallback(async (credentials: { email: string; password: string }) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await userApi.login(credentials);\n      localStorage.setItem('authToken', response.data.token);\n      setUser(response.data.user);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  const logout = useCallback(async () => {\n    try {\n      await userApi.logout();\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      setUser(null);\n      localStorage.removeItem('authToken');\n    }\n  }, []);\n\n  const register = useCallback(async (userData: any) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await userApi.register(userData);\n      return response.data;\n    } catch (err) {\n      const errorMessage = handleApiError(err);\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  return {\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    isAuthenticated: !!user\n  };\n}\n\n// WebSocket hooks for real-time updates\nexport function useWebSocketConnection() {\n  const [connected, setConnected] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token && !wsManager.isConnected()) {\n      wsManager.connect(token);\n    }\n\n    // Monitor connection status\n    const checkConnection = () => {\n      setConnected(wsManager.isConnected());\n    };\n\n    const interval = setInterval(checkConnection, 1000);\n    checkConnection(); // Initial check\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return { connected };\n}\n\nexport function useWebSocketSubscription<T>(\n  messageType: string,\n  handler: (data: T) => void\n) {\n  const handlerRef = useRef(handler);\n  \n  // Update the ref when handler changes to avoid re-subscriptions\n  useEffect(() => {\n    handlerRef.current = handler;\n  }, [handler]);\n\n  useEffect(() => {\n    const stableHandler = (data: T) => handlerRef.current(data);\n    wsManager.subscribe(messageType, stableHandler);\n    return () => wsManager.unsubscribe(messageType);\n  }, [messageType]); // Only re-subscribe when messageType changes\n}\n\n// Analytics Hooks\nexport function useDashboardAnalytics(period?: string) {\n  return useApiData(\n    () => analyticsApi.getDashboardMetrics(period),\n    [period],\n    { refetchInterval: 300000 } // Refetch every 5 minutes\n  );\n}\n\n// RFID System Hooks\nexport function useRfidDevices() {\n  return useApiData(\n    () => rfidApi.getDevices(),\n    [],\n    { refetchInterval: 60000 }\n  );\n}\n\nexport function useRfidTransactions(filters?: any) {\n  return useApiData(\n    () => rfidApi.getTransactions(filters),\n    [filters],\n    { refetchInterval: 30000 }\n  );\n}\n\nexport function useRfidMetrics() {\n  return useApiData(\n    () => rfidApi.getRfidMetrics(),\n    [],\n    { refetchInterval: 60000 }\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useAuth.ts",["2468","2469","2470","2471","2472","2473"],[],"'use client';\n\nimport { useState, useEffect } from 'react';\nimport apiClient, { User, AuthResponse } from '@/lib/api-client';\nimport { EnhancedLoginFormData, RegistrationFormData } from '@/components/auth/schemas';\n\ninterface UseAuthReturn {\n  // State\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  error: string | null;\n\n  // Actions\n  login: (credentials: EnhancedLoginFormData) => Promise<{ success: boolean; message?: string }>;\n  register: (userData: RegistrationFormData) => Promise<{ success: boolean; message?: string }>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n  clearError: () => void;\n}\n\nexport function useAuth(): UseAuthReturn {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  const isAuthenticated = Boolean(user);\n\n  // Initialize authentication state\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  const initializeAuth = async () => {\n    try {\n      setIsLoading(true);\n      \n      // Check if we have a token\n      const token = typeof window !== 'undefined' ? localStorage.getItem('accessToken') : null;\n      if (!token) {\n        setIsLoading(false);\n        return;\n      }\n\n      // Verify the token and get current user\n      const response = await apiClient.getCurrentUser();\n      \n      if (response.success && response.data?.user) {\n        setUser(response.data.user);\n        setError(null);\n      } else {\n        // Token might be invalid, try to refresh\n        const refreshResponse = await apiClient.refreshToken();\n        \n        if (refreshResponse.success) {\n          // Try to get user again after refresh\n          const userResponse = await apiClient.getCurrentUser();\n          if (userResponse.success && userResponse.data?.user) {\n            setUser(userResponse.data.user);\n            setError(null);\n          }\n        } else {\n          // Refresh failed, clear tokens\n          apiClient.clearToken();\n          setUser(null);\n        }\n      }\n    } catch (error) {\n      console.error('Auth initialization error:', error);\n      apiClient.clearToken();\n      setUser(null);\n      setError('Authentication initialization failed');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (credentials: EnhancedLoginFormData): Promise<{ success: boolean; message?: string }> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await apiClient.login(credentials);\n      \n      if (response.success && response.user) {\n        setUser(response.user);\n        setError(null);\n        \n        return { success: true, message: response.message };\n      } else {\n        const errorMessage = response.error || response.message || 'Login failed';\n        setError(errorMessage);\n        return { success: false, message: errorMessage };\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      const errorMessage = 'Login failed. Please try again.';\n      setError(errorMessage);\n      return { success: false, message: errorMessage };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const register = async (userData: RegistrationFormData): Promise<{ success: boolean; message?: string }> => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      \n      const response = await apiClient.register(userData);\n      \n      if (response.success) {\n        // Registration successful - typically user needs to verify email\n        return { success: true, message: response.message || 'Registration successful' };\n      } else {\n        const errorMessage = response.error || response.message || 'Registration failed';\n        setError(errorMessage);\n        return { success: false, message: errorMessage };\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      const errorMessage = 'Registration failed. Please try again.';\n      setError(errorMessage);\n      return { success: false, message: errorMessage };\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      \n      // Call API logout\n      await apiClient.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      // Always clear local state regardless of API response\n      setUser(null);\n      setError(null);\n      setIsLoading(false);\n    }\n  };\n\n  const refreshUser = async (): Promise<void> => {\n    if (!isAuthenticated) return;\n\n    try {\n      const response = await apiClient.getCurrentUser();\n      \n      if (response.success && response.data?.user) {\n        setUser(response.data.user);\n        setError(null);\n      } else {\n        // If getting current user fails, try refresh token\n        const refreshResponse = await apiClient.refreshToken();\n        \n        if (refreshResponse.success) {\n          const userResponse = await apiClient.getCurrentUser();\n          if (userResponse.success && userResponse.data?.user) {\n            setUser(userResponse.data.user);\n            setError(null);\n          }\n        } else {\n          // Refresh failed, user needs to login again\n          await logout();\n        }\n      }\n    } catch (error) {\n      console.error('Refresh user error:', error);\n      setError('Session expired. Please login again.');\n    }\n  };\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  // Auto-refresh user data periodically (every 15 minutes)\n  useEffect(() => {\n    if (!isAuthenticated) return;\n\n    const interval = setInterval(() => {\n      refreshUser();\n    }, 15 * 60 * 1000); // 15 minutes\n\n    return () => clearInterval(interval);\n  }, [isAuthenticated]);\n\n  return {\n    // State\n    user,\n    isLoading,\n    isAuthenticated,\n    error,\n\n    // Actions\n    login,\n    register,\n    logout,\n    refreshUser,\n    clearError,\n  };\n}\n\nexport default useAuth;","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileAnalytics.ts",["2474"],[],"\"use client\"\nimport { useEffect, useCallback, useRef, useState } from 'react'\n// Types for mobile analytics\n  position?: { x: number; y: number }\n  duration?: number\n  force?: number\n  touchPoints?: number\n  // Mobile Analytics Hook\n// TODO: Refactor this function - it may be too long\nexport const\nuseMobileAnalytics = (\n  // Add network information if available\n  // @ts-ignore\n    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection\n    if (connection) {}\n  // Add battery information if available\n    try {}\n  // Add memory information if available\n  // @ts-ignore\n    if (navigator.deviceMemory) {}\n  // Get performance metrics\n    const navigation = performance.getEntriesByType(\"secure-configuration-value\")[0] as PerformanceNavigationTiming\n    const performanceMetrics: PerformanceMetrics = {}\n  // Get paint timings\n    const paintEntries = performance.getEntriesByType('paint')\n    paintEntries.forEach(entry => {}\n  // Check PWA status\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches\n    const isPWAInstalled = isStandalone;\n      (window.navigator as any).standalone === true;\n      document.referrer.includes('android-app://')\n  // Check notification permission\n    const notificationsEnabled = 'Notification' in window && Notification.permission === 'granted'\n  // Create session\n    sessionRef.current = {}\n    setIsInitialized(true)\n  }, [])\n  // Generate session ID\n  const generateSessionId = (\n    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}``\n        message: `Unhandled Promise Rejection: ${event.reason}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileLayout-clean.ts",["2475"],[],"import { useState, useEffect, useCallback } from 'react'\nexport interface UseMobileLayoutReturn extends MobileLayoutState, MobileLayoutActions {}\n// Breakpoints matching Tailwind CSS defaults\nconst BREAKPOINTS = {}\n} as const\nexport function useMobileLayout(): UseMobileLayoutReturn {}\n    screenSize: { width: 1024, height: 768 }\n  // Update screen dimensions and device type\n  const updateLayoutState = useCallback((\n      screenSize: { width, height }\n  }, [])\n  useEffect((\n  }, [updateLayoutState])\n  const enableFullscreen = useCallback(async (): Promise<void> => {}\n  }, [])\n  const exitFullscreen = useCallback(async (): Promise<void> => {}\n  }, [])\n  const vibrate = useCallback((pattern: number | number[]): boolean => {}\n    return false\n  }, [])\n  return {}","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useMobileLayout.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/usePWA.ts",["2476"],[],"import { useState, useEffect, useCallback } from 'react'\n// PWA installation hook\n// TODO: Refactor this function - it may be too long\nexport const\nusePWAInstall = (\n    const handleAppInstalled = (\n  // Check if already installed\n    if (window.matchMedia('(display-mode: standalone)').matches;\n        (window.navigator as any).standalone === true) {}\n    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt)\n    window.addEventListener('appinstalled', handleAppInstalled)\n    return (\n  }, [])\n  const installApp = useCallback(async (\n      const { outcome } = await deferredPrompt.userChoice\n      if (outcome === 'accepted') {}\n      return false\n  }, [deferredPrompt])\n  return {}\n  // Network status hook with connection quality\nexport const useNetworkStatus = (\n    updateConnectionInfo()\n    window.addEventListener('online', updateOnlineStatus)\n    window.addEventListener('offline', updateOnlineStatus)\n  // Listen for connection changes\n    const connection = (navigator as any).connection\n    if (connection) {}\n    return (\n  }, [])\n  const getConnectionQuality = useCallback((\n  }, [isOnline, effectiveType])\n  return {}\n  // Push notifications hook\nexport const usePushNotifications = (\n  // Get existing subscription\n    if ('serviceWorker' in navigator) {}\n  }, [])\n  const requestPermission = useCallback(async (\n  }, [isSupported])\n  const subscribe = useCallback(async (vapidKey: string\n      setSubscription(sub)\n      return sub\n  }, [isSupported, permission])\n  const unsubscribe = useCallback(async (\n  }, [subscription])\n  const showNotification = useCallback((title: string, options?: NotificationOptions\n    return null\n  }, [permission])\n  return {}\n  // Background sync hook for offline actions\nexport const useBackgroundSync = (\n  }>>([])\n  const [isSupported] = useState(\n    'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype\n  // Add action to pending queue\n  const queueAction = useCallback((type: string, data: any\n      id: `${type}-${Date.now()}``\n        registration.sync.register(`sync-${action.type}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useRealTimeIntegration.ts",["2477"],[]," * HASIVU Platform - Real-time Integration Hook\n * Comprehensive hook for managing real-time features across all components;\nimport { useEffect, useCallback, useRef, useState } from 'react';\nimport { useSocket } from '@/contexts/SocketContext';\nimport { useAppDispatch, useAppSelector } from '@/store';\nimport { updateOrder, addOrder } from '@/ store/slices/orderSlice';\nimport { addNotification } from '@/store/slices/notificationSlice';\nimport { updateRFIDStatus } from '@/ store/slices/rfidSlice';\nimport { updatePaymentStatus } from '@/store/slices/paymentSlice';\nimport { toast } from 'react-hot-toast';\n * Comprehensive real-time integration hook\nexport const\nuseRealTimeIntegration = (options: RealTimeOptions = {}\n  } = options;\n  const dispatch = useAppDispatch();\n  const { subscribe, isConnected, sendMessage, getConnectionStats } = useSocket();\n  // Local state\n  const [lastUpdate, setLastUpdate] = useState<Date | null>(null);\n  const [liveMetrics, setLiveMetrics] = useState<LiveMetrics>({}\n  const subscriptionsRef = useRef<(() => void)[]>([]);\n  const metricsIntervalRef = useRef<NodeJS.Timeout | null>(null);\n   * Handle order status updates;\n  const handleOrderUpdate = useCallback((orderData: any\n  // Custom callback\n    onOrderUpdate?.(orderData);\n  // Show toast notification\n    const statusMessages: Record<string, string> = {}\n    if (statusMessages[orderData.status]) {}\n  }, [dispatch, onOrderUpdate]);\n   * Handle payment updates;\n  const handlePaymentUpdate = useCallback((paymentData: any\n  // Custom callback\n    onPaymentUpdate?.(paymentData);\n  // Show toast notification\n    if (paymentData.status === 'success') {}\n  }, [dispatch, onPaymentUpdate]);\n   * Handle RFID scan events;\n  const handleRFIDScan = useCallback((scanData: any\n  // Custom callback\n    onRFIDScan?.(scanData);\n  // Show toast notification\n    const actionMessages: Record<string, string> = {}\n    if (actionMessages[scanData.action]) {}\n      toast.success(`RFID: ${actionMessages[scanData.action]}``\n      activeSubscriptions: subscriptionsRef.current.map((_, index) => `subscription_${index}``","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useSocket.ts",["2478","2479","2480"],[],"\"use client\";\n\nimport { useEffect, useState, useCallback, useRef } from 'react';\nimport { wsManager } from '@/services/api';\n\nexport type UseWebSocketOptions = {\n  onMessage?: (event: string, data: any) => void;\n};\n\nexport function useWebSocket(options?: UseWebSocketOptions) {\n  const [isConnected, setIsConnected] = useState<boolean>(false);\n  const onMessageRef = useRef(options?.onMessage);\n\n  useEffect(() => {\n    onMessageRef.current = options?.onMessage;\n  }, [options?.onMessage]);\n\n  const makeEventHandler = useCallback(\n    (eventName: string) => (data: any) => onMessageRef.current?.(eventName, data),\n    []\n  );\n\n  useEffect(() => {\n    try {\n      const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') || undefined : undefined;\n      wsManager.connect(token);\n    } catch (e) {\n      // no-op\n    }\n\n    // Subscribe to common schedule events if a handler is provided\n    if (onMessageRef.current) {\n      wsManager.subscribe('schedule.updated', makeEventHandler('schedule.updated'));\n      wsManager.subscribe('schedule.created', makeEventHandler('schedule.created'));\n      wsManager.subscribe('schedule.deleted', makeEventHandler('schedule.deleted'));\n    }\n\n    const interval = setInterval(() => setIsConnected(wsManager.isConnected()), 1000);\n    setIsConnected(wsManager.isConnected());\n\n    return () => {\n      if (onMessageRef.current) {\n        wsManager.unsubscribe('schedule.updated');\n        wsManager.unsubscribe('schedule.created');\n        wsManager.unsubscribe('schedule.deleted');\n      }\n      clearInterval(interval);\n    };\n  }, [makeEventHandler]);\n\n  const send = useCallback((type: string, data: any) => {\n    wsManager.send(type, data);\n  }, []);\n\n  return { isConnected, send };\n}\n\nexport default useWebSocket;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/hooks/useTouchOptimization.ts",["2481"],[],"import { useState, useEffect, useCallback, useRef } from 'react'\n// Touch optimization hook with haptic feedback and gesture support\nconst defaultConfig: TouchOptimizationConfig = {}\nexport const useTouchOptimization = (\n  elementRef: React.RefObject<HTMLElement>,\n  handlers: TouchGestureHandlers = {},\n  config: Partial<TouchOptimizationConfig> = {}\n  const fullConfig = { ...defaultConfig, ...config }\n  const [isPressed, setIsPressed] = useState(false)\n  const [touchCount, setTouchCount] = useState(0)\n  const touchState = useRef({}\n  // Haptic feedback utility\n  const triggerHaptic = useCallback((pattern: number | number[] = 10\n  }, [fullConfig.hapticFeedback])\n  // Calculate distance between two touches\n  const getDistance = useCallback((touch1: Touch, touch2: Touch\n  }, [])\n  // Calculate angle between two touches\n  const getAngle = useCallback((touch1: Touch, touch2: Touch\n  }, [])\n  // Handle touch start\n  const handleTouchStart = useCallback((e: TouchEvent\n  // Start long press timer\n    if (handlers.onLongPress && e.touches.length === 1) {}\n      }, fullConfig.longPressDelay)\n  // Prevent zoom if configured\n    if (fullConfig.preventZoom && e.touches.length > 1) {}\n  }, [handlers.onLongPress, fullConfig.longPressDelay, fullConfig.preventZoom, triggerHaptic, getDistance, getAngle])\n  // Handle touch move\n  const handleTouchMove = useCallback((e: TouchEvent\n    touchState.current.lastMoveTime = now\n  // Handle pinch gesture\n    if (e.touches.length === 2 && handlers.onPinch) {}\n    // Handle rotation gesture\n    if (e.touches.length === 2 && handlers.onRotate) {}\n  // Cancel long press on move\n    if (touchState.current.longPressTimer) {}\n  }, [fullConfig.touchDebounce, handlers.onPinch, handlers.onRotate, getDistance, getAngle])\n  // Handle touch end\n  const handleTouchEnd = useCallback((e: TouchEvent\n    if (!touchState.current.startTouch) return\n    const deltaX = touch.clientX - touchState.current.startTouch.clientX\n    const deltaY = touch.clientY - touchState.current.startTouch.clientY\n    const deltaTime = now - touchState.current.startTime\n    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY)\n  // Handle tap gestures\n    if (distance < 10 && deltaTime < 300) {}\n  // Single tap\n      touchState.current.lastTap = now\n      setTimeout((\n      }, fullConfig.doubleTapDelay)\n      return\n  // Handle swipe gestures\n    if (distance > fullConfig.swipeThreshold) {}\n  }, [handlers, fullConfig.doubleTapDelay, fullConfig.swipeThreshold, triggerHaptic])\n  // Attach event listeners\n  useEffect((\n    const options = { passive: false }\n    element.addEventListener('touchstart', handleTouchStart, options)\n    element.addEventListener('touchmove', handleTouchMove, options)\n    element.addEventListener('touchend', handleTouchEnd, options)\n    element.addEventListener('touchcancel', handleTouchEnd, options)\n    return (\n  }, [elementRef, handleTouchStart, handleTouchMove, handleTouchEnd])\n  return {}\n  // Hook for managing touch interactions with visual feedback\n// TODO: Refactor this function - it may be too long\nexport const useTouchFeedback = (\n  const [pressPosition, setPressPosition] = useState({ x: 0, y: 0 })\n  const pressTimer = useRef<NodeJS.Timeout | null>(null)\n  const handleTouchStart = useCallback((e: React.TouchEvent | React.MouseEvent\n    setIsPressed(true)\n  // Auto release after timeout\n    pressTimer.current = setTimeout((\n    }, 200)\n  }, [])\n  const handleTouchEnd = useCallback((\n  // Delayed release for visual feedback\n    setTimeout(() => setIsPressed(false), 100)\n  }, [])\n  useEffect((\n  }, [])\n  return {}\n  // Hook for scroll optimization on mobile\nexport const useScrollOptimization = (\n  elementRef: React.RefObject<HTMLElement>,\n  options: {}\n  const { momentum = true, overscroll = 'auto', direction = 'vertical' } = options\n  useEffect((\n  // Smooth scrolling\n    element.style.scrollBehavior = 'smooth'\n    return (\n  }, [elementRef, momentum, overscroll, direction])\n  // Hook for managing focus states on touch devices\nexport const useTouchFocus = (\n    detectTouch()\n    const handleTouchStart = () => setLastInteraction('touch')\n    const handleMouseDown = () => setLastInteraction('mouse')\n    document.addEventListener('touchstart', handleTouchStart, { passive: true })\n    document.addEventListener('mousedown', handleMouseDown)\n    return (\n  }, [])\n  // CSS class to apply focus styles only for keyboard navigation\n  const focusVisibleClass = lastInteraction === 'mouse' ? 'focus-visible:ring-0 focus-visible:ring-offset-0' : ''\n  return {}\nexport default useTouchOptimization","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/accessibility-testing.ts",["2482","2483","2484","2485","2486","2487","2488","2489","2490","2491"],[],"/**\n * HASIVU Platform - Accessibility Testing Utilities\n * \n * Comprehensive accessibility testing utilities for development and production\n * Features:\n * - Runtime accessibility monitoring\n * - WCAG 2.1 AA compliance checking\n * - Automated accessibility auditing\n * - Focus management testing\n * - Screen reader compatibility validation\n * - Color contrast analysis\n * - Keyboard navigation testing\n */\n\nimport { ReactElement } from 'react';\n\n// Types for accessibility testing\nexport interface AccessibilityTestResult {\n  id: string;\n  timestamp: number;\n  element?: string;\n  rule: string;\n  description: string;\n  impact: 'minor' | 'moderate' | 'serious' | 'critical';\n  wcagLevel: 'A' | 'AA' | 'AAA';\n  category: 'structure' | 'keyboard' | 'color' | 'forms' | 'images' | 'multimedia' | 'navigation';\n  help: string;\n  helpUrl: string;\n  tags: string[];\n}\n\nexport interface AccessibilityAuditReport {\n  url: string;\n  timestamp: number;\n  violations: AccessibilityTestResult[];\n  passes: AccessibilityTestResult[];\n  incomplete: AccessibilityTestResult[];\n  compliance: {\n    level: 'A' | 'AA' | 'AAA';\n    percentage: number;\n    total: number;\n    passed: number;\n    failed: number;\n  };\n  performance: {\n    auditDuration: number;\n    elementsChecked: number;\n  };\n}\n\nexport interface ColorContrastResult {\n  element: string;\n  foreground: string;\n  background: string;\n  ratio: number;\n  level: 'AA' | 'AAA' | 'FAIL';\n  size: 'normal' | 'large';\n}\n\nexport interface KeyboardNavigationResult {\n  element: string;\n  accessible: boolean;\n  hasVisibleFocus: boolean;\n  tabIndex: number;\n  role?: string;\n  ariaLabel?: string;\n  issues: string[];\n}\n\n// Accessibility testing class\nexport class AccessibilityTester {\n  private static instance: AccessibilityTester;\n  private axeCore: any;\n  private isInitialized = false;\n  private observers: MutationObserver[] = [];\n\n  static getInstance(): AccessibilityTester {\n    if (!AccessibilityTester.instance) {\n      AccessibilityTester.instance = new AccessibilityTester();\n    }\n    return AccessibilityTester.instance;\n  }\n\n  async initialize(): Promise<void> {\n    if (this.isInitialized || typeof window === 'undefined') return;\n\n    try {\n      // Dynamically import axe-core to avoid SSR issues\n      this.axeCore = await import('axe-core');\n      \n      // Configure axe-core for HASIVU platform\n      this.axeCore.default.configure({\n        reporter: 'v2',\n        rules: {\n          // Customize rules for HASIVU platform\n          'color-contrast': { enabled: true },\n          'keyboard-navigation': { enabled: true },\n          'focus-visible': { enabled: true },\n          'aria-roles': { enabled: true },\n          'aria-valid-attr': { enabled: true },\n          'aria-required-attr': { enabled: true },\n          'form-field-multiple-labels': { enabled: true },\n          'heading-order': { enabled: true },\n          'landmark-unique': { enabled: true },\n          'page-has-heading-one': { enabled: true },\n        },\n      });\n\n      this.isInitialized = true;\n      console.log('✅ HASIVU Accessibility Tester initialized');\n    } catch (error) {\n      console.error('Failed to initialize accessibility tester:', error);\n    }\n  }\n\n  /**\n   * Run comprehensive accessibility audit\n   */\n  async runAudit(\n    context?: Element,\n    options?: {\n      tags?: string[];\n      rules?: string[];\n      excludeSelectors?: string[];\n      includeSelectors?: string[];\n    }\n  ): Promise<AccessibilityAuditReport> {\n    if (!this.isInitialized) {\n      await this.initialize();\n    }\n\n    const startTime = performance.now();\n    const url = window.location.href;\n\n    try {\n      const axeOptions: any = {\n        reporter: 'v2',\n        runOnly: options?.tags || ['wcag2a', 'wcag2aa', 'wcag21aa'],\n        resultTypes: ['violations', 'passes', 'incomplete', 'inapplicable'],\n      };\n\n      if (options?.rules) {\n        axeOptions.runOnly = {\n          type: 'rule',\n          values: options.rules,\n        };\n      }\n\n      if (options?.excludeSelectors?.length) {\n        axeOptions.exclude = options.excludeSelectors;\n      }\n\n      if (options?.includeSelectors?.length) {\n        axeOptions.include = options.includeSelectors;\n      }\n\n      const results = await this.axeCore.default.run(context || document, axeOptions);\n      const endTime = performance.now();\n\n      // Transform results\n      const violations = this.transformResults(results.violations);\n      const passes = this.transformResults(results.passes);\n      const incomplete = this.transformResults(results.incomplete);\n\n      const total = violations.length + passes.length;\n      const passed = passes.length;\n      const failed = violations.length;\n      const percentage = total > 0 ? Math.round((passed / total) * 100) : 100;\n\n      const report: AccessibilityAuditReport = {\n        url,\n        timestamp: Date.now(),\n        violations,\n        passes,\n        incomplete,\n        compliance: {\n          level: this.getComplianceLevel(violations),\n          percentage,\n          total,\n          passed,\n          failed,\n        },\n        performance: {\n          auditDuration: endTime - startTime,\n          elementsChecked: results.violations.reduce((count: number, v: any) => count + v.nodes.length, 0) +\n                          results.passes.reduce((count: number, p: any) => count + p.nodes.length, 0),\n        },\n      };\n\n      return report;\n    } catch (error) {\n      console.error('Accessibility audit failed:', error);\n      throw new Error('Failed to run accessibility audit');\n    }\n  }\n\n  /**\n   * Test color contrast for specific elements\n   */\n  async testColorContrast(selector?: string): Promise<ColorContrastResult[]> {\n    const elements = selector \n      ? document.querySelectorAll(selector)\n      : document.querySelectorAll('*:not(script):not(style):not(meta)');\n\n    const results: ColorContrastResult[] = [];\n\n    for (const element of Array.from(elements)) {\n      if (!element.textContent?.trim()) continue;\n\n      const styles = window.getComputedStyle(element);\n      const foreground = styles.color;\n      const background = styles.backgroundColor || 'rgb(255, 255, 255)';\n      const fontSize = parseFloat(styles.fontSize);\n      const fontWeight = styles.fontWeight;\n\n      const ratio = this.calculateContrastRatio(foreground, background);\n      const isLarge = fontSize >= 18 || (fontSize >= 14 && (fontWeight === 'bold' || parseInt(fontWeight) >= 700));\n      \n      let level: 'AA' | 'AAA' | 'FAIL';\n      if (isLarge) {\n        level = ratio >= 4.5 ? 'AAA' : ratio >= 3 ? 'AA' : 'FAIL';\n      } else {\n        level = ratio >= 7 ? 'AAA' : ratio >= 4.5 ? 'AA' : 'FAIL';\n      }\n\n      results.push({\n        element: this.getElementSelector(element as HTMLElement),\n        foreground,\n        background,\n        ratio: Math.round(ratio * 100) / 100,\n        level,\n        size: isLarge ? 'large' : 'normal',\n      });\n    }\n\n    return results.filter(result => result.level === 'FAIL');\n  }\n\n  /**\n   * Test keyboard navigation\n   */\n  async testKeyboardNavigation(): Promise<KeyboardNavigationResult[]> {\n    const focusableElements = document.querySelectorAll(\n      'a[href], button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n    );\n\n    const results: KeyboardNavigationResult[] = [];\n\n    for (const element of Array.from(focusableElements)) {\n      const htmlElement = element as HTMLElement;\n      const issues: string[] = [];\n\n      // Check if element is visible\n      const isVisible = this.isElementVisible(htmlElement);\n      if (!isVisible) {\n        issues.push('Element is not visible');\n      }\n\n      // Check tab index\n      const tabIndex = htmlElement.tabIndex;\n      if (tabIndex < -1) {\n        issues.push('Invalid tabindex value');\n      }\n\n      // Focus the element and check focus visibility\n      htmlElement.focus();\n      const hasVisibleFocus = this.hasFocusIndicator(htmlElement);\n      \n      if (!hasVisibleFocus) {\n        issues.push('No visible focus indicator');\n      }\n\n      // Check ARIA attributes\n      const role = htmlElement.getAttribute('role');\n      const ariaLabel = htmlElement.getAttribute('aria-label');\n      const ariaLabelledBy = htmlElement.getAttribute('aria-labelledby');\n\n      if (!ariaLabel && !ariaLabelledBy && !htmlElement.textContent?.trim()) {\n        if (htmlElement.tagName.toLowerCase() !== 'input' || \n            !document.querySelector(`label[for=\"${htmlElement.id}\"]`)) {\n          issues.push('No accessible name');\n        }\n      }\n\n      results.push({\n        element: this.getElementSelector(htmlElement),\n        accessible: issues.length === 0,\n        hasVisibleFocus,\n        tabIndex,\n        role: role || undefined,\n        ariaLabel: ariaLabel || undefined,\n        issues,\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Monitor accessibility in real-time\n   */\n  startLiveMonitoring(callback: (violations: AccessibilityTestResult[]) => void): void {\n    if (!this.isInitialized) {\n      this.initialize().then(() => this.startLiveMonitoring(callback));\n      return;\n    }\n\n    // Monitor DOM changes and re-run accessibility checks\n    const observer = new MutationObserver(async (mutations) => {\n      let shouldRecheck = false;\n\n      for (const mutation of mutations) {\n        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n          shouldRecheck = true;\n          break;\n        }\n        if (mutation.type === 'attributes' && \n            ['aria-', 'role', 'tabindex', 'alt'].some(attr => \n              mutation.attributeName?.startsWith(attr))) {\n          shouldRecheck = true;\n          break;\n        }\n      }\n\n      if (shouldRecheck) {\n        try {\n          const results = await this.runAudit();\n          if (results.violations.length > 0) {\n            callback(results.violations);\n          }\n        } catch (error) {\n          console.error('Live accessibility monitoring error:', error);\n        }\n      }\n    });\n\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true,\n      attributes: true,\n      attributeFilter: ['aria-label', 'aria-labelledby', 'aria-describedby', 'role', 'tabindex', 'alt'],\n    });\n\n    this.observers.push(observer);\n  }\n\n  /**\n   * Stop live monitoring\n   */\n  stopLiveMonitoring(): void {\n    this.observers.forEach(observer => observer.disconnect());\n    this.observers = [];\n  }\n\n  /**\n   * Generate accessibility report HTML\n   */\n  generateReportHTML(report: AccessibilityAuditReport): string {\n    const { compliance, violations, passes, performance } = report;\n    \n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>HASIVU Accessibility Report</title>\n        <style>\n          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }\n          .header { background: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 24px; }\n          .metric { display: inline-block; margin-right: 24px; }\n          .metric-value { font-size: 24px; font-weight: bold; }\n          .metric-label { font-size: 12px; opacity: 0.8; }\n          .section { margin: 24px 0; }\n          .violation { background: #fef2f2; border: 1px solid #fca5a5; border-radius: 6px; padding: 16px; margin: 12px 0; }\n          .pass { background: #f0fdf4; border: 1px solid #86efac; border-radius: 6px; padding: 16px; margin: 12px 0; }\n          .impact-critical { border-left: 4px solid #dc2626; }\n          .impact-serious { border-left: 4px solid #ea580c; }\n          .impact-moderate { border-left: 4px solid #d97706; }\n          .impact-minor { border-left: 4px solid #65a30d; }\n          .help-link { color: #2563eb; text-decoration: none; }\n          .help-link:hover { text-decoration: underline; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>HASIVU Platform Accessibility Report</h1>\n          <p>Generated on ${new Date(report.timestamp).toLocaleString()}</p>\n          <p>URL: ${report.url}</p>\n        </div>\n\n        <div class=\"section\">\n          <h2>Compliance Summary</h2>\n          <div class=\"metric\">\n            <div class=\"metric-value\">${compliance.percentage}%</div>\n            <div class=\"metric-label\">Compliance Rate</div>\n          </div>\n          <div class=\"metric\">\n            <div class=\"metric-value\">${compliance.passed}</div>\n            <div class=\"metric-label\">Tests Passed</div>\n          </div>\n          <div class=\"metric\">\n            <div class=\"metric-value\">${compliance.failed}</div>\n            <div class=\"metric-label\">Violations</div>\n          </div>\n          <div class=\"metric\">\n            <div class=\"metric-value\">${performance.auditDuration.toFixed(0)}ms</div>\n            <div class=\"metric-label\">Audit Duration</div>\n          </div>\n        </div>\n\n        ${violations.length > 0 ? `\n          <div class=\"section\">\n            <h2>Violations (${violations.length})</h2>\n            ${violations.map(violation => `\n              <div class=\"violation impact-${violation.impact}\">\n                <h3>${violation.rule}</h3>\n                <p><strong>Impact:</strong> ${violation.impact}</p>\n                <p><strong>WCAG Level:</strong> ${violation.wcagLevel}</p>\n                <p><strong>Description:</strong> ${violation.description}</p>\n                <p><strong>Element:</strong> <code>${violation.element || 'N/A'}</code></p>\n                <p><a href=\"${violation.helpUrl}\" target=\"_blank\" class=\"help-link\">Learn more</a></p>\n              </div>\n            `).join('')}\n          </div>\n        ` : ''}\n\n        <div class=\"section\">\n          <h2>Successful Tests (${passes.length})</h2>\n          <p>The following accessibility tests passed:</p>\n          ${passes.slice(0, 10).map(pass => `\n            <div class=\"pass\">\n              <strong>${pass.rule}</strong>: ${pass.description}\n            </div>\n          `).join('')}\n          ${passes.length > 10 ? `<p>... and ${passes.length - 10} more tests passed.</p>` : ''}\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  // Private helper methods\n  private transformResults(results: any[]): AccessibilityTestResult[] {\n    return results.map(result => ({\n      id: result.id,\n      timestamp: Date.now(),\n      element: result.nodes?.[0]?.target?.[0] || '',\n      rule: result.id,\n      description: result.description,\n      impact: result.impact || 'moderate',\n      wcagLevel: this.getWcagLevel(result.tags),\n      category: this.getCategory(result.tags),\n      help: result.help,\n      helpUrl: result.helpUrl,\n      tags: result.tags,\n    }));\n  }\n\n  private getWcagLevel(tags: string[]): 'A' | 'AA' | 'AAA' {\n    if (tags.includes('wcag21aaa') || tags.includes('wcag2aaa')) return 'AAA';\n    if (tags.includes('wcag21aa') || tags.includes('wcag2aa')) return 'AA';\n    return 'A';\n  }\n\n  private getCategory(tags: string[]): AccessibilityTestResult['category'] {\n    if (tags.includes('forms')) return 'forms';\n    if (tags.includes('keyboard')) return 'keyboard';\n    if (tags.includes('color-contrast')) return 'color';\n    if (tags.includes('images')) return 'images';\n    if (tags.includes('multimedia')) return 'multimedia';\n    if (tags.includes('navigation')) return 'navigation';\n    return 'structure';\n  }\n\n  private getComplianceLevel(violations: AccessibilityTestResult[]): 'A' | 'AA' | 'AAA' {\n    const hasCritical = violations.some(v => v.impact === 'critical');\n    const hasSerious = violations.some(v => v.impact === 'serious');\n    \n    if (hasCritical || violations.length > 10) return 'A';\n    if (hasSerious || violations.length > 5) return 'AA';\n    return 'AAA';\n  }\n\n  private calculateContrastRatio(foreground: string, background: string): number {\n    const fgLuminance = this.getLuminance(foreground);\n    const bgLuminance = this.getLuminance(background);\n    \n    const lighter = Math.max(fgLuminance, bgLuminance);\n    const darker = Math.min(fgLuminance, bgLuminance);\n    \n    return (lighter + 0.05) / (darker + 0.05);\n  }\n\n  private getLuminance(color: string): number {\n    // Convert RGB to relative luminance\n    const rgb = color.match(/\\d+/g);\n    if (!rgb || rgb.length < 3) return 0;\n\n    const [r, g, b] = rgb.map(val => {\n      const normalized = parseInt(val) / 255;\n      return normalized <= 0.03928 \n        ? normalized / 12.92 \n        : Math.pow((normalized + 0.055) / 1.055, 2.4);\n    });\n\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n  }\n\n  private isElementVisible(element: HTMLElement): boolean {\n    const styles = window.getComputedStyle(element);\n    return styles.display !== 'none' && \n           styles.visibility !== 'hidden' && \n           styles.opacity !== '0' &&\n           element.offsetWidth > 0 && \n           element.offsetHeight > 0;\n  }\n\n  private hasFocusIndicator(element: HTMLElement): boolean {\n    const styles = window.getComputedStyle(element);\n    return styles.outline !== 'none' || \n           styles.boxShadow !== 'none' || \n           styles.borderColor !== styles.borderColor; // Check if border changes on focus\n  }\n\n  private getElementSelector(element: HTMLElement): string {\n    if (element.id) return `#${element.id}`;\n    if (element.className) return `.${element.className.split(' ')[0]}`;\n    return element.tagName.toLowerCase();\n  }\n}\n\n// Singleton instance for global use\nexport const accessibilityTester = AccessibilityTester.getInstance();\n\n// React hook for accessibility testing\nexport function useAccessibilityTesting() {\n  const runAudit = async (options?: Parameters<AccessibilityTester['runAudit']>[1]) => {\n    return await accessibilityTester.runAudit(undefined, options);\n  };\n\n  const testColorContrast = async (selector?: string) => {\n    return await accessibilityTester.testColorContrast(selector);\n  };\n\n  const testKeyboardNavigation = async () => {\n    return await accessibilityTester.testKeyboardNavigation();\n  };\n\n  return {\n    runAudit,\n    testColorContrast,\n    testKeyboardNavigation,\n  };\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/api-client.ts",["2492","2493","2494","2495","2496","2497","2498","2499","2500","2501","2502","2503","2504","2505","2506","2507","2508","2509","2510","2511","2512","2513","2514","2515","2516","2517","2518","2519","2520","2521","2522","2523","2524"],[],"/**\n * API Client for HASIVU Platform\n * Handles communication with the backend Express server\n */\n\nimport { \n  EnhancedLoginFormData, \n  RegistrationFormData,\n  ForgotPasswordFormData,\n  ProfileManagementFormData \n} from '@/components/auth/schemas';\n\n// API configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000';\n\n// Response types\ninterface APIResponse<T = any> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  error?: string;\n}\n\ninterface AuthResponse {\n  success: boolean;\n  message: string;\n  user?: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    permissions?: string[];\n    roles?: string[];\n  };\n  tokens?: {\n    accessToken: string;\n    refreshToken: string;\n  };\n  sessionId?: string;\n}\n\ninterface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  phone?: string;\n  timezone?: string;\n  language?: string;\n  preferences?: any;\n  createdAt: string;\n  updatedAt: string;\n  permissions?: string[];\n  roles?: string[];\n}\n\n// HTTP Client class\nclass APIClient {\n  private baseURL: string;\n  private accessToken: string | null = null;\n\n  constructor(baseURL: string = API_BASE_URL) {\n    this.baseURL = baseURL;\n    \n    // Load token from localStorage on client-side\n    if (typeof window !== 'undefined') {\n      this.accessToken = localStorage.getItem('accessToken');\n    }\n  }\n\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<APIResponse<T>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    const config: RequestInit = {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    };\n\n    // Add authorization header if token exists\n    if (this.accessToken) {\n      config.headers = {\n        ...config.headers,\n        'Authorization': `Bearer ${this.accessToken}`,\n      };\n    }\n\n    try {\n      const response = await fetch(url, config);\n      \n      // Handle non-JSON responses\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        if (!response.ok) {\n          return {\n            success: false,\n            error: `HTTP ${response.status}: ${response.statusText}`,\n          };\n        }\n        return { success: true };\n      }\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        return {\n          success: false,\n          error: data.message || data.error || `HTTP ${response.status}`,\n          ...data,\n        };\n      }\n\n      return {\n        success: true,\n        ...data,\n      };\n    } catch (error) {\n      console.error('API Request failed:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Network error',\n      };\n    }\n  }\n\n  // Token management\n  setToken(token: string) {\n    this.accessToken = token;\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('accessToken', token);\n    }\n  }\n\n  clearToken() {\n    this.accessToken = null;\n    if (typeof window !== 'undefined') {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n    }\n  }\n\n  // Authentication endpoints\n  async login(credentials: EnhancedLoginFormData): Promise<AuthResponse> {\n    const response = await this.request<AuthResponse>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n    });\n\n    if (response.success && response.data?.tokens?.accessToken) {\n      this.setToken(response.data.tokens.accessToken);\n      \n      // Store refresh token\n      if (typeof window !== 'undefined' && response.data.tokens.refreshToken) {\n        localStorage.setItem('refreshToken', response.data.tokens.refreshToken);\n      }\n    }\n\n    return response as AuthResponse;\n  }\n\n  async register(userData: RegistrationFormData): Promise<AuthResponse> {\n    return this.request<AuthResponse>('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n    }) as Promise<AuthResponse>;\n  }\n\n  async logout(): Promise<APIResponse> {\n    const response = await this.request('/auth/logout', {\n      method: 'POST',\n    });\n\n    this.clearToken();\n    return response;\n  }\n\n  async logoutAll(): Promise<APIResponse> {\n    const response = await this.request('/auth/logout-all', {\n      method: 'POST',\n    });\n\n    this.clearToken();\n    return response;\n  }\n\n  async forgotPassword(data: ForgotPasswordFormData): Promise<APIResponse> {\n    return this.request('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getCurrentUser(): Promise<APIResponse<{ user: User; sessionId: string }>> {\n    return this.request<{ user: User; sessionId: string }>('/auth/me');\n  }\n\n  async updateProfile(data: Partial<ProfileManagementFormData>): Promise<APIResponse<{ user: User }>> {\n    return this.request<{ user: User }>('/auth/profile', {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async changePassword(data: {\n    currentPassword: string;\n    newPassword: string;\n    newPasswordConfirm: string;\n  }): Promise<APIResponse> {\n    return this.request('/auth/change-password', {\n      method: 'PATCH',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async checkAuthStatus(): Promise<APIResponse<{ authenticated: boolean; userId?: string; sessionId?: string }>> {\n    return this.request<{ authenticated: boolean; userId?: string; sessionId?: string }>('/auth/status');\n  }\n\n  async refreshToken(): Promise<AuthResponse> {\n    const refreshToken = typeof window !== 'undefined' \n      ? localStorage.getItem('refreshToken') \n      : null;\n\n    if (!refreshToken) {\n      return { success: false, message: 'No refresh token available' };\n    }\n\n    const response = await this.request<AuthResponse>('/auth/refresh', {\n      method: 'POST',\n      body: JSON.stringify({ refreshToken }),\n    });\n\n    if (response.success && response.data?.accessToken) {\n      this.setToken(response.data.accessToken);\n    }\n\n    return response as AuthResponse;\n  }\n\n  async validatePassword(password: string): Promise<APIResponse<{ validation: any }>> {\n    return this.request<{ validation: any }>('/auth/validate-password', {\n      method: 'POST',\n      body: JSON.stringify({ password }),\n    });\n  }\n\n  // Menu endpoints\n  async getMenuItems(): Promise<APIResponse<any[]>> {\n    return this.request<any[]>('/menu/items');\n  }\n\n  async getMenuByDate(date: string): Promise<APIResponse<any>> {\n    return this.request<any>(`/menu/daily?date=${encodeURIComponent(date)}`);\n  }\n\n  // Order endpoints\n  async getOrders(): Promise<APIResponse<any[]>> {\n    return this.request<any[]>('/orders');\n  }\n\n  async createOrder(orderData: any): Promise<APIResponse<any>> {\n    return this.request<any>('/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData),\n    });\n  }\n\n  async getOrderById(orderId: string): Promise<APIResponse<any>> {\n    return this.request<any>(`/orders/${orderId}`);\n  }\n\n  async updateOrderStatus(orderId: string, status: string): Promise<APIResponse<any>> {\n    return this.request<any>(`/orders/${orderId}/status`, {\n      method: 'PATCH',\n      body: JSON.stringify({ status }),\n    });\n  }\n\n  // Payment endpoints\n  async processPayment(paymentData: any): Promise<APIResponse<any>> {\n    return this.request<any>('/payments/process', {\n      method: 'POST',\n      body: JSON.stringify(paymentData),\n    });\n  }\n\n  async getPaymentHistory(): Promise<APIResponse<any[]>> {\n    return this.request<any[]>('/payments/history');\n  }\n\n  // Kitchen endpoints (for staff)\n  async getKitchenOrders(): Promise<APIResponse<any[]>> {\n    return this.request<any[]>('/kitchen/orders');\n  }\n\n  async updateKitchenOrderStatus(orderId: string, status: string): Promise<APIResponse<any>> {\n    return this.request<any>(`/kitchen/orders/${orderId}`, {\n      method: 'PATCH',\n      body: JSON.stringify({ status }),\n    });\n  }\n\n  // Admin endpoints\n  async getUsers(): Promise<APIResponse<any[]>> {\n    return this.request<any[]>('/admin/users');\n  }\n\n  async updateUserRole(userId: string, role: string): Promise<APIResponse<any>> {\n    return this.request<any>(`/admin/users/${userId}/role`, {\n      method: 'PATCH',\n      body: JSON.stringify({ role }),\n    });\n  }\n\n  async getSystemStats(): Promise<APIResponse<any>> {\n    return this.request<any>('/admin/stats');\n  }\n}\n\n// Create singleton instance\nconst apiClient = new APIClient();\n\n// Automatic token refresh on 401 errors\nconst originalRequest = apiClient['request'];\napiClient['request'] = async function(endpoint, options = {}) {\n  const response = await originalRequest.call(this, endpoint, options);\n  \n  // If we get 401 and have a refresh token, try to refresh\n  if (!response.success && response.error?.includes('401') && typeof window !== 'undefined') {\n    const refreshToken = localStorage.getItem('refreshToken');\n    if (refreshToken) {\n      const refreshResponse = await this.refreshToken();\n      if (refreshResponse.success) {\n        // Retry the original request with new token\n        return originalRequest.call(this, endpoint, options);\n      }\n    }\n  }\n  \n  return response;\n};\n\n// Named exports for backward compatibility\nexport const api = apiClient;\nexport { apiClient };\n\n// Default export\nexport default apiClient;\nexport type { APIResponse, AuthResponse, User };","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/demo-data.ts",["2525"],[]," * Demo data for HASIVU Platform dashboards\n * This file contains comprehensive mock data for testing all dashboard functionalities\nexport const demoSchool = {}\n  // Student demo data\nexport const demoStudents = []\n];\n  // Parent demo data\nexport const demoParents = []\n    ]\n];\n  // Admin demo data\nexport const demoAdmins = []\n];\n  // Kitchen staff demo data\nexport const demoKitchenStaff = []\n];\n  // Meal categories and items\nexport const demoMealCategories = []\n];\nexport const demoMealItems = []\n    ingredients: ['Basmati Rice', 'Mixed Vegetables', 'Spices', 'Ghee'],\n    preparationTime: 15,\n    isPopular: true\n    ingredients: ['Chicken Breast', 'Rice', 'Salad', 'Herbs'],\n    preparationTime: 18,\n    isPopular: true\n];\n  // Order statuses and types\nexport const orderStatuses = []\n] as const;\nexport const orderPriorities = []\n] as const;\n  // Nutrition targets by age group\nexport const nutritionTargets = {}\n  '9-13': {}\n  '14-18': {}\n  // Kitchen stations configuration\nexport const kitchenStations = []\n];\n  // Achievement categories and badges\nexport const achievementCategories = []\n] as const;\nexport const demoAchievements = []\n];\n  // Helper functions for demo data\nexport const getCurrentDate = () => new Date().toISOString().split('T')[0];\nexport const getRandomElement = <T>(array: T[]): T => {}\n// TODO: Refactor this function - it may be too long\nexport const\ngenerateOrderId = (\n  return `ORD-${Math.random().toString(36).substr(2, 6).toUpperCase()}``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/design-system.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/lib/enhanced-api-client.ts",["2526"],[]," * HASIVU Platform - Enhanced API Client with Full ShadCN Integration\n * Production-ready API integration layer that connects all ShadCN components\n * with backend services, real-time updates, and optimistic UI patterns;\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { socketClient } from './socket-client';\n  // Enhanced types for component integration\ninterface ApiResponse<T = any> {}\nconst config: ApiConfig = {}\n  }> = [];\n  private optimisticUpdates: Map<string, OptimisticUpdate> = new Map();\n  private realTimeSubscriptions: Map<string, RealTimeSubscription> = new Map();\n  private componentStates: Map<string, ComponentState> = new Map();\n  private requestQueue: Array<() => Promise<any>> = [];\n  private isOffline = false;\n    this.setupInterceptors();\n  private setupInterceptors() {}\n          config.headers.Authorization = `Bearer ${token}``\n          console.log(`✅ ${response.config.method?.toUpperCase()} ${response.config.url}``\n                  originalRequest.headers.Authorization = `Bearer ${token}``\n            originalRequest.headers.Authorization = `Bearer ${newToken}``\n      `${config.baseURL}/ auth/refresh``\n      const redirectUrl = `/ auth/login?redirect=${encodeURIComponent(currentPath)}&reason=session_expired``\n        code: data?.code || `HTTP_${status}``\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}``\n    getItem: (id: string) => apiClient.get(`/meals/items/${id}``\n    getNutrition: (id: string) => apiClient.get(`/m eals/nutrition/${id}``\n    getById: (id: string) => apiClient.get(`/ orders/${id}``\n    track: (id: string) => apiClient.get(`/ orders/track/${id}``\n    cancel: (id: string) => apiClient.patch(`/orders/${id}/cancel``\n    markAsRead: (id: string) => apiClient.patch(`/notifications/${id}/read``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/adaptive-rate-limiter.ts",["2527"],[]," * HASIVU Platform - Adaptive Rate Limiting Service\n * Intelligent rate limiting based on user behavior, system load, and threat detection\n * Implements sliding window algorithm with Redis for distributed rate limiting;\nimport { RedisService } from '../services/redis.service';\nimport { logger } from '../utils/logger';\nimport { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\n  private systemLoadCache: { value: number; timestamp: number } | null = null;\n  // User tier definitions\n  private readonly userTiers: Record<string, UserTier> = {}\n    free: { name: 'free', multiplier: 1, burstAllowance: 1.2, priority: 1 },\n    premium: { name: 'premium', multiplier: 3, burstAllowance: 1.5, priority: 2 },\n    admin: { name: 'admin', multiplier: 10, burstAllowance: 2.0, priority: 3 },\n    super_admin: { name: 'super_admin', multiplier: 50, burstAllowance: 3.0, priority: 4 }\n  // Endpoint-specific base limits (requests per 15 minutes)\n  private readonly endpointLimits: Record<string, number> = {}\n   * Check rate limit for a request;\n  async checkRateLimit(\n    event: APIGatewayProxyEvent,\n    options: RateLimitOptions,\n    userTier: string = 'free',\n    userId?: string\n  ): Promise<RateLimitResult> {}\n      // Use sliding window algorithm\n      const result = await this.slidingWindowRateLimit(\n        key,\n        adjustedLimit,\n        options.windowMs,\n        options.skipSuccessful,\n        options.skipFailed\n      // Log rate limiting metrics\n      this.logRateLimitMetrics(event, result, systemLoad, userTier, Date.now() - startTime);\n      return result;\n      // Fail open - allow request on rate limiter error\n      return {}\n   * Sliding window rate limiting implementation;\n  private async slidingWindowRateLimit(\n    key: string,\n    limit: number,\n    windowMs: number,\n    skipSuccessful?: boolean,\n    skipFailed?: boolean\n  ): Promise<RateLimitResult> {}\n    const requestId = `${now}-${Math.random()}``\n      return `rl:${options.keyGenerator(event)}``\n      return `rl:user:${userId}:${method}:${endpoint}``\n    return `rl:ip:${ip}:${method}:${endpoint}``\n    const key = `rapid:${clientIP}``\n    const patternKey = `pattern:${clientIP}``\n      await this.redis.sadd(patternKey, `${method}:${path}``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/cache-service.ts",["2528"],[]," * HASIVU Platform - Enhanced Multi-Layer Caching Service\n * Implements L1 (in-memory), L2 (Redis), L3 (CDN) caching strategy\n * with intelligent cache warming and invalidation patterns;\nimport { RedisService } from '../services/redis.service';\nimport { logger } from '../utils/logger';\ninterface CacheEntry<T> {}\n    hits: { l1: 0, l2: 0, total: 0 },\n    misses: 0,\n    sets: 0,\n    invalidations: 0\n  private\n  static getInstance(): CacheService {}\n    return CacheService.instance;\n   * Get value from cache with fallback execution;\n  async get<T>(\n    key: string,\n    fallback?: () => Promise<T>,\n    options: CacheOptions = {}\n  ): Promise<T | null> {}\n    const { ttl = 300, tags = [], version, compress = false, warmup = false } = options;\n    try {}\n        logger.debug('Cache hit L1', { key, ttl: localEntry.expires - Date.now() });\n        return localEntry.data;\n      // L2: Check Redis cache\n      const redisData = await this.redis.get(key);\n      if (redisData) {}\n            this.stats.hits.l2++;\n            this.stats.hits.total++;\n            logger.debug('Cache hit L2', { key, version: entry.version });\n            return entry.data;\n          logger.warn('Failed to parse Redis cache entry', { key, error: parseError.message });\n      // Cache miss - execute fallback\n      this.stats.misses++;\n      if (fallback) {}\n        await this.set(key, result, { ttl, tags, version, compress });\n        // Trigger warmup if enabled\n        if (warmup) {}\n        return result;\n      return null;\n      logger.error('Cache get operation failed', { key, error: error.message });\n      // Execute fallback on cache failure\n      if (fallback) {}\n          logger.error('Fallback execution failed', { key, error: fallbackError.message });\n          throw fallbackError;\n      return null;\n   * Set value in cache;\n  async set<T>(\n    key: string,\n    value: T,\n    options: CacheOptions = {}\n  ): Promise<void> {}\n    const { ttl = 300, tags = [], version, compress = false } = options;\n    try {}\n      // Set in L1 cache\n      this.localCache.set(key, entry);\n      // Set in L2 cache (Redis)\n      const serialized = compress ? this.compress(entry) : JSON.stringify(entry);\n      await this.redis.setex(key, ttl, serialized);\n      // Store tags for invalidation\n      if (tags.length > 0) {}\n      this.stats.sets++;\n      logger.debug('Cache set successful', { key, ttl, tags, compressed: compress });\n      logger.error('Cache set operation failed', { key, error: error.message });\n      throw error;\n   * Delete specific key from cache;\n  async delete(key: string): Promise<void> {}\n      logger.debug('Cache key deleted', { key });\n      logger.error('Cache delete operation failed', { key, error: error.message });\n   * Invalidate cache by pattern;\n  async invalidatePattern(pattern: string): Promise<void> {}\n      keysToDelete.forEach(key => this.localCache.delete(key));\n      // Invalidate L2 cache\n      const redisKeys = await this.redis.client.keys(pattern);\n      if (redisKeys.length > 0) {}\n      this.stats.invalidations += keysToDelete.length + redisKeys.length;\n      logger.info('Cache pattern invalidated', {}\n      logger.error('Cache pattern invalidation failed', { pattern, error: error.message });\n   * Invalidate cache by tags;\n  async invalidateByTags(tags: string[]): Promise<void> {}\n        const tagKeys = await this.redis.smembers(`cache:tag:${tag}``\n          this.redis.del(`cache:tag:${tag}``\n        return `gzip:${compressed.toString('base64')}``\n          this.redis.sadd(`cache:tag:${tag}``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance/lambda-optimizer.ts",["2529"],[]," * HASIVU Platform - Lambda Performance Optimizer\n * Cold start elimination, connection pooling, and memory optimization for serverless functions;\nimport { APIGatewayProxyEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\nimport { PrismaClient } from '@prisma/client';\nimport { logger } from '../utils/logger';\ninterface ConnectionPool<T> {}\n  static getInstance(): LambdaOptimizer {}\n    return LambdaOptimizer.instance;\n   * High-order function to wrap Lambda handlers with optimizations;\n  static optimizeHandler<T = APIGatewayProxyResult>(\n    handler: (event: APIGatewayProxyEvent, context: Context) => Promise<T;\n        // Pre-execution optimizations\n        await LambdaOptimizer.preExecutionOptimization(context);\n        // Execute the actual handler\n        const result = await handler(event, context);\n        // Post-execution cleanup and metrics\n        const metrics = LambdaOptimizer.calculateMetrics(startTime, initialMemory);\n        LambdaOptimizer.logPerformanceMetrics(context, metrics);\n        // Add performance headers to response\n        if (LambdaOptimizer.isAPIGatewayResponse(result)) {}\n        return result;\n        throw error;\n   * Get or create optimized database connection;\n  static async getDatabaseConnection(): Promise<PrismaClient> {}\n    const pool = LambdaOptimizer.connectionPools.get(poolKey)!;\n    // Try to get an available connection\n    const availableConnection = pool.connections.find(conn => !pool.inUse.has(conn));\n    if (availableConnection) {}\n    // Create new connection if under limit\n    if (pool.connections.length < pool.maxConnections) {}\n        log: process.env.NODE_ENV === 'development' ? ['error', 'warn'] : ['error']\n      pool.connections.push(newConnection);\n      pool.inUse.add(newConnection);\n      logger.debug('Created new database connection', {}\n      return newConnection;\n    // Wait for available connection\n    return new Promise((resolve, reject\n      }, 100);\n      // Timeout after acquireTimeout\n      setTimeout((\n      }, pool.acquireTimeout);\n   * Release database connection back to pool;\n  static releaseDatabaseConnection(connection: PrismaClient): void {}\n   * Optimize memory usage;\n  static async optimizeMemory(): Promise<void> {}\n      // Clear require cache for non-essential modules\n      LambdaOptimizer.clearRequireCache();\n      // Force garbage collection if available\n      if (global.gc) {}\n   * Preload critical dependencies to avoid cold start overhead;\n  static async preloadDependencies(): Promise<void> {}\n      // Initialize database connection pool\n      await LambdaOptimizer.getDatabaseConnection();\n      logger.debug('Dependencies preloaded successfully');\n      logger.warn('Failed to preload some dependencies', { error: error.message });\n   * Create optimized error response;\n  static createErrorResponse(\n    statusCode: number,\n    error: string,\n    details?: any\n  ): APIGatewayProxyResult {}\n      body: JSON.stringify({}\n        ...(details && { details }),\n        timestamp: new Date().toISOString()\n   * Create optimized success response with compression;\n  static createSuccessResponse(\n    data: any,\n    statusCode: number = 200,\n    compress: boolean = true\n  ): APIGatewayProxyResult {}\n    const headers: Record<string, string> = {}\n    // Compress response if it's large enough and compression is enabled\n    if (compress && body.length > 1024) {}\n        logger.warn('Response compression failed', { error: error.message });\n    return {}\n  // Private helper methods\n  private static isWarmupRequest(event: APIGatewayProxyEvent): boolean {}\n  private static handleWarmupRequest(context: Context): APIGatewayProxyResult {}\n    return {}\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({}\n  private static async preExecutionOptimization(context: Context): Promise<void> {}\n    process.on('uncaughtException', (error\n    // Optimize memory if needed\n    await LambdaOptimizer.optimizeMemory();\n  private static calculateMetrics(\n    startTime: number,\n    initialMemory: NodeJS.MemoryUsage\n  ): PerformanceMetrics {}\n  private static getConnectionPoolStats(): Record<string, number> {}\n    const stats: Record<string, number> = {};\n    for (const [poolName, pool] of LambdaOptimizer.connectionPools.entries()) {}\n      stats[`${poolName}_total``\n      stats[`${poolName}_in_use``\n      stats[`${poolName}_available``\n    response.headers['X-Execution-Time'] = `${metrics.executionTime}ms``\n    response.headers['X-Memory-Used'] = `${Math.round(metrics.memoryUsed / 1024 / 1024)}MB``\n      response.headers['X-Init-Time'] = `${metrics.initTime}ms``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/performance.ts",["2530","2531","2532","2533","2534","2535","2536","2537","2538","2539","2540","2541","2542","2543","2544","2545","2546","2547","2548","2549"],[],"/**\n * HASIVU Platform - Production Performance Monitoring System\n * Comprehensive Core Web Vitals tracking, performance metrics, and optimization\n * Implements real-time performance monitoring with analytics integration\n */\n\nimport { getCLS, getFCP, getFID, getLCP, getTTFB, onCLS, onFCP, onFID, onLCP, onTTFB } from 'web-vitals';\n\n// Performance thresholds (based on Core Web Vitals recommendations)\nexport const PERFORMANCE_THRESHOLDS = {\n  // Core Web Vitals\n  LCP: { good: 2500, needs_improvement: 4000 }, // Largest Contentful Paint (ms)\n  FID: { good: 100, needs_improvement: 300 },   // First Input Delay (ms) \n  CLS: { good: 0.1, needs_improvement: 0.25 },  // Cumulative Layout Shift\n  \n  // Additional metrics\n  FCP: { good: 1800, needs_improvement: 3000 }, // First Contentful Paint (ms)\n  TTFB: { good: 800, needs_improvement: 1800 }, // Time to First Byte (ms)\n  \n  // Custom metrics\n  TTI: { good: 3800, needs_improvement: 7300 }, // Time to Interactive (ms)\n  TBT: { good: 200, needs_improvement: 600 },   // Total Blocking Time (ms)\n} as const;\n\n// Performance metric types\nexport interface PerformanceMetric {\n  name: string;\n  value: number;\n  delta?: number;\n  rating: 'good' | 'needs-improvement' | 'poor';\n  timestamp: number;\n  url: string;\n  id?: string;\n  navigationType?: string;\n  connectionType?: string;\n  deviceType?: 'mobile' | 'tablet' | 'desktop';\n  userId?: string;\n  sessionId?: string;\n}\n\nexport interface PerformanceReport {\n  metrics: PerformanceMetric[];\n  pageInfo: {\n    url: string;\n    title: string;\n    referrer: string;\n    timestamp: number;\n  };\n  deviceInfo: {\n    userAgent: string;\n    deviceType: 'mobile' | 'tablet' | 'desktop';\n    connection?: NetworkInformation;\n    memory?: DeviceMemoryInfo;\n  };\n  vitals: {\n    lcp?: PerformanceMetric;\n    fid?: PerformanceMetric;\n    cls?: PerformanceMetric;\n    fcp?: PerformanceMetric;\n    ttfb?: PerformanceMetric;\n  };\n  customMetrics: Record<string, PerformanceMetric>;\n  score: number; // Overall performance score (0-100)\n}\n\n// Device type detection\nfunction getDeviceType(): 'mobile' | 'tablet' | 'desktop' {\n  if (typeof window === 'undefined') return 'desktop';\n  \n  const userAgent = navigator.userAgent;\n  if (/tablet|ipad|playbook|silk/i.test(userAgent)) return 'tablet';\n  if (/mobile|iphone|ipod|android|blackberry|opera|mini|windows\\sce|palm|smartphone|iemobile/i.test(userAgent)) return 'mobile';\n  return 'desktop';\n}\n\n// Performance rating calculation\nfunction getPerformanceRating(name: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n  const thresholds = PERFORMANCE_THRESHOLDS[name as keyof typeof PERFORMANCE_THRESHOLDS];\n  if (!thresholds) return 'good';\n  \n  if (value <= thresholds.good) return 'good';\n  if (value <= thresholds.needs_improvement) return 'needs-improvement';\n  return 'poor';\n}\n\n// Generate session ID\nfunction generateSessionId(): string {\n  return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n}\n\n// Performance reporter class\nclass PerformanceReporter {\n  private metrics: PerformanceMetric[] = [];\n  private sessionId: string;\n  private userId?: string;\n  private reportingEndpoint: string;\n  private batchSize: number = 10;\n  private reportingInterval: number = 30000; // 30 seconds\n  private reportingTimer?: NodeJS.Timeout;\n\n  constructor(config?: {\n    endpoint?: string;\n    batchSize?: number;\n    interval?: number;\n    userId?: string;\n  }) {\n    this.sessionId = generateSessionId();\n    this.userId = config?.userId;\n    this.reportingEndpoint = config?.endpoint || '/api/v1/performance';\n    this.batchSize = config?.batchSize || 10;\n    this.reportingInterval = config?.interval || 30000;\n    \n    this.setupReporting();\n    this.setupBeforeUnloadReporting();\n  }\n\n  // Add metric to collection\n  addMetric(metric: Omit<PerformanceMetric, 'timestamp' | 'url' | 'deviceType' | 'sessionId'>) {\n    const fullMetric: PerformanceMetric = {\n      ...metric,\n      timestamp: Date.now(),\n      url: window.location.href,\n      deviceType: getDeviceType(),\n      sessionId: this.sessionId,\n      userId: this.userId,\n    };\n    \n    this.metrics.push(fullMetric);\n    \n    // Report immediately for critical metrics\n    if (metric.rating === 'poor') {\n      this.reportMetrics([fullMetric]);\n    }\n    \n    // Batch reporting\n    if (this.metrics.length >= this.batchSize) {\n      this.reportBatch();\n    }\n  }\n\n  // Setup periodic reporting\n  private setupReporting() {\n    this.reportingTimer = setInterval(() => {\n      if (this.metrics.length > 0) {\n        this.reportBatch();\n      }\n    }, this.reportingInterval);\n  }\n\n  // Setup before unload reporting\n  private setupBeforeUnloadReporting() {\n    window.addEventListener('beforeunload', () => {\n      if (this.metrics.length > 0) {\n        this.reportBatch(true); // Use sendBeacon for reliability\n      }\n    });\n    \n    // Use Page Visibility API for better reliability\n    document.addEventListener('visibilitychange', () => {\n      if (document.visibilityState === 'hidden' && this.metrics.length > 0) {\n        this.reportBatch(true);\n      }\n    });\n  }\n\n  // Report metrics batch\n  private reportBatch(useBeacon: boolean = false) {\n    const metricsToReport = [...this.metrics];\n    this.metrics = [];\n    \n    this.reportMetrics(metricsToReport, useBeacon);\n  }\n\n  // Send metrics to analytics endpoint\n  private async reportMetrics(metrics: PerformanceMetric[], useBeacon: boolean = false) {\n    try {\n      const report: Partial<PerformanceReport> = {\n        metrics,\n        pageInfo: {\n          url: window.location.href,\n          title: document.title,\n          referrer: document.referrer,\n          timestamp: Date.now(),\n        },\n        deviceInfo: {\n          userAgent: navigator.userAgent,\n          deviceType: getDeviceType(),\n          connection: (navigator as any).connection,\n          memory: (performance as any).memory,\n        },\n      };\n\n      const payload = JSON.stringify(report);\n      \n      if (useBeacon && navigator.sendBeacon) {\n        // Use sendBeacon for reliability during page unload\n        navigator.sendBeacon(this.reportingEndpoint, payload);\n      } else {\n        // Standard fetch for regular reporting\n        fetch(this.reportingEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: payload,\n          keepalive: true,\n        }).catch(error => {\n          console.warn('[Performance] Failed to report metrics:', error);\n          // Store in localStorage for retry\n          this.storeForRetry(metrics);\n        });\n      }\n    } catch (error) {\n      console.warn('[Performance] Failed to prepare metrics report:', error);\n    }\n  }\n\n  // Store failed metrics for retry\n  private storeForRetry(metrics: PerformanceMetric[]) {\n    try {\n      const stored = localStorage.getItem('hasivu_performance_retry') || '[]';\n      const retryMetrics = JSON.parse(stored);\n      retryMetrics.push(...metrics);\n      \n      // Limit stored metrics to prevent storage bloat\n      const limited = retryMetrics.slice(-100);\n      localStorage.setItem('hasivu_performance_retry', JSON.stringify(limited));\n    } catch (error) {\n      console.warn('[Performance] Failed to store metrics for retry:', error);\n    }\n  }\n\n  // Retry failed metrics\n  retryFailedMetrics() {\n    try {\n      const stored = localStorage.getItem('hasivu_performance_retry');\n      if (stored) {\n        const retryMetrics = JSON.parse(stored);\n        if (retryMetrics.length > 0) {\n          this.reportMetrics(retryMetrics);\n          localStorage.removeItem('hasivu_performance_retry');\n        }\n      }\n    } catch (error) {\n      console.warn('[Performance] Failed to retry metrics:', error);\n    }\n  }\n\n  // Cleanup\n  destroy() {\n    if (this.reportingTimer) {\n      clearInterval(this.reportingTimer);\n    }\n    \n    // Report any remaining metrics\n    if (this.metrics.length > 0) {\n      this.reportBatch(true);\n    }\n  }\n}\n\n// Global performance reporter instance\nlet performanceReporter: PerformanceReporter;\n\n// Initialize performance monitoring\nexport function initPerformanceMonitoring(config?: {\n  endpoint?: string;\n  batchSize?: number;\n  interval?: number;\n  userId?: string;\n  enableCustomMetrics?: boolean;\n}) {\n  if (typeof window === 'undefined') return;\n  \n  // Initialize reporter\n  performanceReporter = new PerformanceReporter({\n    endpoint: config?.endpoint,\n    batchSize: config?.batchSize,\n    interval: config?.interval,\n    userId: config?.userId,\n  });\n\n  // Core Web Vitals monitoring\n  onCLS((metric) => {\n    performanceReporter.addMetric({\n      name: 'CLS',\n      value: metric.value,\n      delta: metric.delta,\n      rating: getPerformanceRating('CLS', metric.value),\n      id: metric.id,\n      navigationType: metric.navigationType,\n    });\n  });\n\n  onFID((metric) => {\n    performanceReporter.addMetric({\n      name: 'FID',\n      value: metric.value,\n      delta: metric.delta,\n      rating: getPerformanceRating('FID', metric.value),\n      id: metric.id,\n      navigationType: metric.navigationType,\n    });\n  });\n\n  onLCP((metric) => {\n    performanceReporter.addMetric({\n      name: 'LCP',\n      value: metric.value,\n      delta: metric.delta,\n      rating: getPerformanceRating('LCP', metric.value),\n      id: metric.id,\n      navigationType: metric.navigationType,\n    });\n  });\n\n  onFCP((metric) => {\n    performanceReporter.addMetric({\n      name: 'FCP',\n      value: metric.value,\n      delta: metric.delta,\n      rating: getPerformanceRating('FCP', metric.value),\n      id: metric.id,\n      navigationType: metric.navigationType,\n    });\n  });\n\n  onTTFB((metric) => {\n    performanceReporter.addMetric({\n      name: 'TTFB',\n      value: metric.value,\n      delta: metric.delta,\n      rating: getPerformanceRating('TTFB', metric.value),\n      id: metric.id,\n      navigationType: metric.navigationType,\n    });\n  });\n\n  // Custom metrics if enabled\n  if (config?.enableCustomMetrics) {\n    initCustomMetrics();\n  }\n\n  // Retry any failed metrics from previous sessions\n  setTimeout(() => {\n    performanceReporter.retryFailedMetrics();\n  }, 1000);\n\n  console.log('[Performance] Monitoring initialized');\n}\n\n// Custom performance metrics\nfunction initCustomMetrics() {\n  // Time to Interactive (TTI) approximation\n  let ttiObserver: PerformanceObserver;\n  \n  if ('PerformanceObserver' in window) {\n    ttiObserver = new PerformanceObserver((list) => {\n      const entries = list.getEntries();\n      const lastEntry = entries[entries.length - 1];\n      \n      if (lastEntry && lastEntry.entryType === 'navigation') {\n        const tti = (lastEntry as PerformanceNavigationTiming).loadEventEnd;\n        if (tti > 0) {\n          performanceReporter.addMetric({\n            name: 'TTI',\n            value: tti,\n            rating: getPerformanceRating('TTI', tti),\n          });\n        }\n      }\n    });\n    \n    try {\n      ttiObserver.observe({ entryTypes: ['navigation'] });\n    } catch (error) {\n      console.warn('[Performance] TTI observer failed:', error);\n    }\n  }\n\n  // Custom business metrics\n  trackCustomBusinessMetrics();\n}\n\n// Track business-specific performance metrics\nfunction trackCustomBusinessMetrics() {\n  // Menu load time\n  const trackMenuLoadTime = () => {\n    const startTime = performance.now();\n    \n    // This would be called when menu data is loaded\n    window.addEventListener('hasivu:menu-loaded', () => {\n      const loadTime = performance.now() - startTime;\n      performanceReporter.addMetric({\n        name: 'MENU_LOAD_TIME',\n        value: loadTime,\n        rating: loadTime < 1000 ? 'good' : loadTime < 2000 ? 'needs-improvement' : 'poor',\n      });\n    });\n  };\n\n  // Order completion time\n  const trackOrderCompletion = () => {\n    window.addEventListener('hasivu:order-started', () => {\n      const startTime = performance.now();\n      \n      const completionHandler = () => {\n        const completionTime = performance.now() - startTime;\n        performanceReporter.addMetric({\n          name: 'ORDER_COMPLETION_TIME',\n          value: completionTime,\n          rating: completionTime < 30000 ? 'good' : completionTime < 60000 ? 'needs-improvement' : 'poor',\n        });\n        window.removeEventListener('hasivu:order-completed', completionHandler);\n      };\n      \n      window.addEventListener('hasivu:order-completed', completionHandler);\n    });\n  };\n\n  trackMenuLoadTime();\n  trackOrderCompletion();\n}\n\n// Manual metric tracking\nexport function trackCustomMetric(name: string, value: number, thresholds?: { good: number; needs_improvement: number }) {\n  if (!performanceReporter) {\n    console.warn('[Performance] Reporter not initialized');\n    return;\n  }\n\n  let rating: 'good' | 'needs-improvement' | 'poor' = 'good';\n  if (thresholds) {\n    if (value <= thresholds.good) rating = 'good';\n    else if (value <= thresholds.needs_improvement) rating = 'needs-improvement';\n    else rating = 'poor';\n  }\n\n  performanceReporter.addMetric({\n    name: name.toUpperCase(),\n    value,\n    rating,\n  });\n}\n\n// Performance utilities\nexport const PerformanceUtils = {\n  // Mark performance timing\n  mark: (name: string) => {\n    if ('performance' in window && 'mark' in performance) {\n      performance.mark(name);\n    }\n  },\n\n  // Measure performance between marks\n  measure: (name: string, startMark: string, endMark?: string) => {\n    if ('performance' in window && 'measure' in performance) {\n      try {\n        performance.measure(name, startMark, endMark);\n        const measure = performance.getEntriesByName(name, 'measure')[0];\n        return measure ? measure.duration : 0;\n      } catch (error) {\n        console.warn('[Performance] Measure failed:', error);\n        return 0;\n      }\n    }\n    return 0;\n  },\n\n  // Get current performance metrics\n  getCurrentMetrics: () => {\n    if ('performance' in window) {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      \n      return {\n        domContentLoaded: navigation.domContentLoadedEventEnd - navigation.fetchStart,\n        loadComplete: navigation.loadEventEnd - navigation.fetchStart,\n        firstByte: navigation.responseStart - navigation.fetchStart,\n        domProcessing: navigation.domComplete - navigation.domLoading,\n        resourcesLoading: navigation.loadEventEnd - navigation.domContentLoadedEventEnd,\n      };\n    }\n    return null;\n  },\n\n  // Performance budget check\n  checkPerformanceBudget: (budgets: Record<string, number>) => {\n    const currentMetrics = PerformanceUtils.getCurrentMetrics();\n    if (!currentMetrics) return {};\n\n    const violations: Record<string, { actual: number; budget: number; violation: number }> = {};\n    \n    Object.entries(budgets).forEach(([metric, budget]) => {\n      const actual = currentMetrics[metric as keyof typeof currentMetrics];\n      if (actual && actual > budget) {\n        violations[metric] = {\n          actual,\n          budget,\n          violation: actual - budget,\n        };\n      }\n    });\n\n    return violations;\n  },\n};\n\n// Resource loading performance\nexport function trackResourcePerformance() {\n  if ('PerformanceObserver' in window) {\n    const observer = new PerformanceObserver((list) => {\n      list.getEntries().forEach((entry) => {\n        if (entry.entryType === 'resource') {\n          const resource = entry as PerformanceResourceTiming;\n          \n          // Track slow resources\n          if (resource.duration > 1000) {\n            performanceReporter?.addMetric({\n              name: 'SLOW_RESOURCE',\n              value: resource.duration,\n              rating: 'poor',\n            });\n          }\n        }\n      });\n    });\n\n    try {\n      observer.observe({ entryTypes: ['resource'] });\n    } catch (error) {\n      console.warn('[Performance] Resource observer failed:', error);\n    }\n  }\n}\n\n// Cleanup performance monitoring\nexport function cleanupPerformanceMonitoring() {\n  if (performanceReporter) {\n    performanceReporter.destroy();\n  }\n}\n\n// Performance debugging (development only)\nexport function debugPerformance() {\n  if (process.env.NODE_ENV !== 'development') return;\n  \n  console.group('🚀 Performance Debug Info');\n  \n  // Core Web Vitals\n  getCLS(console.log.bind(console, 'CLS:'));\n  getFCP(console.log.bind(console, 'FCP:'));\n  getFID(console.log.bind(console, 'FID:'));\n  getLCP(console.log.bind(console, 'LCP:'));\n  getTTFB(console.log.bind(console, 'TTFB:'));\n  \n  // Current metrics\n  const currentMetrics = PerformanceUtils.getCurrentMetrics();\n  if (currentMetrics) {\n    console.table(currentMetrics);\n  }\n  \n  // Resource performance\n  const resources = performance.getEntriesByType('resource') as PerformanceResourceTiming[];\n  const slowResources = resources.filter(r => r.duration > 500);\n  if (slowResources.length > 0) {\n    console.warn('Slow resources (>500ms):', slowResources);\n  }\n  \n  console.groupEnd();\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/seo.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/lib/socket-client.ts",["2550","2551","2552","2553"],[],"/**\n * HASIVU Platform - Enhanced Socket.IO Client\n * Real-time WebSocket client for order updates, notifications, and RFID events\n * Integrates with ShadCN components and Redux store\n */\nimport { io, Socket } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\n\n// Socket event types for type safety\ninterface SocketEvents {\n  order_created: (data: { orderId: string; status: string }) => void;\n  order_updated: (data: { orderId: string; status: string }) => void;\n  order_cancelled: (data: { orderId: string; reason: string }) => void;\n  payment_success: (data: { orderId: string; amount: number }) => void;\n  payment_failed: (data: { orderId: string; error: string }) => void;\n  rfid_scan: (data: { cardId: string; userId: string }) => void;\n  notification: (data: { title: string; message: string; type: 'info' | 'success' | 'warning' | 'error' }) => void;\n}\n\nclass SocketClient {\n  private socket: Socket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n\n  constructor() {\n    this.connect();\n  }\n\n  private connect(): void {\n    try {\n      this.socket = io(process.env.NEXT_PUBLIC_SOCKET_URL || 'http://localhost:3000', {\n        autoConnect: true,\n        reconnection: true,\n        reconnectionDelay: 1000,\n        reconnectionAttempts: this.maxReconnectAttempts,\n        transports: ['websocket', 'polling'],\n      });\n\n      this.setupEventHandlers();\n    } catch (error) {\n      console.warn('Socket connection failed:', error);\n    }\n  }\n\n  private setupEventHandlers(): void {\n    if (!this.socket) return;\n\n    this.socket.on('connect', () => {\n      console.log('Connected to server');\n      this.reconnectAttempts = 0;\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n\n    this.socket.on('reconnect_failed', () => {\n      toast.error('Unable to connect to server. Please check your connection.');\n    });\n\n    this.socket.on('notification', (data) => {\n      const { title, message, type } = data;\n      switch (type) {\n        case 'success':\n          toast.success(`${title}: ${message}`);\n          break;\n        case 'warning':\n          toast.error(`${title}: ${message}`);\n          break;\n        case 'error':\n          toast.error(`${title}: ${message}`);\n          break;\n        default:\n          toast(`${title}: ${message}`);\n      }\n    });\n  }\n\n  // Public methods for socket management\n  public on<K extends keyof SocketEvents>(event: K, handler: SocketEvents[K]): void {\n    if (this.socket) {\n      this.socket.on(event as string, handler);\n    }\n  }\n\n  public emit(event: string, data: any): void {\n    if (this.socket?.connected) {\n      this.socket.emit(event, data);\n    }\n  }\n\n  public disconnect(): void {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n    }\n  }\n\n  public isConnected(): boolean {\n    return this.socket?.connected || false;\n  }\n\n  // Authentication methods\n  public authenticate(token: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('authenticate', { token });\n    }\n  }\n\n  public joinUserRoom(userId: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('join_user_room', { userId });\n    }\n  }\n\n  public leaveUserRoom(userId: string): void {\n    if (this.socket?.connected) {\n      this.socket.emit('leave_user_room', { userId });\n    }\n  }\n}\n\n// Export singleton instance\nexport const socketClient = new SocketClient();\nexport default socketClient;","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/test-polyfills.ts",["2554"],[]," * Test Polyfills for Mobile and PWA Testing\n * Provides browser APIs and polyfills needed for comprehensive testing\nimport { TextEncoder, TextDecoder } from 'util'\nif (typeof global.TextEncoder === 'undefined') {}\nif (typeof global.TextDecoder === 'undefined') {}\n// Mock crypto.randomUUID for Node.js environments\nif (typeof global.crypto === 'undefined') {}\n} as any\n  // Mock performance API\nif (typeof global.performance === 'undefined') {}\n} as any\n  // Mock requestAnimationFrame\nif (typeof global.requestAnimationFrame === 'undefined') {}\nif (typeof global.cancelAnimationFrame === 'undefined') {}\n  // Mock requestIdleCallback for performance testing\nif (typeof global.requestIdleCallback === 'undefined') {}\n    }), 1)\nif (typeof global.cancelIdleCallback === 'undefined') {}\n  // Mock vibration API for mobile testing\nif (typeof navigator !== 'undefined' && !navigator.vibrate) {}\n  // Mock geolocation API\nif (typeof navigator !== 'undefined' && !navigator.geolocation) {}\n  // Mock share API for PWA testing\nif (typeof navigator !== 'undefined' && !navigator.share) {}\n  // Mock network information API\nif (typeof navigator !== 'undefined' && !navigator.connection) {}\n  // Mock clipboard API\nif (typeof navigator !== 'undefined' && !navigator.clipboard) {}\n  // Mock media devices for camera/mi crophone testing\nif (typeof navigator !== 'undefined' && !navigator.mediaDevices) {}\n      enumerateDevices: jest.fn().mockResolvedValue([]),\n      getSupportedConstraints: jest.fn().mockReturnValue({})\n// Mock user agent for mobile detection\nObject.defineProperty(navigator, 'userAgent', {}\n// Mock touch support\nObject.defineProperty(navigator, 'maxTouchPoints', {}\n  // Mock device memory for performance testing\nif (typeof navigator !== 'undefined' && !navigator.deviceMemory) {}\n  // Mock hardware concurrency\nif (typeof navigator !== 'undefined' && navigator.hardwareConcurrency === undefined) {}\n  // Mock screen API for mobile testing\nif (typeof screen !== 'undefined') {}\n  // Mock window.screen properties for responsive testing\nif (typeof window !== 'undefined' && typeof window.screen !== 'undefined') {}\n  Object.defineProperty(window.screen, 'height', {}\n  // Mock CSS custom properties support\nif (typeof CSS !== 'undefined' && !CSS.supports) {}\n  // Mock CSS.escape\nif (typeof CSS !== 'undefined' && !CSS.escape) {}\n    value: (cssid: string) => cssid.replace(/ [!\"#$%&'()*+,.\\/:;<=>?@[\\\\\\]^``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/test-setup.ts",["2555"],[]," * Jest Test Setup Configuration\n * Enhanced setup for React Testing Library, ShadCN UI, and accessibility testing;\nimport '@testing-library/jest-dom'\nimport { cleanup } from '@testing-library/ react'\nimport { afterEach, beforeAll, afterAll } from '@jest/globals'\n  // Mock Next.js router\njest.mock('next/ router', () => ({}\n      query: {},\n      asPath: '/',\n      push: jest.fn(),\n      pop: jest.fn(),\n      reload: jest.fn(),\n      back: jest.fn(),\n      prefetch: jest.fn(),\n      beforePopState: jest.fn(),\n      events: {}\n      isFallback: false,\n      isReady: true\n  // Mock Next.js navigation (App Router)\njest.mock('next/ navigation', () => ({}\n  useSearchParams() {}\n  usePathname() {}\n  // Mock framer-motion\njest.mock('framer-motion', () => ({}\n  AnimatePresence: ({ children }: { children: React.ReactNode }) => children,\n  useAnimation: () => ({}\n  useMotionValue: () => ({}\n  // Mock Intersection Observer\nglobal.IntersectionObserver = jest.fn().mockImplementation(() => ({}\n  // Mock ResizeObserver\nglobal.ResizeObserver = jest.fn().mockImplementation(() => ({}\n  // Mock matchMedia for responsive components\nObject.defineProperty(window, 'matchMedia', {}\n  // Mock HTMLElement methods for touch/g esture testing\nObject.defineProperty(HTMLElement.prototype, 'scrollIntoView', {}\nObject.defineProperty(HTMLElement.prototype, 'scroll', {}\nObject.defineProperty(HTMLElement.prototype, 'scrollTo', {}\n// Mock touch events for mobile testing\nconst // TODO: Refactor this function - it may be too long\nmockTouchEvent = (type: string, touches: any[] = []\n  // Extend global with touch event mock\nglobal.TouchEvent = TouchEvent as any\nglobal.mockTouchEvent = mockTouchEvent\n  // Mock Web APIs for PWA testing\nObject.defineProperty(navigator, 'serviceWorker', {}\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      update: jest.fn(),\n      unregister: jest.fn()\n    ready: Promise.resolve({}\n      addEventListener: jest.fn(),\n      removeEventListener: jest.fn(),\n      update: jest.fn(),\n      unregister: jest.fn()\n    controller: null,\n    addEventListener: jest.fn(),\n    removeEventListener: jest.fn()\n  // Mock Notification API\nObject.defineProperty(global, 'Notification', {}\n  // Mock Clipboard API for userEvent\nObject.defineProperty(navigator, 'clipboard', {}\n  // Mock localStorage\nconst localStorageMock = {}\nObject.defineProperty(window, 'localStorage', {}\n  // Mock sessionStorage\nconst sessionStorageMock = {}\nObject.defineProperty(window, 'sessionStorage', {}\n  // Mock URL.createObjectURL for file handling\nObject.defineProperty(URL, 'createObjectURL', {}\nObject.defineProperty(URL, 'revokeObjectURL', {}\n  // Mock canvas for chart components\nHTMLCanvasElement.prototype.getContext = jest.fn(() => ({}\n  getImageData: jest.fn(() => ({ data: new Array(4) })),\n  putImageData: jest.fn(),\n  createImageData: jest.fn(() => []),\n  setTransform: jest.fn(),\n  drawImage: jest.fn(),\n  save: jest.fn(),\n  fillText: jest.fn(),\n  restore: jest.fn(),\n  beginPath: jest.fn(),\n  moveTo: jest.fn(),\n  lineTo: jest.fn(),\n  closePath: jest.fn(),\n  stroke: jest.fn(),\n  translate: jest.fn(),\n  scale: jest.fn(),\n  rotate: jest.fn(),\n  arc: jest.fn(),\n  fill: jest.fn(),\n  measureText: jest.fn(() => ({ width: 0 })),\n  transform: jest.fn(),\n  rect: jest.fn(),\n  clip: jest.fn()\n})) as any\n  // Mock fetch for API testing\nglobal.fetch = jest.fn()\n  // Mock WebSocket for real-time features\nglobal.WebSocket = jest.fn().mockImplementation(() => ({}\n})) as any\n  // Setup/ Teardown\nbeforeAll((\nafterEach((\nafterAll((\n  // Suppress console warnings during tests (except errors)\nconst originalConsoleWarn = console.warn\nconst originalConsoleError = console.error\nbeforeAll((\nafterAll((\n  // Custom matchers for accessibility testing\nexpect.extend({}\n  // Declare custom matcher type\ndeclare global {}","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/utils-backup.ts",["2556"],[],"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n * Combines clsx and tailwind-merge for optimal class merging\n * This is the recommended utility function for ShadCN/UI components;\n * Format currency values for display;\nexport function formatCurrency(value: number, currency = 'INR'): string {}\n}).format(value)\n * Format date values;\nexport function formatDate(date: Date | string, format: 'short' | 'medium' | 'long' = 'medium'): string {}\n    short: { dateStyle: 'short' },\n    medium: { dateStyle: 'medium' },\n    long: { dateStyle: 'long' }\n  }[format]\n  return new Intl.DateTimeFormat('en-IN', options).format(dateObj)\n * Format time values;\nexport function formatTime(date: Date | string): string {}\n  }).format(dateObj)\n * Debounce function for search and input handling;\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {}\n * Throttle function for scroll and resize handlers;\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {}\n * Sleep utility for async operations;\nexport function sleep(ms: number): Promise<void> {}\n * Generate initials from name;\nexport function getInitials(name: string): string {}\n * Truncate text with ellipsis;\nexport function truncate(text: string, length: number): string {}\n * Generate random ID;\nexport function generateId(prefix = 'id'): string {}\n  return `${prefix}_${Math.random().toString(36).substr(2, 9)}``","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/utils.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/_app.tsx",["2557"],[],"/**\n * HASIVU Platform - Next.js App Component\n * Global app wrapper with providers, theme, and error handling\n * Generated by SuperClaude Wave 3: Frontend Implementation\n */\n\nimport React, { useEffect, useState } from 'react';\nimport type { AppProps } from 'next/app';\nimport Head from 'next/head';\nimport { SessionProvider } from 'next-auth/react';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport { CssBaseline, GlobalStyles } from '@mui/material';\nimport { CacheProvider, EmotionCache } from '@emotion/react';\nimport { Toaster } from 'react-hot-toast';\n\n// Import Tailwind CSS styles\nimport '@/styles/globals.css';\n\nimport { store, persistor } from '@/store';\nimport { AuthProvider } from '@/contexts/AuthContext';\nimport { SocketProvider } from '@/contexts/SocketContext';\nimport { createEmotionCache } from '@/utils/createEmotionCache';\nimport { theme } from '@/styles/theme';\nimport { globalStyles } from '@/styles/globalStyles';\nimport { LoadingScreen } from '@/components/common/LoadingScreen';\nimport { ErrorBoundary } from '@/components/common/ErrorBoundary';\nimport { ProgressBarProvider } from '@/components/common/ProgressBar';\n\n// Client-side cache for emotion\nconst clientSideEmotionCache = createEmotionCache();\n\n/**\n * Extended App Props with emotion cache\n */\ninterface MyAppProps extends AppProps {\n  emotionCache?: EmotionCache;\n}\n\n/**\n * Main App Component\n */\nexport default function MyApp({\n  Component,\n  pageProps: { session, ...pageProps },\n  emotionCache = clientSideEmotionCache,\n}: MyAppProps) {\n  const [isHydrated, setIsHydrated] = useState(false);\n\n  // Handle hydration\n  useEffect(() => {\n    setIsHydrated(true);\n  }, []);\n\n  // Show loading screen during hydration\n  if (!isHydrated) {\n    return <LoadingScreen message=\"Loading HASIVU...\" />;\n  }\n\n  return (\n    <CacheProvider value={emotionCache}>\n      <Head>\n        {/* Primary Meta Tags */}\n        <title>HASIVU - Smart School Food Delivery Platform</title>\n        <meta name=\"title\" content=\"HASIVU - Smart School Food Delivery Platform\" />\n        <meta\n          name=\"description\"\n          content=\"Revolutionary school food delivery platform with RFID verification, real-time tracking, and seamless payment integration.\"\n        />\n        <meta name=\"keywords\" content=\"school food, delivery, RFID, education, nutrition, parents\" />\n        <meta name=\"author\" content=\"HASIVU Team\" />\n        <meta name=\"robots\" content=\"index, follow\" />\n        <meta name=\"language\" content=\"English\" />\n\n        {/* Viewport and Mobile */}\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\" />\n        <meta name=\"mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n        <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n        <meta name=\"apple-mobile-web-app-title\" content=\"HASIVU\" />\n\n        {/* Open Graph / Facebook */}\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://hasivu.com/\" />\n        <meta property=\"og:title\" content=\"HASIVU - Smart School Food Delivery Platform\" />\n        <meta\n          property=\"og:description\"\n          content=\"Revolutionary school food delivery platform with RFID verification, real-time tracking, and seamless payment integration.\"\n        />\n        <meta property=\"og:image\" content=\"/images/og-image.jpg\" />\n        <meta property=\"og:site_name\" content=\"HASIVU\" />\n        <meta property=\"og:locale\" content=\"en_US\" />\n\n        {/* Twitter */}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:url\" content=\"https://hasivu.com/\" />\n        <meta name=\"twitter:title\" content=\"HASIVU - Smart School Food Delivery Platform\" />\n        <meta\n          name=\"twitter:description\"\n          content=\"Revolutionary school food delivery platform with RFID verification, real-time tracking, and seamless payment integration.\"\n        />\n        <meta name=\"twitter:image\" content=\"/images/twitter-image.jpg\" />\n        <meta name=\"twitter:creator\" content=\"@hasivu\" />\n\n        {/* Favicons */}\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/icons/favicon-16x16.png\" />\n        <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/icons/favicon-32x32.png\" />\n        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/icons/apple-touch-icon.png\" />\n\n        {/* PWA Manifest */}\n        <link rel=\"manifest\" href=\"/manifest.json\" />\n        <meta name=\"theme-color\" content=\"#2E7D32\" />\n\n        {/* Preconnect to external domains */}\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link rel=\"preconnect\" href=\"https://api.hasivu.com\" />\n\n        {/* DNS Prefetch */}\n        <link rel=\"dns-prefetch\" href=\"//fonts.googleapis.com\" />\n        <link rel=\"dns-prefetch\" href=\"//fonts.gstatic.com\" />\n        <link rel=\"dns-prefetch\" href=\"//api.hasivu.com\" />\n\n        {/* Canonical URL */}\n        <link rel=\"canonical\" href=\"https://hasivu.com/\" />\n\n        {/* Security Headers */}\n        <meta httpEquiv=\"X-Content-Type-Options\" content=\"nosniff\" />\n        <meta httpEquiv=\"X-Frame-Options\" content=\"DENY\" />\n        <meta httpEquiv=\"X-XSS-Protection\" content=\"1; mode=block\" />\n\n        {/* Google Fonts */}\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\"\n          rel=\"stylesheet\"\n        />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap\"\n          rel=\"stylesheet\"\n        />\n\n        {/* Structured Data */}\n        <script\n          type=\"application/ld+json\"\n          dangerouslySetInnerHTML={{\n            __html: JSON.stringify({\n              '@context': 'https://schema.org',\n              '@type': 'WebApplication',\n              name: 'HASIVU',\n              description: 'Smart school food delivery platform with RFID verification',\n              url: 'https://hasivu.com',\n              applicationCategory: 'EducationApplication',\n              operatingSystem: 'Web',\n              offers: {\n                '@type': 'Offer',\n                price: '0',\n                priceCurrency: 'INR',\n              },\n              author: {\n                '@type': 'Organization',\n                name: 'HASIVU Team',\n              },\n            }),\n          }}\n        />\n      </Head>\n\n      <ErrorBoundary>\n        <ReduxProvider store={store}>\n          <PersistGate loading={<LoadingScreen message=\"Restoring session...\" />} persistor={persistor}>\n            <SessionProvider session={session}>\n              <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <GlobalStyles styles={globalStyles} />\n                \n                <ProgressBarProvider>\n                  <AuthProvider>\n                    <SocketProvider>\n                      {/* Main app component */}\n                      <Component {...pageProps} />\n                    \n                    {/* Global toast notifications */}\n                    <Toaster\n                      position=\"top-right\"\n                      reverseOrder={false}\n                      gutter={8}\n                      containerClassName=\"\"\n                      containerStyle={{}}\n                      toastOptions={{\n                        // Default options\n                        className: '',\n                        duration: 4000,\n                        style: {\n                          background: '#fff',\n                          color: '#333',\n                          borderRadius: '8px',\n                          boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',\n                          fontSize: '14px',\n                          fontWeight: '500',\n                          padding: '12px 16px',\n                        },\n                        \n                        // Success toasts\n                        success: {\n                          duration: 3000,\n                          style: {\n                            background: '#4CAF50',\n                            color: '#fff',\n                          },\n                          iconTheme: {\n                            primary: '#fff',\n                            secondary: '#4CAF50',\n                          },\n                        },\n                        \n                        // Error toasts\n                        error: {\n                          duration: 5000,\n                          style: {\n                            background: '#F44336',\n                            color: '#fff',\n                          },\n                          iconTheme: {\n                            primary: '#fff',\n                            secondary: '#F44336',\n                          },\n                        },\n                        \n                        // Loading toasts\n                        loading: {\n                          duration: Infinity,\n                          style: {\n                            background: '#2196F3',\n                            color: '#fff',\n                          },\n                        },\n                      }}\n                    />\n                    </SocketProvider>\n                  </AuthProvider>\n                </ProgressBarProvider>\n              </ThemeProvider>\n            </SessionProvider>\n          </PersistGate>\n        </ReduxProvider>\n      </ErrorBoundary>\n    </CacheProvider>\n  );\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/integration-demo.tsx",["2558"],[],"/**\\n * HASIVU Platform - Integration Demo Page\\n * Demonstrates complete API integration with all ShadCN components\\n */\\n\\n'use client';\\n\\nimport React, { useState, useEffect } from 'react';\\nimport { NextPage } from 'next';\\nimport Head from 'next/head';\\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\\nimport { Button } from '@/components/ui/button';\\nimport { Badge } from '@/components/ui/badge';\\nimport { Separator } from '@/components/ui/separator';\\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\\nimport {\\n  Activity,\\n  ShoppingCart,\\n  BarChart3,\\n  Radio,\\n  Bell,\\n  Wifi,\\n  CheckCircle,\\n  AlertTriangle,\\n  Info\\n} from 'lucide-react';\\n\\n// Import our enhanced components\\nimport { OrderCard } from '@/components/enhanced/OrderCard';\\nimport { MealOrderingForm } from '@/components/enhanced/MealOrderingForm';\\nimport { RealTimeDashboard } from '@/components/enhanced/RealTimeDashboard';\\nimport { RFIDVerificationPanel } from '@/components/enhanced/RFIDVerificationPanel';\\n\\n// Import hooks\\nimport { useAuth, useOrders, useConnectionStatus, useNotifications } from '@/hooks/useApiIntegration';\\nimport { toast } from 'react-hot-toast';\\n\\nconst IntegrationDemoPage: NextPage = () => {\\n  const { user, authenticated } = useAuth();\\n  const { orders, loading: ordersLoading } = useOrders({ limit: 5 });\\n  const { notifications, loading: notificationsLoading } = useNotifications();\\n  const connectionStatus = useConnectionStatus();\\n  \\n  const [activeTab, setActiveTab] = useState('overview');\\n  const [demoStats, setDemoStats] = useState({\\n    totalOrders: 142,\\n    activeUsers: 89,\\n    realTimeEvents: 15,\\n    systemHealth: 98.5,\\n  });\\n  \\n  useEffect(() => {\\n    // Simulate real-time stats updates\\n    const interval = setInterval(() => {\\n      setDemoStats(prev => ({\\n        ...prev,\\n        realTimeEvents: prev.realTimeEvents + Math.floor(Math.random() * 3),\\n        activeUsers: prev.activeUsers + Math.floor(Math.random() * 5) - 2,\\n      }));\\n    }, 5000);\\n    \\n    return () => clearInterval(interval);\\n  }, []);\\n  \\n  const handleOrderComplete = (orderId: string) => {\\n    toast.success(`Order ${orderId.slice(-8)} placed successfully!`);\\n    // In a real app, this would trigger a refetch of orders\\n  };\\n  \\n  const handleOrderUpdate = (order: any) => {\\n    // Handle real-time order updates\\n    console.log('Order updated:', order);\\n  };\\n  \\n  const handleRFIDVerification = (result: any) => {\\n    if (result.verified) {\\n      toast.success(`RFID verified for ${result.studentName}`);\\n    } else {\\n      toast.error('RFID verification failed');\\n    }\\n  };\\n  \\n  return (\\n    <>\\n      <Head>\\n        <title>HASIVU Platform - Integration Demo</title>\\n        <meta name=\\\"description\\\" content=\\\"Complete API integration demonstration with ShadCN components\\\" />\\n        <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n      </Head>\\n      \\n      <div className=\\\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100\\\">\\n        <div className=\\\"container mx-auto px-4 py-8\\\">\\n          {/* Header */}\\n          <div className=\\\"mb-8\\\">\\n            <div className=\\\"flex items-center justify-between mb-4\\\">\\n              <div>\\n                <h1 className=\\\"text-4xl font-bold text-gray-900\\\">\\n                  HASIVU Integration Demo\\n                </h1>\\n                <p className=\\\"text-lg text-gray-600 mt-2\\\">\\n                  Complete ShadCN + API integration showcase\\n                </p>\\n              </div>\\n              \\n              {/* Connection Status */}\\n              <div className=\\\"flex items-center space-x-4\\\">\\n                <div className=\\\"flex items-center space-x-2\\\">\\n                  {connectionStatus.isConnected ? (\\n                    <>\\n                      <Wifi className=\\\"h-5 w-5 text-green-500\\\" />\\n                      <Badge className=\\\"bg-green-100 text-green-800\\\">\\n                        Connected\\n                      </Badge>\\n                    </>\\n                  ) : (\\n                    <>\\n                      <Wifi className=\\\"h-5 w-5 text-red-500\\\" />\\n                      <Badge variant=\\\"destructive\\\">\\n                        Disconnected\\n                      </Badge>\\n                    </>\\n                  )}\\n                </div>\\n                \\n                {authenticated && user && (\\n                  <div className=\\\"text-sm text-gray-600\\\">\\n                    Welcome, {user.firstName}!\\n                  </div>\\n                )}\\n              </div>\\n            </div>\\n            \\n            {/* Integration Status */}\\n            <div className=\\\"grid grid-cols-1 md:grid-cols-4 gap-4\\\">\\n              <Card>\\n                <CardHeader className=\\\"pb-3\\\">\\n                  <CardTitle className=\\\"text-sm font-medium flex items-center\\\">\\n                    <Activity className=\\\"mr-2 h-4 w-4\\\" />\\n                    Real-time Events\\n                  </CardTitle>\\n                </CardHeader>\\n                <CardContent>\\n                  <div className=\\\"text-2xl font-bold\\\">{demoStats.realTimeEvents}</div>\\n                  <p className=\\\"text-xs text-gray-600\\\">Live updates</p>\\n                </CardContent>\\n              </Card>\\n              \\n              <Card>\\n                <CardHeader className=\\\"pb-3\\\">\\n                  <CardTitle className=\\\"text-sm font-medium flex items-center\\\">\\n                    <ShoppingCart className=\\\"mr-2 h-4 w-4\\\" />\\n                    Total Orders\\n                  </CardTitle>\\n                </CardHeader>\\n                <CardContent>\\n                  <div className=\\\"text-2xl font-bold\\\">{demoStats.totalOrders}</div>\\n                  <p className=\\\"text-xs text-gray-600\\\">Platform wide</p>\\n                </CardContent>\\n              </Card>\\n              \\n              <Card>\\n                <CardHeader className=\\\"pb-3\\\">\\n                  <CardTitle className=\\\"text-sm font-medium flex items-center\\\">\\n                    <BarChart3 className=\\\"mr-2 h-4 w-4\\\" />\\n                    Active Users\\n                  </CardTitle>\\n                </CardHeader>\\n                <CardContent>\\n                  <div className=\\\"text-2xl font-bold\\\">{demoStats.activeUsers}</div>\\n                  <p className=\\\"text-xs text-gray-600\\\">Currently online</p>\\n                </CardContent>\\n              </Card>\\n              \\n              <Card>\\n                <CardHeader className=\\\"pb-3\\\">\\n                  <CardTitle className=\\\"text-sm font-medium flex items-center\\\">\\n                    <CheckCircle className=\\\"mr-2 h-4 w-4\\\" />\\n                    System Health\\n                  </CardTitle>\\n                </CardHeader>\\n                <CardContent>\\n                  <div className=\\\"text-2xl font-bold\\\">{demoStats.systemHealth}%</div>\\n                  <p className=\\\"text-xs text-gray-600\\\">All systems operational</p>\\n                </CardContent>\\n              </Card>\\n            </div>\\n          </div>\\n          \\n          {/* Integration Demo Tabs */}\\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\\\"space-y-6\\\">\\n            <TabsList className=\\\"grid w-full grid-cols-5\\\">\\n              <TabsTrigger value=\\\"overview\\\">Overview</TabsTrigger>\\n              <TabsTrigger value=\\\"ordering\\\">Meal Ordering</TabsTrigger>\\n              <TabsTrigger value=\\\"dashboard\\\">Dashboard</TabsTrigger>\\n              <TabsTrigger value=\\\"rfid\\\">RFID System</TabsTrigger>\\n              <TabsTrigger value=\\\"orders\\\">Order Management</TabsTrigger>\\n            </TabsList>\\n            \\n            {/* Overview Tab */}\\n            <TabsContent value=\\\"overview\\\" className=\\\"space-y-6\\\">\\n              <div className=\\\"grid gap-6 md:grid-cols-2\\\">\\n                {/* Integration Features */}\\n                <Card>\\n                  <CardHeader>\\n                    <CardTitle>🚀 Integration Features</CardTitle>\\n                    <CardDescription>\\n                      Complete API integration capabilities demonstrated\\n                    </CardDescription>\\n                  </CardHeader>\\n                  <CardContent className=\\\"space-y-4\\\">\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Real-time WebSocket connections</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Optimistic UI updates</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Automatic token refresh</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Error handling & retry logic</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Offline-first capabilities</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Component-level state management</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">File upload with progress tracking</span>\\n                    </div>\\n                    <div className=\\\"flex items-center space-x-2\\\">\\n                      <CheckCircle className=\\\"h-4 w-4 text-green-500\\\" />\\n                      <span className=\\\"text-sm\\\">Caching & performance optimization</span>\\n                    </div>\\n                  </CardContent>\\n                </Card>\\n                \\n                {/* API Endpoints */}\\n                <Card>\\n                  <CardHeader>\\n                    <CardTitle>🔗 API Endpoints Integrated</CardTitle>\\n                    <CardDescription>\\n                      All major backend services connected\\n                    </CardDescription>\\n                  </CardHeader>\\n                  <CardContent className=\\\"space-y-4\\\">\\n                    <div className=\\\"grid grid-cols-2 gap-2 text-sm\\\">\\n                      <Badge variant=\\\"outline\\\">Authentication</Badge>\\n                      <Badge variant=\\\"outline\\\">User Management</Badge>\\n                      <Badge variant=\\\"outline\\\">Meal Ordering</Badge>\\n                      <Badge variant=\\\"outline\\\">Order Tracking</Badge>\\n                      <Badge variant=\\\"outline\\\">Payment Processing</Badge>\\n                      <Badge variant=\\\"outline\\\">RFID Verification</Badge>\\n                      <Badge variant=\\\"outline\\\">Notifications</Badge>\\n                      <Badge variant=\\\"outline\\\">Analytics</Badge>\\n                      <Badge variant=\\\"outline\\\">File Uploads</Badge>\\n                      <Badge variant=\\\"outline\\\">Real-time Updates</Badge>\\n                    </div>\\n                  </CardContent>\\n                </Card>\\n              </div>\\n              \\n              {/* Recent Activity */}\\n              <Card>\\n                <CardHeader>\\n                  <CardTitle className=\\\"flex items-center\\\">\\n                    <Bell className=\\\"mr-2 h-5 w-5\\\" />\\n                    Recent Activity & Notifications\\n                  </CardTitle>\\n                </CardHeader>\\n                <CardContent>\\n                  {notificationsLoading ? (\\n                    <div className=\\\"space-y-3\\\">\\n                      {[...Array(3)].map((_, i) => (\\n                        <div key={i} className=\\\"h-12 bg-gray-100 rounded animate-pulse\\\" />\\n                      ))}\\n                    </div>\\n                  ) : notifications && notifications.length > 0 ? (\\n                    <div className=\\\"space-y-3\\\">\\n                      {notifications.slice(0, 5).map((notification: any) => (\\n                        <Alert key={notification.id}>\\n                          <Info className=\\\"h-4 w-4\\\" />\\n                          <AlertTitle>{notification.title}</AlertTitle>\\n                          <AlertDescription className=\\\"text-sm\\\">\\n                            {notification.message}\\n                          </AlertDescription>\\n                        </Alert>\\n                      ))}\\n                    </div>\\n                  ) : (\\n                    <p className=\\\"text-sm text-gray-500 text-center py-4\\\">\\n                      No recent notifications\\n                    </p>\\n                  )}\\n                </CardContent>\\n              </Card>\\n            </TabsContent>\\n            \\n            {/* Meal Ordering Tab */}\\n            <TabsContent value=\\\"ordering\\\" className=\\\"space-y-6\\\">\\n              <Alert>\\n                <Info className=\\\"h-4 w-4\\\" />\\n                <AlertTitle>Live Meal Ordering System</AlertTitle>\\n                <AlertDescription>\\n                  This component demonstrates real-time menu updates, cart management, \\n                  optimistic UI updates, and complete order flow integration.\\n                </AlertDescription>\\n              </Alert>\\n              \\n              <MealOrderingForm \\n                onOrderComplete={handleOrderComplete}\\n                className=\\\"w-full\\\"\\n              />\\n            </TabsContent>\\n            \\n            {/* Dashboard Tab */}\\n            <TabsContent value=\\\"dashboard\\\" className=\\\"space-y-6\\\">\\n              <Alert>\\n                <BarChart3 className=\\\"h-4 w-4\\\" />\\n                <AlertTitle>Real-time Analytics Dashboard</AlertTitle>\\n                <AlertDescription>\\n                  Live dashboard with WebSocket integration, real-time charts, \\n                  and comprehensive analytics from multiple data sources.\\n                </AlertDescription>\\n              </Alert>\\n              \\n              <RealTimeDashboard \\n                userRole={user?.role || 'admin'}\\n                className=\\\"w-full\\\"\\n              />\\n            </TabsContent>\\n            \\n            {/* RFID Tab */}\\n            <TabsContent value=\\\"rfid\\\" className=\\\"space-y-6\\\">\\n              <Alert>\\n                <Radio className=\\\"h-4 w-4\\\" />\\n                <AlertTitle>RFID Verification System</AlertTitle>\\n                <AlertDescription>\\n                  Real-time RFID scanning, verification, and card management \\n                  with live device status monitoring.\\n                </AlertDescription>\\n              </Alert>\\n              \\n              <RFIDVerificationPanel \\n                mode=\\\"verification\\\"\\n                onVerificationComplete={handleRFIDVerification}\\n                className=\\\"w-full\\\"\\n              />\\n            </TabsContent>\\n            \\n            {/* Orders Tab */}\\n            <TabsContent value=\\\"orders\\\" className=\\\"space-y-6\\\">\\n              <Alert>\\n                <ShoppingCart className=\\\"h-4 w-4\\\" />\\n                <AlertTitle>Order Management System</AlertTitle>\\n                <AlertDescription>\\n                  Real-time order tracking, status updates, and comprehensive \\n                  order management with WebSocket integration.\\n                </AlertDescription>\\n              </Alert>\\n              \\n              <div className=\\\"space-y-6\\\">\\n                {ordersLoading ? (\\n                  <div className=\\\"space-y-4\\\">\\n                    {[...Array(3)].map((_, i) => (\\n                      <div key={i} className=\\\"h-64 bg-gray-100 rounded animate-pulse\\\" />\\n                    ))}\\n                  </div>\\n                ) : orders && orders.length > 0 ? (\\n                  <div className=\\\"space-y-4\\\">\\n                    {orders.map((order: any) => (\\n                      <OrderCard\\n                        key={order.id}\\n                        order={order}\\n                        onOrderUpdate={handleOrderUpdate}\\n                        showActions={true}\\n                        className=\\\"w-full\\\"\\n                      />\\n                    ))}\\n                  </div>\\n                ) : (\\n                  <Card>\\n                    <CardContent className=\\\"flex items-center justify-center py-12\\\">\\n                      <div className=\\\"text-center\\\">\\n                        <ShoppingCart className=\\\"h-12 w-12 text-gray-400 mx-auto mb-4\\\" />\\n                        <h3 className=\\\"text-lg font-semibold mb-2\\\">No Orders Found</h3>\\n                        <p className=\\\"text-gray-600\\\">\\n                          Place an order using the Meal Ordering tab to see it here\\n                        </p>\\n                        <Button \\n                          onClick={() => setActiveTab('ordering')}\\n                          className=\\\"mt-4\\\"\\n                        >\\n                          Order Meals\\n                        </Button>\\n                      </div>\\n                    </CardContent>\\n                  </Card>\\n                )}\\n              </div>\\n            </TabsContent>\\n          </Tabs>\\n          \\n          {/* Footer */}\\n          <Separator className=\\\"my-8\\\" />\\n          <div className=\\\"text-center text-sm text-gray-500\\\">\\n            <p>\\n              HASIVU Platform Integration Demo • \\n              Powered by Next.js, ShadCN UI, and comprehensive API integration\\n            </p>\\n            <p className=\\\"mt-2\\\">\\n              Features: Real-time updates • Optimistic UI • Offline support • \\n              Error handling • Performance optimization\\n            </p>\\n          </div>\\n        </div>\\n      </div>\\n    </>\\n  );\\n};\\n\\nexport default IntegrationDemoPage;","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/mobile-demo.tsx",["2559","2560","2561","2562"],[],"import React, { useState, useCallback } from 'react'\nimport Head from 'next/head'\nimport { GetServerSideProps } from 'next'\nimport MobileLayout from '@/components/mobile/MobileLayout'\nimport { MealCardSkeleton, ProgressiveLoadingSkeleton } from '@/components/mobile/LoadingSkeleton'\nimport VirtualScrollList, { VirtualListItem } from '@/components/mobile/VirtualScrollList'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport useMobileLayout from '@/hooks/useMobileLayout'\nimport { cn } from '@/lib/utils'\nimport {\n  Smartphone,\n  Tablet,\n  Monitor,\n  Vibrate,\n  Share2,\n  Download,\n  Zap,\n  Wifi,\n  Battery,\n  Eye,\n  TouchIcon as Touch,\n  Layers,\n  Palette,\n  Box,\n  List,\n  Grid3x3,\n  Navigation\n} from 'lucide-react'\n\n// Mock data for demonstrations\nconst mockMeals = Array.from({ length: 100 }, (_, i) => ({\n  id: `meal-${i}`,\n  name: `Delicious Meal ${i + 1}`,\n  description: `A tasty meal with fresh ingredients. Item ${i + 1} in our extensive menu.`,\n  price: Math.floor(Math.random() * 50) + 20,\n  category: ['Main Course', 'Snacks', 'Beverages', 'Desserts'][i % 4],\n  rating: Number((3.5 + Math.random() * 1.5).toFixed(1)),\n  isVeg: Math.random() > 0.3,\n  preparationTime: Math.floor(Math.random() * 30) + 5,\n  imageUrl: `/api/placeholder/300/200?meal=${i}`,\n}))\n\nconst mockUser = {\n  name: 'Alex Student',\n  email: 'alex@school.edu',\n  avatar: '/api/placeholder/40/40?user=1',\n  id: 'student-123'\n}\n\ninterface FeatureCardProps {\n  icon: React.ElementType\n  title: string\n  description: string\n  status: 'implemented' | 'demo' | 'planned'\n  onDemo?: () => void\n}\n\nconst FeatureCard: React.FC<FeatureCardProps> = ({ \n  icon: Icon, \n  title, \n  description, \n  status, \n  onDemo \n}) => {\n  return (\n    <Card className=\"h-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Icon className=\"h-5 w-5 text-primary\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-sm\">{title}</CardTitle>\n              <Badge \n                variant={status === 'implemented' ? 'default' : status === 'demo' ? 'secondary' : 'outline'}\n                className=\"text-xs mt-1\"\n              >\n                {status}\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <p className=\"text-sm text-muted-foreground mb-3\">{description}</p>\n        {onDemo && (\n          <Button size=\"sm\" variant=\"outline\" onClick={onDemo} className=\"w-full\">\n            Try Demo\n          </Button>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nconst MobileDemoPage: React.FC = () => {\n  const [selectedTab, setSelectedTab] = useState('overview')\n  const [demoResults, setDemoResults] = useState<string[]>([])\n  const {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isTouchDevice,\n    orientation,\n    screenSize,\n    vibrate,\n    shareContent,\n    enableFullscreen,\n    requestWakeLock\n  } = useMobileLayout()\n\n  const addDemoResult = useCallback((result: string) => {\n    setDemoResults(prev => [result, ...prev.slice(0, 4)])\n  }, [])\n\n  const handleVibrationDemo = useCallback(() => {\n    const success = vibrate([200, 100, 200, 100, 200])\n    addDemoResult(success ? 'Vibration pattern executed' : 'Vibration not supported')\n  }, [vibrate, addDemoResult])\n\n  const handleShareDemo = useCallback(async () => {\n    try {\n      await shareContent({\n        title: 'HASIVU Mobile Demo',\n        text: 'Check out this awesome mobile food ordering platform!',\n        url: window.location.href\n      })\n      addDemoResult('Content shared successfully')\n    } catch (error) {\n      addDemoResult('Share failed or cancelled')\n    }\n  }, [shareContent, addDemoResult])\n\n  const handleFullscreenDemo = useCallback(async () => {\n    try {\n      await enableFullscreen()\n      addDemoResult('Fullscreen mode enabled')\n    } catch (error) {\n      addDemoResult('Fullscreen not supported')\n    }\n  }, [enableFullscreen, addDemoResult])\n\n  const handleWakeLockDemo = useCallback(async () => {\n    try {\n      const wakeLock = await requestWakeLock()\n      addDemoResult(wakeLock ? 'Wake lock acquired' : 'Wake lock not supported')\n    } catch (error) {\n      addDemoResult('Wake lock failed')\n    }\n  }, [requestWakeLock, addDemoResult])\n\n  const features = [\n    {\n      icon: Smartphone,\n      title: 'Bottom Navigation',\n      description: 'Touch-friendly bottom navigation with haptic feedback and role-based menu items.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Navigation,\n      title: 'Hamburger Menu',\n      description: 'Slide-out navigation with user profile, quick actions, and contextual menu items.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Touch,\n      title: 'Touch Gestures',\n      description: 'Swipe gestures on meal cards - swipe right to add to cart, left for details.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Vibrate,\n      title: 'Haptic Feedback',\n      description: 'Native vibration API integration for tactile feedback on interactions.',\n      status: 'implemented' as const,\n      onDemo: handleVibrationDemo,\n    },\n    {\n      icon: Share2,\n      title: 'Web Share API',\n      description: 'Native sharing using device share sheet for meals and app content.',\n      status: 'implemented' as const,\n      onDemo: handleShareDemo,\n    },\n    {\n      icon: Wifi,\n      title: 'Offline Support',\n      description: 'Service worker with cache strategies and offline page for poor connectivity.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Download,\n      title: 'PWA Installation',\n      description: 'Progressive Web App with install prompts and native app-like experience.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Zap,\n      title: 'Push Notifications',\n      description: 'Real-time notifications for order updates, payment reminders, and menu changes.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: List,\n      title: 'Virtual Scrolling',\n      description: 'Performance-optimized lists for large meal catalogs with infinite scroll.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Eye,\n      title: 'Loading Skeletons',\n      description: 'Progressive loading states and skeleton screens for better perceived performance.',\n      status: 'implemented' as const,\n    },\n    {\n      icon: Layers,\n      title: 'Background Sync',\n      description: 'Queue orders and payments when offline, sync when connection is restored.',\n      status: 'demo' as const,\n    },\n    {\n      icon: Monitor,\n      title: 'Fullscreen API',\n      description: 'Immersive fullscreen mode for focused meal browsing experience.',\n      status: 'demo' as const,\n      onDemo: handleFullscreenDemo,\n    },\n    {\n      icon: Battery,\n      title: 'Wake Lock API',\n      description: 'Keep screen awake during meal ordering and RFID scanning.',\n      status: 'demo' as const,\n      onDemo: handleWakeLockDemo,\n    },\n  ]\n\n  return (\n    <>\n      <Head>\n        <title>Mobile Demo - HASIVU Platform</title>\n        <meta name=\"description\" content=\"Interactive demo of HASIVU mobile features and PWA capabilities\" />\n      </Head>\n\n      <MobileLayout\n        userRole=\"student\"\n        user={mockUser}\n        showBottomNav={true}\n        showHeader={true}\n      >\n        <div className=\"p-4 space-y-6\">\n          {/* Device Info Banner */}\n          <Card className=\"bg-gradient-to-r from-primary/10 to-primary/5\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                {isMobile && <Smartphone className=\"h-5 w-5 text-primary\" />}\n                {isTablet && <Tablet className=\"h-5 w-5 text-primary\" />}\n                {isDesktop && <Monitor className=\"h-5 w-5 text-primary\" />}\n                <div>\n                  <h3 className=\"font-semibold text-sm\">\n                    Device: {isMobile ? 'Mobile' : isTablet ? 'Tablet' : 'Desktop'}\n                  </h3>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {screenSize.width} × {screenSize.height} • {orientation} • {isTouchDevice ? 'Touch' : 'Mouse'}\n                  </p>\n                </div>\n              </div>\n              \n              {demoResults.length > 0 && (\n                <div className=\"mt-3 pt-3 border-t\">\n                  <p className=\"text-xs font-medium mb-2\">Recent Demo Results:</p>\n                  <div className=\"space-y-1\">\n                    {demoResults.map((result, index) => (\n                      <p key={index} className=\"text-xs text-muted-foreground\">\n                        • {result}\n                      </p>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Feature Tabs */}\n          <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\" className=\"text-xs\">Overview</TabsTrigger>\n              <TabsTrigger value=\"components\" className=\"text-xs\">Components</TabsTrigger>\n              <TabsTrigger value=\"performance\" className=\"text-xs\">Performance</TabsTrigger>\n              <TabsTrigger value=\"pwa\" className=\"text-xs\">PWA</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {features.slice(0, 6).map((feature, index) => (\n                  <FeatureCard key={index} {...feature} />\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"components\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Grid3x3 className=\"h-5 w-5\" />\n                    <span>Mobile Components Demo</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Loading Skeletons Demo */}\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Loading Skeletons</h4>\n                    <ProgressiveLoadingSkeleton\n                      initialCount={2}\n                      maxCount={4}\n                      loadingDelay={800}\n                      renderItem={(index) => <MealCardSkeleton key={index} className=\"mb-4\" />}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {features.slice(6, 10).map((feature, index) => (\n                  <FeatureCard key={index + 6} {...feature} />\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-5 w-5\" />\n                    <span>Virtual Scrolling Demo</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-muted-foreground mb-4\">\n                    Efficient rendering of 100+ meal items with smooth scrolling performance.\n                  </p>\n                  <div className=\"border rounded-lg\">\n                    <VirtualScrollList\n                      items={mockMeals}\n                      itemHeight={80}\n                      containerHeight={300}\n                      keyExtractor={(item) => item.id}\n                      renderItem={(meal, index) => (\n                        <VirtualListItem key={meal.id} className=\"border-b last:border-b-0\">\n                          <div className=\"flex items-center space-x-3 p-3\">\n                            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                              <span className=\"text-sm font-medium text-primary\">\n                                {index + 1}\n                              </span>\n                            </div>\n                            <div className=\"flex-1 min-w-0\">\n                              <h4 className=\"font-medium text-sm truncate\">{meal.name}</h4>\n                              <p className=\"text-xs text-muted-foreground truncate\">\n                                {meal.description}\n                              </p>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {meal.isVeg ? '🌱 Veg' : '🍖 Non-Veg'}\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  ₹{meal.price}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </VirtualListItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"pwa\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {features.slice(10).map((feature, index) => (\n                  <FeatureCard key={index + 10} {...feature} />\n                ))}\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>PWA Installation Guide</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium\">\n                        1\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-sm\">Open in Browser</h4>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Visit this demo in Chrome, Safari, or Edge on mobile\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium\">\n                        2\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-sm\">Look for Install Prompt</h4>\n                        <p className=\"text-xs text-muted-foreground\">\n                          Browser will show \"Add to Home Screen\" or install banner\n                        </p>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium\">\n                        3\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-sm\">Install & Enjoy</h4>\n                        <p className=\"text-xs text-muted-foreground\">\n                          App will install and work offline with push notifications\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </MobileLayout>\n    </>\n  )\n}\n\nexport const getServerSideProps: GetServerSideProps = async (context) => {\n  // Add any server-side data fetching here\n  return {\n    props: {}\n  }\n}\n\nexport default MobileDemoPage","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/mobile-features-demo.tsx",["2563","2564","2565","2566","2567","2568","2569","2570","2571","2572","2573","2574","2575","2576","2577","2578","2579","2580","2581","2582","2583"],[],"\"use client\"\n\nimport React, { useState } from 'react'\nimport { NextPage } from 'next'\nimport Head from 'next/head'\nimport { Card } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport MobileLayout from '@/components/mobile/MobileLayout'\n\n// Touch Optimized Components\nimport { \n  TouchContainer, \n  SwipeableCard, \n  PullToRefresh, \n  TouchInput \n} from '@/components/mobile/TouchOptimized'\n\n// Bottom Sheets\nimport { \n  BottomSheet, \n  useBottomSheet, \n  MealDetailsSheet, \n  RFIDScannerSheet \n} from '@/components/mobile/BottomSheet'\n\n// PWA Features\nimport {\n  PWAInstallPrompt,\n  OfflineStatus,\n  NotificationPermission,\n  NetworkStatusIndicator,\n  ShareButton,\n  EmergencyBanner,\n  QuickRFIDDisplay\n} from '@/components/mobile/PWAFeatures'\n\n// School Mobile Components\nimport {\n  QuickMealCarousel,\n  LiveOrderTracking,\n  ParentApprovalInterface,\n  SchoolScheduleIntegration\n} from '@/components/mobile/SchoolMobileComponents'\n\n// Hooks\nimport { usePWAInstall, useNetworkStatus, usePushNotifications } from '@/hooks/usePWA'\nimport { useMobileLayout } from '@/hooks/useMobileLayout'\n\nimport {\n  Smartphone,\n  Touch,\n  Wifi,\n  Bell,\n  Utensils,\n  Calendar,\n  CreditCard,\n  Settings,\n  Heart,\n  Star,\n  Clock,\n  MapPin,\n  Share,\n  Download,\n  RefreshCw,\n  Zap,\n  CheckCircle,\n  AlertTriangle\n} from 'lucide-react'\n\nconst MobileFeaturesDemo: NextPage = () => {\n  const { isMobile, isTablet, vibrate, shareContent } = useMobileLayout()\n  const { isInstallable, installApp } = usePWAInstall()\n  const { isOnline, connectionQuality } = useNetworkStatus()\n  const { permission, requestPermission } = usePushNotifications()\n\n  // Demo state\n  const [searchValue, setSearchValue] = useState('')\n  const [refreshCount, setRefreshCount] = useState(0)\n  const [orderStatus, setOrderStatus] = useState<'placed' | 'preparing' | 'ready'>('preparing')\n\n  // Bottom sheet states\n  const mealDetailsSheet = useBottomSheet()\n  const rfidScannerSheet = useBottomSheet()\n  const demoSheet = useBottomSheet()\n\n  // Demo data\n  const mockMeals = [\n    {\n      id: '1',\n      name: 'Butter Chicken Rice Bowl',\n      price: 120,\n      image: '/api/placeholder/300/200',\n      preparationTime: 15,\n      rating: 4.5,\n      isAvailable: true,\n      isPopular: true,\n      description: 'Tender chicken in rich tomato curry with basmati rice',\n      allergens: ['dairy', 'gluten'],\n      nutrition: { calories: 450, protein: 25, carbs: 60, fat: 15 }\n    },\n    {\n      id: '2',\n      name: 'Veggie Wrap',\n      price: 80,\n      image: '/api/placeholder/300/200',\n      preparationTime: 8,\n      rating: 4.2,\n      isAvailable: true,\n      isPopular: false,\n      description: 'Fresh vegetables wrapped in whole wheat tortilla',\n      allergens: ['gluten'],\n      nutrition: { calories: 320, protein: 12, carbs: 45, fat: 8 }\n    },\n    {\n      id: '3',\n      name: 'Chocolate Brownie',\n      price: 60,\n      image: '/api/placeholder/300/200',\n      preparationTime: 5,\n      rating: 4.8,\n      isAvailable: false,\n      isPopular: true,\n      description: 'Rich, fudgy brownie with chocolate chunks',\n      allergens: ['dairy', 'eggs', 'nuts'],\n      nutrition: { calories: 280, protein: 4, carbs: 35, fat: 14 }\n    }\n  ]\n\n  const mockOrder = {\n    id: 'ORD123456',\n    items: [\n      { name: 'Butter Chicken Rice Bowl', quantity: 1 },\n      { name: 'Mango Lassi', quantity: 1 }\n    ],\n    status: orderStatus,\n    estimatedTime: 12,\n    pickupLocation: 'Canteen Counter 2'\n  }\n\n  const mockPendingOrders = [\n    {\n      id: 'REQ001',\n      studentName: 'Arjun Sharma',\n      items: [\n        { name: 'Pizza Slice', price: 80, quantity: 2 },\n        { name: 'Cold Drink', price: 30, quantity: 1 }\n      ],\n      total: 190,\n      requestedTime: new Date(),\n      dietaryNotes: 'No onions please'\n    }\n  ]\n\n  const currentSchedule = {\n    currentPeriod: {\n      subject: 'Mathematics',\n      teacher: 'Mrs. Gupta',\n      room: 'A-204',\n      endTime: new Date(Date.now() + 30 * 60 * 1000)\n    },\n    nextMealTime: {\n      type: 'lunch' as const,\n      time: new Date(Date.now() + 90 * 60 * 1000),\n      location: 'Main Canteen'\n    },\n    isOrderingOpen: true\n  }\n\n  const handleRefresh = async () => {\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    setRefreshCount(prev => prev + 1)\n  }\n\n  const handleMealOrder = (mealId: string, quantity: number) => {\n    vibrate([20, 10, 20])\n    console.log('Ordered:', mealId, 'Quantity:', quantity)\n  }\n\n  const handleShare = () => {\n    shareContent({\n      title: 'HASIVU Mobile Demo',\n      text: 'Check out these amazing mobile features for school food ordering!',\n      url: window.location.href\n    })\n  }\n\n  const demoSections = [\n    {\n      id: 'touch',\n      label: 'Touch UI',\n      icon: <Touch className=\"h-4 w-4\" />,\n      color: 'bg-blue-500'\n    },\n    {\n      id: 'pwa',\n      label: 'PWA Features',\n      icon: <Smartphone className=\"h-4 w-4\" />,\n      color: 'bg-green-500'\n    },\n    {\n      id: 'school',\n      label: 'School Features',\n      icon: <Utensils className=\"h-4 w-4\" />,\n      color: 'bg-purple-500'\n    },\n    {\n      id: 'performance',\n      label: 'Performance',\n      icon: <Zap className=\"h-4 w-4\" />,\n      color: 'bg-orange-500'\n    }\n  ]\n\n  return (\n    <>\n      <Head>\n        <title>Mobile Features Demo - HASIVU</title>\n        <meta name=\"description\" content=\"Comprehensive mobile experience demo for HASIVU school platform\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n      </Head>\n\n      <MobileLayout\n        userRole=\"student\"\n        user={{\n          id: 'demo-user',\n          name: 'Demo Student',\n          email: 'demo@hasivu.com'\n        }}\n        showBottomNav={isMobile}\n        showHeader={true}\n      >\n        {/* Status Indicators */}\n        <div className=\"sticky top-0 z-20 bg-white/95 backdrop-blur-sm border-b p-2\">\n          <div className=\"flex items-center justify-between max-w-md mx-auto\">\n            <NetworkStatusIndicator />\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant={isOnline ? 'default' : 'destructive'} className=\"text-xs\">\n                {connectionQuality}\n              </Badge>\n              {isInstallable && (\n                <Button size=\"sm\" variant=\"outline\" onClick={installApp} className=\"h-6 px-2 text-xs\">\n                  <Download className=\"h-3 w-3 mr-1\" />\n                  Install\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Demo Content */}\n        <div className=\"space-y-6 pb-safe-bottom\">\n          {/* Hero Section */}\n          <div className=\"bg-gradient-to-br from-primary/10 to-blue-50 p-6 m-4 rounded-xl\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"mx-auto w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center\">\n                <Smartphone className=\"h-8 w-8 text-primary\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-gray-900\">Mobile Features Demo</h1>\n              <p className=\"text-sm text-gray-600\">\n                Experience touch-optimized components, PWA features, and school-specific mobile interfaces\n              </p>\n              <div className=\"flex justify-center space-x-2\">\n                <ShareButton\n                  title=\"HASIVU Mobile Demo\"\n                  text=\"Check out these mobile features!\"\n                  variant=\"button\"\n                />\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => vibrate([10, 50, 10])}\n                  className=\"text-xs\"\n                >\n                  Test Haptic\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Feature Categories */}\n          <div className=\"grid grid-cols-2 gap-3 px-4\">\n            {demoSections.map((section) => (\n              <TouchContainer\n                key={section.id}\n                hapticFeedback\n                onTap={() => demoSheet.open()}\n              >\n                <Card className=\"p-4 text-center hover:shadow-md transition-shadow\">\n                  <div className={`mx-auto w-10 h-10 ${section.color} rounded-lg flex items-center justify-center text-white mb-3`}>\n                    {section.icon}\n                  </div>\n                  <h3 className=\"font-semibold text-sm text-gray-900\">{section.label}</h3>\n                </Card>\n              </TouchContainer>\n            ))}\n          </div>\n\n          {/* Touch Input Demo */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Touch-Optimized Input</h2>\n            <TouchInput\n              label=\"Search meals\"\n              placeholder=\"Try typing something...\"\n              value={searchValue}\n              onChange={(e) => setSearchValue(e.target.value)}\n              clearable\n              onClear={() => setSearchValue('')}\n              icon={<Bell className=\"h-4 w-4\" />}\n              helpText=\"This input is optimized for mobile with proper touch targets\"\n            />\n          </div>\n\n          {/* Quick Meal Carousel */}\n          <div>\n            <h2 className=\"text-lg font-bold text-gray-900 px-4 mb-4\">Quick Order Demo</h2>\n            <QuickMealCarousel\n              meals={mockMeals}\n              onOrderMeal={handleMealOrder}\n            />\n          </div>\n\n          {/* Swipeable Cards Demo */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Swipeable Cards</h2>\n            <SwipeableCard\n              leftAction={{\n                icon: <Heart className=\"h-5 w-5\" />,\n                color: \"bg-red-500 text-white\",\n                label: \"Like\"\n              }}\n              rightAction={{\n                icon: <Star className=\"h-5 w-5\" />,\n                color: \"bg-yellow-500 text-white\",\n                label: \"Favorite\"\n              }}\n              onSwipeLeft={() => vibrate(20)}\n              onSwipeRight={() => vibrate(20)}\n            >\n              <Card className=\"p-4\">\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Swipe me!</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Swipe left to like or right to favorite. Each action provides haptic feedback.\n                </p>\n              </Card>\n            </SwipeableCard>\n          </div>\n\n          {/* Pull to Refresh Demo */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Pull to Refresh</h2>\n            <PullToRefresh onRefresh={handleRefresh} className=\"max-h-40\">\n              <Card className=\"p-4 text-center\">\n                <RefreshCw className=\"h-8 w-8 text-gray-400 mx-auto mb-2\" />\n                <h3 className=\"font-semibold text-gray-900 mb-1\">Pull down to refresh</h3>\n                <p className=\"text-sm text-gray-600\">\n                  Refreshed {refreshCount} times\n                </p>\n              </Card>\n            </PullToRefresh>\n          </div>\n\n          {/* Live Order Tracking */}\n          <div>\n            <h2 className=\"text-lg font-bold text-gray-900 px-4 mb-4\">Live Order Tracking</h2>\n            <LiveOrderTracking\n              order={mockOrder}\n              onRefresh={() => {\n                setOrderStatus(prev => {\n                  const statuses = ['placed', 'preparing', 'ready'] as const\n                  const currentIndex = statuses.indexOf(prev)\n                  return statuses[(currentIndex + 1) % statuses.length]\n                })\n              }}\n            />\n          </div>\n\n          {/* School Schedule Integration */}\n          <div>\n            <h2 className=\"text-lg font-bold text-gray-900 px-4 mb-4\">School Schedule</h2>\n            <SchoolScheduleIntegration\n              {...currentSchedule}\n              onQuickOrder={() => mealDetailsSheet.open()}\n            />\n          </div>\n\n          {/* Parent Approval Demo */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Parent Approval Interface</h2>\n            <ParentApprovalInterface\n              pendingOrders={mockPendingOrders}\n              onApprove={(id) => vibrate([20, 10, 20])}\n              onReject={(id, reason) => vibrate([50, 20, 50])}\n              onModify={(id) => console.log('Modify:', id)}\n            />\n          </div>\n\n          {/* Quick RFID Display */}\n          <div>\n            <h2 className=\"text-lg font-bold text-gray-900 px-4 mb-4\">Quick RFID Code</h2>\n            <QuickRFIDDisplay\n              rfidCode=\"RF123456\"\n              studentName=\"Demo Student\"\n              onCopy={() => vibrate(10)}\n            />\n          </div>\n\n          {/* Bottom Sheet Triggers */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Bottom Sheets</h2>\n            <div className=\"grid grid-cols-2 gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={mealDetailsSheet.open}\n                className=\"h-12\"\n                haptic\n              >\n                Meal Details\n              </Button>\n              <Button\n                variant=\"outline\"\n                onClick={rfidScannerSheet.open}\n                className=\"h-12\"\n                haptic\n              >\n                RFID Scanner\n              </Button>\n            </div>\n          </div>\n\n          {/* PWA Features Demo */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">PWA Features</h2>\n            <div className=\"grid grid-cols-1 gap-3\">\n              {permission !== 'granted' && (\n                <Button\n                  variant=\"outline\"\n                  onClick={requestPermission}\n                  className=\"justify-start\"\n                  haptic\n                >\n                  <Bell className=\"h-4 w-4 mr-2\" />\n                  Enable Notifications\n                </Button>\n              )}\n              \n              <Button\n                variant=\"outline\"\n                onClick={handleShare}\n                className=\"justify-start\"\n                haptic\n              >\n                <Share className=\"h-4 w-4 mr-2\" />\n                Share Demo\n              </Button>\n            </div>\n          </div>\n\n          {/* Device Info */}\n          <div className=\"px-4 space-y-4\">\n            <h2 className=\"text-lg font-bold text-gray-900\">Device Information</h2>\n            <Card className=\"p-4 space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Device Type:</span>\n                <span className=\"text-gray-900\">\n                  {isMobile ? 'Mobile' : isTablet ? 'Tablet' : 'Desktop'}\n                </span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Connection:</span>\n                <span className=\"text-gray-900 capitalize\">{connectionQuality}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">PWA Ready:</span>\n                <span className=\"text-gray-900\">{isInstallable ? 'Yes' : 'No'}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600\">Notifications:</span>\n                <span className=\"text-gray-900 capitalize\">{permission}</span>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Bottom Sheets */}\n        <MealDetailsSheet\n          isOpen={mealDetailsSheet.isOpen}\n          onClose={mealDetailsSheet.close}\n          meal={mockMeals[0]}\n          onAddToCart={() => {\n            vibrate([20, 10, 20])\n            mealDetailsSheet.close()\n          }}\n        />\n\n        <RFIDScannerSheet\n          isOpen={rfidScannerSheet.isOpen}\n          onClose={rfidScannerSheet.close}\n          onScanComplete={(code) => {\n            console.log('Scanned:', code)\n            vibrate([20, 10, 20])\n          }}\n        />\n\n        {/* Demo Info Sheet */}\n        <BottomSheet\n          isOpen={demoSheet.isOpen}\n          onClose={demoSheet.close}\n          title=\"Mobile Features Demo\"\n          snapPoints={[70]}\n        >\n          <div className=\"p-4 space-y-4\">\n            <div className=\"space-y-3\">\n              <h3 className=\"font-semibold text-gray-900\">Features Demonstrated:</h3>\n              \n              <div className=\"space-y-2\">\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">Touch-optimized components with haptic feedback</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">Swipe gestures and pull-to-refresh</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">Bottom sheet dialogs</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">PWA installation and notifications</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">School-specific mobile interfaces</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">Offline support and background sync</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                  <span className=\"text-sm\">Responsive design for all screen sizes</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-blue-50 rounded-lg p-3\">\n              <h4 className=\"font-medium text-blue-900 mb-1\">Performance Optimizations</h4>\n              <p className=\"text-sm text-blue-700\">\n                All components use virtual scrolling, image lazy loading, and touch debouncing \n                for smooth 60fps interactions on mobile devices.\n              </p>\n            </div>\n\n            <Button\n              onClick={demoSheet.close}\n              className=\"w-full\"\n              haptic\n            >\n              Close Demo Info\n            </Button>\n          </div>\n        </BottomSheet>\n      </MobileLayout>\n    </>\n  )\n}\n\nexport default MobileFeaturesDemo","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/offline.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/test-auth-components.tsx",["2584","2585","2586","2587","2588"],[],"/**\n * HASIVU Platform - Authentication Components Test Page\n * \n * This page showcases all authentication components for testing and development\n * Visit /test-auth-components to see all components in action\n */\n\nimport * as React from \"react\"\nimport { useState } from \"react\"\nimport Head from \"next/head\"\n\nimport {\n  LoginForm,\n  RegisterForm,\n  ForgotPasswordForm,\n  ResetPasswordForm,\n  EmailVerificationForm,\n  MfaForm,\n  BackupCodeForm,\n  SocialLoginButtons,\n  AuthLayout,\n  MinimalAuthLayout,\n  type LoginFormData,\n  type RegisterFormData,\n  type ForgotPasswordFormData,\n  type EmailVerificationFormData,\n  type MfaFormData\n} from \"@/components/auth\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Separator } from \"@/components/ui/separator\"\n\ntype ComponentType = \n  | \"login\" \n  | \"register\" \n  | \"forgot-password\" \n  | \"reset-password\"\n  | \"email-verification\" \n  | \"mfa-authenticator\"\n  | \"mfa-sms\"\n  | \"mfa-email\"\n  | \"backup-code\"\n  | \"social-login\"\n\nexport default function TestAuthComponents() {\n  const [selectedComponent, setSelectedComponent] = useState<ComponentType>(\"login\")\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n  const [success, setSuccess] = useState(false)\n\n  // Mock handlers for testing\n  const handleAsyncAction = async (actionName: string, data?: any) => {\n    setIsLoading(true)\n    setError(null)\n    setSuccess(false)\n\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 2000))\n      \n      // Simulate random success/failure for testing\n      if (Math.random() > 0.3) {\n        setSuccess(true)\n        console.log(`${actionName} successful:`, data)\n      } else {\n        throw new Error(`${actionName} failed: Please try again`)\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err.message : \"An error occurred\")\n    } finally {\n      setIsLoading(false)\n    }\n  }\n\n  const handleLogin = async (data: LoginFormData) => {\n    await handleAsyncAction(\"Login\", data)\n  }\n\n  const handleRegister = async (data: RegisterFormData) => {\n    await handleAsyncAction(\"Registration\", data)\n  }\n\n  const handleForgotPassword = async (data: ForgotPasswordFormData) => {\n    await handleAsyncAction(\"Forgot Password\", data)\n  }\n\n  const handleResetPassword = async (data: any) => {\n    await handleAsyncAction(\"Reset Password\", data)\n  }\n\n  const handleEmailVerification = async (data: EmailVerificationFormData) => {\n    await handleAsyncAction(\"Email Verification\", data)\n  }\n\n  const handleMfaVerification = async (data: MfaFormData) => {\n    await handleAsyncAction(\"MFA Verification\", data)\n  }\n\n  const handleBackupCode = async (code: string) => {\n    await handleAsyncAction(\"Backup Code\", { code })\n  }\n\n  const handleSocialLogin = async (provider: string) => {\n    await handleAsyncAction(`${provider} Login`, { provider })\n  }\n\n  const handleResendCode = async () => {\n    await handleAsyncAction(\"Resend Code\")\n  }\n\n  const components = [\n    { id: \"login\", name: \"Login Form\", description: \"Email/password login with social options\" },\n    { id: \"register\", name: \"Register Form\", description: \"User registration with role selection\" },\n    { id: \"forgot-password\", name: \"Forgot Password\", description: \"Password reset request form\" },\n    { id: \"reset-password\", name: \"Reset Password\", description: \"New password creation form\" },\n    { id: \"email-verification\", name: \"Email Verification\", description: \"6-digit email verification code\" },\n    { id: \"mfa-authenticator\", name: \"MFA - Authenticator\", description: \"Authenticator app verification\" },\n    { id: \"mfa-sms\", name: \"MFA - SMS\", description: \"SMS code verification\" },\n    { id: \"mfa-email\", name: \"MFA - Email\", description: \"Email code verification\" },\n    { id: \"backup-code\", name: \"Backup Code\", description: \"MFA backup code entry\" },\n    { id: \"social-login\", name: \"Social Login\", description: \"Social authentication buttons\" },\n  ] as const\n\n  const renderComponent = () => {\n    const commonProps = {\n      isLoading,\n      error,\n      className: \"w-full max-w-md mx-auto\"\n    }\n\n    switch (selectedComponent) {\n      case \"login\":\n        return (\n          <LoginForm\n            {...commonProps}\n            onSubmit={handleLogin}\n            onSocialLogin={handleSocialLogin}\n            showRememberMe={true}\n            showSocialLogin={true}\n          />\n        )\n\n      case \"register\":\n        return (\n          <RegisterForm\n            {...commonProps}\n            onSubmit={handleRegister}\n            onSocialLogin={handleSocialLogin}\n            availableRoles={[\"student\", \"parent\", \"teacher\", \"vendor\"]}\n            showSocialLogin={true}\n          />\n        )\n\n      case \"forgot-password\":\n        return (\n          <ForgotPasswordForm\n            {...commonProps}\n            onSubmit={handleForgotPassword}\n            success={success}\n          />\n        )\n\n      case \"reset-password\":\n        return (\n          <ResetPasswordForm\n            {...commonProps}\n            onSubmit={handleResetPassword}\n            token=\"sample-reset-token\"\n            success={success}\n          />\n        )\n\n      case \"email-verification\":\n        return (\n          <EmailVerificationForm\n            {...commonProps}\n            onSubmit={handleEmailVerification}\n            onResendCode={handleResendCode}\n            email=\"test@example.com\"\n            success={success}\n          />\n        )\n\n      case \"mfa-authenticator\":\n        return (\n          <MfaForm\n            {...commonProps}\n            onSubmit={handleMfaVerification}\n            method=\"authenticator\"\n            onUseBackupCode={() => setSelectedComponent(\"backup-code\")}\n          />\n        )\n\n      case \"mfa-sms\":\n        return (\n          <MfaForm\n            {...commonProps}\n            onSubmit={handleMfaVerification}\n            onResendCode={handleResendCode}\n            method=\"sms\"\n            contact=\"+91 98765 43210\"\n            onUseBackupCode={() => setSelectedComponent(\"backup-code\")}\n          />\n        )\n\n      case \"mfa-email\":\n        return (\n          <MfaForm\n            {...commonProps}\n            onSubmit={handleMfaVerification}\n            onResendCode={handleResendCode}\n            method=\"email\"\n            contact=\"test@example.com\"\n            onUseBackupCode={() => setSelectedComponent(\"backup-code\")}\n          />\n        )\n\n      case \"backup-code\":\n        return (\n          <BackupCodeForm\n            {...commonProps}\n            onSubmit={handleBackupCode}\n            onBackToMfa={() => setSelectedComponent(\"mfa-authenticator\")}\n          />\n        )\n\n      case \"social-login\":\n        return (\n          <Card className=\"w-full max-w-md mx-auto\">\n            <CardHeader>\n              <CardTitle>Social Login Options</CardTitle>\n              <CardDescription>\n                Test different social login configurations\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <h4 className=\"font-medium mb-2\">Horizontal Layout (2 providers)</h4>\n                <SocialLoginButtons\n                  onSocialLogin={handleSocialLogin}\n                  providers={[\"google\", \"facebook\"]}\n                  orientation=\"horizontal\"\n                  isLoading={isLoading}\n                />\n              </div>\n\n              <Separator />\n\n              <div>\n                <h4 className=\"font-medium mb-2\">Vertical Layout (4 providers)</h4>\n                <SocialLoginButtons\n                  onSocialLogin={handleSocialLogin}\n                  providers={[\"google\", \"facebook\", \"github\", \"apple\"]}\n                  orientation=\"vertical\"\n                  isLoading={isLoading}\n                />\n              </div>\n\n              <Separator />\n\n              <div>\n                <h4 className=\"font-medium mb-2\">Grid Layout (3 providers)</h4>\n                <SocialLoginButtons\n                  onSocialLogin={handleSocialLogin}\n                  providers={[\"google\", \"facebook\", \"github\"]}\n                  orientation=\"horizontal\"\n                  isLoading={isLoading}\n                />\n              </div>\n            </CardContent>\n          </Card>\n        )\n\n      default:\n        return <div>Component not found</div>\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <title>Authentication Components Test - HASIVU</title>\n        <meta name=\"description\" content=\"Test page for HASIVU authentication components\" />\n      </Head>\n\n      <div className=\"min-h-screen bg-gray-50\">\n        {/* Header */}\n        <header className=\"bg-white border-b border-gray-200 px-4 py-6\">\n          <div className=\"max-w-7xl mx-auto\">\n            <h1 className=\"text-3xl font-bold text-gray-900\">\n              Authentication Components Test\n            </h1>\n            <p className=\"text-gray-600 mt-2\">\n              Interactive showcase of all HASIVU authentication components\n            </p>\n          </div>\n        </header>\n\n        <div className=\"max-w-7xl mx-auto px-4 py-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            {/* Sidebar - Component Selection */}\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Components</CardTitle>\n                  <CardDescription>\n                    Select a component to test\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {components.map((component) => (\n                    <Button\n                      key={component.id}\n                      variant={selectedComponent === component.id ? \"default\" : \"ghost\"}\n                      onClick={() => {\n                        setSelectedComponent(component.id as ComponentType)\n                        setError(null)\n                        setSuccess(false)\n                      }}\n                      className=\"w-full justify-start text-left h-auto py-2 px-3\"\n                    >\n                      <div>\n                        <div className=\"font-medium\">{component.name}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {component.description}\n                        </div>\n                      </div>\n                    </Button>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Reset Button */}\n              <Card className=\"mt-4\">\n                <CardContent className=\"pt-6\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setError(null)\n                      setSuccess(false)\n                      setIsLoading(false)\n                    }}\n                    className=\"w-full\"\n                  >\n                    Reset State\n                  </Button>\n                  \n                  {/* State Display */}\n                  <div className=\"mt-4 text-sm space-y-1\">\n                    <div className=\"flex justify-between\">\n                      <span>Loading:</span>\n                      <span className={isLoading ? \"text-blue-600\" : \"text-gray-400\"}>\n                        {isLoading ? \"Yes\" : \"No\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Success:</span>\n                      <span className={success ? \"text-green-600\" : \"text-gray-400\"}>\n                        {success ? \"Yes\" : \"No\"}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Error:</span>\n                      <span className={error ? \"text-red-600\" : \"text-gray-400\"}>\n                        {error ? \"Yes\" : \"No\"}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Main Content - Component Display */}\n            <div className=\"lg:col-span-3\">\n              <div className=\"space-y-6\">\n                {/* Component Info */}\n                <Card>\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center\">\n                      <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                        {components.find(c => c.id === selectedComponent)?.name}\n                      </h2>\n                      <p className=\"text-gray-600\">\n                        {components.find(c => c.id === selectedComponent)?.description}\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Component Render */}\n                <div className=\"flex justify-center\">\n                  {renderComponent()}\n                </div>\n\n                {/* Usage Example */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Usage Example</CardTitle>\n                    <CardDescription>\n                      Basic implementation code for this component\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <pre className=\"bg-gray-100 p-4 rounded-md text-sm overflow-x-auto\">\n                      <code>{`import { ${components.find(c => c.id === selectedComponent)?.name.replace(\" \", \"\")} } from '@/components/auth'\n\nfunction MyComponent() {\n  const handleSubmit = async (data) => {\n    // Handle form submission\n  }\n\n  return (\n    <${components.find(c => c.id === selectedComponent)?.name.replace(\" \", \"\")}\n      onSubmit={handleSubmit}\n      isLoading={false}\n      error={null}\n    />\n  )\n}`}</code>\n                    </pre>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}","/Users/mahesha/Downloads/hasivu-platform/web/src/pages-backup/test-components.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/services/api/hasivu-api.service.ts",["2589","2590","2591","2592","2593","2594","2595","2596","2597","2598","2599","2600","2601","2602","2603","2604","2605","2606","2607","2608","2609","2610","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622"],[],"/**\n * HASIVU Platform - Production API Service Layer\n * Complete integration with backend Lambda functions and services\n * Implements authentication, RFID, payments, and all core features\n */\n\nimport axios, { AxiosInstance, AxiosError, InternalAxiosRequestConfig } from 'axios';\nimport { getSession, signIn, signOut } from 'next-auth/react';\n\n// API Configuration\nconst API_CONFIG = {\n  BASE_URL: process.env.NEXT_PUBLIC_API_URL || 'https://api.hasivu.com',\n  STAGE: process.env.NEXT_PUBLIC_STAGE || 'prod',\n  TIMEOUT: 30000,\n  RETRY_ATTEMPTS: 3,\n  ENDPOINTS: {\n    // Authentication\n    AUTH: {\n      LOGIN: '/auth/login',\n      REGISTER: '/auth/register',\n      VERIFY_EMAIL: '/auth/verify-email',\n      REFRESH: '/auth/refresh',\n      LOGOUT: '/auth/logout',\n      FORGOT_PASSWORD: '/auth/forgot-password',\n      RESET_PASSWORD: '/auth/reset-password'\n    },\n    // User Management\n    USERS: {\n      LIST: '/api/v1/users',\n      GET: '/api/v1/users/:id',\n      UPDATE: '/api/v1/users/:id',\n      DELETE: '/api/v1/users/:id',\n      BULK_IMPORT: '/api/v1/users/bulk-import',\n      MANAGE_CHILDREN: '/api/v1/users/:id/children',\n      PROFILE: '/api/v1/users/profile',\n      PREFERENCES: '/api/v1/users/:id/preferences'\n    },\n    // Payment System\n    PAYMENTS: {\n      CREATE_ORDER: '/payments/orders',\n      VERIFY: '/payments/verify',\n      WEBHOOK: '/payments/webhook',\n      REFUND: '/payments/refund',\n      STATUS: '/payments/status/:orderId',\n      METHODS: '/payments/methods',\n      ADVANCED: '/payments/advanced',\n      RETRY: '/payments/retry/:paymentId',\n      SUBSCRIPTION: '/payments/subscription',\n      INVOICE: '/payments/invoice/:paymentId',\n      ANALYTICS: '/payments/analytics'\n    },\n    // RFID System\n    RFID: {\n      CREATE_CARD: '/rfid/cards',\n      GET_CARD: '/rfid/cards/:cardId',\n      VERIFY_CARD: '/rfid/verify',\n      BULK_IMPORT: '/rfid/bulk-import',\n      DELIVERY_VERIFICATION: '/rfid/delivery-verification',\n      MANAGE_READERS: '/rfid/readers',\n      MOBILE_TRACKING: '/rfid/mobile-tracking',\n      CARD_ANALYTICS: '/rfid/analytics'\n    },\n    // Order Management\n    ORDERS: {\n      CREATE: '/orders',\n      GET: '/orders/:orderId',\n      UPDATE: '/orders/:orderId',\n      CANCEL: '/orders/:orderId/cancel',\n      LIST: '/orders',\n      TRACK: '/orders/:orderId/track',\n      HISTORY: '/orders/history',\n      BULK_CREATE: '/orders/bulk'\n    },\n    // Menu System\n    MENU: {\n      ITEMS: '/menu/items',\n      ITEM: '/menu/items/:itemId',\n      CATEGORIES: '/menu/categories',\n      SCHEDULE: '/menu/schedule',\n      PLANNING: '/menu/planning',\n      NUTRITION: '/menu/nutrition/:itemId',\n      RECOMMENDATIONS: '/menu/recommendations',\n      SEARCH: '/menu/search'\n    },\n    // Analytics & Reporting\n    ANALYTICS: {\n      DASHBOARD: '/analytics/dashboard',\n      REPORTS: '/analytics/reports/:type',\n      METRICS: '/analytics/metrics',\n      EXPORT: '/analytics/export',\n      REAL_TIME: '/analytics/real-time',\n      INSIGHTS: '/analytics/insights'\n    },\n    // School Management\n    SCHOOLS: {\n      LIST: '/schools',\n      GET: '/schools/:schoolId',\n      UPDATE: '/schools/:schoolId',\n      STATISTICS: '/schools/:schoolId/stats',\n      SETTINGS: '/schools/:schoolId/settings',\n      STAFF: '/schools/:schoolId/staff'\n    },\n    // Notifications\n    NOTIFICATIONS: {\n      LIST: '/notifications',\n      SEND: '/notifications/send',\n      MARK_READ: '/notifications/:id/read',\n      PREFERENCES: '/notifications/preferences',\n      SUBSCRIBE: '/notifications/subscribe',\n      UNSUBSCRIBE: '/notifications/unsubscribe'\n    }\n  }\n};\n\n// Type Definitions\nexport interface ApiResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: {\n    message: string;\n    code: string;\n    details?: any;\n  };\n  meta?: {\n    total?: number;\n    page?: number;\n    limit?: number;\n  };\n}\n\nexport interface AuthTokens {\n  accessToken: string;\n  refreshToken: string;\n  idToken: string;\n  expiresIn: number;\n}\n\nexport interface UserSession {\n  user: {\n    id: string;\n    email: string;\n    firstName: string;\n    lastName: string;\n    role: string;\n    schoolId?: string;\n  };\n  tokens: AuthTokens;\n}\n\n// API Client Class\nclass HASIVUApiClient {\n  private client: AxiosInstance;\n  private refreshPromise: Promise<AuthTokens> | null = null;\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: API_CONFIG.BASE_URL,\n      timeout: API_CONFIG.TIMEOUT,\n      headers: {\n        'Content-Type': 'application/json',\n        'X-API-Version': 'v1',\n        'X-Client-Type': 'web'\n      }\n    });\n\n    this.setupInterceptors();\n  }\n\n  private setupInterceptors(): void {\n    // Request interceptor for authentication\n    this.client.interceptors.request.use(\n      async (config: InternalAxiosRequestConfig) => {\n        const session = await getSession();\n        \n        if (session?.accessToken) {\n          config.headers.Authorization = `Bearer ${session.accessToken}`;\n        }\n\n        // Add request ID for tracking\n        config.headers['X-Request-ID'] = this.generateRequestId();\n        \n        // Add timestamp\n        config.headers['X-Request-Timestamp'] = new Date().toISOString();\n\n        return config;\n      },\n      (error) => Promise.reject(error)\n    );\n\n    // Response interceptor for error handling and token refresh\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error: AxiosError) => {\n        const originalRequest = error.config as InternalAxiosRequestConfig & { _retry?: boolean };\n\n        // Handle token expiration\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true;\n\n          try {\n            const tokens = await this.refreshAccessToken();\n            if (tokens) {\n              originalRequest.headers.Authorization = `Bearer ${tokens.accessToken}`;\n              return this.client(originalRequest);\n            }\n          } catch (refreshError) {\n            // Redirect to login\n            await signOut({ callbackUrl: '/login' });\n            return Promise.reject(refreshError);\n          }\n        }\n\n        return Promise.reject(this.handleApiError(error));\n      }\n    );\n  }\n\n  private generateRequestId(): string {\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async refreshAccessToken(): Promise<AuthTokens | null> {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    this.refreshPromise = this.performTokenRefresh();\n    \n    try {\n      const tokens = await this.refreshPromise;\n      this.refreshPromise = null;\n      return tokens;\n    } catch (error) {\n      this.refreshPromise = null;\n      throw error;\n    }\n  }\n\n  private async performTokenRefresh(): Promise<AuthTokens> {\n    const session = await getSession();\n    \n    if (!session?.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    const response = await this.client.post(\n      API_CONFIG.ENDPOINTS.AUTH.REFRESH,\n      { refreshToken: session.refreshToken }\n    );\n\n    return response.data;\n  }\n\n  private handleApiError(error: AxiosError): Error {\n    const errorResponse = error.response?.data as ApiResponse;\n    \n    const errorMessage = errorResponse?.error?.message || \n                        error.message || \n                        'An unexpected error occurred';\n    \n    const errorCode = errorResponse?.error?.code || \n                     `HTTP_${error.response?.status || 'UNKNOWN'}`;\n\n    const enhancedError = new Error(errorMessage) as Error & {\n      code: string;\n      status: number;\n      details: any;\n    };\n\n    enhancedError.code = errorCode;\n    enhancedError.status = error.response?.status || 0;\n    enhancedError.details = errorResponse?.error?.details;\n\n    return enhancedError;\n  }\n\n  // Authentication Methods\n  async login(email: string, password: string): Promise<ApiResponse<UserSession>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.AUTH.LOGIN, {\n      email,\n      password\n    });\n    return response.data;\n  }\n\n  async register(userData: any): Promise<ApiResponse<UserSession>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.AUTH.REGISTER, userData);\n    return response.data;\n  }\n\n  async verifyEmail(token: string): Promise<ApiResponse<void>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.AUTH.VERIFY_EMAIL, { token });\n    return response.data;\n  }\n\n  // RFID Methods\n  async createRFIDCard(cardData: any): Promise<ApiResponse<any>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.RFID.CREATE_CARD, cardData);\n    return response.data;\n  }\n\n  async verifyRFIDCard(cardNumber: string, readerId: string): Promise<ApiResponse<any>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.RFID.VERIFY_CARD, {\n      cardNumber,\n      readerId,\n      timestamp: new Date().toISOString()\n    });\n    return response.data;\n  }\n\n  async getRFIDAnalytics(params?: any): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.RFID.CARD_ANALYTICS, { params });\n    return response.data;\n  }\n\n  // Payment Methods\n  async createPaymentOrder(orderData: any): Promise<ApiResponse<any>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.PAYMENTS.CREATE_ORDER, orderData);\n    return response.data;\n  }\n\n  async verifyPayment(paymentData: any): Promise<ApiResponse<any>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.PAYMENTS.VERIFY, paymentData);\n    return response.data;\n  }\n\n  async getPaymentAnalytics(params?: any): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.PAYMENTS.ANALYTICS, { params });\n    return response.data;\n  }\n\n  // Order Methods\n  async createOrder(orderData: any): Promise<ApiResponse<any>> {\n    const response = await this.client.post(API_CONFIG.ENDPOINTS.ORDERS.CREATE, orderData);\n    return response.data;\n  }\n\n  async getOrder(orderId: string): Promise<ApiResponse<any>> {\n    const url = API_CONFIG.ENDPOINTS.ORDERS.GET.replace(':orderId', orderId);\n    const response = await this.client.get(url);\n    return response.data;\n  }\n\n  async trackOrder(orderId: string): Promise<ApiResponse<any>> {\n    const url = API_CONFIG.ENDPOINTS.ORDERS.TRACK.replace(':orderId', orderId);\n    const response = await this.client.get(url);\n    return response.data;\n  }\n\n  // Menu Methods\n  async getMenuItems(params?: any): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.MENU.ITEMS, { params });\n    return response.data;\n  }\n\n  async searchMenu(query: string): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.MENU.SEARCH, {\n      params: { q: query }\n    });\n    return response.data;\n  }\n\n  async getMenuRecommendations(userId?: string): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.MENU.RECOMMENDATIONS, {\n      params: { userId }\n    });\n    return response.data;\n  }\n\n  // Analytics Methods\n  async getDashboardData(): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.ANALYTICS.DASHBOARD);\n    return response.data;\n  }\n\n  async getAnalyticsReport(type: string, params?: any): Promise<ApiResponse<any>> {\n    const url = API_CONFIG.ENDPOINTS.ANALYTICS.REPORTS.replace(':type', type);\n    const response = await this.client.get(url, { params });\n    return response.data;\n  }\n\n  async getRealTimeMetrics(): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.ANALYTICS.REAL_TIME);\n    return response.data;\n  }\n\n  // School Methods\n  async getSchoolStatistics(schoolId: string): Promise<ApiResponse<any>> {\n    const url = API_CONFIG.ENDPOINTS.SCHOOLS.STATISTICS.replace(':schoolId', schoolId);\n    const response = await this.client.get(url);\n    return response.data;\n  }\n\n  async getSchoolList(params?: any): Promise<ApiResponse<any>> {\n    const response = await this.client.get(API_CONFIG.ENDPOINTS.SCHOOLS.LIST, { params });\n    return response.data;\n  }\n\n  // Demo Booking Methods (for landing page)\n  async bookDemo(demoData: {\n    name: string;\n    email: string;\n    phone: string;\n    schoolName: string;\n    role: string;\n    studentCount?: number;\n    message?: string;\n  }): Promise<ApiResponse<any>> {\n    // This would typically go to a CRM endpoint or notification service\n    const response = await this.client.post('/demo/book', demoData);\n    return response.data;\n  }\n\n  async requestTrial(trialData: {\n    schoolName: string;\n    adminEmail: string;\n    adminName: string;\n    studentCount: number;\n    expectedStartDate?: string;\n  }): Promise<ApiResponse<any>> {\n    const response = await this.client.post('/trial/request', trialData);\n    return response.data;\n  }\n\n  // Public Statistics (for landing page)\n  async getPublicStatistics(): Promise<ApiResponse<{\n    totalStudents: number;\n    totalSchools: number;\n    totalOrders: number;\n    fraudDetectionRate: number;\n    deliveryAccuracy: number;\n    averageCostReduction: number;\n    systemUptime: number;\n    rfidVerifications: number;\n  }>> {\n    const response = await this.client.get('/public/statistics');\n    return response.data;\n  }\n\n  // Testimonials (for landing page)\n  async getTestimonials(): Promise<ApiResponse<any[]>> {\n    const response = await this.client.get('/public/testimonials');\n    return response.data;\n  }\n}\n\n// Export singleton instance\nexport const hasiviApi = new HASIVUApiClient();\n\n// Export types\nexport type { ApiResponse, AuthTokens, UserSession };\n","/Users/mahesha/Downloads/hasivu-platform/web/src/services/api.ts",["2623","2624","2625","2626","2627","2628","2629","2630","2631","2632","2633","2634","2635","2636","2637","2638","2639","2640","2641","2642","2643","2644","2645","2646","2647","2648","2649","2650","2651","2652","2653","2654","2655","2656","2657","2658","2659","2660","2661","2662","2663","2664","2665","2666","2667","2668","2669","2670","2671","2672","2673","2674","2675","2676","2677","2678","2679","2680","2681","2682","2683","2684","2685","2686","2687","2688","2689","2690","2691","2692","2693","2694","2695","2696","2697","2698","2699","2700","2701","2702","2703","2704","2705","2706","2707","2708","2709","2710","2711","2712","2713"],[],"// Production-level API services for HASIVU platform\nimport axios, { AxiosInstance, AxiosResponse, AxiosError } from 'axios';\n\n// API Configuration\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:3001/api';\nconst WS_BASE_URL = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3001/ws';\n\n// Create axios instance with default configuration\nconst apiClient: AxiosInstance = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napiClient.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor for error handling\napiClient.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem('authToken');\n      window.location.href = '/auth/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Generic API response type\ninterface ApiResponse<T = any> {\n  data: T;\n  message: string;\n  success: boolean;\n  timestamp: string;\n  meta?: {\n    page?: number;\n    limit?: number;\n    total?: number;\n    totalPages?: number;\n  };\n}\n\n// User Management API\nexport const userApi = {\n  // Authentication\n  login: async (credentials: { email: string; password: string }): Promise<ApiResponse<{ token: string; user: any }>> => {\n    const response = await apiClient.post('/auth/login', credentials);\n    return response.data;\n  },\n\n  register: async (userData: any): Promise<ApiResponse<{ user: any }>> => {\n    const response = await apiClient.post('/auth/register', userData);\n    return response.data;\n  },\n\n  logout: async (): Promise<ApiResponse<null>> => {\n    const response = await apiClient.post('/auth/logout');\n    localStorage.removeItem('authToken');\n    return response.data;\n  },\n\n  // Profile management\n  getProfile: async (): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/users/profile');\n    return response.data;\n  },\n\n  updateProfile: async (profileData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put('/users/profile', profileData);\n    return response.data;\n  },\n\n  // User management (admin only)\n  getUsers: async (params?: { page?: number; limit?: number; role?: string; search?: string }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/users', { params });\n    return response.data;\n  },\n\n  createUser: async (userData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/users', userData);\n    return response.data;\n  },\n\n  updateUser: async (userId: string, userData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/users/${userId}`, userData);\n    return response.data;\n  },\n\n  deleteUser: async (userId: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/users/${userId}`);\n    return response.data;\n  }\n};\n\n// Kitchen Management API\nexport const kitchenApi = {\n  // Orders\n  getOrders: async (params?: { \n    status?: string; \n    priority?: string; \n    date?: string; \n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/kitchen/orders', { params });\n    return response.data;\n  },\n\n  createOrder: async (orderData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/kitchen/orders', orderData);\n    return response.data;\n  },\n\n  updateOrderStatus: async (orderId: string, status: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/kitchen/orders/${orderId}/status`, { status });\n    return response.data;\n  },\n\n  assignOrder: async (orderId: string, staffId: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/kitchen/orders/${orderId}/assign`, { staffId });\n    return response.data;\n  },\n\n  // Kitchen metrics\n  getKitchenMetrics: async (period?: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/kitchen/metrics', { params: { period } });\n    return response.data;\n  }\n};\n\n// Inventory Management API\nexport const inventoryApi = {\n  // Items\n  getItems: async (params?: { \n    category?: string; \n    status?: string; \n    search?: string;\n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/inventory/items', { params });\n    return response.data;\n  },\n\n  createItem: async (itemData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/inventory/items', itemData);\n    return response.data;\n  },\n\n  updateItem: async (itemId: string, itemData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/inventory/items/${itemId}`, itemData);\n    return response.data;\n  },\n\n  deleteItem: async (itemId: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/inventory/items/${itemId}`);\n    return response.data;\n  },\n\n  updateStock: async (itemId: string, quantity: number, type: 'add' | 'remove'): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/inventory/items/${itemId}/stock`, { quantity, type });\n    return response.data;\n  },\n\n  // Suppliers\n  getSuppliers: async (): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/inventory/suppliers');\n    return response.data;\n  },\n\n  createSupplier: async (supplierData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/inventory/suppliers', supplierData);\n    return response.data;\n  },\n\n  updateSupplier: async (supplierId: string, supplierData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/inventory/suppliers/${supplierId}`, supplierData);\n    return response.data;\n  },\n\n  // Purchase Orders\n  getPurchaseOrders: async (params?: { status?: string; supplierId?: string }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/inventory/purchase-orders', { params });\n    return response.data;\n  },\n\n  createPurchaseOrder: async (orderData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/inventory/purchase-orders', orderData);\n    return response.data;\n  },\n\n  updatePurchaseOrderStatus: async (orderId: string, status: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/inventory/purchase-orders/${orderId}/status`, { status });\n    return response.data;\n  },\n\n  // Inventory metrics\n  getInventoryMetrics: async (): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/inventory/metrics');\n    return response.data;\n  },\n\n  getLowStockAlerts: async (): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/inventory/low-stock-alerts');\n    return response.data;\n  }\n};\n\n// Staff Management API\nexport const staffApi = {\n  // Staff members\n  getStaff: async (params?: { \n    role?: string; \n    department?: string; \n    status?: string; \n    search?: string;\n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/staff/members', { params });\n    return response.data;\n  },\n\n  createStaff: async (staffData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/staff/members', staffData);\n    return response.data;\n  },\n\n  updateStaff: async (staffId: string, staffData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/staff/members/${staffId}`, staffData);\n    return response.data;\n  },\n\n  updateStaffStatus: async (staffId: string, status: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/staff/members/${staffId}/status`, { status });\n    return response.data;\n  },\n\n  // Tasks\n  getTasks: async (params?: { \n    assignedTo?: string; \n    status?: string; \n    priority?: string;\n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/staff/tasks', { params });\n    return response.data;\n  },\n\n  createTask: async (taskData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/staff/tasks', taskData);\n    return response.data;\n  },\n\n  updateTask: async (taskId: string, taskData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/staff/tasks/${taskId}`, taskData);\n    return response.data;\n  },\n\n  updateTaskStatus: async (taskId: string, status: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/staff/tasks/${taskId}/status`, { status });\n    return response.data;\n  },\n\n  // Schedules\n  getSchedules: async (params?: { staffId?: string; date?: string; week?: string }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/staff/schedules', { params });\n    return response.data;\n  },\n\n  createSchedule: async (scheduleData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/staff/schedules', scheduleData);\n    return response.data;\n  },\n\n  updateSchedule: async (scheduleId: string, scheduleData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/staff/schedules/${scheduleId}`, scheduleData);\n    return response.data;\n  },\n\n  // Staff metrics\n  getStaffMetrics: async (): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/staff/metrics');\n    return response.data;\n  },\n\n  getAttendanceReport: async (params?: { staffId?: string; startDate?: string; endDate?: string }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/staff/attendance', { params });\n    return response.data;\n  }\n};\n\n// RFID System API\nexport const rfidApi = {\n  // RFID devices\n  getDevices: async (): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/rfid/devices');\n    return response.data;\n  },\n\n  updateDeviceStatus: async (deviceId: string, status: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.patch(`/rfid/devices/${deviceId}/status`, { status });\n    return response.data;\n  },\n\n  // RFID transactions\n  getTransactions: async (params?: { \n    studentId?: string; \n    deviceId?: string; \n    status?: string;\n    startDate?: string;\n    endDate?: string;\n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/rfid/transactions', { params });\n    return response.data;\n  },\n\n  verifyRfidScan: async (scanData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/rfid/verify', scanData);\n    return response.data;\n  },\n\n  // RFID metrics\n  getRfidMetrics: async (): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/rfid/metrics');\n    return response.data;\n  }\n};\n\n// Notifications API\nexport const notificationsApi = {\n  // Get notifications\n  getNotifications: async (params?: { \n    type?: string; \n    read?: boolean; \n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/notifications', { params });\n    return response.data;\n  },\n\n  markAsRead: async (notificationIds: string[]): Promise<ApiResponse<null>> => {\n    const response = await apiClient.patch('/notifications/mark-read', { notificationIds });\n    return response.data;\n  },\n\n  markAllAsRead: async (): Promise<ApiResponse<null>> => {\n    const response = await apiClient.patch('/notifications/mark-all-read');\n    return response.data;\n  },\n\n  deleteNotification: async (notificationId: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/notifications/${notificationId}`);\n    return response.data;\n  },\n\n  // Notification settings\n  getSettings: async (): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/notifications/settings');\n    return response.data;\n  },\n\n  updateSettings: async (settings: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put('/notifications/settings', settings);\n    return response.data;\n  }\n};\n\n// Menu Management API\nexport const menuApi = {\n  // Menus\n  getMenus: async (params?: { \n    date?: string; \n    category?: string; \n    active?: boolean;\n    page?: number; \n    limit?: number;\n  }): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get('/menus', { params });\n    return response.data;\n  },\n\n  createMenu: async (menuData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post('/menus', menuData);\n    return response.data;\n  },\n\n  updateMenu: async (menuId: string, menuData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/menus/${menuId}`, menuData);\n    return response.data;\n  },\n\n  deleteMenu: async (menuId: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/menus/${menuId}`);\n    return response.data;\n  },\n\n  // Menu items\n  getMenuItems: async (menuId: string): Promise<ApiResponse<any[]>> => {\n    const response = await apiClient.get(`/menus/${menuId}/items`);\n    return response.data;\n  },\n\n  addMenuItem: async (menuId: string, itemData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.post(`/menus/${menuId}/items`, itemData);\n    return response.data;\n  },\n\n  updateMenuItem: async (menuId: string, itemId: string, itemData: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.put(`/menus/${menuId}/items/${itemId}`, itemData);\n    return response.data;\n  },\n\n  removeMenuItem: async (menuId: string, itemId: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/menus/${menuId}/items/${itemId}`);\n    return response.data;\n  }\n};\n\n// Analytics API\nexport const analyticsApi = {\n  // Dashboard analytics\n  getDashboardMetrics: async (period?: string): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/analytics/dashboard', { params: { period } });\n    return response.data;\n  },\n\n  // Revenue analytics\n  getRevenueAnalytics: async (params?: { \n    startDate?: string; \n    endDate?: string; \n    groupBy?: string;\n  }): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/analytics/revenue', { params });\n    return response.data;\n  },\n\n  // Order analytics\n  getOrderAnalytics: async (params?: { \n    startDate?: string; \n    endDate?: string; \n    groupBy?: string;\n  }): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/analytics/orders', { params });\n    return response.data;\n  },\n\n  // Student analytics\n  getStudentAnalytics: async (params?: { \n    grade?: string; \n    period?: string;\n  }): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get('/analytics/students', { params });\n    return response.data;\n  },\n\n  // Performance reports\n  getPerformanceReport: async (type: string, params?: any): Promise<ApiResponse<any>> => {\n    const response = await apiClient.get(`/analytics/reports/${type}`, { params });\n    return response.data;\n  },\n\n  // Export data\n  exportData: async (type: string, params?: any): Promise<Blob> => {\n    const response = await apiClient.get(`/analytics/export/${type}`, { \n      params,\n      responseType: 'blob'\n    });\n    return response.data;\n  }\n};\n\n// File Upload API\nexport const fileApi = {\n  uploadFile: async (file: File, category?: string): Promise<ApiResponse<{ url: string; filename: string }>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    if (category) formData.append('category', category);\n\n    const response = await apiClient.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  uploadMultipleFiles: async (files: File[], category?: string): Promise<ApiResponse<Array<{ url: string; filename: string }>>> => {\n    const formData = new FormData();\n    files.forEach(file => formData.append('files', file));\n    if (category) formData.append('category', category);\n\n    const response = await apiClient.post('/files/upload-multiple', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  deleteFile: async (filename: string): Promise<ApiResponse<null>> => {\n    const response = await apiClient.delete(`/files/${filename}`);\n    return response.data;\n  }\n};\n\n// WebSocket connection manager\nexport class WebSocketManager {\n  private ws: WebSocket | null = null;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectInterval = 3000;\n  private messageHandlers: Map<string, (data: any) => void> = new Map();\n\n  connect(token?: string) {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    try {\n      this.ws = new WebSocket(WS_BASE_URL);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        \n        // Send authentication token\n        if (token) {\n          this.send('auth', { token });\n        }\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          const handler = this.messageHandlers.get(message.type);\n          if (handler) {\n            handler(message.data);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.attemptReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n      };\n    } catch (error) {\n      console.error('Error connecting to WebSocket:', error);\n      this.attemptReconnect();\n    }\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, this.reconnectInterval);\n    }\n  }\n\n  send(type: string, data: any) {\n    if (this.ws?.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type, data }));\n    }\n  }\n\n  subscribe(messageType: string, handler: (data: any) => void) {\n    this.messageHandlers.set(messageType, handler);\n  }\n\n  unsubscribe(messageType: string) {\n    this.messageHandlers.delete(messageType);\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.messageHandlers.clear();\n  }\n\n  isConnected(): boolean {\n    return this.ws?.readyState === WebSocket.OPEN;\n  }\n}\n\n// Create singleton WebSocket manager\nexport const wsManager = new WebSocketManager();\n\n// Initialize WebSocket connection on app start\nexport const initializeWebSocket = () => {\n  const token = localStorage.getItem('authToken');\n  if (token) {\n    wsManager.connect(token);\n  }\n};\n\n// Error handler utility\nexport const handleApiError = (error: any): string => {\n  if (error.response?.data?.message) {\n    return error.response.data.message;\n  }\n  if (error.message) {\n    return error.message;\n  }\n  return 'An unexpected error occurred';\n};\n\n// API status checker\nexport const checkApiHealth = async (): Promise<boolean> => {\n  try {\n    const response = await apiClient.get('/health');\n    return response.data.status === 'ok';\n  } catch (error) {\n    return false;\n  }\n};\n\nexport default apiClient;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/store/index.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/analyticsSlice.ts",["2714"],[],"import { createSlice } from '@reduxjs/toolkit';\n\nexport interface AnalyticsState {\n  data: any[];\n  isLoading: boolean;\n}\n\nconst initialState: AnalyticsState = {\n  data: [],\n  isLoading: false,\n};\n\nconst analyticsSlice = createSlice({\n  name: 'analytics',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.isLoading = action.payload;\n    },\n  },\n});\n\nexport const { setLoading } = analyticsSlice.actions;\nexport default analyticsSlice.reducer;","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/authSlice.ts",["2715","2716","2717"],[],"/**\n * HASIVU Platform - Authentication Redux Slice\n * User authentication state management with backend integration\n * Production-ready with proper error handling and token management\n */\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport apiClient from '@/lib/api-client';\n\n// User interface matching backend\nexport interface User {\n  id: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  phone?: string;\n  timezone?: string;\n  language?: string;\n  preferences?: any;\n  createdAt: string;\n  updatedAt: string;\n  permissions?: string[];\n  roles?: string[];\n}\n\n// Auth state interface\nexport interface AuthState {\n  user: User | null;\n  token: string | null;\n  refreshToken: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  lastActivity: number;\n}\n\n// Async thunks for API integration\nexport const loginUser = createAsyncThunk(\n  'auth/loginUser',\n  async (credentials: { email: string; password: string; rememberMe?: boolean }, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.login(credentials);\n      \n      if (response.success && response.user) {\n        return {\n          user: response.user,\n          token: response.tokens?.accessToken || null,\n          refreshToken: response.tokens?.refreshToken || null,\n          message: response.message\n        };\n      } else {\n        return rejectWithValue(response.error || 'Login failed');\n      }\n    } catch (error) {\n      return rejectWithValue(error instanceof Error ? error.message : 'Login failed');\n    }\n  }\n);\n\nexport const refreshToken = createAsyncThunk(\n  'auth/refreshToken',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.refreshToken();\n      \n      if (response.success) {\n        return {\n          token: response.accessToken,\n          refreshToken: response.refreshToken,\n        };\n      } else {\n        return rejectWithValue(response.message || 'Token refresh failed');\n      }\n    } catch (error) {\n      return rejectWithValue(error instanceof Error ? error.message : 'Token refresh failed');\n    }\n  }\n);\n\nexport const logoutUser = createAsyncThunk(\n  'auth/logoutUser',\n  async (_, { rejectWithValue }) => {\n    try {\n      await apiClient.logout();\n      return true;\n    } catch (error) {\n      // Even if API call fails, we should clear local state\n      console.error('Logout API error:', error);\n      return true;\n    }\n  }\n);\n\nexport const getCurrentUser = createAsyncThunk(\n  'auth/getCurrentUser',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.getCurrentUser();\n      \n      if (response.success && response.data?.user) {\n        return response.data.user;\n      } else {\n        return rejectWithValue(response.error || 'Failed to get current user');\n      }\n    } catch (error) {\n      return rejectWithValue(error instanceof Error ? error.message : 'Failed to get current user');\n    }\n  }\n);\n\n// Initial state\nconst initialState: AuthState = {\n  user: null,\n  token: null,\n  refreshToken: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  lastActivity: Date.now(),\n};\n\n// Auth slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    updateLastActivity: (state) => {\n      state.lastActivity = Date.now();\n    },\n    updateUserProfile: (state, action: PayloadAction<Partial<User>>) => {\n      if (state.user) {\n        state.user = { ...state.user, ...action.payload };\n      }\n    },\n    clearAuth: (state) => {\n      state.user = null;\n      state.token = null;\n      state.refreshToken = null;\n      state.isAuthenticated = false;\n      state.error = null;\n      state.lastActivity = Date.now();\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.isLoading = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    // Login\n    builder\n      .addCase(loginUser.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(loginUser.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.isAuthenticated = true;\n        state.error = null;\n        state.lastActivity = Date.now();\n      })\n      .addCase(loginUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        state.user = null;\n        state.token = null;\n        state.refreshToken = null;\n        state.isAuthenticated = false;\n      });\n\n    // Token refresh\n    builder\n      .addCase(refreshToken.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(refreshToken.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.token = action.payload.token;\n        state.refreshToken = action.payload.refreshToken;\n        state.lastActivity = Date.now();\n        state.error = null;\n      })\n      .addCase(refreshToken.rejected, (state) => {\n        state.isLoading = false;\n        state.user = null;\n        state.token = null;\n        state.refreshToken = null;\n        state.isAuthenticated = false;\n        state.error = 'Session expired. Please login again.';\n      });\n\n    // Logout\n    builder\n      .addCase(logoutUser.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(logoutUser.fulfilled, (state) => {\n        state.user = null;\n        state.token = null;\n        state.refreshToken = null;\n        state.isAuthenticated = false;\n        state.isLoading = false;\n        state.error = null;\n      })\n      .addCase(logoutUser.rejected, (state) => {\n        // Even if logout fails, clear local state\n        state.user = null;\n        state.token = null;\n        state.refreshToken = null;\n        state.isAuthenticated = false;\n        state.isLoading = false;\n        state.error = null;\n      });\n\n    // Get current user\n    builder\n      .addCase(getCurrentUser.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(getCurrentUser.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.user = action.payload;\n        state.isAuthenticated = true;\n        state.error = null;\n        state.lastActivity = Date.now();\n      })\n      .addCase(getCurrentUser.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n        // Don't clear auth state here - let the app decide\n      });\n  },\n});\n\nexport const {\n  clearError,\n  updateLastActivity,\n  updateUserProfile,\n  clearAuth,\n  setLoading\n} = authSlice.actions;\n\nexport default authSlice.reducer;","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/menuSlice.ts",["2718"],[],"/**\n * HASIVU Platform - Menu Management Redux Slice\n */\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport apiClient from '@/lib/api-client';\n\nexport interface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  category: string;\n  available: boolean;\n  imageUrl?: string;\n}\n\nexport interface MenuState {\n  items: MenuItem[];\n  categories: string[];\n  isLoading: boolean;\n  error: string | null;\n}\n\nexport const fetchMenuItems = createAsyncThunk(\n  'menu/fetchMenuItems',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.getMenuItems();\n      return response.success ? response.data || [] : [];\n    } catch (error) {\n      return rejectWithValue('Failed to fetch menu items');\n    }\n  }\n);\n\nconst initialState: MenuState = {\n  items: [],\n  categories: [],\n  isLoading: false,\n  error: null,\n};\n\nconst menuSlice = createSlice({\n  name: 'menu',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchMenuItems.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchMenuItems.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.items = action.payload;\n        state.categories = [...new Set(action.payload.map((item: MenuItem) => item.category))];\n      })\n      .addCase(fetchMenuItems.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const { clearError } = menuSlice.actions;\nexport default menuSlice.reducer;","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/notificationSlice.ts",["2719","2720"],[],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport interface NotificationState {\n  notifications: any[];\n  unreadCount: number;\n}\n\nconst initialState: NotificationState = {\n  notifications: [],\n  unreadCount: 0,\n};\n\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState,\n  reducers: {\n    addNotification: (state, action) => {\n      state.notifications.unshift(action.payload);\n      state.unreadCount++;\n    },\n  },\n});\n\nexport const { addNotification } = notificationSlice.actions;\nexport default notificationSlice.reducer;","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/orderSlice.ts",["2721","2722","2723","2724","2725","2726","2727"],[],"/**\n * HASIVU Platform - Order Management Redux Slice\n * Production-ready order management with API integration\n */\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport apiClient from '@/lib/api-client';\n\n// Order interface\nexport interface Order {\n  id: string;\n  userId: string;\n  items: Array<{\n    id: string;\n    name: string;\n    quantity: number;\n    price: number;\n    notes?: string;\n  }>;\n  status: 'pending' | 'confirmed' | 'preparing' | 'ready' | 'delivered' | 'cancelled';\n  totalAmount: number;\n  deliveryType: 'pickup' | 'delivery';\n  deliveryTime?: string;\n  paymentMethod: 'razorpay' | 'wallet' | 'cash';\n  paymentStatus: 'pending' | 'paid' | 'failed' | 'refunded';\n  createdAt: string;\n  updatedAt: string;\n}\n\n// Order state interface\nexport interface OrderState {\n  orders: Order[];\n  currentOrder: Order | null;\n  activeOrders: Order[];\n  isLoading: boolean;\n  isCreating: boolean;\n  error: string | null;\n  lastUpdated: string | null;\n}\n\n// Async thunks\nexport const fetchOrders = createAsyncThunk(\n  'orders/fetchOrders',\n  async (_, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.getOrders();\n      if (response.success) {\n        return response.data || [];\n      } else {\n        return rejectWithValue(response.error || 'Failed to fetch orders');\n      }\n    } catch (error) {\n      return rejectWithValue(error instanceof Error ? error.message : 'Failed to fetch orders');\n    }\n  }\n);\n\nexport const createOrder = createAsyncThunk(\n  'orders/createOrder',\n  async (orderData: any, { rejectWithValue }) => {\n    try {\n      const response = await apiClient.createOrder(orderData);\n      if (response.success) {\n        return response.data;\n      } else {\n        return rejectWithValue(response.error || 'Failed to create order');\n      }\n    } catch (error) {\n      return rejectWithValue(error instanceof Error ? error.message : 'Failed to create order');\n    }\n  }\n);\n\n// Initial state\nconst initialState: OrderState = {\n  orders: [],\n  currentOrder: null,\n  activeOrders: [],\n  isLoading: false,\n  isCreating: false,\n  error: null,\n  lastUpdated: null,\n};\n\n// Order slice\nconst orderSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    clearError: (state) => {\n      state.error = null;\n    },\n    setCurrentOrder: (state, action: PayloadAction<Order | null>) => {\n      state.currentOrder = action.payload;\n    },\n    updateOrderStatus: (state, action: PayloadAction<{ orderId: string; status: Order['status'] }>) => {\n      const { orderId, status } = action.payload;\n      \n      // Update in all orders\n      const orderIndex = state.orders.findIndex(order => order.id === orderId);\n      if (orderIndex !== -1) {\n        state.orders[orderIndex].status = status;\n      }\n      \n      // Update current order\n      if (state.currentOrder?.id === orderId) {\n        state.currentOrder.status = status;\n      }\n      \n      // Update active orders\n      const activeIndex = state.activeOrders.findIndex(order => order.id === orderId);\n      if (activeIndex !== -1) {\n        state.activeOrders[activeIndex].status = status;\n      }\n      \n      state.lastUpdated = new Date().toISOString();\n    },\n  },\n  extraReducers: (builder) => {\n    // Fetch orders\n    builder\n      .addCase(fetchOrders.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(fetchOrders.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.orders = action.payload;\n        state.activeOrders = action.payload.filter(\n          (order: Order) => !['delivered', 'cancelled'].includes(order.status)\n        );\n        state.lastUpdated = new Date().toISOString();\n      })\n      .addCase(fetchOrders.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.payload as string;\n      });\n\n    // Create order\n    builder\n      .addCase(createOrder.pending, (state) => {\n        state.isCreating = true;\n        state.error = null;\n      })\n      .addCase(createOrder.fulfilled, (state, action) => {\n        state.isCreating = false;\n        state.orders.unshift(action.payload);\n        state.activeOrders.unshift(action.payload);\n        state.currentOrder = action.payload;\n        state.lastUpdated = new Date().toISOString();\n      })\n      .addCase(createOrder.rejected, (state, action) => {\n        state.isCreating = false;\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const {\n  clearError,\n  setCurrentOrder,\n  updateOrderStatus,\n} = orderSlice.actions;\n\n// Selectors\nexport const selectOrders = (state: any) => state.orders.orders;\nexport const selectCurrentOrder = (state: any) => state.orders.currentOrder;\nexport const selectActiveOrders = (state: any) => state.orders.activeOrders;\nexport const selectOrdersLoading = (state: any) => state.orders.isLoading;\nexport const selectIsCreatingOrder = (state: any) => state.orders.isCreating;\nexport const selectOrdersError = (state: any) => state.orders.error;\n\nexport default orderSlice.reducer;","/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/paymentSlice.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/rfidSlice.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/store/slices/uiSlice.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/styles/globalStyles.ts",["2728"],[]," * HASIVU Platform - Global CSS Styles\n * Cross-browser consistent styling with mobile-first responsive design\n * Generated by SuperClaude Wave 3: Frontend Implementation;\nimport { GlobalStyles as MuiGlobalStyles } from '@mui/material';\nimport { colors } from './ theme';\n// Global CSS styles for consistent cross-browser rendering\nexport const globalStyles = {}\n  // HTML and Body base styles\n  html\n  body\n  // Root element styles\n  '#__next': {}\n  // Link styles\n  a\n    '&:focus': {}\n      outline: `2px solid ${colors.primary[500]}``\n      outline: `2px solid ${colors.primary[500]}``\n    border: `1px solid ${colors.neutral[200]}``\n    borderBottom: `1px solid ${colors.neutral[200]}``\n    borderLeft: `4px solid ${colors.primary[500]}``\n    outline: `2px solid ${colors.primary[500]}``\n      border: `2px solid ${colors.text.primary}``","/Users/mahesha/Downloads/hasivu-platform/web/src/styles/theme.ts",["2729"],[]," * HASIVU Platform - Material-UI Theme Configuration\n * Comprehensive theme with school-friendly branding and accessibility features\n * Generated by SuperClaude Wave 3: Frontend Implementation;\nimport { createTheme, Theme, PaletteOptions } from '@mui/material/styles';\nimport { alpha } from '@mui/material/styles';\n// Custom color palette for school food delivery platform\nconst colors = {}\n  // Secondary colors - Warm oranges for energy/ appetite\n  secondary: {}\n  // Accent colors for notifications and highlights\n  accent: {}\n  // Neutral grays for UI elements\n  neutral: {}\n  // Background variations\n  background: {}\n  // Text colors with high contrast for accessibility\n  text: {}\n  // Typography system optimized for readability\nconst typography = {}\n  h2\n  h3\n  h4\n  h5\n  h6\n  // Body text styles\n  body1: {}\n  body2: {}\n  // UI text styles\n  button: {}\n  caption: {}\n  overline: {}\n  subtitle1: {}\n  subtitle2: {}\n  // Spacing system (8px base unit)\nconst spacing = {}\n  // Breakpoints for responsive design\nconst breakpoints = {}\n  // Shadow system\nconst shadows = []\n] as any;\n  // Light theme palette\nconst lightPalette: PaletteOptions = {}\n  secondary: {}\n  error: {}\n  warning: {}\n  info: {}\n  success: {}\n  background: {}\n  text: {}\n  divider: colors.neutral[300],\n  grey: colors.neutral\n  // Dark theme palette\nconst darkPalette: PaletteOptions = {}\n  secondary: {}\n  error: {}\n  warning: {}\n  info: {}\n  success: {}\n  background: {}\n  text: {}\n  divider: 'rgba(255, 255, 255, 0.12)'\n  // Base theme configuration\nconst baseTheme = createTheme({}\n  shadows\n  // Component overrides for consistent styling\nconst componentOverrides = {}\n        '&:focus': {}\n      contained\n      outlined\n      sizeLarge: {}\n      sizeSmall: {}\n  // Card overrides\n  MuiCard\n  // Paper overrides\n  MuiPaper\n      elevation1: {}\n      elevation2: {}\n  // TextField overrides\n  MuiTextField\n          '&.Mui-focused .MuiOutlinedInput-notchedOutline': {}\n  // Chip overrides\n  MuiChip\n      filled\n  // AppBar overrides\n  MuiAppBar\n  // Dialog overrides\n  MuiDialog\n  // Menu overrides\n  MuiMenu\n        border: `1px solid ${colors.neutral[200]}``","/Users/mahesha/Downloads/hasivu-platform/web/src/types/auth.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/types/dashboard.ts",["2730"],[]," * HASIVU Platform - Dashboard Types\n * TypeScript interfaces for parent dashboard components;\nimport { UserPreferences } from './auth';\n  // Child profile interface\n  createdAt: string;\n  updatedAt: string;\n  // Order interface with extended details\n  rating?: number;\n  review?: string;\n  nutritionInfo?: NutritionInfo;\n  createdAt: string;\n  updatedAt: string;\n  // Nutrition information\n  // Payment method interface\n  createdAt: string;\n  // Subscription interface\n  createdAt: string;\n  updatedAt: string;\n  // Notification interface\n  // Analytics data\n>;\n  monthlySpending: Array<{}\n  }>;\n  nutritionSummary\n    }>;\n  deliveryStats: {}\n  // Dashboard state interface\n  // Filter and sorting options\n  childId?: string;\n  minAmount?: number;\n  maxAmount?: number;\n  searchQuery?: string;\n  // Form interfaces for child management\nexport interface UpdateChildForm extends Partial<CreateChildForm> {}\n  // Quick action types\nexport type QuickAction;\n  | 'reorder'\n  | 'cancel_order'\n  | 'modify_order'\n  | 'track_order'\n  | 'add_child'\n  | 'view_nutrition'\n  | 'update_payment'\n  | 'pause_subscription';\n  // Dashboard widget types\n  position: { x: number; y: number };\n  isVisible: boolean;\n  data?: any;\n  // Real-time updates\n  // Export all interfaces for easy importing\n  // (Interfaces are already exported individually above)","/Users/mahesha/Downloads/hasivu-platform/web/src/types/navigation.ts",["2731"],[],"export type UserRole = 'student' | 'parent' | 'admin' | 'kitchen' | 'teacher';\n  icon?: React.ComponentType<{ className?: string }>;\n  badge?: number;\n  roles: UserRole[];\n  children?: NavigationItem[];\n  icon: React.ComponentType<{ className?: string }>;\n  badge?: number;\n  active?: boolean;","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/accessibility.ts",["2732"],[]," * Accessibility Utilities\n * Helper functions for WCAG compliance and accessibility testing;\n * Color contrast calculation utilities;\n * Convert hex color to RGB;\nexport const hexToRgb = (hex: string): [number, number, number] | null => {}\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i .exec(hex);\n  return result\n    ? []\n        parseInt(result[1], 16),\n        parseInt(result[2], 16),\n        parseInt(result[3], 16)\n      ]\n    : null;\n * Calculate relative luminance of a color;\nexport const getRelativeLuminance = (rgb: [number, number, number]): number => {}\n  return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n * Calculate contrast ratio between two colors;\nexport const getContrastRatio = (color1: string, color2: string): number => {}\n * Check if color combination meets WCAG contrast requirements;\nexport const checkColorContrast = (\n  foreground: string,\n  background: string,\n  isLargeText: boolean = false\n): ColorContrastResult => {}\n  return { ratio, AA, AAA, level };\n * Generate accessibility-compliant color palette;\nexport const // TODO: Refactor this function - it may be too long\ngenerateAccessibleColors = (baseColor: string\n  // Validate all color combinations\n  const validations = Object.entries(colors).map(([name, color]) => ({}\n  return { colors, validations };\n * ARIA utilities;\nexport const generateAriaId = (prefix: string = 'aria'): string => {}\n  return `${prefix}-${Math.random().toString(36).substr(2, 9)}``\n          const label = id ? document.querySelector(`label[for=\"${id}\"]``\n      console.error(`Accessibility test \"${test.name}\" failed with error:``\n  element.style.fontSize = `${scaledFontSize}px``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/analytics.ts",["2733"],[]," * HASIVU Platform - Analytics Utilities\n * Event tracking, user analytics, and performance monitoring\n * Integrates with Google Analytics and custom analytics solutions;\nimport { ANALYTICS_EVENTS, AnalyticsEvent } from './constants';\n * Analytics event interface;\n * User properties for analytics;\n * E-commerce tracking data;\n * Performance metrics interface;\n * Analytics configuration;\n * Analytics manager class;\n    this.sessionId = this.generateSessionId();\n   * Initialize analytics services;\n  async initialize(): Promise<void> {}\n  // Initialize Hotjar\n      if (this.config.hotjarId) {}\n  // Initialize Mixpanel\n      if (this.config.mixpanelToken) {}\n  // Set up auto-tracking\n      if (this.config.enableAutoTracking) {}\n  // Set up performance tracking\n      if (this.config.enablePerformanceTracking) {}\n  // Set up error tracking\n      if (this.config.enableErrorTracking) {}\n      this.isInitialized = true;\n  // Process queued events\n      this.processEventQueue();\n      if (this.config.debugMode) {}\n   * Track custom event;\n  track(eventData: Partial<AnalyticsEventData>): void {}\n    if (this.config.debugMode) {}\n    if (!this.isInitialized) {}\n  // Send to Google Analytics\n    if (this.config.googleAnalyticsId && typeof gtag !== 'undefined') {}\n  // Send to Mixpanel\n    if (this.config.mixpanelToken && typeof mixpanel !== 'undefined') {}\n  // Send to custom endpoint\n    if (this.config.customEndpoint) {}\n   * Track page view;\n  trackPageView(path: string, title?: string): void {}\n  // Update Google Analytics page view\n    if (this.config.googleAnalyticsId && typeof gtag !== 'undefined') {}\n   * Track user authentication;\n  trackAuth(action: 'login' | 'logout' | 'signup', userId?: string, userProperties?: UserProperties): void {}\n    this.track({}\n   * Track e-commerce events;\n  trackEcommerce(action: 'purchase' | 'add_to_cart' | 'remove_from_cart', data: EcommerceData): void {}\n  // Send to Google Analytics Enhanced Ecommerce\n    if (this.config.googleAnalyticsId && typeof gtag !== 'undefined') {}\n   * Track search events;\n  trackSearch(query: string, results?: number): void {}\n   * Track errors;\n  trackError(error: Error, context?: string): void {}\n   * Track performance metrics;\n  trackPerformance(metrics: PerformanceMetrics): void {}\n  // Send to Google Analytics as custom metrics\n    if (this.config.googleAnalyticsId && typeof gtag !== 'undefined') {}\n   * Set user ID;\n  setUserId(userId?: string): void {}\n    if (this.config.mixpanelToken && typeof mixpanel !== 'undefined' && userId) {}\n   * Clear user ID;\n  clearUserId(): void {}\n   * Set user properties;\n  setUserProperties(properties: UserProperties): void {}\n    if (this.config.mixpanelToken && typeof mixpanel !== 'undefined') {}\n   * Initialize Google Analytics;\n  private async initializeGoogleAnalytics(): Promise<void> {}\n    script1.src = `https://www.googletagmanager.com/g tag/js?id=${this.config.googleAnalyticsId}``\n    script2.innerHTML = ``\n    ``\n    ``\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/api.ts",["2734"],[]," * HASIVU Platform - API Utilities\n * Centralized API client with authentication, error handling, and response transformation\n * Built on Axios with interceptors for consistent behavior across the application;\nimport axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse, AxiosError, InternalAxiosRequestConfig } from 'axios';\nimport { getSession } from 'next-auth/react';\nimport toast from 'react-hot-toast';\n * Extended session interface with access token;\n * Extended axios request config with custom properties;\ninterface ExtendedAxiosRequestConfig extends InternalAxiosRequestConfig {}\n * API configuration and constants;\nexport const API_CONFIG = {}\n} as const\n * API response types;\nexport interface ApiResponse<T = any> {}\n * Request configuration interfaces;\nexport interface ApiRequestConfig extends AxiosRequestConfig {}\n * Create and configure the main API client;\n    this.setupInterceptors();\n   * Setup request and response interceptors;\n  private setupInterceptors(): void {}\n  // Add authentication token\n        const session = await getSession() as ExtendedSession;\n        if (session?.accessToken) {}\n          config.headers.Authorization = `Bearer ${session.accessToken}``\n          console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}``\n          console.log(`API Response: ${response.config.method?.toUpperCase()} ${response.config.url}``\n      code: errorData?.code || `HTTP_${status}``\n    return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}``\n        `${API_CONFIG.BASE_URL}${API_CONFIG.ENDPOINTS.REFRESH_TOKEN}``\n    getById: (id: string) => apiClient.get(`${API_CONFIG.ENDPOINTS.STUDENTS}/ ${id}``\n    update: (id: string, data: any) => apiClient.put(`${API_CONFIG.ENDPOINTS.STUDENTS}/${id}``\n    delete: (id: string) => apiClient.delete(`${API_CONFIG.ENDPOINTS.STUDENTS}/ ${id}``\n    linkRFID: (studentId: string, rfidData: any) => apiClient.post(`${API_CONFIG.ENDPOINTS.STUDENTS}/${studentId}/ rfid``\n    getById: (id: string) => apiClient.get(`${API_CONFIG.ENDPOINTS.ORDERS}/ ${id}``\n    update: (id: string, data: any) => apiClient.put(`${API_CONFIG.ENDPOINTS.ORDERS}/${id}``\n    cancel: (id: string) => apiClient.patch(`${API_CONFIG.ENDPOINTS.ORDERS}/ ${id}/cancel``\n    track: (id: string) => apiClient.get(`${API_CONFIG.ENDPOINTS.ORDER_TRACKING}/ ${id}``\n    getItemById: (id: string) => apiClient.get(`${API_CONFIG.ENDPOINTS.MENU_ITEMS}/ ${id}``\n    topUpWallet: (amount: number) => apiClient.post(`${API_CONFIG.ENDPOINTS.WALLET}/ topup``\n    getReports: (type: string, params?: any) => apiClient.get(`${API_CONFIG.ENDPOINTS.REPORTS}/ ${type}``\n    markAsRead: (id: string) => apiClient.patch(`${API_CONFIG.ENDPOINTS.NOTIFICATIONS}/ ${id}/read``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/constants.ts",["2735"],[]," * HASIVU Platform - Application Constants\n * Centralized configuration, constants, and enums for the entire application\n * Provides type-safe constants and configuration management;\n * Application metadata and configuration;\nexport const APP_CONFIG = {}\n  // Feature flags\n  FEATURES: {}\n} as const;\n * User roles and permissions;\nexport const USER_ROLES = {}\n} as const;\nexport type UserRole = typeof USER_ROLES[keyof typeof USER_ROLES];\n * User permissions for role-based access control;\nexport const PERMISSIONS = {}\n} as const;\nexport type Permission = typeof PERMISSIONS[keyof typeof PERMISSIONS];\n * Role-permission mapping;\nexport const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {}\n * Order status definitions;\nexport const ORDER_STATUS = {}\n} as const;\nexport type OrderStatus = typeof ORDER_STATUS[keyof typeof ORDER_STATUS];\n * Order status labels and colors;\nexport const ORDER_STATUS_CONFIG = {}\n  [ORDER_STATUS.DRAFT]: { label: 'Draft', color: '#757575' },\n  [ORDER_STATUS.PENDING]: { label: 'Pending', color: '#FF9800' },\n  [ORDER_STATUS.CONFIRMED]: { label: \"secure-configuration-value\", color: '#2196F3' },\n  [ORDER_STATUS.PREPARING]: { label: 'Preparing', color: '#FF5722' },\n  [ORDER_STATUS.READY]: { label: 'Ready for Pickup', color: '#9C27B0' },\n  [ORDER_STATUS.PICKED_UP]: { label: 'Picked Up', color: '#3F51B5' },\n  [ORDER_STATUS.DELIVERED]: { label: 'Delivered', color: '#4CAF50' },\n  [ORDER_STATUS.CANCELLED]: { label: 'Cancelled', color: '#F44336' },\n  [ORDER_STATUS.REFUNDED]: { label: 'Refunded', color: '#607D8B' }\n} as const;\n * Payment status definitions;\nexport const PAYMENT_STATUS = {}\n} as const;\nexport type PaymentStatus = typeof PAYMENT_STATUS[keyof typeof PAYMENT_STATUS];\n * Payment method definitions;\nexport const PAYMENT_METHODS = {}\n} as const;\nexport type PaymentMethod = typeof PAYMENT_METHODS[keyof typeof PAYMENT_METHODS];\n * Meal types and timing;\nexport const MEAL_TYPES = {}\n} as const;\nexport type MealType = typeof MEAL_TYPES[keyof typeof MEAL_TYPES];\n * Default meal timings;\nexport const MEAL_TIMINGS = {}\n  [MEAL_TYPES.BREAKFAST]: { start: '07:00', end: '09:00' },\n  [MEAL_TYPES.LUNCH]: { start: '12:00', end: '14:00' },\n  [MEAL_TYPES.DINNER]: { start: '18:00', end: '20:00' },\n  [MEAL_TYPES.SNACKS]: { start: '15:00', end: '17:00' }\n} as const;\n * Dietary preferences and restrictions;\nexport const DIETARY_PREFERENCES = {}\n} as const;\nexport type DietaryPreference = typeof DIETARY_PREFERENCES[keyof typeof DIETARY_PREFERENCES];\n * Common allergies and dietary restrictions;\nexport const ALLERGIES = {}\n} as const;\nexport type Allergy = typeof ALLERGIES[keyof typeof ALLERGIES];\n * Spice levels;\nexport const SPICE_LEVELS = {}\n} as const;\nexport type SpiceLevel = typeof SPICE_LEVELS[keyof typeof SPICE_LEVELS];\n * Business configuration constants;\nexport const BUSINESS_CONFIG = {}\n} as const;\n * API response codes;\nexport const API_CODES = {}\n} as const;\nexport type ApiCode = typeof API_CODES[keyof typeof API_CODES];\n * Notification types;\nexport const NOTIFICATION_TYPES = {}\n} as const;\nexport type NotificationType = typeof NOTIFICATION_TYPES[keyof typeof NOTIFICATION_TYPES];\n * Analytics event types;\nexport const ANALYTICS_EVENTS = {}\n} as const;\nexport type AnalyticsEvent = typeof ANALYTICS_EVENTS[keyof typeof ANALYTICS_EVENTS];\n * Local storage keys;\nexport const STORAGE_KEYS = {}\n} as const;\nexport type StorageKey = typeof STORAGE_KEYS[keyof typeof STORAGE_KEYS];\n * Date and time formats;\nexport const DATE_FORMATS = {}\n} as const;\n * Currency configuration;\nexport const CURRENCY_CONFIG = {}\n} as const;\n * Error messages;\nexport const ERROR_MESSAGES = {}\n} as const;\n * Success messages;\nexport const SUCCESS_MESSAGES = {}\n} as const;\n * Regular expressions for validation;\nexport const REGEX_PATTERNS = {}\n  PHONE_INDIAN: / ^[6-9]\\d{9}$/,\n  RFID_CARD: / ^[A-Fa-f0-9]{8,16}$/,\n  STRONG_PASSWORD: / ^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{}\n}$/,\n  PIN_CODE: / ^[1-9][0-9]{5}$/,\n  STUDENT_ID: / ^[A-Za-z0-9]{6,12}$/,\n  SCHOOL_CODE: / ^[A-Z0-9]{4,8}$/,\n  GST_NUMBER: / ^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/,\n  IFSC_CODE: / ^[A-Z]{4}0[A-Z0-9]{6}$/,\n  UPI_ID: / ^[\\w.-]+@[\\w.-]+$/,\n  CARD_NUMBER: / ^[0-9]{13,19}$/,\n  CVV: / ^[0-9]{3,4}$;\n} as const;\n * Theme constants;\nexport const THEME_CONFIG = {}\n  // Z-index values\n  Z_INDEX: {}\n} as const;\n * Export all constants as default;\nexport default {}","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/createEmotionCache.ts",["2736"],[]," * HASIVU Platform - Emotion Cache Utility\n * Creates client-side and server-side emotion cache for Material-UI SSR\n * Ensures consistent styling across SSR and client-side rendering;\nimport createCache, { EmotionCache } from '@emotion/cache';\n * Create client-side emotion cache\n * Configures cache for Material-UI components with proper key and insertion point;\n * @returns EmotionCache configured for client-side rendering;\nexport function createEmotionCache(): EmotionCache {}\n  return createCache({}\n * Create server-side emotion cache\n * Used during SSR to collect and serialize emotion styles;\n * @returns EmotionCache configured for server-side rendering;\nexport function createEmotionSsrCache(): EmotionCache {}\n * Extract critical styles from emotion cache\n * Used in _document.tsx to inline critical CSS for better performance;\n * @param cache - Emotion cache instance\n * @returns String of critical CSS styles;\nexport function extractCriticalStyles(cache: EmotionCache): string {}\n * Default emotion cache instance\n * Pre-configured cache for common usage patterns;\nexport const defaultEmotionCache = createEmotionCache();\n * Type definitions for emotion cache utilities;\n * Advanced emotion cache configuration\n * For custom styling requirements or performance optimizations;\n * @param config - Custom emotion cache configuration\n * @returns Configured EmotionCache instance;\nexport function createCustomEmotionCache(config: Partial<EmotionCacheConfig>): EmotionCache {}\n  return createCache({ ...defaultConfig, ...config });\n * Emotion cache utilities for development\n * Debugging helpers and development-specific configurations;\nexport const emotionDevUtils = {}\n   * Clear emotion cache\n   * Useful for hot reloading and development;\n  clearCache: (cache: EmotionCache\n      cache.inserted = {};\n      cache.registered = {};\n * Export types for external usage;\nexport type { EmotionCache };","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/dataMigration.ts",["2737","2738","2739","2740","2741","2742","2743","2744","2745","2746","2747","2748","2749","2750","2751","2752","2753","2754","2755","2756","2757","2758","2759","2760","2761","2762","2763"],[],"// Data migration utility for HASIVU platform backend integration\nimport React from 'react';\nimport { \n  kitchenApi, \n  inventoryApi, \n  staffApi, \n  userApi,\n  rfidApi,\n  menuApi,\n  handleApiError \n} from '../services/api';\n\n// Migration status tracking\ninterface MigrationStatus {\n  completed: boolean;\n  inProgress: boolean;\n  error?: string;\n  timestamp?: string;\n  migratedEntities: {\n    users: number;\n    orders: number;\n    inventory: number;\n    staff: number;\n    menus: number;\n    rfidDevices: number;\n  };\n}\n\n// Mock data interfaces (simplified versions for migration)\ninterface MockUser {\n  id: string;\n  name: string;\n  email: string;\n  role: 'admin' | 'staff' | 'student' | 'parent';\n  grade?: string;\n  rfidTag?: string;\n}\n\ninterface MockOrder {\n  id: string;\n  orderNumber: string;\n  studentId: string;\n  items: any[];\n  status: string;\n  priority: string;\n  orderTime: string;\n  totalAmount: number;\n}\n\ninterface MockInventoryItem {\n  id: string;\n  name: string;\n  category: string;\n  currentStock: number;\n  minStock: number;\n  maxStock: number;\n  unit: string;\n  supplier: string;\n  costPerUnit: number;\n}\n\ninterface MockStaffMember {\n  id: string;\n  name: string;\n  role: string;\n  email: string;\n  department: string;\n  status: string;\n  shift: string;\n}\n\n// Data migration class\nexport class DataMigration {\n  private migrationKey = 'hasivu_migration_status';\n\n  // Get current migration status\n  getMigrationStatus(): MigrationStatus {\n    const stored = localStorage.getItem(this.migrationKey);\n    return stored ? JSON.parse(stored) : {\n      completed: false,\n      inProgress: false,\n      migratedEntities: {\n        users: 0,\n        orders: 0,\n        inventory: 0,\n        staff: 0,\n        menus: 0,\n        rfidDevices: 0\n      }\n    };\n  }\n\n  // Update migration status\n  private updateMigrationStatus(status: Partial<MigrationStatus>) {\n    const current = this.getMigrationStatus();\n    const updated = { ...current, ...status, timestamp: new Date().toISOString() };\n    localStorage.setItem(this.migrationKey, JSON.stringify(updated));\n  }\n\n  // Check if backend is available\n  async checkBackendAvailability(): Promise<boolean> {\n    try {\n      const response = await fetch(`${process.env.NEXT_PUBLIC_API_BASE_URL}/health`);\n      return response.ok;\n    } catch (error) {\n      console.error('Backend availability check failed:', error);\n      return false;\n    }\n  }\n\n  // Migrate users data\n  async migrateUsers(mockUsers: MockUser[]): Promise<number> {\n    let migratedCount = 0;\n    \n    for (const user of mockUsers) {\n      try {\n        await userApi.createUser({\n          name: user.name,\n          email: user.email,\n          role: user.role,\n          grade: user.grade,\n          rfidTag: user.rfidTag,\n          // Add default password for demo purposes\n          password: 'defaultPassword123',\n          active: true\n        });\n        migratedCount++;\n      } catch (error) {\n        console.error(`Failed to migrate user ${user.id}:`, handleApiError(error));\n      }\n    }\n\n    return migratedCount;\n  }\n\n  // Migrate orders data\n  async migrateOrders(mockOrders: MockOrder[]): Promise<number> {\n    let migratedCount = 0;\n    \n    for (const order of mockOrders) {\n      try {\n        await kitchenApi.createOrder({\n          orderNumber: order.orderNumber,\n          studentId: order.studentId,\n          items: order.items,\n          status: order.status,\n          priority: order.priority,\n          orderTime: order.orderTime,\n          totalAmount: order.totalAmount,\n          location: 'Main Cafeteria' // Default location\n        });\n        migratedCount++;\n      } catch (error) {\n        console.error(`Failed to migrate order ${order.id}:`, handleApiError(error));\n      }\n    }\n\n    return migratedCount;\n  }\n\n  // Migrate inventory data\n  async migrateInventory(mockInventory: MockInventoryItem[]): Promise<number> {\n    let migratedCount = 0;\n    \n    for (const item of mockInventory) {\n      try {\n        await inventoryApi.createItem({\n          name: item.name,\n          category: item.category,\n          currentStock: item.currentStock,\n          minStock: item.minStock,\n          maxStock: item.maxStock,\n          unit: item.unit,\n          supplier: item.supplier,\n          costPerUnit: item.costPerUnit,\n          description: `Migrated ${item.category.toLowerCase()} item`,\n          active: true\n        });\n        migratedCount++;\n      } catch (error) {\n        console.error(`Failed to migrate inventory item ${item.id}:`, handleApiError(error));\n      }\n    }\n\n    return migratedCount;\n  }\n\n  // Migrate staff data\n  async migrateStaff(mockStaff: MockStaffMember[]): Promise<number> {\n    let migratedCount = 0;\n    \n    for (const staff of mockStaff) {\n      try {\n        await staffApi.createStaff({\n          name: staff.name,\n          role: staff.role,\n          email: staff.email,\n          department: staff.department,\n          status: staff.status,\n          shift: staff.shift,\n          phone: '1234567890', // Default phone\n          hireDate: new Date().toISOString(),\n          active: true\n        });\n        migratedCount++;\n      } catch (error) {\n        console.error(`Failed to migrate staff ${staff.id}:`, handleApiError(error));\n      }\n    }\n\n    return migratedCount;\n  }\n\n  // Migrate menu data\n  async migrateMenus(mockMenus: any[]): Promise<number> {\n    let migratedCount = 0;\n    \n    for (const menu of mockMenus) {\n      try {\n        await menuApi.createMenu({\n          name: menu.name,\n          description: menu.description,\n          category: menu.category,\n          date: menu.date,\n          items: menu.items,\n          active: menu.active || true,\n          price: menu.price\n        });\n        migratedCount++;\n      } catch (error) {\n        console.error(`Failed to migrate menu ${menu.id}:`, handleApiError(error));\n      }\n    }\n\n    return migratedCount;\n  }\n\n  // Complete migration process\n  async runFullMigration(mockData: {\n    users?: MockUser[];\n    orders?: MockOrder[];\n    inventory?: MockInventoryItem[];\n    staff?: MockStaffMember[];\n    menus?: any[];\n  }): Promise<MigrationStatus> {\n    \n    // Check if migration already completed\n    const status = this.getMigrationStatus();\n    if (status.completed) {\n      console.log('Migration already completed');\n      return status;\n    }\n\n    // Check backend availability\n    const backendAvailable = await this.checkBackendAvailability();\n    if (!backendAvailable) {\n      const error = 'Backend is not available for migration';\n      this.updateMigrationStatus({ error, inProgress: false });\n      throw new Error(error);\n    }\n\n    // Start migration\n    this.updateMigrationStatus({ inProgress: true, error: undefined });\n    \n    const migratedEntities = {\n      users: 0,\n      orders: 0,\n      inventory: 0,\n      staff: 0,\n      menus: 0,\n      rfidDevices: 0\n    };\n\n    try {\n      // Migrate users first (as they may be referenced by other entities)\n      if (mockData.users) {\n        console.log('Migrating users...');\n        migratedEntities.users = await this.migrateUsers(mockData.users);\n        console.log(`Migrated ${migratedEntities.users} users`);\n      }\n\n      // Migrate staff\n      if (mockData.staff) {\n        console.log('Migrating staff...');\n        migratedEntities.staff = await this.migrateStaff(mockData.staff);\n        console.log(`Migrated ${migratedEntities.staff} staff members`);\n      }\n\n      // Migrate inventory\n      if (mockData.inventory) {\n        console.log('Migrating inventory...');\n        migratedEntities.inventory = await this.migrateInventory(mockData.inventory);\n        console.log(`Migrated ${migratedEntities.inventory} inventory items`);\n      }\n\n      // Migrate menus\n      if (mockData.menus) {\n        console.log('Migrating menus...');\n        migratedEntities.menus = await this.migrateMenus(mockData.menus);\n        console.log(`Migrated ${migratedEntities.menus} menus`);\n      }\n\n      // Migrate orders last (as they may reference users and menu items)\n      if (mockData.orders) {\n        console.log('Migrating orders...');\n        migratedEntities.orders = await this.migrateOrders(mockData.orders);\n        console.log(`Migrated ${migratedEntities.orders} orders`);\n      }\n\n      // Mark migration as completed\n      const finalStatus = {\n        completed: true,\n        inProgress: false,\n        migratedEntities,\n        timestamp: new Date().toISOString()\n      };\n\n      this.updateMigrationStatus(finalStatus);\n      console.log('Migration completed successfully!', finalStatus);\n      \n      return this.getMigrationStatus();\n\n    } catch (error) {\n      const errorMessage = handleApiError(error);\n      this.updateMigrationStatus({ \n        error: errorMessage, \n        inProgress: false,\n        migratedEntities \n      });\n      throw new Error(`Migration failed: ${errorMessage}`);\n    }\n  }\n\n  // Reset migration status (for re-migration or testing)\n  resetMigrationStatus(): void {\n    localStorage.removeItem(this.migrationKey);\n    console.log('Migration status reset');\n  }\n\n  // Validate migrated data\n  async validateMigration(): Promise<{\n    valid: boolean;\n    issues: string[];\n    summary: any;\n  }> {\n    const issues: string[] = [];\n    const summary: any = {};\n\n    try {\n      // Check orders\n      const ordersResponse = await kitchenApi.getOrders({ limit: 10 });\n      summary.orders = ordersResponse.data?.length || 0;\n      if (summary.orders === 0) {\n        issues.push('No orders found in backend');\n      }\n\n      // Check inventory\n      const inventoryResponse = await inventoryApi.getItems({ limit: 10 });\n      summary.inventory = inventoryResponse.data?.length || 0;\n      if (summary.inventory === 0) {\n        issues.push('No inventory items found in backend');\n      }\n\n      // Check staff\n      const staffResponse = await staffApi.getStaff({ limit: 10 });\n      summary.staff = staffResponse.data?.length || 0;\n      if (summary.staff === 0) {\n        issues.push('No staff members found in backend');\n      }\n\n    } catch (error) {\n      issues.push(`Validation failed: ${handleApiError(error)}`);\n    }\n\n    return {\n      valid: issues.length === 0,\n      issues,\n      summary\n    };\n  }\n}\n\n// Utility functions for components\nexport const migrationUtils = {\n  // Check if we should use mock data or backend data\n  shouldUseMockData: (): boolean => {\n    const migration = new DataMigration();\n    const status = migration.getMigrationStatus();\n    return !status.completed;\n  },\n\n  // Get migration progress for UI display\n  getMigrationProgress: (): MigrationStatus => {\n    const migration = new DataMigration();\n    return migration.getMigrationStatus();\n  },\n\n  // Trigger migration from UI\n  startMigration: async (mockData: any): Promise<void> => {\n    const migration = new DataMigration();\n    await migration.runFullMigration(mockData);\n  }\n};\n\n// React hook for migration status\nexport const useMigrationStatus = () => {\n  const [status, setStatus] = React.useState<MigrationStatus>(() => {\n    const migration = new DataMigration();\n    return migration.getMigrationStatus();\n  });\n\n  const checkStatus = () => {\n    const migration = new DataMigration();\n    setStatus(migration.getMigrationStatus());\n  };\n\n  const startMigration = async (mockData: any) => {\n    const migration = new DataMigration();\n    setStatus(migration.getMigrationStatus()); // Update to show in progress\n    try {\n      await migration.runFullMigration(mockData);\n      checkStatus(); // Refresh status after completion\n    } catch (error) {\n      checkStatus(); // Refresh status to show error\n      throw error;\n    }\n  };\n\n  const resetMigration = () => {\n    const migration = new DataMigration();\n    migration.resetMigrationStatus();\n    checkStatus();\n  };\n\n  return {\n    status,\n    checkStatus,\n    startMigration,\n    resetMigration,\n    shouldUseMockData: !status.completed\n  };\n};\n\nexport default DataMigration;\n","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/formatCurrency.ts",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/utils/formatters.ts",["2764"],[]," * HASIVU Platform - Formatting Utilities\n * Comprehensive formatting functions for dates, currency, time, and platform-specific data\n * Handles localization and consistent data presentation across the application;\nimport { format, formatDistance, formatRelative, isValid, parseISO } from 'date-fns';\nimport { enUS } from 'date-fns/locale';\n * Currency formatting utilities\n * Handles Indian Rupee formatting with proper locale support;\nexport const currencyFormatter = {}\n    return new Intl.NumberFormat('en-IN', defaultOptions).format(amount);\n   * Format currency without symbol (for calculations display);\n  formatAmount: (amount: number, decimals: number = 2): string => {}\n}).format(amount);\n   * Format large amounts with abbreviated units (K, L, Cr);\n  formatAbbreviated: (amount: number): string => {}\n      return `₹${(amount /  10000000).toFixed(1)}Cr``\n      return `₹${(amount /  100000).toFixed(1)}L``\n      return `₹${(amount /  1000).toFixed(1)}K``\n    return `₹${amount.toFixed(0)}``\n    return `${start} - ${end}``\n    const timeObj = typeof time === 'string' ? new Date(`2000-01-01T${time}``\n      return `${minutes}m``\n      return `${hours}h``\n    return `${hours}h ${remainingMinutes}m``\n    return `${start} - ${end}``\n    return `${value.toFixed(decimals)}%``\n    return `${size.toFixed(1)} ${units[unitIndex]}``\n    const pluralForm = plural || `${singular}s``\n    return `${count} ${count === 1 ? singular : pluralForm}``\n      return `+91 ${cleaned.slice(0, 5)} ${cleaned.slice(5)}``\n      return `+91 ${cleaned.slice(2, 7)} ${cleaned.slice(7)}``\n    return `${value.toFixed(1)}${unit}``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/helpers-backup.ts",["2765"],[]," * HASIVU Platform - Helper Utilities\n * General-purpose utility functions for common operations\n * Includes string manipulation, array operations, object utilities, and platform-specific helpers\n// import { ClassValue, clsx } from 'clsx';\n// import { twMerge } from 'tailwind-merge';\nimport { USER_ROLES, PERMISSIONS, ROLE_PERMISSIONS, UserRole, Permission } from './constants';\n * Class name utility for combining CSS classes\n * Simple implementation - for advanced features install clsx and tailwind-merge;\n * @param inputs - Class names to combine\n * @returns Combined class string;\nexport function cn(...inputs: (string | undefined | null | false)[]): string {}\n * String manipulation utilities;\nexport const stringUtils = {}\n   * Convert string to title case;\n  titleCase: (str: string): string => {}\n   * Convert camelCase or PascalCase to kebab-case;\n  kebabCase: (str: string): string => {}\n   * Convert kebab-case or snake_case to camelCase;\n  camelCase: (str: string): string => {}\n   * Generate a random string of specified length;\n  randomString: (length: number = 8): string => {}\n    return result;\n   * Truncate string with ellipsis;\n  truncate: (str: string, maxLength: number): string => {}\n   * Remove special characters and spaces;\n  sanitize: (str: string): string => {}\n   * Generate slug from string;\n  slugify: (str: string): string => {}\n   * Extract initials from name;\n  getInitials: (name: string): string => {}\n   * Mask sensitive information (phone, email, card);\n  mask: (str: string, type: 'phone' | 'email' | 'card' = 'phone'): string => {}\n        return str.replace(/(\\d{2})(\\d{5})(\\d{3})/ , '$1*****$3');\n      case 'email': undefined\n        const [username, domain] = str.split('@');\n        const maskedUsername = username.length > 2\n          ? username.slice(0, 2) + '*'.repeat(username.length - 2)\n          : username;\n        return `${maskedUsername}@${domain}``\n      console.log(`${label} took ${(end - start).toFixed(2)}ms``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/helpers.ts",["2766","2767","2768","2769"],[],"/**\n * HASIVU Platform Utility Functions\n */\n\nexport const numberUtils = {\n  inRange: (num: number, min: number, max: number): boolean => {\n    return num >= min && num <= max;\n  },\n  toPercentage: (value: number, total: number, decimals: number = 1): number => {\n    if (total === 0) return 0;\n    return Number(((value / total) * 100).toFixed(decimals));\n  },\n};\n\nexport const stringUtils = {\n  truncate: (str: string, length: number): string => {\n    return str.length > length ? str.substring(0, length) + '...' : str;\n  },\n  capitalize: (str: string): string => {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  },\n};\n\nexport const arrayUtils = {\n  chunk: <T>(array: T[], size: number): T[][] => {\n    const chunks: T[][] = [];\n    for (let i = 0; i < array.length; i += size) {\n      chunks.push(array.slice(i, i + size));\n    }\n    return chunks;\n  },\n  unique: <T>(array: T[]): T[] => {\n    return Array.from(new Set(array));\n  },\n};\n\nexport const dateUtils = {\n  addDays: (date: Date, days: number): Date => {\n    const result = new Date(date);\n    result.setDate(result.getDate() + days);\n    return result;\n  },\n  formatDate: (date: Date, locale: string = 'en-IN'): string => {\n    return date.toLocaleDateString(locale);\n  },\n};\n\nexport const performanceUtils = {\n  debounce: <T extends (...args: any[]) => void>(func: T, delay: number): T => {\n    let timeoutId: NodeJS.Timeout;\n    return ((...args: any[]) => {\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => func(...args), delay);\n    }) as T;\n  },\n  throttle: <T extends (...args: any[]) => void>(func: T, limit: number): T => {\n    let inThrottle: boolean;\n    return ((...args: any[]) => {\n      if (!inThrottle) {\n        func(...args);\n        inThrottle = true;\n        setTimeout(() => (inThrottle = false), limit);\n      }\n    }) as T;\n  },\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/index.ts",["2770"],[]," * HASIVU Platform - Utils Index\n * Central export file for all utility modules\n * Provides convenient imports for utility functions throughout the application\nexport * from './ createEmotionCache';\nexport { createEmotionCache, createEmotionSsrCache, defaultEmotionCache } from './createEmotionCache';\n  // Formatting utilities\nexport * from './ formatters';\n} from './formatters';\n  // Validation utilities\nexport * from './ validators';\n} from './validators';\n  // API utilities\nexport * from './api';\nexport { apiClient, api, API_CONFIG } from './api';\nexport type { ApiResponse, ApiError, ApiRequestConfig } from './api';\n// Application constants\nexport * from './ constants';\n} from './constants';\n  // Type exports from constants\nexport type {}\n} from './ constants';\n// Helper utilities\nexport * from './ helpers';\n} from './helpers';\n  // Notification utilities\nexport * from './ notifications';\nexport { notificationManager, notificationTemplates, notificationUtils } from './notifications';\nexport type { NotificationConfig, PushSubscriptionConfig, NotificationPermission } from './ notifications';\n// Analytics utilities\nexport * from './ analytics';\nexport { analyticsManager, analytics } from './analytics';\nexport type {}\n} from './ analytics';\n// Default exports for convenience\nimport formatters from './ formatters';\nimport validators from './validators';\nimport constants from './ constants';\nimport helpers from './helpers';\nimport notifications from './ notifications';\nimport analytics from './analytics';\nexport const utils = {}\nexport default utils;","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/notifications.ts",["2771"],[]," * HASIVU Platform - Notification Utilities\n * Push notifications, browser notifications, and notification management\n * Handles service worker registration and notification permissions;\nimport { NOTIFICATION_TYPES, NotificationType } from './constants';\n * Notification permission status;\nexport type NotificationPermission = 'default' | 'granted' | 'denied';\n * Notification configuration interface;\n * Push subscription configuration;\n * Notification manager class;\n   * Initialize notification system;\n  async initialize(): Promise<boolean> {}\n  // Register service worker\n      this.serviceWorkerRegistration = await navigator.serviceWorker.register('/sw.js');\n      // Wait for service worker to be ready\n      await navigator.serviceWorker.ready;\n      console.log('Notification system initialized');\n      return true;\n   * Request notification permission;\n  async requestPermission(): Promise<NotificationPermission> {}\n      const permission = await Notification.requestPermission();\n      console.log('Notification permission:', permission);\n      return permission as NotificationPermission;\n   * Get current notification permission;\n  getPermission(): NotificationPermission {}\n    return Notification.permission as NotificationPermission;\n   * Check if notifications are supported and permitted;\n  isSupported(): boolean {}\n   * Show browser notification;\n  async showNotification(config: NotificationConfig): Promise<void> {}\n      const notification = new Notification(config.title, {}\n      // Handle notification click\n      // TODO: Refactor this function - it may be too long\n      notification.onclick = (event\n        notification.close();\n  // Auto-close after 5 seconds unless requireInteraction is true\n      if (!config.requireInteraction) {}\n        }, 5000);\n   * Show service worker notification (for push notifications);\n  async showServiceWorkerNotification(config: NotificationConfig): Promise<void> {}\n      await this.serviceWorkerRegistration.showNotification(config.title, {}\n   * Subscribe to push notifications;\n  async subscribeToPush(): Promise<PushSubscription | null> {}\n      if (!this.vapidPublicKey) {}\n      const subscription = await this.serviceWorkerRegistration.pushManager.subscribe({}\n      console.log('Push subscription created:', subscription);\n      return subscription;\n   * Unsubscribe from push notifications;\n  async unsubscribeFromPush(): Promise<boolean> {}\n      const subscription = await this.serviceWorkerRegistration.pushManager.getSubscription();\n      if (subscription) {}\n      return false;\n   * Get current push subscription;\n  async getPushSubscription(): Promise<PushSubscription | null> {}\n      return await this.serviceWorkerRegistration.pushManager.getSubscription();\n   * Convert VAPID key to Uint8Array;\n  private urlBase64ToUint8Array(base64String: string): Uint8Array {}\n    return outputArray;\n * Create singleton notification manager;\nexport const notificationManager = new NotificationManager();\n * Predefined notification templates for HASIVU platform;\nexport const notificationTemplates = {}\n    body: `Your order ${orderCode} for ${total} has been confirmed and is being prepared.``\n    tag: `order-${orderCode}``\n      url: `/orders/${orderCode}``\n    body: `Your order ${orderCode} is ready for pickup. Please collect it from the designated counter.``\n    tag: `order-${orderCode}``\n      url: `/orders/${orderCode}``\n    body: `Your order ${orderCode} has been successfully delivered. Enjoy your meal!``\n    tag: `order-${orderCode}``\n      url: `/orders/${orderCode}``\n    body: `Your payment of ${amount} has been processed successfully.``\n    body: `Your wallet balance is ${balance}. Top up now to avoid payment issues.``\n    body: `Check out our new item: ${itemName}. Available now!``\n    body: `System maintenance scheduled at ${startTime} for ${duration}. Plan your orders accordingly.``","/Users/mahesha/Downloads/hasivu-platform/web/src/utils/validators.ts",["2772"],[],"/**\n * HASIVU Platform - Validation Utilities\n * Comprehensive form validation, data validation, and business logic validation\n * Integrates with react-hook-form and yup for consistent validation across the platform\n */\nimport * as yup from 'yup';\n\n/**\n * Common validation patterns and regex\n */\nexport const validationPatterns = {\n  // Indian phone number (10 digits starting with 6-9)\n  phoneNumber: /^[6-9]\\d{9}$/,\n  // Email validation\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\n  // RFID card format (8-16 hex characters)\n  rfidCard: /^[A-Fa-f0-9]{8,16}$/,\n  // Strong password (min 8 chars, 1 upper, 1 lower, 1 number, 1 special)\n  strongPassword: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\n  // Indian PIN code (6 digits)\n  pinCode: /^[1-9][0-9]{5}$/,\n  // Student ID format (alphanumeric, 6-12 characters)\n  studentId: /^[A-Za-z0-9]{6,12}$/,\n  // School code format (uppercase alphanumeric, 4-8 characters)\n  schoolCode: /^[A-Z0-9]{4,8}$/,\n  // Order code format (HSV-YYYYMMDD-XXXX)\n  orderCode: /^HSV-\\d{8}-\\d{4}$/,\n  // Amount validation (positive number with up to 2 decimal places)\n  amount: /^\\d+(\\.\\d{1,2})?$/,\n  // Time format (HH:MM)\n  timeFormat: /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,\n};\n\n/**\n * Common validation messages\n */\nexport const validationMessages = {\n  required: 'This field is required',\n  email: 'Please enter a valid email address',\n  phone: 'Please enter a valid 10-digit phone number',\n  password: 'Password must be at least 8 characters with uppercase, lowercase, number and special character',\n  minLength: (min: number) => `Must be at least ${min} characters`,\n  maxLength: (max: number) => `Must be no more than ${max} characters`,\n  range: (min: number, max: number) => `Must be between ${min} and ${max}`,\n  positive: 'Must be a positive number',\n  integer: 'Must be a whole number',\n  rfid: 'Please enter a valid RFID card number',\n  studentId: 'Student ID must be 6-12 alphanumeric characters',\n  schoolCode: 'School code must be 4-8 uppercase alphanumeric characters',\n};\n\n/**\n * File validation utilities\n */\nexport const fileValidators = {\n  validateFileSize: (file: File, maxSize: number) => {\n    if (file.size > maxSize) {\n      return {\n        valid: false,\n        error: `File size must be less than ${Math.round(maxSize / 1024 / 1024)}MB`,\n      };\n    }\n    return { valid: true };\n  },\n\n  validateFileType: (file: File, allowedTypes: string[]) => {\n    if (!allowedTypes.includes(file.type)) {\n      return {\n        valid: false,\n        error: `File type ${file.type} is not allowed`,\n      };\n    }\n    return { valid: true };\n  },\n\n  validateFileExtension: (fileName: string, allowedExtensions: string[]) => {\n    const extension = fileName.split('.').pop()?.toLowerCase();\n    if (!extension || !allowedExtensions.includes(extension)) {\n      return {\n        valid: false,\n        error: `File extension ${extension} is not allowed`,\n      };\n    }\n    return { valid: true };\n  },\n};\n\n/**\n * Yup validation schemas\n */\nexport const validationSchemas = {\n  // User registration schema\n  userRegistration: yup.object().shape({\n    firstName: yup\n      .string()\n      .required(validationMessages.required)\n      .min(2, validationMessages.minLength(2))\n      .max(50, validationMessages.maxLength(50)),\n    lastName: yup\n      .string()\n      .required(validationMessages.required)\n      .min(2, validationMessages.minLength(2))\n      .max(50, validationMessages.maxLength(50)),\n    email: yup\n      .string()\n      .required(validationMessages.required)\n      .email(validationMessages.email),\n    phone: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.phoneNumber, validationMessages.phone),\n    password: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.strongPassword, validationMessages.password),\n    confirmPassword: yup\n      .string()\n      .required(validationMessages.required)\n      .oneOf([yup.ref('password')], 'Passwords must match'),\n  }),\n\n  // Login schema\n  login: yup.object().shape({\n    email: yup\n      .string()\n      .required(validationMessages.required)\n      .email(validationMessages.email),\n    password: yup.string().required(validationMessages.required),\n  }),\n\n  // Student profile schema\n  studentProfile: yup.object().shape({\n    studentId: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.studentId, validationMessages.studentId),\n    grade: yup\n      .number()\n      .required(validationMessages.required)\n      .integer(validationMessages.integer)\n      .min(1, 'Grade must be between 1 and 12')\n      .max(12, 'Grade must be between 1 and 12'),\n    section: yup\n      .string()\n      .required(validationMessages.required)\n      .max(5, validationMessages.maxLength(5)),\n    rfidCard: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.rfidCard, validationMessages.rfid),\n  }),\n\n  // Order schema\n  mealOrder: yup.object().shape({\n    items: yup\n      .array()\n      .min(1, 'At least one item is required')\n      .required(validationMessages.required),\n    deliveryDate: yup\n      .date()\n      .required(validationMessages.required)\n      .min(new Date(), 'Delivery date must be in the future'),\n    pickupTime: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.timeFormat, 'Please enter a valid time (HH:MM)'),\n    contactPhone: yup\n      .string()\n      .required(validationMessages.required)\n      .matches(validationPatterns.phoneNumber, validationMessages.phone),\n  }),\n\n  // Payment schema\n  payment: yup.object().shape({\n    amount: yup\n      .number()\n      .required(validationMessages.required)\n      .positive(validationMessages.positive)\n      .test('decimal', 'Amount can have at most 2 decimal places', (value) => {\n        return value == null || /^\\d+(\\.\\d{1,2})?$/.test(value.toString());\n      }),\n    paymentMethod: yup\n      .string()\n      .required(validationMessages.required)\n      .oneOf(['upi', 'card', 'netbanking', 'wallet'], 'Please select a valid payment method'),\n  }),\n};\n\n/**\n * Custom validation functions\n */\nexport const customValidators = {\n  // Validate Indian phone number\n  isValidPhoneNumber: (phone: string): boolean => {\n    return validationPatterns.phoneNumber.test(phone);\n  },\n\n  // Validate email format\n  isValidEmail: (email: string): boolean => {\n    return validationPatterns.email.test(email);\n  },\n\n  // Validate strong password\n  isStrongPassword: (password: string): boolean => {\n    return validationPatterns.strongPassword.test(password);\n  },\n\n  // Validate RFID card format\n  isValidRfidCard: (rfid: string): boolean => {\n    return validationPatterns.rfidCard.test(rfid);\n  },\n\n  // Validate amount format\n  isValidAmount: (amount: string | number): boolean => {\n    const amountStr = typeof amount === 'number' ? amount.toString() : amount;\n    return validationPatterns.amount.test(amountStr);\n  },\n\n  // Validate age for school enrollment\n  isValidSchoolAge: (birthDate: Date): boolean => {\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    const monthDiff = today.getMonth() - birthDate.getMonth();\n    \n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n      return age - 1 >= 5 && age - 1 <= 18;\n    }\n    \n    return age >= 5 && age <= 18;\n  },\n\n  // Validate meal order timing (orders must be placed before cutoff time)\n  isValidOrderTime: (deliveryDate: Date, cutoffHours: number = 24): boolean => {\n    const now = new Date();\n    const timeDiff = deliveryDate.getTime() - now.getTime();\n    const hoursDiff = timeDiff / (1000 * 3600);\n    \n    return hoursDiff >= cutoffHours;\n  },\n};\n\n/**\n * Form validation helpers\n */\nexport const formValidators = {\n  // Validate form data against schema\n  validateFormData: async <T>(data: T, schema: yup.ObjectSchema<any>) => {\n    try {\n      await schema.validate(data, { abortEarly: false });\n      return { valid: true, errors: {} };\n    } catch (error) {\n      if (error instanceof yup.ValidationError) {\n        const errors: Record<string, string> = {};\n        error.inner.forEach((err) => {\n          if (err.path) {\n            errors[err.path] = err.message;\n          }\n        });\n        return { valid: false, errors };\n      }\n      return { valid: false, errors: { general: 'Validation failed' } };\n    }\n  },\n\n  // Clean and format phone number\n  formatPhoneNumber: (phone: string): string => {\n    return phone.replace(/\\D/g, '').slice(-10);\n  },\n\n  // Clean and format email\n  formatEmail: (email: string): string => {\n    return email.toLowerCase().trim();\n  },\n\n  // Format amount to 2 decimal places\n  formatAmount: (amount: string | number): string => {\n    const num = typeof amount === 'string' ? parseFloat(amount) : amount;\n    return isNaN(num) ? '0.00' : num.toFixed(2);\n  },\n};\n\nexport default {\n  validationPatterns,\n  validationMessages,\n  validationSchemas,\n  customValidators,\n  formValidators,\n  fileValidators,\n};","/Users/mahesha/Downloads/hasivu-platform/web/src/app/blend/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/sprrrint/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/app/startwell/page.tsx",[],[],"/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/HybridLandingPage.tsx",["2773"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { ArrowRight, Utensils, Clock3, Repeat, Leaf, GraduationCap, ChefHat, Star, Phone, Mail, MapPin } from 'lucide-react';\nimport { events } from '@/lib/analytics';\nimport { BackgroundBeams } from '@/components/magicui/background-beams';\nimport { NumberTicker } from '@/components/magicui/number-ticker';\nimport { Marquee } from '@/components/magicui/marquee';\n\n// Hybrid landing page: Startwell content hierarchy + Sprrrint minimal style\n\nconst Pill = ({ children }: { children: React.ReactNode }) => (\n  <span className=\"inline-flex items-center rounded-full border border-slate-200 bg-white/70 px-3 py-1 text-xs font-medium text-slate-700\">\n    {children}\n  </span>\n);\n\nconst Feature = ({ icon: Icon, title, text }: { icon: any; title: string; text: string }) => (\n  <div className=\"flex items-start gap-4\">\n    <div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-slate-100 text-slate-800\">\n      <Icon className=\"h-6 w-6\" />\n    </div>\n    <div>\n      <h3 className=\"text-lg font-semibold text-slate-900\">{title}</h3>\n      <p className=\"text-slate-600\">{text}</p>\n    </div>\n  </div>\n);\n\nconst testimonials = [\n  {\n    quote: \"HASIVU made school lunches stress-free. My child gets warm meals on time and I can change plans easily!\",\n    author: \"Shalini K.\",\n    title: \"Parent, Grade 4\"\n  },\n  {\n    quote: \"The flexibility to pause or swap meals the night before is a game changer for busy families.\",\n    author: \"Rahul S.\",\n    title: \"Parent, Grade 7\"\n  },\n  {\n    quote: \"Great variety and nutrition. The ordering flow is simple and transparent — love it!\",\n    author: \"Meera R.\",\n    title: \"Parent, Grade 2\"\n  }\n];\n\nexport default function HybridLandingPage() {\n  const [videoOpen, setVideoOpen] = useState(false);\n  const instagramUrl = process.env.NEXT_PUBLIC_SOCIAL_INSTAGRAM || 'https://instagram.com/hasivu';\n  const twitterUrl = process.env.NEXT_PUBLIC_SOCIAL_TWITTER || 'https://twitter.com/hasivu_official';\n  const linkedinUrl = process.env.NEXT_PUBLIC_SOCIAL_LINKEDIN || 'https://linkedin.com/company/hasivu';\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Subtle grid background */}\n      <div aria-hidden className=\"pointer-events-none fixed inset-0 -z-10\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,rgba(0,0,0,0.035)_1px,transparent_1px),linear-gradient(to_bottom,rgba(0,0,0,0.035)_1px,transparent_1px)] bg-[size:24px_24px]\" />\n      </div>\n\n      {/* Header (minimal) */}\n      <header className=\"sticky top-0 z-40 w-full border-b border-slate-200/80 bg-white/80 backdrop-blur-md\">\n        <div className=\"mx-auto flex max-w-7xl items-center justify-between px-4 py-4\">\n<Link href=\"/\" className=\"font-black tracking-tight text-ink-900\">\n            HASIVU\n          </Link>\n          <nav className=\"hidden gap-8 md:flex\">\n<Link href=\"#reasons\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">Why HASIVU</Link>\n<Link href=\"#how\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">How it works</Link>\n<Link href=\"#faqs\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">FAQs</Link>\n          </nav>\n          <div className=\"hidden items-center gap-3 md:flex\">\n<Link href=\"/auth/login\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">Login</Link>\n            <Link href=\"/menu\">\n              <Button\n                size=\"sm\"\n                className=\"rounded-xl bg-slate-900 text-white hover:bg-black\"\n                onClick={() => events.ctaClick('nav_order_now_hybrid', { location: 'nav' })}\n              >\n                Order Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero (Startwell copy + Sprrrint styling) */}\n      <section className=\"relative border-b border-slate-200/80\">\n        <BackgroundBeams />\n        <div className=\"mx-auto grid max-w-7xl grid-cols-1 gap-12 px-4 py-16 md:grid-cols-12 md:py-24\">\n          <div className=\"md:col-span-7\">\n            <Badge className=\"mb-6 bg-slate-900 text-white\">School meals done right</Badge>\n<h1 className=\"text-5xl font-black leading-tight tracking-tight text-ink-900 md:text-6xl\">\n              Warm meals at school, on time\n<span className=\"block text-ink-500\">Opt for a single meal or subscribe and save.</span>\n            </h1>\n<p className=\"mt-5 max-w-xl text-lg text-ink-700\">\n              Change, pause, or cancel by midnight — full control for busy parents.\n            </p>\n            <div className=\"mt-8 flex flex-col gap-3 sm:flex-row\">\n              <Link href=\"/menu\">\n                <Button\n                  size=\"lg\"\n                  className=\"rounded-2xl bg-slate-900 px-7 text-white hover:bg-black\"\n                  onClick={() => events.ctaClick('hero_order_now_hybrid', { location: 'hero' })}\n                >\n                  Order Now <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"rounded-2xl border-slate-300\"\n                onClick={() => {\n                  events.ctaClick('hero_video_open_hybrid', { location: 'hero' });\n                  setVideoOpen(true);\n                }}\n              >\n                Guided Video — How to Order\n              </Button>\n            </div>\n            <div className=\"mt-6 flex flex-wrap gap-3\">\n              <Pill><Utensils className=\"mr-2 h-4 w-4\" /> Meals delivered warm to classroom</Pill>\n              <Pill><Clock3 className=\"mr-2 h-4 w-4\" /> Arrives during recess</Pill>\n              <Pill><Repeat className=\"mr-2 h-4 w-4\" /> Pause/cancel until midnight</Pill>\n            </div>\n          </div>\n          <div className=\"md:col-span-5\">\n            <Card className=\"rounded-2xl border-slate-200 shadow-medium\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\"><NumberTicker value={4.9} className=\"inline\" />★</div>\n<p className=\"text-sm text-ink-700\">Average parent rating</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\"><NumberTicker value={99.9} className=\"inline\" />%</div>\n<p className=\"text-sm text-ink-700\">On-time delivery</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\"><NumberTicker value={100} className=\"inline\" />%</div>\n<p className=\"text-sm text-ink-700\">Flexible subscriptions</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\"><NumberTicker value={0} className=\"inline\" /></div>\n<p className=\"text-sm text-ink-700\">Food colorings added</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Trusted by */}\n      <section className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-8\">\n<p className=\"mb-6 text-center text-sm text-ink-500\">Trusted by families across top schools</p>\n          <Marquee className=\"py-2\" pauseOnHover>\n            {['DPS', 'NPS', 'Ryan', 'Greenwood', 'Sarvodaya', 'Kendriya'].map((n) => (\n              <div key={n} className=\"mx-6 text-sm font-semibold text-ink-500\">{n}</div>\n            ))}\n          </Marquee>\n        </div>\n      </section>\n\n      {/* Reasons (Startwell content) */}\n      <section id=\"reasons\" className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-16 md:py-20\">\n<h2 className=\"mb-10 text-3xl font-black text-ink-900 md:text-4xl\">We feed your kids like our own</h2>\n          <div className=\"grid gap-10 md:grid-cols-3\">\n            <Feature icon={Leaf} title=\"Natural Ingredients\" text=\"Sustainably sourced whole and fresh ingredients. We keep it clean and simple.\" />\n            <Feature icon={GraduationCap} title=\"Designed by Nutritionists\" text=\"Balanced, age-appropriate meals aligned to recommended dietary allowances.\" />\n            <Feature icon={ChefHat} title=\"Prepared by Chefs & Parents\" text=\"A team of chefs and parents ensure variety, taste and safety every day.\" />\n          </div>\n        </div>\n      </section>\n\n      {/* How it works */}\n      <section id=\"how\" className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-16 md:py-20\">\n<h2 className=\"mb-10 text-3xl font-black text-ink-900 md:text-4xl\">How it works</h2>\n          <div className=\"grid gap-6 md:grid-cols-3\">\n            {[\"Order Online\", \"Delivered Warm\", \"Full Flexibility\"].map((t, i) => (\n              <Card key={t} className=\"rounded-2xl border-slate-200\">\n                <CardContent className=\"p-6\">\n<div className=\"mb-3 text-xs font-semibold uppercase tracking-wide text-ink-500\">Step {i + 1}</div>\n<div className=\"text-xl font-semibold text-ink-900\">{t}</div>\n<p className=\"mt-2 text-ink-700\">\n                    {i === 0 && 'Choose a single meal or subscribe for the week/month. Customize preferences and allergies.'}\n                    {i === 1 && 'Meals arrive to the classroom just before recess. Packed for freshness and warmth.'}\n                    {i === 2 && 'Change, pause, or cancel by midnight. Manage everything from your dashboard.'}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          <div className=\"mt-10 text-center\">\n            <Link href=\"/menu\">\n              <Button\n                size=\"lg\"\n                className=\"rounded-2xl bg-slate-900 px-7 text-white hover:bg-black\"\n                onClick={() => events.ctaClick('how_start_order_hybrid', { location: 'how' })}\n              >\n                Start an Order\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials (minimal cards) */}\n      <section id=\"testimonials\" className=\"mx-auto max-w-7xl px-4 py-16\">\n        <div className=\"text-center mb-10\">\n          <Badge className=\"mb-3 bg-purple-100 text-purple-700 border border-purple-200\">Parents say it best</Badge>\n<h2 className=\"text-3xl md:text-4xl font-black text-ink-900\">Loved by busy families</h2>\n        </div>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {testimonials.map((t, i) => (\n            <Card key={i} className=\"rounded-2xl border-slate-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex mb-3\">\n                  {[...Array(5)].map((_, idx) => (\n                    <Star key={idx} className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n<p className=\"text-ink-700 italic\">“{t.quote}”</p>\n<div className=\"mt-4 text-sm text-ink-700 font-medium\">{t.author}</div>\n<div className=\"text-xs text-ink-500\">{t.title}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* FAQs */}\n      <section id=\"faqs\" className=\"bg-white border-y border-slate-200/70\">\n        <div className=\"mx-auto max-w-3xl px-4 py-16\">\n          <div className=\"text-center mb-8\">\n<Badge className=\"mb-3 bg-slate-100 text-ink-700 border-slate-200\">FAQs</Badge>\n<h2 className=\"text-3xl font-black text-ink-900\">Questions parents ask</h2>\n          </div>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger>Can I pause or cancel a subscription?</AccordionTrigger>\n              <AccordionContent>\n                Yes — change, pause, or cancel meals up to midnight the day before. Your dashboard gives you full control.\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger>Are meals delivered warm to classrooms?</AccordionTrigger>\n              <AccordionContent>\n                Meals are prepared fresh and delivered to classrooms just before recess to keep them warm and safe.\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-3\">\n              <AccordionTrigger>How do you handle allergies?</AccordionTrigger>\n              <AccordionContent>\n                You can set dietary preferences and allergies during ordering. We filter options and label allergens clearly.\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </div>\n      </section>\n\n      {/* Social + Contact (minimal) */}\n      <section id=\"contact\" className=\"mx-auto max-w-7xl px-4 py-16\">\n        <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n          <div>\n<h3 className=\"text-2xl md:text-3xl font-black text-ink-900\">We feed your kids like our own</h3>\n<p className=\"mt-3 text-ink-700\">Follow us for menu highlights, behind-the-scenes, and nutrition tips.</p>\n            <div className=\"mt-6 flex gap-3\">\n<a href={instagramUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on Instagram\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M7 2C4.23858 2 2 4.23858 2 7V17C2 19.7614 4.23858 22 7 22H17C19.7614 22 22 19.7614 22 17V7C22 4.23858 19.7614 2 17 2H7ZM12 7C9.23858 7 7 9.23858 7 12C7 14.7614 9.23858 17 12 17C14.7614 17 17 14.7614 17 12C17 9.23858 14.7614 7 12 7ZM18 7.5C18 6.67157 18.6716 6 19.5 6C20.3284 6 21 6.67157 21 7.5C21 8.32843 20.3284 9 19.5 9C18.6716 9 18 8.32843 18 7.5Z\"/></svg>\n                Instagram\n              </a>\n<a href={twitterUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on Twitter\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M22 5.8c-.7.3-1.4.5-2.2.6.8-.5 1.3-1.1 1.6-2-.7.4-1.5.7-2.3.9A3.7 3.7 0 0 0 12 7.5c0 .3 0 .6.1.8A10.5 10.5 0 0 1 3 5.2a3.7 3.7 0 0 0 1.1 5 3.6 3.6 0 0 1-1.7-.5v.1c0 1.8 1.3 3.4 3.1 3.7-.3.1-.7.1-1 .1-.2 0-.5 0-.7-.1.5 1.6 2 2.8 3.8 2.8A7.4 7.4 0 0 1 2 18.6 10.4 10.4 0 0 0 7.6 20C15 20 19.1 13.8 19.1 8.3v-.5c.7-.4 1.4-1 1.9-1.7Z\"/></svg>\n                Twitter\n              </a>\n<a href={linkedinUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on LinkedIn\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M4.98 3.5C4.98 4.88 3.86 6 2.5 6S0 4.88 0 3.5 1.12 1 2.5 1s2.48 1.12 2.48 2.5zM.5 8h4V23h-4V8zm7.5 0h3.8v2.1h.1c.5-1 1.9-2.1 3.9-2.1 4.2 0 5 2.8 5 6.5V23h-4v-6.5c0-1.6 0-3.6-2.2-3.6-2.2 0-2.6 1.7-2.6 3.5V23h-4V8z\"/></svg>\n                LinkedIn\n              </a>\n            </div>\n          </div>\n\n          <Card className=\"rounded-2xl border-slate-200\">\n<CardContent className=\"space-y-3 p-6 text-ink-700\">\n<div className=\"flex items-center gap-3\"><Mail className=\"h-4 w-4 text-ink-900\" aria-hidden=\"true\" /> support@hasivu.com</div>\n<div className=\"flex items-center gap-3\"><Phone className=\"h-4 w-4 text-ink-900\" aria-hidden=\"true\" /> +91 91361 47011</div>\n<div className=\"flex items-center gap-3\"><MapPin className=\"h-4 w-4 text-ink-900\" aria-hidden=\"true\" /> Bangalore, India</div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Sticky footer CTA */}\n      <section className=\"sticky bottom-0 z-30 border-t border-slate-200/80 bg-white/90 backdrop-blur-md\">\n        <div className=\"mx-auto flex max-w-7xl items-center justify-between px-4 py-3\">\n          <div>\n<div className=\"text-sm font-semibold text-ink-900\">Ready when you are</div>\n<div className=\"text-xs text-ink-700\">Order a single meal or subscribe to save</div>\n          </div>\n          <Link href=\"/menu\">\n            <Button\n              size=\"sm\"\n              className=\"rounded-xl bg-slate-900 text-white hover:bg-black\"\n              onClick={() => events.ctaClick('footer_order_now_hybrid', { location: 'footer' })}\n            >\n              Order Now\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n      {/* Video Dialog */}\n      <Dialog open={videoOpen} onOpenChange={setVideoOpen}>\n        <DialogContent className=\"sm:max-w-[900px]\">\n          <DialogHeader>\n            <DialogTitle>How to Order</DialogTitle>\n          </DialogHeader>\n          <div className=\"aspect-video w-full rounded-lg overflow-hidden bg-black\">\n            <video\n              src=\"/videos/how-to-order.mp4\"\n              className=\"w-full h-full\"\n              controls\n              poster=\"/videos/how-to-order-poster.jpg\"\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/SprrrintInspiredLandingPage.tsx",["2774"],[],"\"use client\";\n\nimport React from 'react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ArrowRight, Shield, Utensils, Clock3, Repeat, Star, Users } from 'lucide-react';\nimport { events } from '@/lib/analytics';\n\n// A minimal, typography-first landing layout inspired by sprrrint.com\n// Clean layout, bold type, generous spacing, subtle grid, and strong CTAs\n\nconst Pill = ({ children }: { children: React.ReactNode }) => (\n<span className=\"inline-flex items-center rounded-full border border-slate-200 bg-white/70 px-3 py-1 text-xs font-medium text-ink-700\">\n    {children}\n  </span>\n);\n\nconst Feature = ({ icon: Icon, title, text }: { icon: any; title: string; text: string }) => (\n  <div className=\"flex items-start gap-4\">\n<div className=\"flex h-12 w-12 items-center justify-center rounded-xl bg-slate-100 text-ink-800\">\n      <Icon className=\"h-6 w-6\" />\n    </div>\n    <div>\n<h3 className=\"text-lg font-semibold text-ink-900\">{title}</h3>\n<p className=\"text-ink-700\">{text}</p>\n    </div>\n  </div>\n);\n\nexport default function SprrrintInspiredLandingPage() {\n  // Social links via env if needed in future — reuse from Startwell page if we add footer socials\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Subtle grid background */}\n      <div aria-hidden className=\"pointer-events-none fixed inset-0 -z-10\">\n        <div className=\"absolute inset-0 bg-[linear-gradient(to_right,rgba(0,0,0,0.035)_1px,transparent_1px),linear-gradient(to_bottom,rgba(0,0,0,0.035)_1px,transparent_1px)] bg-[size:24px_24px]\" />\n      </div>\n\n      {/* Header */}\n      <header className=\"sticky top-0 z-40 w-full border-b border-slate-200/80 bg-white/80 backdrop-blur-md\">\n        <div className=\"mx-auto flex max-w-7xl items-center justify-between px-4 py-4\">\n<Link href=\"/\" className=\"font-black tracking-tight text-ink-900\">\n            HASIVU\n          </Link>\n          <nav className=\"hidden gap-8 md:flex\">\n<Link href=\"#features\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">Features</Link>\n<Link href=\"#how\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">How it works</Link>\n<Link href=\"#testimonials\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">Parents</Link>\n          </nav>\n          <div className=\"hidden items-center gap-3 md:flex\">\n<Link href=\"/auth/login\" className=\"text-sm font-medium text-ink-600 hover:text-ink-900\">Login</Link>\n            <Link href=\"/menu\">\n              <Button\n                size=\"sm\"\n                className=\"rounded-xl bg-slate-900 text-white hover:bg-black\"\n                onClick={() => events.ctaClick('nav_order_now', { location: 'nav' })}\n              >\n                Order Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero */}\n      <section className=\"relative border-b border-slate-200/80\">\n        <div className=\"mx-auto grid max-w-7xl grid-cols-1 gap-12 px-4 py-16 md:grid-cols-12 md:py-24\">\n          <div className=\"md:col-span-7\">\n            <Badge className=\"mb-6 bg-slate-900 text-white\">New</Badge>\n<h1 className=\"text-5xl font-black leading-tight tracking-tight text-ink-900 md:text-6xl\">\n              School meals, simplified.\n<span className=\"block text-ink-500\">Warm, nutritious lunches delivered to the classroom.</span>\n            </h1>\n<p className=\"mt-5 max-w-xl text-lg text-ink-700\">\n              Subscribe and save or order à la carte. Total flexibility—change, pause, or cancel by midnight.\n            </p>\n            <div className=\"mt-8 flex flex-col gap-3 sm:flex-row\">\n              <Link href=\"/menu\">\n                <Button\n                  size=\"lg\"\n                  className=\"rounded-2xl bg-slate-900 px-7 text-white hover:bg-black\"\n                  onClick={() => events.ctaClick('hero_primary_order', { location: 'hero' })}\n                >\n                  Order Now <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/orders\">\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  className=\"rounded-2xl border-slate-300\"\n                  onClick={() => events.ctaClick('hero_secondary_manage', { location: 'hero' })}\n                >\n                  Manage Subscription\n                </Button>\n              </Link>\n            </div>\n            <div className=\"mt-6 flex flex-wrap gap-3\">\n              <Pill><Utensils className=\"mr-2 h-4 w-4\" /> Fresh ingredients</Pill>\n              <Pill><Clock3 className=\"mr-2 h-4 w-4\" /> Delivered at recess</Pill>\n              <Pill><Repeat className=\"mr-2 h-4 w-4\" /> Edit until midnight</Pill>\n            </div>\n          </div>\n          <div className=\"md:col-span-5\">\n            <Card className=\"rounded-2xl border-slate-200 shadow-medium\">\n              <CardContent className=\"p-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\">4.9★</div>\n<p className=\"text-sm text-ink-700\">Parent rating</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\">99.9%</div>\n<p className=\"text-sm text-ink-700\">On-time delivery</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\">100%</div>\n<p className=\"text-sm text-ink-700\">Flexible plans</p>\n                  </div>\n                  <div className=\"rounded-xl border border-slate-200 bg-white p-4\">\n<div className=\"text-3xl font-black text-ink-900\">0</div>\n<p className=\"text-sm text-ink-700\">Artificial colors</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Logo row / trust */}\n      <section className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-8\">\n<p className=\"mb-6 text-center text-sm text-ink-500\">Trusted by families across top schools</p>\n          <div className=\"grid grid-cols-2 items-center gap-6 opacity-70 sm:grid-cols-3 md:grid-cols-6\">\n            {['DPS', 'NPS', 'Ryan', 'Greenwood', 'Sarvodaya', 'Kendriya'].map((n) => (\n              <div key={n} className=\"text-center text-sm font-semibold text-slate-500\">{n}</div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features */}\n      <section id=\"features\" className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-16 md:py-20\">\n<h2 className=\"mb-10 text-3xl font-black text-ink-900 md:text-4xl\">Everything you need to feel confident</h2>\n          <div className=\"grid gap-10 md:grid-cols-3\">\n            <Feature icon={Shield} title=\"Safe & Verified\" text=\"Real-time delivery confirmation and parent notifications.\" />\n            <Feature icon={Users} title=\"Designed for Families\" text=\"Simple flows for ordering, swapping and pausing meals.\" />\n            <Feature icon={Star} title=\"Balanced & Loved\" text=\"Curated by nutritionists, cooked by chefs, loved by kids.\" />\n          </div>\n        </div>\n      </section>\n\n      {/* How it works */}\n      <section id=\"how\" className=\"border-b border-slate-200/80\">\n        <div className=\"mx-auto max-w-7xl px-4 py-16 md:py-20\">\n<h2 className=\"mb-10 text-3xl font-black text-ink-900 md:text-4xl\">How it works</h2>\n          <div className=\"grid gap-6 md:grid-cols-3\">\n            {[\"Order Online\", \"Delivered Warm\", \"Full Flexibility\"].map((t, i) => (\n              <Card key={t} className=\"rounded-2xl border-slate-200\">\n                <CardContent className=\"p-6\">\n<div className=\"mb-3 text-xs font-semibold uppercase tracking-wide text-ink-500\">Step {i + 1}</div>\n<div className=\"text-xl font-semibold text-ink-900\">{t}</div>\n<p className=\"mt-2 text-ink-700\">\n                    {i === 0 && 'Choose single meals or subscribe; set preferences and allergies.'}\n                    {i === 1 && 'Meals arrive to classrooms just before recess to keep them warm and fresh.'}\n                    {i === 2 && 'Change, pause, or cancel by midnight—full control in your dashboard.'}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n          <div className=\"mt-10 text-center\">\n            <Link href=\"/menu\">\n              <Button\n                size=\"lg\"\n                className=\"rounded-2xl bg-slate-900 px-7 text-white hover:bg-black\"\n                onClick={() => events.ctaClick('how_start_order_sprrrint', { location: 'how' })}\n              >\n                Start an Order\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Slim footer CTA */}\n      <section className=\"sticky bottom-0 z-30 border-t border-slate-200/80 bg-white/90 backdrop-blur-md\">\n        <div className=\"mx-auto flex max-w-7xl items-center justify-between px-4 py-3\">\n          <div>\n<div className=\"text-sm font-semibold text-ink-900\">Ready when you are</div>\n<div className=\"text-xs text-ink-700\">Order a single meal or subscribe to save</div>\n          </div>\n          <Link href=\"/menu\">\n            <Button\n              size=\"sm\"\n              className=\"rounded-xl bg-slate-900 text-white hover:bg-black\"\n              onClick={() => events.ctaClick('footer_order_now_sprrrint', { location: 'footer' })}\n            >\n              Order Now\n            </Button>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/components/landing/StartwellInspiredLandingPage.tsx",["2775"],[],"\"use client\";\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport {\n  Play,\n  Utensils,\n  Clock,\n  Repeat,\n  Leaf,\n  GraduationCap,\n  ChefHat,\n  Phone,\n  Mail,\n  MapPin,\n  Instagram,\n  Twitter,\n  Linkedin,\n  ArrowRight\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';\nimport { Star } from 'lucide-react';\nimport { events } from '@/lib/analytics';\n\n// Startwell-inspired, but original design and copy for HASIVU\n// Bright, friendly, trustworthy, with clear CTAs\n\nconst FeatureItem = ({ icon: Icon, title, description }: { icon: any; title: string; description: string }) => (\n  <div className=\"flex items-start space-x-4\">\n    <div className=\"flex h-12 w-12 shrink-0 items-center justify-center rounded-xl bg-gradient-to-br from-emerald-100 to-emerald-200 text-emerald-700\">\n      <Icon className=\"h-6 w-6\" />\n    </div>\n    <div>\n<h3 className=\"text-lg font-semibold text-ink-900\">{title}</h3>\n<p className=\"text-ink-700\">{description}</p>\n    </div>\n  </div>\n);\n\nconst Pill = ({ children }: { children: React.ReactNode }) => (\n<span className=\"inline-flex items-center rounded-full bg-slate-100 text-ink-700 px-3 py-1 text-xs font-medium border border-slate-200\">\n    {children}\n  </span>\n);\n\nconst testimonials = [\n  {\n    quote: \"HASIVU made school lunches stress-free. My child gets warm meals on time and I can change plans easily!\",\n    author: \"Shalini K.\",\n    title: \"Parent, Grade 4\"\n  },\n  {\n    quote: \"The flexibility to pause or swap meals the night before is a game changer for busy families.\",\n    author: \"Rahul S.\",\n    title: \"Parent, Grade 7\"\n  },\n  {\n    quote: \"Great variety and nutrition. The ordering flow is simple and transparent — love it!\",\n    author: \"Meera R.\",\n    title: \"Parent, Grade 2\"\n  }\n];\n\nexport default function StartwellInspiredLandingPage() {\n  const [videoOpen, setVideoOpen] = useState(false);\n\n  const instagramUrl = process.env.NEXT_PUBLIC_SOCIAL_INSTAGRAM || 'https://instagram.com/hasivu';\n  const twitterUrl = process.env.NEXT_PUBLIC_SOCIAL_TWITTER || 'https://twitter.com/hasivu_official';\n  const linkedinUrl = process.env.NEXT_PUBLIC_SOCIAL_LINKEDIN || 'https://linkedin.com/company/hasivu';\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-white to-slate-50\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-40 w-full border-b border-slate-200/80 bg-white/80 backdrop-blur-xl\">\n        <div className=\"mx-auto max-w-7xl px-4 py-3 flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 rounded-xl bg-gradient-to-br from-emerald-500 to-cyan-500 text-white font-bold grid place-items-center shadow-soft\">H</div>\n            <div className=\"leading-tight\">\n              <div className=\"text-xl font-extrabold tracking-tight bg-gradient-to-r from-emerald-600 via-cyan-600 to-blue-600 bg-clip-text text-transparent\">\n                HASIVU\n              </div>\n<div className=\"text-[11px] text-ink-500 -mt-1\">School Meals Done Right</div>\n            </div>\n          </Link>\n\n          <nav className=\"hidden md:flex items-center space-x-8\">\n<Link href=\"#how\" className=\"text-ink-600 hover:text-ink-900 font-medium\">How it works</Link>\n<Link href=\"#reasons\" className=\"text-ink-600 hover:text-ink-900 font-medium\">Why HASIVU</Link>\n<Link href=\"#faqs\" className=\"text-ink-600 hover:text-ink-900 font-medium\">FAQs</Link>\n<Link href=\"/auth/login\" className=\"text-ink-600 hover:text-ink-900 font-medium\">Login</Link>\n          </nav>\n\n          <div className=\"hidden md:flex items-center space-x-3\">\n<Link href=\"/menu\">\n              <Button\n                variant=\"outline\"\n                className=\"rounded-xl border-emerald-200 text-emerald-700 hover:bg-emerald-50\"\n                onClick={() => events.ctaClick('header_order_online', { location: 'header' })}\n              >\n                Order Online\n              </Button>\n            </Link>\n<Link href=\"/orders\">\n              <Button\n                className=\"rounded-xl bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 shadow-soft\"\n                onClick={() => events.ctaClick('header_manage_subscription', { location: 'header' })}\n              >\n                Manage Subscription\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero */}\n      <section className=\"relative overflow-hidden\">\n        <div className=\"absolute -top-24 -right-24 h-72 w-72 rounded-full bg-emerald-100 blur-3xl\" />\n        <div className=\"absolute -bottom-24 -left-24 h-72 w-72 rounded-full bg-cyan-100 blur-3xl\" />\n\n        <div className=\"mx-auto max-w-7xl px-4 py-16 md:py-24 grid md:grid-cols-2 gap-10 items-center\">\n          <div>\n            <Badge className=\"mb-4 bg-emerald-100 text-emerald-700 border-emerald-200\">Warm meals at school, on time</Badge>\n<h1 className=\"text-4xl md:text-6xl font-black tracking-tight text-ink-900\">\n              School meals done right\n            </h1>\n<p className=\"mt-4 text-lg md:text-xl text-ink-700 max-w-xl\">\n              Opt for a single meal or subscribe and save. Change, pause or cancel by midnight — full control for busy parents.\n            </p>\n\n            <div className=\"mt-8 flex flex-col sm:flex-row gap-3\">\n<Link href=\"/menu\">\n              <Button\n                size=\"lg\"\n                className=\"rounded-xl px-7 bg-gradient-to-r from-emerald-500 to-cyan-500 hover:from-emerald-600 hover:to-cyan-600 shadow-soft\"\n                onClick={() => events.ctaClick('hero_order_now', { location: 'hero' })}\n              >\n                  Order Now\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n<Button\n                size=\"lg\"\n                variant=\"outline\"\n                className=\"rounded-xl border-slate-300\"\n                onClick={() => {\n                  events.videoOpen({ location: 'hero' });\n                  setVideoOpen(true);\n                }}\n              >\n                <Play className=\"mr-2 h-5 w-5\" /> Guided Video — How to Order\n              </Button>\n            </div>\n\n            <div className=\"mt-6 flex flex-wrap gap-3\">\n              <Pill>\n                <Utensils className=\"mr-2 h-4 w-4 text-emerald-600\" /> Meals delivered warm to classroom\n              </Pill>\n              <Pill>\n                <Clock className=\"mr-2 h-4 w-4 text-cyan-600\" /> Arrives during recess\n              </Pill>\n              <Pill>\n                <Repeat className=\"mr-2 h-4 w-4 text-blue-600\" /> Pause/cancel until midnight\n              </Pill>\n            </div>\n          </div>\n\n          <div>\n            <Card className=\"rounded-2xl border-slate-200 shadow-medium\">\n              <CardHeader>\n<CardTitle className=\"text-ink-900\">Parents love the flexibility</CardTitle>\n              </CardHeader>\n              <CardContent className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-4 rounded-xl bg-slate-50 border border-slate-200\">\n                  <div className=\"text-3xl font-black text-emerald-600 mb-1\">4.9★</div>\n<p className=\"text-ink-700 text-sm\">Average parent rating</p>\n                </div>\n                <div className=\"p-4 rounded-xl bg-slate-50 border border-slate-200\">\n                  <div className=\"text-3xl font-black text-cyan-600 mb-1\">99.9%</div>\n<p className=\"text-ink-700 text-sm\">On-time delivery</p>\n                </div>\n                <div className=\"p-4 rounded-xl bg-slate-50 border border-slate-200\">\n                  <div className=\"text-3xl font-black text-blue-600 mb-1\">100%</div>\n<p className=\"text-ink-700 text-sm\">Flexible subscriptions</p>\n                </div>\n                <div className=\"p-4 rounded-xl bg-slate-50 border border-slate-200\">\n                  <div className=\"text-3xl font-black text-purple-600 mb-1\">0</div>\n<p className=\"text-ink-700 text-sm\">Food colorings added</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Reasons to choose HASIVU */}\n      <section id=\"reasons\" className=\"mx-auto max-w-7xl px-4 py-12 md:py-16\">\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          <FeatureItem icon={Leaf} title=\"Natural Ingredients\" description=\"Sustainably sourced whole and fresh ingredients. We keep it clean and simple.\" />\n          <FeatureItem icon={GraduationCap} title=\"Designed by Nutritionists\" description=\"Balanced, age-appropriate meals aligned to recommended dietary allowances.\" />\n          <FeatureItem icon={ChefHat} title=\"Prepared by Chefs & Parents\" description=\"A team of chefs and parents ensure variety, taste and safety every day.\" />\n        </div>\n      </section>\n\n      {/* How it works */}\n      <section id=\"how\" className=\"bg-white border-y border-slate-200/70\">\n        <div className=\"mx-auto max-w-7xl px-4 py-16\">\n<h2 className=\"text-3xl md:text-4xl font-black text-ink-900 text-center mb-10\">How it works</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            <Card className=\"rounded-2xl border-slate-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-ink-900\">\n                  <Utensils className=\"h-5 w-5 text-emerald-600\" />\n                  1. Order Online\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-ink-700\">Choose a single meal or subscribe for the week/month. Customize preferences and allergies.</CardContent>\n            </Card>\n            <Card className=\"rounded-2xl border-slate-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-ink-900\">\n                  <Clock className=\"h-5 w-5 text-cyan-600\" />\n                  2. Delivered Warm\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-ink-700\">Meals arrive to the classroom just before recess. Packed for freshness and warmth.</CardContent>\n            </Card>\n            <Card className=\"rounded-2xl border-slate-200\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3 text-ink-900\">\n                  <Repeat className=\"h-5 w-5 text-blue-600\" />\n                  3. Full Flexibility\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-ink-700\">Change, pause, or cancel by midnight. Manage everything from your dashboard.</CardContent>\n            </Card>\n          </div>\n          <div className=\"text-center mt-10\">\n<Link href=\"/menu\">\n              <Button\n                size=\"lg\"\n                className=\"rounded-xl bg-gradient-to-r from-emerald-500 to-cyan-500\"\n                onClick={() => events.ctaClick('how_start_order', { location: 'how_it_works' })}\n              >\n                Start an Order\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials */}\n      <section id=\"testimonials\" className=\"mx-auto max-w-7xl px-4 py-16\">\n        <div className=\"text-center mb-10\">\n          <Badge className=\"mb-3 bg-purple-100 text-purple-700 border-purple-200\">Parents say it best</Badge>\n          <h2 className=\"text-3xl md:text-4xl font-black text-ink-900\">Loved by busy families</h2>\n        </div>\n        <div className=\"grid md:grid-cols-3 gap-6\">\n          {testimonials.map((t, i) => (\n            <Card key={i} className=\"rounded-2xl border-slate-200\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex mb-3\">\n                  {[...Array(5)].map((_, idx) => (\n                    <Star key={idx} className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                  ))}\n                </div>\n                <p className=\"text-ink-700 italic\">“{t.quote}”</p>\n                <div className=\"mt-4 text-sm text-ink-700 font-medium\">{t.author}</div>\n                <div className=\"text-xs text-ink-500\">{t.title}</div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </section>\n\n      {/* Social and contact */}\n      <section id=\"contact\" className=\"mx-auto max-w-7xl px-4 py-16\">\n        <div className=\"grid md:grid-cols-2 gap-8 items-center\">\n          <div>\n            <h3 className=\"text-2xl md:text-3xl font-black text-ink-900\">We feed your kids like our own</h3>\n            <p className=\"mt-3 text-ink-700\">Follow us for menu highlights, behind-the-scenes, and nutrition tips.</p>\n            <div className=\"mt-6 flex gap-3\">\n<a href={instagramUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on Instagram\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <Instagram className=\"h-4 w-4\" /> Instagram\n              </a>\n<a href={twitterUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on Twitter\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <Twitter className=\"h-4 w-4\" /> Twitter\n              </a>\n<a href={linkedinUrl} target=\"_blank\" rel=\"noreferrer\" aria-label=\"HASIVU on LinkedIn\" className=\"inline-flex items-center gap-2 rounded-xl border border-slate-200 px-4 py-2 text-ink-700 hover:bg-slate-50\">\n                <Linkedin className=\"h-4 w-4\" /> LinkedIn\n              </a>\n            </div>\n          </div>\n\n          <Card className=\"rounded-2xl border-slate-200\">\n            <CardHeader>\n              <CardTitle className=\"text-ink-900\">Let's get talking!</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 text-ink-700\">\n              <div className=\"flex items-center gap-3\"><Mail className=\"h-4 w-4 text-emerald-600\" aria-hidden=\"true\" /> support@hasivu.com</div>\n              <div className=\"flex items-center gap-3\"><Phone className=\"h-4 w-4 text-cyan-600\" aria-hidden=\"true\" /> +91 91361 47011</div>\n              <div className=\"flex items-center gap-3\"><MapPin className=\"h-4 w-4 text-blue-600\" aria-hidden=\"true\" /> Bangalore, India</div>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* FAQs */}\n      <section id=\"faqs\" className=\"bg-white border-y border-slate-200/70\">\n        <div className=\"mx-auto max-w-3xl px-4 py-16\">\n          <div className=\"text-center mb-8\">\n            <Badge className=\"mb-3 bg-slate-100 text-ink-700 border-slate-200\">FAQs</Badge>\n            <h2 className=\"text-3xl font-black text-ink-900\">Questions parents ask</h2>\n          </div>\n          <Accordion type=\"single\" collapsible className=\"w-full\">\n            <AccordionItem value=\"item-1\">\n              <AccordionTrigger>Can I pause or cancel a subscription?</AccordionTrigger>\n              <AccordionContent>\n                Yes — change, pause, or cancel meals up to midnight the day before. Your dashboard gives you full control.\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-2\">\n              <AccordionTrigger>Are meals delivered warm to classrooms?</AccordionTrigger>\n              <AccordionContent>\n                Meals are prepared fresh and delivered to classrooms just before recess to keep them warm and safe.\n              </AccordionContent>\n            </AccordionItem>\n            <AccordionItem value=\"item-3\">\n              <AccordionTrigger>How do you handle allergies?</AccordionTrigger>\n              <AccordionContent>\n                You can set dietary preferences and allergies during ordering. We filter options and label allergens clearly.\n              </AccordionContent>\n            </AccordionItem>\n          </Accordion>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-slate-200/80 bg-white\">\n        <div className=\"mx-auto max-w-7xl px-4 py-8 grid md:grid-cols-3 gap-6 items-center\">\n          <div className=\"text-sm text-ink-700\">© {new Date().getFullYear()} HASIVU</div>\n          <div className=\"flex justify-center gap-6 text-sm\">\n            <Link href=\"/\" className=\"text-ink-700 hover:text-ink-900\">Home</Link>\n            <Link href=\"#faqs\" className=\"text-ink-700 hover:text-ink-900\">FAQs</Link>\n            <Link href=\"/privacy\" className=\"text-ink-700 hover:text-ink-900\">Privacy</Link>\n            <Link href=\"/terms\" className=\"text-ink-700 hover:text-ink-900\">Terms</Link>\n          </div>\n          <div className=\"text-right\">\n<Link href=\"/menu\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"rounded-xl\"\n                onClick={() => events.ctaClick('footer_order_now', { location: 'footer' })}\n              >\n                Order Now\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </footer>\n\n      {/* Video Dialog */}\n      <Dialog open={videoOpen} onOpenChange={setVideoOpen}>\n        <DialogContent className=\"sm:max-w-[900px]\">\n          <DialogHeader>\n            <DialogTitle>How to Order</DialogTitle>\n          </DialogHeader>\n          <div className=\"aspect-video w-full rounded-lg overflow-hidden bg-black\">\n            {/* Replace with a real hosted video URL when available */}\n            <video\n              src=\"/videos/how-to-order.mp4\"\n              className=\"w-full h-full\"\n              controls\n              poster=\"/videos/how-to-order-poster.jpg\"\n            />\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","/Users/mahesha/Downloads/hasivu-platform/web/src/lib/analytics.ts",["2776","2777","2778","2779"],["2780"],"// Lightweight Google Analytics helpers for client-side events\n// Safe no-op in development or when GA is not configured\n\ndeclare global {\n  interface Window {\n    gtag?: (...args: any[]) => void;\n  }\n}\n\nexport function trackEvent(eventName: string, params?: Record<string, any>) {\n  if (typeof window !== 'undefined' && typeof window.gtag === 'function') {\n    window.gtag('event', eventName, params || {});\n  } else if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line no-console\n    console.debug('[analytics:no-op]', eventName, params || {});\n  }\n}\n\nexport const events = {\n  ctaClick: (cta_id: string, metadata?: Record<string, any>) =>\n    trackEvent('cta_click', { cta_id, ...metadata }),\n  videoOpen: (metadata?: Record<string, any>) =>\n    trackEvent('video_open', { ...metadata }),\n};\n",{"ruleId":"2781","severity":1,"message":"2782","line":29,"column":19,"nodeType":"2783","messageId":"2784","endLine":29,"endColumn":22,"suggestions":"2785"},{"ruleId":"2786","severity":1,"message":"2787","line":30,"column":7,"nodeType":"2788","messageId":"2789","endLine":30,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":31,"column":19,"nodeType":"2783","messageId":"2784","endLine":31,"endColumn":22,"suggestions":"2790"},{"ruleId":"2791","severity":2,"message":"2792","line":38,"column":36,"nodeType":"2793","messageId":"2794","endLine":38,"endColumn":67},{"ruleId":"2786","severity":1,"message":"2787","line":31,"column":9,"nodeType":"2788","messageId":"2789","endLine":31,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":35,"column":19,"nodeType":"2783","messageId":"2784","endLine":35,"endColumn":22,"suggestions":"2795"},{"ruleId":"2786","severity":1,"message":"2787","line":36,"column":7,"nodeType":"2788","messageId":"2789","endLine":36,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":162,"column":56,"nodeType":"2783","messageId":"2784","endLine":162,"endColumn":59,"suggestions":"2796"},{"ruleId":"2781","severity":1,"message":"2782","line":108,"column":64,"nodeType":"2783","messageId":"2784","endLine":108,"endColumn":67,"suggestions":"2797"},{"ruleId":"2781","severity":1,"message":"2782","line":11,"column":26,"nodeType":"2783","messageId":"2784","endLine":11,"endColumn":29,"suggestions":"2798"},{"ruleId":"2781","severity":1,"message":"2782","line":156,"column":21,"nodeType":"2783","messageId":"2784","endLine":156,"endColumn":24,"suggestions":"2799"},{"ruleId":"2781","severity":1,"message":"2782","line":185,"column":21,"nodeType":"2783","messageId":"2784","endLine":185,"endColumn":24,"suggestions":"2800"},{"ruleId":"2781","severity":1,"message":"2782","line":201,"column":21,"nodeType":"2783","messageId":"2784","endLine":201,"endColumn":24,"suggestions":"2801"},{"ruleId":"2781","severity":1,"message":"2782","line":218,"column":21,"nodeType":"2783","messageId":"2784","endLine":218,"endColumn":24,"suggestions":"2802"},{"ruleId":"2781","severity":1,"message":"2782","line":238,"column":21,"nodeType":"2783","messageId":"2784","endLine":238,"endColumn":24,"suggestions":"2803"},{"ruleId":"2781","severity":1,"message":"2782","line":448,"column":82,"nodeType":"2783","messageId":"2784","endLine":448,"endColumn":85,"suggestions":"2804"},{"ruleId":"2781","severity":1,"message":"2782","line":191,"column":31,"nodeType":"2783","messageId":"2784","endLine":191,"endColumn":34,"suggestions":"2805"},{"ruleId":"2781","severity":1,"message":"2782","line":258,"column":66,"nodeType":"2783","messageId":"2784","endLine":258,"endColumn":69,"suggestions":"2806"},{"ruleId":"2786","severity":1,"message":"2787","line":91,"column":7,"nodeType":"2788","messageId":"2789","endLine":91,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":107,"column":9,"nodeType":"2788","messageId":"2789","endLine":107,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":124,"column":11,"nodeType":"2788","messageId":"2789","endLine":124,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":129,"column":9,"nodeType":"2788","messageId":"2789","endLine":129,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":142,"column":13,"nodeType":"2788","messageId":"2789","endLine":142,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":149,"column":9,"nodeType":"2788","messageId":"2789","endLine":149,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":155,"column":7,"nodeType":"2788","messageId":"2789","endLine":155,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":203,"column":9,"nodeType":"2788","messageId":"2789","endLine":203,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":260,"column":7,"nodeType":"2788","messageId":"2789","endLine":260,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":262,"column":7,"nodeType":"2788","messageId":"2789","endLine":262,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":272,"column":7,"nodeType":"2788","messageId":"2789","endLine":272,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":275,"column":7,"nodeType":"2788","messageId":"2789","endLine":275,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":283,"column":7,"nodeType":"2788","messageId":"2789","endLine":283,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":285,"column":7,"nodeType":"2788","messageId":"2789","endLine":285,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":205,"column":9,"nodeType":"2788","messageId":"2789","endLine":205,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":256,"column":7,"nodeType":"2788","messageId":"2789","endLine":256,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":301,"column":7,"nodeType":"2788","messageId":"2789","endLine":301,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2807","line":324,"column":10,"nodeType":"2793","messageId":"2794","endLine":324,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2808","line":86,"column":10,"nodeType":"2793","messageId":"2794","endLine":86,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":128,"column":7,"nodeType":"2788","messageId":"2789","endLine":128,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":426,"column":53,"nodeType":"2783","messageId":"2784","endLine":426,"endColumn":56,"suggestions":"2809"},{"ruleId":"2781","severity":1,"message":"2782","line":500,"column":66,"nodeType":"2783","messageId":"2784","endLine":500,"endColumn":69,"suggestions":"2810"},{"ruleId":"2791","severity":2,"message":"2811","line":31,"column":10,"nodeType":"2793","messageId":"2794","endLine":31,"endColumn":24},{"ruleId":"2791","severity":2,"message":"2812","line":36,"column":9,"nodeType":"2793","messageId":"2794","endLine":36,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2813","line":6,"column":36,"nodeType":"2793","messageId":"2794","endLine":6,"endColumn":40},{"ruleId":"2786","severity":1,"message":"2787","line":75,"column":7,"nodeType":"2788","messageId":"2789","endLine":75,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":87,"column":9,"nodeType":"2788","messageId":"2789","endLine":87,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":50,"column":27,"nodeType":"2783","messageId":"2784","endLine":50,"endColumn":30,"suggestions":"2814"},{"ruleId":"2781","severity":1,"message":"2782","line":93,"column":21,"nodeType":"2783","messageId":"2784","endLine":93,"endColumn":24,"suggestions":"2815"},{"ruleId":"2786","severity":1,"message":"2787","line":95,"column":7,"nodeType":"2788","messageId":"2789","endLine":95,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":114,"column":5,"nodeType":"2788","messageId":"2789","endLine":114,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2816","line":21,"column":10,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":15},{"ruleId":"2786","severity":1,"message":"2787","line":131,"column":7,"nodeType":"2788","messageId":"2789","endLine":131,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":140,"column":7,"nodeType":"2788","messageId":"2789","endLine":140,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":149,"column":7,"nodeType":"2788","messageId":"2789","endLine":149,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":159,"column":9,"nodeType":"2788","messageId":"2789","endLine":159,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":257,"column":91,"nodeType":"2783","messageId":"2784","endLine":257,"endColumn":94,"suggestions":"2817"},{"ruleId":"2781","severity":1,"message":"2782","line":110,"column":47,"nodeType":"2783","messageId":"2784","endLine":110,"endColumn":50,"suggestions":"2818"},{"ruleId":"2786","severity":1,"message":"2787","line":123,"column":7,"nodeType":"2788","messageId":"2789","endLine":123,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":132,"column":9,"nodeType":"2788","messageId":"2789","endLine":132,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":56,"column":7,"nodeType":"2788","messageId":"2789","endLine":56,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":224,"column":37,"nodeType":"2783","messageId":"2784","endLine":224,"endColumn":40,"suggestions":"2819"},{"ruleId":"2786","severity":1,"message":"2787","line":228,"column":7,"nodeType":"2788","messageId":"2789","endLine":228,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2820","line":8,"column":10,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":12},{"ruleId":"2786","severity":1,"message":"2787","line":110,"column":7,"nodeType":"2788","messageId":"2789","endLine":110,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":119,"column":9,"nodeType":"2788","messageId":"2789","endLine":119,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":105,"column":7,"nodeType":"2788","messageId":"2789","endLine":105,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":117,"column":9,"nodeType":"2788","messageId":"2789","endLine":117,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":342,"column":9,"nodeType":"2788","messageId":"2789","endLine":342,"endColumn":22},{"ruleId":"2791","severity":2,"message":"2821","line":8,"column":40,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2822","line":34,"column":3,"nodeType":"2793","messageId":"2794","endLine":34,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2823","line":35,"column":3,"nodeType":"2793","messageId":"2794","endLine":35,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2824","line":36,"column":3,"nodeType":"2793","messageId":"2794","endLine":36,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2825","line":37,"column":3,"nodeType":"2793","messageId":"2794","endLine":37,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2826","line":38,"column":3,"nodeType":"2793","messageId":"2794","endLine":38,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2827","line":39,"column":3,"nodeType":"2793","messageId":"2794","endLine":39,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2828","line":88,"column":3,"nodeType":"2793","messageId":"2794","endLine":88,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2829","line":89,"column":3,"nodeType":"2793","messageId":"2794","endLine":89,"endColumn":13},{"ruleId":"2786","severity":1,"message":"2787","line":145,"column":7,"nodeType":"2788","messageId":"2789","endLine":145,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":159,"column":9,"nodeType":"2788","messageId":"2789","endLine":159,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":170,"column":9,"nodeType":"2788","messageId":"2789","endLine":170,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":183,"column":9,"nodeType":"2788","messageId":"2789","endLine":183,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":193,"column":9,"nodeType":"2788","messageId":"2789","endLine":193,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":205,"column":9,"nodeType":"2788","messageId":"2789","endLine":205,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":241,"column":93,"nodeType":"2783","messageId":"2784","endLine":241,"endColumn":96,"suggestions":"2830"},{"ruleId":"2791","severity":2,"message":"2831","line":32,"column":10,"nodeType":"2793","messageId":"2794","endLine":32,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2832","line":33,"column":10,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2833","line":72,"column":3,"nodeType":"2793","messageId":"2794","endLine":72,"endColumn":23},{"ruleId":"2781","severity":1,"message":"2782","line":82,"column":50,"nodeType":"2783","messageId":"2784","endLine":82,"endColumn":53,"suggestions":"2834"},{"ruleId":"2781","severity":1,"message":"2782","line":135,"column":52,"nodeType":"2783","messageId":"2784","endLine":135,"endColumn":55,"suggestions":"2835"},{"ruleId":"2791","severity":2,"message":"2836","line":8,"column":42,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2837","line":8,"column":47,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":53},{"ruleId":"2791","severity":2,"message":"2838","line":9,"column":28,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2839","line":9,"column":35,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":38},{"ruleId":"2791","severity":2,"message":"2840","line":43,"column":3,"nodeType":"2793","messageId":"2794","endLine":43,"endColumn":27},{"ruleId":"2791","severity":2,"message":"2841","line":46,"column":8,"nodeType":"2793","messageId":"2794","endLine":46,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2842","line":94,"column":3,"nodeType":"2793","messageId":"2794","endLine":94,"endColumn":11},{"ruleId":"2786","severity":1,"message":"2787","line":180,"column":9,"nodeType":"2788","messageId":"2789","endLine":180,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":197,"column":7,"nodeType":"2788","messageId":"2789","endLine":197,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":207,"column":9,"nodeType":"2788","messageId":"2789","endLine":207,"endColumn":22},{"ruleId":"2791","severity":2,"message":"2843","line":19,"column":10,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":26},{"ruleId":"2791","severity":2,"message":"2844","line":239,"column":3,"nodeType":"2793","messageId":"2794","endLine":239,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":88,"column":7,"nodeType":"2788","messageId":"2789","endLine":88,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":97,"column":9,"nodeType":"2788","messageId":"2789","endLine":97,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":102,"column":7,"nodeType":"2788","messageId":"2789","endLine":102,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2845","line":259,"column":3,"nodeType":"2793","messageId":"2794","endLine":259,"endColumn":13},{"ruleId":"2846","severity":2,"message":"2847","line":68,"column":45,"nodeType":"2848","messageId":"2849","endLine":68,"endColumn":46,"suggestions":"2850"},{"ruleId":"2846","severity":2,"message":"2851","line":68,"column":47,"nodeType":"2848","messageId":"2849","endLine":68,"endColumn":48,"suggestions":"2852"},{"ruleId":"2846","severity":2,"message":"2847","line":88,"column":45,"nodeType":"2848","messageId":"2849","endLine":88,"endColumn":46,"suggestions":"2853"},{"ruleId":"2846","severity":2,"message":"2851","line":88,"column":47,"nodeType":"2848","messageId":"2849","endLine":88,"endColumn":48,"suggestions":"2854"},{"ruleId":"2846","severity":2,"message":"2847","line":100,"column":55,"nodeType":"2848","messageId":"2849","endLine":100,"endColumn":56,"suggestions":"2855"},{"ruleId":"2846","severity":2,"message":"2851","line":100,"column":57,"nodeType":"2848","messageId":"2849","endLine":100,"endColumn":58,"suggestions":"2856"},{"ruleId":"2846","severity":2,"message":"2847","line":168,"column":45,"nodeType":"2848","messageId":"2849","endLine":168,"endColumn":46,"suggestions":"2857"},{"ruleId":"2846","severity":2,"message":"2851","line":168,"column":47,"nodeType":"2848","messageId":"2849","endLine":168,"endColumn":48,"suggestions":"2858"},{"ruleId":"2846","severity":2,"message":"2847","line":174,"column":41,"nodeType":"2848","messageId":"2849","endLine":174,"endColumn":42,"suggestions":"2859"},{"ruleId":"2846","severity":2,"message":"2851","line":174,"column":43,"nodeType":"2848","messageId":"2849","endLine":174,"endColumn":44,"suggestions":"2860"},{"ruleId":"2786","severity":1,"message":"2787","line":211,"column":19,"nodeType":"2788","messageId":"2789","endLine":211,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2861","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":13},{"ruleId":"2786","severity":1,"message":"2787","line":527,"column":7,"nodeType":"2788","messageId":"2789","endLine":527,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":541,"column":9,"nodeType":"2788","messageId":"2789","endLine":541,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":542,"column":9,"nodeType":"2788","messageId":"2789","endLine":542,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":543,"column":9,"nodeType":"2788","messageId":"2789","endLine":543,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":544,"column":9,"nodeType":"2788","messageId":"2789","endLine":544,"endColumn":25},{"ruleId":"2786","severity":1,"message":"2787","line":558,"column":7,"nodeType":"2788","messageId":"2789","endLine":558,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2862","line":592,"column":13,"nodeType":"2793","messageId":"2794","endLine":592,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2863","line":3,"column":27,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":36},{"ruleId":"2791","severity":2,"message":"2864","line":4,"column":18,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2865","line":6,"column":3,"nodeType":"2793","messageId":"2794","endLine":6,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2866","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2867","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2868","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2869","line":91,"column":11,"nodeType":"2793","messageId":"2794","endLine":91,"endColumn":22},{"ruleId":"2791","severity":2,"message":"2870","line":101,"column":11,"nodeType":"2793","messageId":"2794","endLine":101,"endColumn":27},{"ruleId":"2791","severity":2,"message":"2871","line":298,"column":40,"nodeType":"2793","messageId":"2794","endLine":298,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2872","line":14,"column":20,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2873","line":14,"column":30,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2874","line":14,"column":35,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2875","line":21,"column":21,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2876","line":21,"column":47,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":62},{"ruleId":"2791","severity":2,"message":"2877","line":4,"column":29,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2878","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2879","line":12,"column":13,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2880","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2881","line":13,"column":14,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2882","line":13,"column":58,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":71},{"ruleId":"2791","severity":2,"message":"2883","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":17},{"ruleId":"2791","severity":2,"message":"2884","line":14,"column":19,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2885","line":14,"column":30,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":42},{"ruleId":"2791","severity":2,"message":"2886","line":14,"column":44,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":51},{"ruleId":"2791","severity":2,"message":"2887","line":17,"column":34,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":40},{"ruleId":"2791","severity":2,"message":"2888","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2889","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":17},{"ruleId":"2791","severity":2,"message":"2890","line":19,"column":40,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":50},{"ruleId":"2791","severity":2,"message":"2891","line":20,"column":15,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2892","line":20,"column":21,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2893","line":20,"column":32,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2894","line":20,"column":41,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":46},{"ruleId":"2781","severity":1,"message":"2782","line":106,"column":89,"nodeType":"2783","messageId":"2784","endLine":106,"endColumn":92,"suggestions":"2895"},{"ruleId":null,"fatal":true,"severity":2,"message":"2896","line":1184,"column":3,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"2897","line":1317,"column":18,"nodeType":null},{"ruleId":"2791","severity":2,"message":"2898","line":9,"column":10,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2899","line":9,"column":18,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":32},{"ruleId":"2791","severity":2,"message":"2900","line":9,"column":34,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2901","line":13,"column":10,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2902","line":14,"column":10,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2903","line":14,"column":17,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":26},{"ruleId":"2791","severity":2,"message":"2904","line":14,"column":28,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":37},{"ruleId":"2791","severity":2,"message":"2905","line":14,"column":39,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":48},{"ruleId":"2791","severity":2,"message":"2906","line":14,"column":50,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":61},{"ruleId":"2791","severity":2,"message":"2907","line":14,"column":63,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":71},{"ruleId":"2791","severity":2,"message":"2872","line":17,"column":20,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2873","line":17,"column":30,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2874","line":17,"column":35,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2908","line":17,"column":41,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2909","line":17,"column":47,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":56},{"ruleId":"2791","severity":2,"message":"2883","line":17,"column":58,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":72},{"ruleId":"2791","severity":2,"message":"2884","line":17,"column":74,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":83},{"ruleId":"2791","severity":2,"message":"2910","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2865","line":20,"column":19,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":24},{"ruleId":"2791","severity":2,"message":"2839","line":22,"column":54,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":57},{"ruleId":"2791","severity":2,"message":"2911","line":23,"column":33,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2912","line":23,"column":54,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":58},{"ruleId":"2791","severity":2,"message":"2913","line":24,"column":16,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2914","line":24,"column":22,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":27},{"ruleId":"2791","severity":2,"message":"2867","line":24,"column":40,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":46},{"ruleId":"2791","severity":2,"message":"2915","line":24,"column":48,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":54},{"ruleId":"2791","severity":2,"message":"2916","line":272,"column":7,"nodeType":"2793","messageId":"2794","endLine":272,"endColumn":13},{"ruleId":"2791","severity":2,"message":"2917","line":275,"column":3,"nodeType":"2793","messageId":"2794","endLine":275,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2918","line":279,"column":10,"nodeType":"2793","messageId":"2794","endLine":279,"endColumn":25},{"ruleId":"2791","severity":2,"message":"2919","line":279,"column":27,"nodeType":"2793","messageId":"2794","endLine":279,"endColumn":45},{"ruleId":"2786","severity":1,"message":"2787","line":292,"column":9,"nodeType":"2788","messageId":"2789","endLine":292,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2920","line":327,"column":9,"nodeType":"2793","messageId":"2794","endLine":327,"endColumn":19},{"ruleId":"2781","severity":1,"message":"2782","line":335,"column":37,"nodeType":"2783","messageId":"2784","endLine":335,"endColumn":40,"suggestions":"2921"},{"ruleId":"2781","severity":1,"message":"2782","line":410,"column":83,"nodeType":"2783","messageId":"2784","endLine":410,"endColumn":86,"suggestions":"2922"},{"ruleId":"2791","severity":2,"message":"2877","line":4,"column":29,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2880","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2908","line":16,"column":41,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2909","line":16,"column":47,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":56},{"ruleId":"2791","severity":2,"message":"2866","line":19,"column":40,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":48},{"ruleId":"2791","severity":2,"message":"2923","line":20,"column":29,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":34},{"ruleId":"2791","severity":2,"message":"2914","line":22,"column":9,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2924","line":22,"column":16,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2925","line":22,"column":30,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":35},{"ruleId":"2791","severity":2,"message":"2926","line":158,"column":3,"nodeType":"2793","messageId":"2794","endLine":158,"endColumn":13},{"ruleId":"2781","severity":1,"message":"2782","line":240,"column":87,"nodeType":"2783","messageId":"2784","endLine":240,"endColumn":90,"suggestions":"2927"},{"ruleId":"2791","severity":2,"message":"2928","line":6,"column":10,"nodeType":"2793","messageId":"2794","endLine":6,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2898","line":10,"column":10,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2899","line":10,"column":18,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":32},{"ruleId":"2791","severity":2,"message":"2900","line":10,"column":34,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":45},{"ruleId":"2791","severity":2,"message":"2878","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2879","line":14,"column":13,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2880","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2881","line":15,"column":14,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2872","line":15,"column":20,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2873","line":15,"column":30,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2874","line":15,"column":35,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2883","line":15,"column":58,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":72},{"ruleId":"2791","severity":2,"message":"2884","line":15,"column":74,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":83},{"ruleId":"2791","severity":2,"message":"2929","line":18,"column":10,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2866","line":19,"column":15,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":23},{"ruleId":"2791","severity":2,"message":"2925","line":19,"column":33,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":38},{"ruleId":"2791","severity":2,"message":"2924","line":19,"column":40,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2930","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2931","line":20,"column":55,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":59},{"ruleId":"2791","severity":2,"message":"2932","line":21,"column":35,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":47},{"ruleId":"2791","severity":2,"message":"2933","line":160,"column":10,"nodeType":"2793","messageId":"2794","endLine":160,"endColumn":21},{"ruleId":"2791","severity":2,"message":"2934","line":161,"column":10,"nodeType":"2793","messageId":"2794","endLine":161,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2935","line":161,"column":21,"nodeType":"2793","messageId":"2794","endLine":161,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2936","line":162,"column":24,"nodeType":"2793","messageId":"2794","endLine":162,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2880","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2881","line":14,"column":14,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2872","line":14,"column":20,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2873","line":14,"column":30,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2874","line":14,"column":35,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2865","line":18,"column":10,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2937","line":4,"column":10,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":21},{"ruleId":"2791","severity":2,"message":"2938","line":4,"column":23,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":34},{"ruleId":"2781","severity":1,"message":"2782","line":49,"column":42,"nodeType":"2783","messageId":"2784","endLine":49,"endColumn":45,"suggestions":"2939"},{"ruleId":"2786","severity":1,"message":"2787","line":331,"column":9,"nodeType":"2788","messageId":"2789","endLine":331,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":340,"column":53,"nodeType":"2783","messageId":"2784","endLine":340,"endColumn":56,"suggestions":"2940"},{"ruleId":"2786","severity":1,"message":"2787","line":361,"column":9,"nodeType":"2788","messageId":"2789","endLine":361,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":417,"column":31,"nodeType":"2788","messageId":"2789","endLine":417,"endColumn":42},{"ruleId":"2786","severity":1,"message":"2787","line":418,"column":34,"nodeType":"2788","messageId":"2789","endLine":418,"endColumn":45},{"ruleId":"2786","severity":1,"message":"2787","line":419,"column":36,"nodeType":"2788","messageId":"2789","endLine":419,"endColumn":47},{"ruleId":"2786","severity":1,"message":"2787","line":426,"column":34,"nodeType":"2788","messageId":"2789","endLine":426,"endColumn":45},{"ruleId":"2786","severity":1,"message":"2787","line":433,"column":30,"nodeType":"2788","messageId":"2789","endLine":433,"endColumn":41},{"ruleId":"2786","severity":1,"message":"2787","line":440,"column":39,"nodeType":"2788","messageId":"2789","endLine":440,"endColumn":50},{"ruleId":"2786","severity":1,"message":"2787","line":441,"column":44,"nodeType":"2788","messageId":"2789","endLine":441,"endColumn":55},{"ruleId":"2786","severity":1,"message":"2787","line":448,"column":35,"nodeType":"2788","messageId":"2789","endLine":448,"endColumn":46},{"ruleId":"2786","severity":1,"message":"2787","line":449,"column":31,"nodeType":"2788","messageId":"2789","endLine":449,"endColumn":42},{"ruleId":"2786","severity":1,"message":"2787","line":456,"column":33,"nodeType":"2788","messageId":"2789","endLine":456,"endColumn":44},{"ruleId":"2786","severity":1,"message":"2787","line":457,"column":41,"nodeType":"2788","messageId":"2789","endLine":457,"endColumn":52},{"ruleId":"2786","severity":1,"message":"2787","line":464,"column":37,"nodeType":"2788","messageId":"2789","endLine":464,"endColumn":48},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":13,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":16,"suggestions":"2941"},{"ruleId":"2791","severity":2,"message":"2942","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2943","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2944","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":16},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":18,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":21,"suggestions":"2945"},{"ruleId":"2791","severity":2,"message":"2946","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2947","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":15},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":18,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":21,"suggestions":"2948"},{"ruleId":"2791","severity":2,"message":"2949","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":16},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":11,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":14,"suggestions":"2950"},{"ruleId":"2791","severity":2,"message":"2951","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2952","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":14},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":17,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":20,"suggestions":"2953"},{"ruleId":"2791","severity":2,"message":"2954","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":15},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":19,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":22,"suggestions":"2955"},{"ruleId":"2791","severity":2,"message":"2956","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":17},{"ruleId":"2791","severity":2,"message":"2957","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":24},{"ruleId":"2781","severity":1,"message":"2782","line":5,"column":17,"nodeType":"2783","messageId":"2784","endLine":5,"endColumn":20,"suggestions":"2958"},{"ruleId":"2791","severity":2,"message":"2959","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2880","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2881","line":10,"column":14,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2872","line":10,"column":20,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2873","line":10,"column":30,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2874","line":10,"column":35,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2866","line":13,"column":36,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2960","line":182,"column":10,"nodeType":"2793","messageId":"2794","endLine":182,"endColumn":23},{"ruleId":"2791","severity":2,"message":"2961","line":182,"column":25,"nodeType":"2793","messageId":"2794","endLine":182,"endColumn":41},{"ruleId":"2791","severity":2,"message":"2962","line":183,"column":31,"nodeType":"2793","messageId":"2794","endLine":183,"endColumn":53},{"ruleId":"2791","severity":2,"message":"2963","line":661,"column":25,"nodeType":"2793","messageId":"2794","endLine":661,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2878","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2879","line":9,"column":13,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2880","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2866","line":14,"column":15,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":23},{"ruleId":"2791","severity":2,"message":"2871","line":434,"column":47,"nodeType":"2793","messageId":"2794","endLine":434,"endColumn":52},{"ruleId":"2964","severity":2,"message":"2965","line":3,"column":3,"nodeType":"2793","messageId":"2966","endLine":3,"endColumn":13,"fix":"2967"},{"ruleId":"2964","severity":2,"message":"2968","line":4,"column":3,"nodeType":"2793","messageId":"2966","endLine":4,"endColumn":16,"fix":"2969"},{"ruleId":"2964","severity":2,"message":"2970","line":5,"column":3,"nodeType":"2793","messageId":"2966","endLine":5,"endColumn":9,"fix":"2971"},{"ruleId":"2972","severity":2,"message":"2973","line":5,"column":11,"nodeType":"2974","messageId":"2789","endLine":5,"endColumn":13,"suggestions":"2975"},{"ruleId":"2964","severity":2,"message":"2976","line":7,"column":3,"nodeType":"2793","messageId":"2966","endLine":7,"endColumn":22,"fix":"2977"},{"ruleId":"2964","severity":2,"message":"2978","line":8,"column":3,"nodeType":"2793","messageId":"2966","endLine":8,"endColumn":17,"fix":"2979"},{"ruleId":"2791","severity":2,"message":"2980","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2872","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2981","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2982","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2983","line":22,"column":10,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2984","line":24,"column":10,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2909","line":32,"column":3,"nodeType":"2793","messageId":"2794","endLine":32,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2908","line":33,"column":3,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2883","line":42,"column":3,"nodeType":"2793","messageId":"2794","endLine":42,"endColumn":17},{"ruleId":"2791","severity":2,"message":"2884","line":43,"column":3,"nodeType":"2793","messageId":"2794","endLine":43,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2985","line":44,"column":3,"nodeType":"2793","messageId":"2794","endLine":44,"endColumn":17},{"ruleId":"2781","severity":1,"message":"2782","line":122,"column":66,"nodeType":"2783","messageId":"2784","endLine":122,"endColumn":69,"suggestions":"2986"},{"ruleId":"2781","severity":1,"message":"2782","line":146,"column":50,"nodeType":"2783","messageId":"2784","endLine":146,"endColumn":53,"suggestions":"2987"},{"ruleId":"2791","severity":2,"message":"2864","line":4,"column":18,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2988","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2989","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2990","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2983","line":19,"column":10,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2991","line":93,"column":10,"nodeType":"2793","messageId":"2794","endLine":93,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":177,"column":7,"nodeType":"2788","messageId":"2789","endLine":177,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2992","line":229,"column":9,"nodeType":"2793","messageId":"2794","endLine":229,"endColumn":23},{"ruleId":"2791","severity":2,"message":"2871","line":448,"column":54,"nodeType":"2793","messageId":"2794","endLine":448,"endColumn":59},{"ruleId":"2786","severity":1,"message":"2787","line":64,"column":7,"nodeType":"2788","messageId":"2789","endLine":64,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":65,"column":7,"nodeType":"2788","messageId":"2789","endLine":65,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":66,"column":7,"nodeType":"2788","messageId":"2789","endLine":66,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":67,"column":7,"nodeType":"2788","messageId":"2789","endLine":67,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":68,"column":7,"nodeType":"2788","messageId":"2789","endLine":68,"endColumn":23},{"ruleId":"2791","severity":2,"message":"2993","line":4,"column":10,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2864","line":4,"column":18,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2932","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2894","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2866","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2981","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2915","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2994","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2995","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2930","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2839","line":28,"column":3,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":6},{"ruleId":"2791","severity":2,"message":"2865","line":29,"column":3,"nodeType":"2793","messageId":"2794","endLine":29,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2996","line":30,"column":3,"nodeType":"2793","messageId":"2794","endLine":30,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2997","line":31,"column":3,"nodeType":"2793","messageId":"2794","endLine":31,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2877","line":36,"column":29,"nodeType":"2793","messageId":"2794","endLine":36,"endColumn":44},{"ruleId":"2791","severity":2,"message":"2998","line":454,"column":41,"nodeType":"2793","messageId":"2794","endLine":454,"endColumn":53},{"ruleId":"2791","severity":2,"message":"2999","line":455,"column":41,"nodeType":"2793","messageId":"2794","endLine":455,"endColumn":57},{"ruleId":"2791","severity":2,"message":"3000","line":456,"column":46,"nodeType":"2793","messageId":"2794","endLine":456,"endColumn":55},{"ruleId":"2791","severity":2,"message":"3001","line":457,"column":39,"nodeType":"2793","messageId":"2794","endLine":457,"endColumn":53},{"ruleId":"2781","severity":1,"message":"2782","line":460,"column":20,"nodeType":"2783","messageId":"2784","endLine":460,"endColumn":23,"suggestions":"3002"},{"ruleId":"2781","severity":1,"message":"2782","line":461,"column":20,"nodeType":"2783","messageId":"2784","endLine":461,"endColumn":23,"suggestions":"3003"},{"ruleId":"2781","severity":1,"message":"2782","line":462,"column":25,"nodeType":"2783","messageId":"2784","endLine":462,"endColumn":28,"suggestions":"3004"},{"ruleId":"2781","severity":1,"message":"2782","line":465,"column":44,"nodeType":"2783","messageId":"2784","endLine":465,"endColumn":47,"suggestions":"3005"},{"ruleId":"2781","severity":1,"message":"2782","line":466,"column":42,"nodeType":"2783","messageId":"2784","endLine":466,"endColumn":45,"suggestions":"3006"},{"ruleId":"2781","severity":1,"message":"2782","line":468,"column":44,"nodeType":"2783","messageId":"2784","endLine":468,"endColumn":47,"suggestions":"3007"},{"ruleId":"2781","severity":1,"message":"2782","line":472,"column":8,"nodeType":"2783","messageId":"2784","endLine":472,"endColumn":11,"suggestions":"3008"},{"ruleId":"2781","severity":1,"message":"2782","line":476,"column":36,"nodeType":"2783","messageId":"2784","endLine":476,"endColumn":39,"suggestions":"3009"},{"ruleId":"2781","severity":1,"message":"2782","line":651,"column":45,"nodeType":"2783","messageId":"2784","endLine":651,"endColumn":48,"suggestions":"3010"},{"ruleId":"2781","severity":1,"message":"2782","line":653,"column":52,"nodeType":"2783","messageId":"2784","endLine":653,"endColumn":55,"suggestions":"3011"},{"ruleId":"2781","severity":1,"message":"2782","line":665,"column":51,"nodeType":"2783","messageId":"2784","endLine":665,"endColumn":54,"suggestions":"3012"},{"ruleId":"2781","severity":1,"message":"2782","line":666,"column":67,"nodeType":"2783","messageId":"2784","endLine":666,"endColumn":70,"suggestions":"3013"},{"ruleId":"2781","severity":1,"message":"2782","line":677,"column":49,"nodeType":"2783","messageId":"2784","endLine":677,"endColumn":52,"suggestions":"3014"},{"ruleId":"2781","severity":1,"message":"2782","line":678,"column":71,"nodeType":"2783","messageId":"2784","endLine":678,"endColumn":74,"suggestions":"3015"},{"ruleId":"2791","severity":2,"message":"3016","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2981","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":12},{"ruleId":"2791","severity":2,"message":"2866","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2997","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2839","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3017","line":446,"column":24,"nodeType":"2793","messageId":"2794","endLine":446,"endColumn":39},{"ruleId":"2791","severity":2,"message":"3018","line":447,"column":24,"nodeType":"2793","messageId":"2794","endLine":447,"endColumn":39},{"ruleId":"2791","severity":2,"message":"3019","line":448,"column":28,"nodeType":"2793","messageId":"2794","endLine":448,"endColumn":47},{"ruleId":"2791","severity":2,"message":"3020","line":453,"column":33,"nodeType":"2793","messageId":"2794","endLine":453,"endColumn":45},{"ruleId":"2791","severity":2,"message":"3021","line":454,"column":37,"nodeType":"2793","messageId":"2794","endLine":454,"endColumn":53},{"ruleId":"2791","severity":2,"message":"3022","line":455,"column":17,"nodeType":"2793","messageId":"2794","endLine":455,"endColumn":31},{"ruleId":"2791","severity":2,"message":"3023","line":455,"column":42,"nodeType":"2793","messageId":"2794","endLine":455,"endColumn":55},{"ruleId":"2781","severity":1,"message":"2782","line":460,"column":68,"nodeType":"2783","messageId":"2784","endLine":460,"endColumn":71,"suggestions":"3024"},{"ruleId":"2781","severity":1,"message":"2782","line":465,"column":69,"nodeType":"2783","messageId":"2784","endLine":465,"endColumn":72,"suggestions":"3025"},{"ruleId":"2791","severity":2,"message":"3026","line":470,"column":9,"nodeType":"2793","messageId":"2794","endLine":470,"endColumn":32},{"ruleId":"2791","severity":2,"message":"3027","line":481,"column":9,"nodeType":"2793","messageId":"2794","endLine":481,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2989","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3028","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":17},{"ruleId":"2791","severity":2,"message":"2913","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3016","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2929","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3029","line":21,"column":3,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3030","line":167,"column":9,"nodeType":"2793","messageId":"2794","endLine":167,"endColumn":23},{"ruleId":"2791","severity":2,"message":"3031","line":168,"column":9,"nodeType":"2793","messageId":"2794","endLine":168,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3032","line":423,"column":39,"nodeType":"2793","messageId":"2794","endLine":423,"endColumn":47},{"ruleId":"2781","severity":1,"message":"2782","line":440,"column":17,"nodeType":"2783","messageId":"2784","endLine":440,"endColumn":20,"suggestions":"3033"},{"ruleId":"2781","severity":1,"message":"2782","line":441,"column":25,"nodeType":"2783","messageId":"2784","endLine":441,"endColumn":28,"suggestions":"3034"},{"ruleId":"2781","severity":1,"message":"2782","line":447,"column":39,"nodeType":"2783","messageId":"2784","endLine":447,"endColumn":42,"suggestions":"3035"},{"ruleId":"2791","severity":2,"message":"3036","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2982","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3037","line":23,"column":10,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3038","line":25,"column":10,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":28},{"ruleId":"2791","severity":2,"message":"2877","line":28,"column":29,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3039","line":28,"column":46,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3040","line":28,"column":58,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":67},{"ruleId":"2791","severity":2,"message":"2839","line":8,"column":3,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3041","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3042","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":13},{"ruleId":"2791","severity":2,"message":"2982","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2890","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3043","line":22,"column":21,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":32},{"ruleId":"2791","severity":2,"message":"2877","line":26,"column":29,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3039","line":26,"column":46,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3040","line":26,"column":58,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":67},{"ruleId":"2791","severity":2,"message":"2831","line":27,"column":10,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3044","line":28,"column":10,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3045","line":28,"column":21,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":37},{"ruleId":"2791","severity":2,"message":"3046","line":28,"column":39,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":52},{"ruleId":"2791","severity":2,"message":"3047","line":28,"column":54,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":70},{"ruleId":"2786","severity":1,"message":"2787","line":169,"column":7,"nodeType":"2788","messageId":"2789","endLine":169,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":210,"column":7,"nodeType":"2788","messageId":"2789","endLine":210,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2864","line":5,"column":18,"nodeType":"2793","messageId":"2794","endLine":5,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2890","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3048","line":21,"column":3,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2996","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2923","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":8},{"ruleId":"2791","severity":2,"message":"3016","line":24,"column":3,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2838","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2929","line":26,"column":3,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2887","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3049","line":28,"column":3,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2821","line":29,"column":3,"nodeType":"2793","messageId":"2794","endLine":29,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2877","line":33,"column":29,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3039","line":33,"column":46,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3040","line":33,"column":58,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":67},{"ruleId":"2791","severity":2,"message":"3050","line":35,"column":10,"nodeType":"2793","messageId":"2794","endLine":35,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3051","line":35,"column":21,"nodeType":"2793","messageId":"2794","endLine":35,"endColumn":34},{"ruleId":"2791","severity":2,"message":"3052","line":36,"column":10,"nodeType":"2793","messageId":"2794","endLine":36,"endColumn":17},{"ruleId":"2791","severity":2,"message":"3053","line":38,"column":10,"nodeType":"2793","messageId":"2794","endLine":38,"endColumn":25},{"ruleId":"2781","severity":1,"message":"2782","line":64,"column":29,"nodeType":"2783","messageId":"2784","endLine":64,"endColumn":32,"suggestions":"3054"},{"ruleId":"2791","severity":2,"message":"3055","line":104,"column":7,"nodeType":"2793","messageId":"2794","endLine":104,"endColumn":33},{"ruleId":"2791","severity":2,"message":"3056","line":180,"column":7,"nodeType":"2793","messageId":"2794","endLine":180,"endColumn":34},{"ruleId":"2791","severity":2,"message":"3057","line":217,"column":10,"nodeType":"2793","messageId":"2794","endLine":217,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3058","line":217,"column":22,"nodeType":"2793","messageId":"2794","endLine":217,"endColumn":35},{"ruleId":"2791","severity":2,"message":"3059","line":37,"column":3,"nodeType":"2793","messageId":"2794","endLine":37,"endColumn":14},{"ruleId":"2791","severity":2,"message":"2832","line":25,"column":10,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3060","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3016","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3061","line":39,"column":11,"nodeType":"2793","messageId":"2794","endLine":39,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3062","line":55,"column":49,"nodeType":"2793","messageId":"2794","endLine":55,"endColumn":65},{"ruleId":"2791","severity":2,"message":"3063","line":158,"column":27,"nodeType":"2793","messageId":"2794","endLine":158,"endColumn":50},{"ruleId":"2791","severity":2,"message":"2888","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3064","line":3,"column":31,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":38},{"ruleId":"3065","severity":2,"message":"3066","line":19,"column":7,"nodeType":"2793","messageId":"3067","endLine":19,"endColumn":17,"fix":"3068"},{"ruleId":"2791","severity":2,"message":"3069","line":13,"column":34,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":46},{"ruleId":"2791","severity":2,"message":"2877","line":14,"column":29,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3039","line":14,"column":46,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3040","line":14,"column":58,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":67},{"ruleId":"2791","severity":2,"message":"3070","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3071","line":78,"column":3,"nodeType":"2793","messageId":"2794","endLine":78,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3072","line":80,"column":3,"nodeType":"2793","messageId":"2794","endLine":80,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3073","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3074","line":240,"column":28,"nodeType":"2793","messageId":"2794","endLine":240,"endColumn":35},{"ruleId":"2791","severity":2,"message":"3075","line":266,"column":40,"nodeType":"2793","messageId":"2794","endLine":266,"endColumn":53},{"ruleId":"2791","severity":2,"message":"3076","line":285,"column":22,"nodeType":"2793","messageId":"2794","endLine":285,"endColumn":30},{"ruleId":"2791","severity":2,"message":"2863","line":7,"column":48,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":57},{"ruleId":"2791","severity":2,"message":"2832","line":27,"column":10,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3077","line":37,"column":30,"nodeType":"2793","messageId":"2794","endLine":37,"endColumn":38},{"ruleId":"2791","severity":2,"message":"3078","line":37,"column":40,"nodeType":"2793","messageId":"2794","endLine":37,"endColumn":51},{"ruleId":"2791","severity":2,"message":"3079","line":50,"column":3,"nodeType":"2793","messageId":"2794","endLine":50,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3080","line":51,"column":3,"nodeType":"2793","messageId":"2794","endLine":51,"endColumn":19},{"ruleId":"2791","severity":2,"message":"2867","line":7,"column":18,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3081","line":7,"column":26,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2984","line":9,"column":10,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3082","line":13,"column":10,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3083","line":13,"column":17,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":33},{"ruleId":"2791","severity":2,"message":"3084","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3085","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3086","line":24,"column":3,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3087","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3088","line":26,"column":3,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3089","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3090","line":45,"column":3,"nodeType":"2793","messageId":"2794","endLine":45,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3091","line":51,"column":3,"nodeType":"2793","messageId":"2794","endLine":51,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3092","line":54,"column":3,"nodeType":"2793","messageId":"2794","endLine":54,"endColumn":28},{"ruleId":"2791","severity":2,"message":"3093","line":55,"column":3,"nodeType":"2793","messageId":"2794","endLine":55,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":64,"column":30,"nodeType":"2783","messageId":"2784","endLine":64,"endColumn":33,"suggestions":"3094"},{"ruleId":"2791","severity":2,"message":"3095","line":70,"column":3,"nodeType":"2793","messageId":"2794","endLine":70,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3096","line":87,"column":10,"nodeType":"2793","messageId":"2794","endLine":87,"endColumn":23},{"ruleId":"2791","severity":2,"message":"3097","line":88,"column":25,"nodeType":"2793","messageId":"2794","endLine":88,"endColumn":41},{"ruleId":"2781","severity":1,"message":"2782","line":88,"column":54,"nodeType":"2783","messageId":"2784","endLine":88,"endColumn":57,"suggestions":"3098"},{"ruleId":"2786","severity":1,"message":"2787","line":399,"column":7,"nodeType":"2788","messageId":"2789","endLine":399,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":408,"column":5,"nodeType":"2788","messageId":"2789","endLine":408,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3099","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3100","line":24,"column":3,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3101","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3042","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":13},{"ruleId":"2791","severity":2,"message":"2839","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3102","line":30,"column":3,"nodeType":"2793","messageId":"2794","endLine":30,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3103","line":33,"column":3,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":17},{"ruleId":"2786","severity":1,"message":"2787","line":157,"column":24,"nodeType":"2788","messageId":"2789","endLine":157,"endColumn":35},{"ruleId":"2781","severity":1,"message":"2782","line":172,"column":67,"nodeType":"2783","messageId":"2784","endLine":172,"endColumn":70,"suggestions":"3104"},{"ruleId":"2786","severity":1,"message":"2787","line":207,"column":7,"nodeType":"2788","messageId":"2789","endLine":207,"endColumn":19},{"ruleId":"2781","severity":1,"message":"2782","line":220,"column":14,"nodeType":"2783","messageId":"2784","endLine":220,"endColumn":17,"suggestions":"3105"},{"ruleId":"2781","severity":1,"message":"2782","line":233,"column":25,"nodeType":"2783","messageId":"2784","endLine":233,"endColumn":28,"suggestions":"3106"},{"ruleId":"2786","severity":1,"message":"2787","line":266,"column":24,"nodeType":"2788","messageId":"2789","endLine":266,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":295,"column":24,"nodeType":"2788","messageId":"2789","endLine":295,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":312,"column":26,"nodeType":"2788","messageId":"2789","endLine":312,"endColumn":37},{"ruleId":"2786","severity":1,"message":"2787","line":324,"column":24,"nodeType":"2788","messageId":"2789","endLine":324,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":335,"column":24,"nodeType":"2788","messageId":"2789","endLine":335,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":346,"column":24,"nodeType":"2788","messageId":"2789","endLine":346,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":363,"column":26,"nodeType":"2788","messageId":"2789","endLine":363,"endColumn":37},{"ruleId":"2791","severity":2,"message":"3107","line":379,"column":3,"nodeType":"2793","messageId":"2794","endLine":379,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3108","line":380,"column":3,"nodeType":"2793","messageId":"2794","endLine":380,"endColumn":22},{"ruleId":"2791","severity":2,"message":"3109","line":392,"column":11,"nodeType":"2793","messageId":"2794","endLine":392,"endColumn":28},{"ruleId":"2781","severity":1,"message":"2782","line":439,"column":18,"nodeType":"2783","messageId":"2784","endLine":439,"endColumn":21,"suggestions":"3110"},{"ruleId":"2791","severity":2,"message":"3070","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2839","line":24,"column":3,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":6},{"ruleId":"2791","severity":2,"message":"2816","line":31,"column":10,"nodeType":"2793","messageId":"2794","endLine":31,"endColumn":15},{"ruleId":"2786","severity":1,"message":"2787","line":117,"column":7,"nodeType":"2788","messageId":"2789","endLine":117,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3103","line":15,"column":35,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":49},{"ruleId":"2791","severity":2,"message":"3111","line":16,"column":26,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":36},{"ruleId":"2781","severity":1,"message":"2782","line":28,"column":13,"nodeType":"2783","messageId":"2784","endLine":28,"endColumn":16,"suggestions":"3112"},{"ruleId":"2791","severity":2,"message":"2980","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3113","line":7,"column":46,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":52},{"ruleId":"2791","severity":2,"message":"3114","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":10},{"ruleId":"2781","severity":1,"message":"2782","line":135,"column":27,"nodeType":"2783","messageId":"2784","endLine":135,"endColumn":30,"suggestions":"3115"},{"ruleId":"2781","severity":1,"message":"2782","line":139,"column":60,"nodeType":"2783","messageId":"2784","endLine":139,"endColumn":63,"suggestions":"3116"},{"ruleId":"2781","severity":1,"message":"2782","line":141,"column":33,"nodeType":"2783","messageId":"2784","endLine":141,"endColumn":36,"suggestions":"3117"},{"ruleId":"2781","severity":1,"message":"2782","line":190,"column":26,"nodeType":"2783","messageId":"2784","endLine":190,"endColumn":29,"suggestions":"3118"},{"ruleId":"2781","severity":1,"message":"2782","line":191,"column":26,"nodeType":"2783","messageId":"2784","endLine":191,"endColumn":29,"suggestions":"3119"},{"ruleId":"2781","severity":1,"message":"2782","line":191,"column":46,"nodeType":"2783","messageId":"2784","endLine":191,"endColumn":49,"suggestions":"3120"},{"ruleId":"2791","severity":2,"message":"3121","line":465,"column":12,"nodeType":"2793","messageId":"2794","endLine":465,"endColumn":24},{"ruleId":"2781","severity":1,"message":"2782","line":465,"column":60,"nodeType":"2783","messageId":"2784","endLine":465,"endColumn":63,"suggestions":"3122"},{"ruleId":"2781","severity":1,"message":"2782","line":466,"column":44,"nodeType":"2783","messageId":"2784","endLine":466,"endColumn":47,"suggestions":"3123"},{"ruleId":"2791","severity":2,"message":"3124","line":467,"column":12,"nodeType":"2793","messageId":"2794","endLine":467,"endColumn":26},{"ruleId":"2781","severity":1,"message":"2782","line":469,"column":37,"nodeType":"2783","messageId":"2784","endLine":469,"endColumn":40,"suggestions":"3125"},{"ruleId":"2781","severity":1,"message":"2782","line":473,"column":36,"nodeType":"2783","messageId":"2784","endLine":473,"endColumn":39,"suggestions":"3126"},{"ruleId":"2791","severity":2,"message":"3127","line":477,"column":32,"nodeType":"2793","messageId":"2794","endLine":477,"endColumn":46},{"ruleId":"2791","severity":2,"message":"3128","line":481,"column":56,"nodeType":"2793","messageId":"2794","endLine":481,"endColumn":73},{"ruleId":"2791","severity":2,"message":"3129","line":492,"column":11,"nodeType":"2793","messageId":"2794","endLine":492,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3130","line":671,"column":13,"nodeType":"2793","messageId":"2794","endLine":671,"endColumn":28},{"ruleId":"2791","severity":2,"message":"3016","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3131","line":87,"column":13,"nodeType":"2793","messageId":"2794","endLine":87,"endColumn":26},{"ruleId":"2781","severity":1,"message":"2782","line":261,"column":24,"nodeType":"2783","messageId":"2784","endLine":261,"endColumn":27,"suggestions":"3132"},{"ruleId":"2791","severity":2,"message":"3133","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":9},{"ruleId":"2781","severity":1,"message":"2782","line":90,"column":40,"nodeType":"2783","messageId":"2784","endLine":90,"endColumn":43,"suggestions":"3134"},{"ruleId":"2791","severity":2,"message":"3135","line":130,"column":21,"nodeType":"2793","messageId":"2794","endLine":130,"endColumn":29},{"ruleId":"2791","severity":2,"message":"3136","line":130,"column":31,"nodeType":"2793","messageId":"2794","endLine":130,"endColumn":40},{"ruleId":"2791","severity":2,"message":"3137","line":130,"column":42,"nodeType":"2793","messageId":"2794","endLine":130,"endColumn":50},{"ruleId":"2781","severity":1,"message":"2782","line":133,"column":56,"nodeType":"2783","messageId":"2784","endLine":133,"endColumn":59,"suggestions":"3138"},{"ruleId":"2791","severity":2,"message":"3139","line":134,"column":29,"nodeType":"2793","messageId":"2794","endLine":134,"endColumn":49},{"ruleId":"2786","severity":1,"message":"2787","line":179,"column":9,"nodeType":"2788","messageId":"2789","endLine":179,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":194,"column":9,"nodeType":"2788","messageId":"2789","endLine":194,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3140","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":13},{"ruleId":"2791","severity":2,"message":"2832","line":15,"column":10,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":137,"column":13,"nodeType":"2788","messageId":"2789","endLine":137,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3141","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3016","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3142","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3143","line":3,"column":68,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":77},{"ruleId":"2791","severity":2,"message":"2988","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3144","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3145","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3146","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3147","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":10},{"ruleId":"3148","severity":2,"message":"3149","line":50,"column":7,"nodeType":"3150","messageId":"3151","endLine":50,"endColumn":20,"suggestions":"3152"},{"ruleId":"3148","severity":2,"message":"3149","line":52,"column":9,"nodeType":"3150","messageId":"3151","endLine":52,"endColumn":22,"suggestions":"3153"},{"ruleId":"3148","severity":2,"message":"3149","line":61,"column":7,"nodeType":"3150","messageId":"3151","endLine":61,"endColumn":20,"suggestions":"3154"},{"ruleId":"3148","severity":2,"message":"3149","line":71,"column":7,"nodeType":"3150","messageId":"3151","endLine":71,"endColumn":20,"suggestions":"3155"},{"ruleId":"3148","severity":2,"message":"3149","line":73,"column":9,"nodeType":"3150","messageId":"3151","endLine":73,"endColumn":22,"suggestions":"3156"},{"ruleId":"3148","severity":2,"message":"3149","line":105,"column":9,"nodeType":"3150","messageId":"3151","endLine":105,"endColumn":22,"suggestions":"3157"},{"ruleId":"3148","severity":2,"message":"3149","line":107,"column":11,"nodeType":"3150","messageId":"3151","endLine":107,"endColumn":24,"suggestions":"3158"},{"ruleId":"2786","severity":1,"message":"2787","line":133,"column":9,"nodeType":"2788","messageId":"2789","endLine":133,"endColumn":21},{"ruleId":"2791","severity":2,"message":"3159","line":159,"column":21,"nodeType":"2793","messageId":"2794","endLine":159,"endColumn":33},{"ruleId":"3148","severity":2,"message":"3149","line":163,"column":5,"nodeType":"3150","messageId":"3151","endLine":163,"endColumn":18,"suggestions":"3160"},{"ruleId":"2791","severity":2,"message":"3161","line":3,"column":51,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":57},{"ruleId":"2791","severity":2,"message":"3162","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3146","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2890","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3163","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":8},{"ruleId":"2781","severity":1,"message":"2782","line":56,"column":10,"nodeType":"2783","messageId":"2784","endLine":56,"endColumn":13,"suggestions":"3164"},{"ruleId":"2786","severity":1,"message":"2787","line":129,"column":7,"nodeType":"2788","messageId":"2789","endLine":129,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":139,"column":7,"nodeType":"2788","messageId":"2789","endLine":139,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":152,"column":7,"nodeType":"2788","messageId":"2789","endLine":152,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":170,"column":9,"nodeType":"2788","messageId":"2789","endLine":170,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":193,"column":7,"nodeType":"2788","messageId":"2789","endLine":193,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":238,"column":7,"nodeType":"2788","messageId":"2789","endLine":238,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":271,"column":7,"nodeType":"2788","messageId":"2789","endLine":271,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":297,"column":9,"nodeType":"2788","messageId":"2789","endLine":297,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":340,"column":7,"nodeType":"2788","messageId":"2789","endLine":340,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":787,"column":55,"nodeType":"2783","messageId":"2784","endLine":787,"endColumn":58,"suggestions":"3165"},{"ruleId":"2786","severity":1,"message":"2787","line":798,"column":7,"nodeType":"2788","messageId":"2789","endLine":798,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3166","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3036","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":14},{"ruleId":"2791","severity":2,"message":"3147","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":10},{"ruleId":"2786","severity":1,"message":"2787","line":101,"column":9,"nodeType":"2788","messageId":"2789","endLine":101,"endColumn":22},{"ruleId":"3148","severity":2,"message":"3149","line":321,"column":11,"nodeType":"3150","messageId":"3151","endLine":321,"endColumn":64,"suggestions":"3167"},{"ruleId":"2786","severity":1,"message":"2787","line":386,"column":9,"nodeType":"2788","messageId":"2789","endLine":386,"endColumn":21},{"ruleId":"2791","severity":2,"message":"3168","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3169","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3170","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":8},{"ruleId":"2781","severity":1,"message":"2782","line":31,"column":9,"nodeType":"2783","messageId":"2784","endLine":31,"endColumn":12,"suggestions":"3171"},{"ruleId":"2781","severity":1,"message":"2782","line":43,"column":9,"nodeType":"2783","messageId":"2784","endLine":43,"endColumn":12,"suggestions":"3172"},{"ruleId":"2781","severity":1,"message":"2782","line":152,"column":38,"nodeType":"2783","messageId":"2784","endLine":152,"endColumn":41,"suggestions":"3173"},{"ruleId":"2781","severity":1,"message":"2782","line":173,"column":45,"nodeType":"2783","messageId":"2784","endLine":173,"endColumn":48,"suggestions":"3174"},{"ruleId":"2786","severity":1,"message":"2787","line":266,"column":7,"nodeType":"2788","messageId":"2789","endLine":266,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":274,"column":11,"nodeType":"2783","messageId":"2784","endLine":274,"endColumn":14,"suggestions":"3175"},{"ruleId":"2786","severity":1,"message":"2787","line":304,"column":7,"nodeType":"2788","messageId":"2789","endLine":304,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":355,"column":11,"nodeType":"2788","messageId":"2789","endLine":355,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":370,"column":7,"nodeType":"2788","messageId":"2789","endLine":370,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":393,"column":7,"nodeType":"2788","messageId":"2789","endLine":393,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":403,"column":7,"nodeType":"2788","messageId":"2789","endLine":403,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":414,"column":7,"nodeType":"2788","messageId":"2789","endLine":414,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":454,"column":7,"nodeType":"2788","messageId":"2789","endLine":454,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":461,"column":11,"nodeType":"2783","messageId":"2784","endLine":461,"endColumn":14,"suggestions":"3176"},{"ruleId":"2786","severity":1,"message":"2787","line":469,"column":7,"nodeType":"2788","messageId":"2789","endLine":469,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":478,"column":7,"nodeType":"2788","messageId":"2789","endLine":478,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3161","line":3,"column":51,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":57},{"ruleId":"2791","severity":2,"message":"3133","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3162","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3177","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2839","line":25,"column":3,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3170","line":26,"column":3,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":8},{"ruleId":"2791","severity":2,"message":"3178","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":11},{"ruleId":"2781","severity":1,"message":"2782","line":34,"column":54,"nodeType":"2783","messageId":"2784","endLine":34,"endColumn":57,"suggestions":"3179"},{"ruleId":"2786","severity":1,"message":"2787","line":84,"column":7,"nodeType":"2788","messageId":"2789","endLine":84,"endColumn":20},{"ruleId":"3148","severity":2,"message":"3149","line":108,"column":7,"nodeType":"3150","messageId":"3151","endLine":108,"endColumn":66,"suggestions":"3180"},{"ruleId":"3148","severity":2,"message":"3149","line":122,"column":5,"nodeType":"3150","messageId":"3151","endLine":122,"endColumn":18,"suggestions":"3181"},{"ruleId":"2786","severity":1,"message":"2787","line":173,"column":7,"nodeType":"2788","messageId":"2789","endLine":173,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":205,"column":7,"nodeType":"2788","messageId":"2789","endLine":205,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":231,"column":7,"nodeType":"2788","messageId":"2789","endLine":231,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":249,"column":50,"nodeType":"2783","messageId":"2784","endLine":249,"endColumn":53,"suggestions":"3182"},{"ruleId":"2786","severity":1,"message":"2787","line":277,"column":7,"nodeType":"2788","messageId":"2789","endLine":277,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":297,"column":7,"nodeType":"2788","messageId":"2789","endLine":297,"endColumn":20},{"ruleId":"3148","severity":2,"message":"3149","line":324,"column":9,"nodeType":"3150","messageId":"3151","endLine":324,"endColumn":66,"suggestions":"3183"},{"ruleId":"3148","severity":2,"message":"3149","line":326,"column":11,"nodeType":"3150","messageId":"3151","endLine":326,"endColumn":24,"suggestions":"3184"},{"ruleId":"2786","severity":1,"message":"2787","line":346,"column":9,"nodeType":"2788","messageId":"2789","endLine":346,"endColumn":21},{"ruleId":"2791","severity":2,"message":"3185","line":434,"column":21,"nodeType":"2793","messageId":"2794","endLine":434,"endColumn":35},{"ruleId":"2786","severity":1,"message":"2787","line":498,"column":7,"nodeType":"2788","messageId":"2789","endLine":498,"endColumn":20},{"ruleId":"2791","severity":2,"message":"2831","line":6,"column":10,"nodeType":"2793","messageId":"2794","endLine":6,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3186","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3133","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3036","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":14},{"ruleId":"2786","severity":1,"message":"2787","line":209,"column":9,"nodeType":"2788","messageId":"2789","endLine":209,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":267,"column":40,"nodeType":"2783","messageId":"2784","endLine":267,"endColumn":43,"suggestions":"3187"},{"ruleId":"2786","severity":1,"message":"2787","line":401,"column":9,"nodeType":"2788","messageId":"2789","endLine":401,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":410,"column":9,"nodeType":"2788","messageId":"2789","endLine":410,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":531,"column":7,"nodeType":"2788","messageId":"2789","endLine":531,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3188","line":9,"column":41,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":54},{"ruleId":"2791","severity":2,"message":"3189","line":11,"column":10,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":21},{"ruleId":"2791","severity":2,"message":"2865","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2838","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":8},{"ruleId":"2791","severity":2,"message":"3101","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":15},{"ruleId":"2791","severity":2,"message":"2888","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3041","line":24,"column":3,"nodeType":"2793","messageId":"2794","endLine":24,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3190","line":26,"column":3,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2990","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2890","line":28,"column":3,"nodeType":"2793","messageId":"2794","endLine":28,"endColumn":13},{"ruleId":"2791","severity":2,"message":"2924","line":8,"column":37,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":41},{"ruleId":"2791","severity":2,"message":"2923","line":8,"column":43,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":48},{"ruleId":"2791","severity":2,"message":"2887","line":8,"column":50,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3191","line":9,"column":16,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":27},{"ruleId":"2791","severity":2,"message":"2984","line":10,"column":10,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2831","line":11,"column":10,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":15},{"ruleId":"2781","severity":1,"message":"2782","line":60,"column":33,"nodeType":"2783","messageId":"2784","endLine":60,"endColumn":36,"suggestions":"3192"},{"ruleId":"2781","severity":1,"message":"2782","line":97,"column":30,"nodeType":"2783","messageId":"2784","endLine":97,"endColumn":33,"suggestions":"3193"},{"ruleId":"2791","severity":2,"message":"2871","line":121,"column":31,"nodeType":"2793","messageId":"2794","endLine":121,"endColumn":36},{"ruleId":"2781","severity":1,"message":"2782","line":196,"column":9,"nodeType":"2783","messageId":"2784","endLine":196,"endColumn":12,"suggestions":"3194"},{"ruleId":"2781","severity":1,"message":"2782","line":197,"column":23,"nodeType":"2783","messageId":"2784","endLine":197,"endColumn":26,"suggestions":"3195"},{"ruleId":"2781","severity":1,"message":"2782","line":198,"column":28,"nodeType":"2783","messageId":"2784","endLine":198,"endColumn":31,"suggestions":"3196"},{"ruleId":"2781","severity":1,"message":"2782","line":199,"column":25,"nodeType":"2783","messageId":"2784","endLine":199,"endColumn":28,"suggestions":"3197"},{"ruleId":"2791","severity":2,"message":"3198","line":124,"column":39,"nodeType":"2793","messageId":"2794","endLine":124,"endColumn":58},{"ruleId":"2791","severity":2,"message":"3199","line":377,"column":81,"nodeType":"2793","messageId":"2794","endLine":377,"endColumn":97},{"ruleId":"2791","severity":2,"message":"3199","line":454,"column":61,"nodeType":"2793","messageId":"2794","endLine":454,"endColumn":77},{"ruleId":"2791","severity":2,"message":"3200","line":553,"column":10,"nodeType":"2793","messageId":"2794","endLine":553,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3201","line":553,"column":22,"nodeType":"2793","messageId":"2794","endLine":553,"endColumn":35},{"ruleId":"2791","severity":2,"message":"3202","line":556,"column":54,"nodeType":"2793","messageId":"2794","endLine":556,"endColumn":86},{"ruleId":"2791","severity":2,"message":"3203","line":570,"column":11,"nodeType":"2793","messageId":"2794","endLine":570,"endColumn":21},{"ruleId":"2781","severity":1,"message":"2782","line":577,"column":47,"nodeType":"2783","messageId":"2784","endLine":577,"endColumn":50,"suggestions":"3204"},{"ruleId":"2791","severity":2,"message":"3199","line":577,"column":52,"nodeType":"2793","messageId":"2794","endLine":577,"endColumn":68},{"ruleId":"2791","severity":2,"message":"3205","line":419,"column":10,"nodeType":"2793","messageId":"2794","endLine":419,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3206","line":99,"column":9,"nodeType":"2793","messageId":"2794","endLine":99,"endColumn":21},{"ruleId":"2791","severity":2,"message":"2887","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2980","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3028","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":17},{"ruleId":"2791","severity":2,"message":"3207","line":218,"column":9,"nodeType":"2793","messageId":"2794","endLine":218,"endColumn":21},{"ruleId":"2791","severity":2,"message":"2923","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":8},{"ruleId":"2791","severity":2,"message":"3042","line":15,"column":3,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3208","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3146","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2867","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2898","line":26,"column":10,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":16},{"ruleId":"2791","severity":2,"message":"2899","line":26,"column":18,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":32},{"ruleId":"2791","severity":2,"message":"2900","line":26,"column":34,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":45},{"ruleId":"2781","severity":1,"message":"2782","line":38,"column":29,"nodeType":"2783","messageId":"2784","endLine":38,"endColumn":32,"suggestions":"3209"},{"ruleId":"2781","severity":1,"message":"2782","line":53,"column":9,"nodeType":"2783","messageId":"2784","endLine":53,"endColumn":12,"suggestions":"3210"},{"ruleId":"2786","severity":1,"message":"2787","line":80,"column":9,"nodeType":"2788","messageId":"2789","endLine":80,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":96,"column":11,"nodeType":"2788","messageId":"2789","endLine":96,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":102,"column":9,"nodeType":"2788","messageId":"2789","endLine":102,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":108,"column":9,"nodeType":"2788","messageId":"2789","endLine":108,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":140,"column":9,"nodeType":"2788","messageId":"2789","endLine":140,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":150,"column":37,"nodeType":"2788","messageId":"2789","endLine":150,"endColumn":50},{"ruleId":"2781","severity":1,"message":"2782","line":171,"column":41,"nodeType":"2783","messageId":"2784","endLine":171,"endColumn":44,"suggestions":"3211"},{"ruleId":"2781","severity":1,"message":"2782","line":188,"column":48,"nodeType":"2783","messageId":"2784","endLine":188,"endColumn":51,"suggestions":"3212"},{"ruleId":"2781","severity":1,"message":"2782","line":206,"column":41,"nodeType":"2783","messageId":"2784","endLine":206,"endColumn":44,"suggestions":"3213"},{"ruleId":"2781","severity":1,"message":"2782","line":410,"column":72,"nodeType":"2783","messageId":"2784","endLine":410,"endColumn":75,"suggestions":"3214"},{"ruleId":"2791","severity":2,"message":"2863","line":7,"column":17,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":26},{"ruleId":"2791","severity":2,"message":"3215","line":25,"column":26,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":40},{"ruleId":"2791","severity":2,"message":"3161","line":3,"column":38,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3216","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":10},{"ruleId":"2791","severity":2,"message":"2989","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2866","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3217","line":29,"column":10,"nodeType":"2793","messageId":"2794","endLine":29,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2875","line":60,"column":11,"nodeType":"2793","messageId":"2794","endLine":60,"endColumn":18},{"ruleId":"2791","severity":2,"message":"3218","line":322,"column":10,"nodeType":"2793","messageId":"2794","endLine":322,"endColumn":28},{"ruleId":"2791","severity":2,"message":"3219","line":322,"column":30,"nodeType":"2793","messageId":"2794","endLine":322,"endColumn":51},{"ruleId":"2781","severity":1,"message":"2782","line":10,"column":35,"nodeType":"2783","messageId":"2784","endLine":10,"endColumn":38,"suggestions":"3220"},{"ruleId":"2781","severity":1,"message":"2782","line":12,"column":35,"nodeType":"2783","messageId":"2784","endLine":12,"endColumn":38,"suggestions":"3221"},{"ruleId":"2781","severity":1,"message":"2782","line":27,"column":45,"nodeType":"2783","messageId":"2784","endLine":27,"endColumn":48,"suggestions":"3222"},{"ruleId":"2781","severity":1,"message":"2782","line":35,"column":24,"nodeType":"2783","messageId":"2784","endLine":35,"endColumn":27,"suggestions":"3223"},{"ruleId":"2781","severity":1,"message":"2782","line":36,"column":31,"nodeType":"2783","messageId":"2784","endLine":36,"endColumn":34,"suggestions":"3224"},{"ruleId":"2781","severity":1,"message":"2782","line":37,"column":35,"nodeType":"2783","messageId":"2784","endLine":37,"endColumn":38,"suggestions":"3225"},{"ruleId":"2781","severity":1,"message":"2782","line":38,"column":30,"nodeType":"2783","messageId":"2784","endLine":38,"endColumn":33,"suggestions":"3226"},{"ruleId":"2781","severity":1,"message":"2782","line":39,"column":29,"nodeType":"2783","messageId":"2784","endLine":39,"endColumn":32,"suggestions":"3227"},{"ruleId":"2781","severity":1,"message":"2782","line":43,"column":36,"nodeType":"2783","messageId":"2784","endLine":43,"endColumn":39,"suggestions":"3228"},{"ruleId":"2781","severity":1,"message":"2782","line":51,"column":26,"nodeType":"2783","messageId":"2784","endLine":51,"endColumn":29,"suggestions":"3229"},{"ruleId":"2781","severity":1,"message":"2782","line":52,"column":34,"nodeType":"2783","messageId":"2784","endLine":52,"endColumn":37,"suggestions":"3230"},{"ruleId":"2781","severity":1,"message":"2782","line":53,"column":31,"nodeType":"2783","messageId":"2784","endLine":53,"endColumn":34,"suggestions":"3231"},{"ruleId":"2781","severity":1,"message":"2782","line":57,"column":25,"nodeType":"2783","messageId":"2784","endLine":57,"endColumn":28,"suggestions":"3232"},{"ruleId":null,"fatal":true,"severity":2,"message":"3233","line":847,"column":18,"nodeType":null},{"ruleId":"2791","severity":2,"message":"2864","line":4,"column":18,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":33},{"ruleId":"2791","severity":2,"message":"3234","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2994","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2989","line":18,"column":3,"nodeType":"2793","messageId":"2794","endLine":18,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2887","line":19,"column":3,"nodeType":"2793","messageId":"2794","endLine":19,"endColumn":9},{"ruleId":"2781","severity":1,"message":"2782","line":171,"column":17,"nodeType":"2783","messageId":"2784","endLine":171,"endColumn":20,"suggestions":"3235"},{"ruleId":"2781","severity":1,"message":"2782","line":299,"column":17,"nodeType":"2783","messageId":"2784","endLine":299,"endColumn":20,"suggestions":"3236"},{"ruleId":"2791","severity":2,"message":"3237","line":424,"column":10,"nodeType":"2793","messageId":"2794","endLine":424,"endColumn":18},{"ruleId":"2791","severity":2,"message":"3238","line":424,"column":20,"nodeType":"2793","messageId":"2794","endLine":424,"endColumn":31},{"ruleId":"2791","severity":2,"message":"3239","line":433,"column":36,"nodeType":"2793","messageId":"2794","endLine":433,"endColumn":51},{"ruleId":"2791","severity":2,"message":"3240","line":437,"column":32,"nodeType":"2793","messageId":"2794","endLine":437,"endColumn":41},{"ruleId":"2781","severity":1,"message":"2782","line":437,"column":38,"nodeType":"2783","messageId":"2784","endLine":437,"endColumn":41,"suggestions":"3241"},{"ruleId":"2791","severity":2,"message":"2866","line":9,"column":3,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2989","line":10,"column":3,"nodeType":"2793","messageId":"2794","endLine":10,"endColumn":7},{"ruleId":"2791","severity":2,"message":"3234","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2867","line":14,"column":3,"nodeType":"2793","messageId":"2794","endLine":14,"endColumn":9},{"ruleId":"2791","severity":2,"message":"3242","line":16,"column":3,"nodeType":"2793","messageId":"2794","endLine":16,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3243","line":20,"column":3,"nodeType":"2793","messageId":"2794","endLine":20,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2877","line":25,"column":29,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":44},{"ruleId":"2791","severity":2,"message":"3039","line":25,"column":46,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":56},{"ruleId":"2791","severity":2,"message":"3040","line":25,"column":58,"nodeType":"2793","messageId":"2794","endLine":25,"endColumn":67},{"ruleId":"2781","severity":1,"message":"2782","line":255,"column":17,"nodeType":"2783","messageId":"2784","endLine":255,"endColumn":20,"suggestions":"3244"},{"ruleId":"2791","severity":2,"message":"3239","line":436,"column":14,"nodeType":"2793","messageId":"2794","endLine":436,"endColumn":29},{"ruleId":"2791","severity":2,"message":"3240","line":441,"column":32,"nodeType":"2793","messageId":"2794","endLine":441,"endColumn":41},{"ruleId":"2781","severity":1,"message":"2782","line":441,"column":38,"nodeType":"2783","messageId":"2784","endLine":441,"endColumn":41,"suggestions":"3245"},{"ruleId":"2791","severity":2,"message":"3246","line":530,"column":35,"nodeType":"2793","messageId":"2794","endLine":530,"endColumn":49},{"ruleId":"2781","severity":1,"message":"2782","line":641,"column":65,"nodeType":"2783","messageId":"2784","endLine":641,"endColumn":68,"suggestions":"3247"},{"ruleId":"2781","severity":1,"message":"2782","line":654,"column":67,"nodeType":"2783","messageId":"2784","endLine":654,"endColumn":70,"suggestions":"3248"},{"ruleId":"2791","severity":2,"message":"3249","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":16},{"ruleId":"2781","severity":1,"message":"2782","line":133,"column":25,"nodeType":"2783","messageId":"2784","endLine":133,"endColumn":28,"suggestions":"3250"},{"ruleId":"2781","severity":1,"message":"2782","line":136,"column":25,"nodeType":"2783","messageId":"2784","endLine":136,"endColumn":28,"suggestions":"3251"},{"ruleId":"2781","severity":1,"message":"2782","line":507,"column":25,"nodeType":"2783","messageId":"2784","endLine":507,"endColumn":28,"suggestions":"3252"},{"ruleId":"2781","severity":1,"message":"2782","line":527,"column":25,"nodeType":"2783","messageId":"2784","endLine":527,"endColumn":28,"suggestions":"3253"},{"ruleId":"2791","severity":2,"message":"3254","line":12,"column":3,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3255","line":13,"column":3,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3256","line":561,"column":13,"nodeType":"2793","messageId":"2794","endLine":561,"endColumn":17},{"ruleId":"2791","severity":2,"message":"3257","line":7,"column":26,"nodeType":"2793","messageId":"2794","endLine":7,"endColumn":35},{"ruleId":"2791","severity":2,"message":"3249","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3258","line":57,"column":35,"nodeType":"2793","messageId":"2794","endLine":57,"endColumn":61},{"ruleId":"2791","severity":2,"message":"3259","line":777,"column":13,"nodeType":"2793","messageId":"2794","endLine":777,"endColumn":29},{"ruleId":"2781","severity":1,"message":"2782","line":139,"column":20,"nodeType":"2783","messageId":"2784","endLine":139,"endColumn":23,"suggestions":"3260"},{"ruleId":"2791","severity":2,"message":"3249","line":11,"column":3,"nodeType":"2793","messageId":"2794","endLine":11,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3261","line":17,"column":3,"nodeType":"2793","messageId":"2794","endLine":17,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3254","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":15},{"ruleId":"2791","severity":2,"message":"3255","line":23,"column":3,"nodeType":"2793","messageId":"2794","endLine":23,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3262","line":47,"column":3,"nodeType":"2793","messageId":"2794","endLine":47,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":60,"column":28,"nodeType":"2783","messageId":"2784","endLine":60,"endColumn":31,"suggestions":"3263"},{"ruleId":"2781","severity":1,"message":"2782","line":41,"column":35,"nodeType":"2783","messageId":"2784","endLine":41,"endColumn":38,"suggestions":"3264"},{"ruleId":"2791","severity":2,"message":"3265","line":4,"column":23,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3266","line":32,"column":3,"nodeType":"2793","messageId":"2794","endLine":32,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3267","line":33,"column":3,"nodeType":"2793","messageId":"2794","endLine":33,"endColumn":18},{"ruleId":"2791","severity":2,"message":"2864","line":3,"column":18,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":33},{"ruleId":"2791","severity":2,"message":"3268","line":93,"column":11,"nodeType":"2793","messageId":"2794","endLine":93,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3269","line":57,"column":25,"nodeType":"2793","messageId":"2794","endLine":57,"endColumn":30},{"ruleId":"2791","severity":2,"message":"3269","line":58,"column":26,"nodeType":"2793","messageId":"2794","endLine":58,"endColumn":31},{"ruleId":null,"fatal":true,"severity":2,"message":"2896","line":8,"column":0,"nodeType":null},{"ruleId":"2791","severity":2,"message":"2864","line":2,"column":18,"nodeType":"2793","messageId":"2794","endLine":2,"endColumn":33},{"ruleId":"2791","severity":2,"message":"2887","line":3,"column":33,"nodeType":"2793","messageId":"2794","endLine":3,"endColumn":39},{"ruleId":"2791","severity":2,"message":"2832","line":9,"column":10,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":19},{"ruleId":"2781","severity":1,"message":"2782","line":43,"column":49,"nodeType":"2783","messageId":"2784","endLine":43,"endColumn":52,"suggestions":"3270"},{"ruleId":"2786","severity":1,"message":"2787","line":87,"column":9,"nodeType":"2788","messageId":"2789","endLine":87,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3028","line":4,"column":10,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":24},{"ruleId":"2791","severity":2,"message":"2924","line":4,"column":47,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":51},{"ruleId":"2791","severity":2,"message":"3271","line":21,"column":3,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":17},{"ruleId":"2781","severity":1,"message":"2782","line":141,"column":21,"nodeType":"2783","messageId":"2784","endLine":141,"endColumn":24,"suggestions":"3272"},{"ruleId":"2781","severity":1,"message":"2782","line":156,"column":21,"nodeType":"2783","messageId":"2784","endLine":156,"endColumn":24,"suggestions":"3273"},{"ruleId":"2786","severity":1,"message":"2787","line":160,"column":7,"nodeType":"2788","messageId":"2789","endLine":160,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":189,"column":21,"nodeType":"2783","messageId":"2784","endLine":189,"endColumn":24,"suggestions":"3274"},{"ruleId":"2781","severity":1,"message":"2782","line":203,"column":21,"nodeType":"2783","messageId":"2784","endLine":203,"endColumn":24,"suggestions":"3275"},{"ruleId":"2786","severity":1,"message":"2787","line":204,"column":7,"nodeType":"2788","messageId":"2789","endLine":204,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":34,"column":12,"nodeType":"2783","messageId":"2784","endLine":34,"endColumn":15,"suggestions":"3276"},{"ruleId":"2781","severity":1,"message":"2782","line":94,"column":49,"nodeType":"2783","messageId":"2784","endLine":94,"endColumn":52,"suggestions":"3277"},{"ruleId":"2781","severity":1,"message":"2782","line":95,"column":60,"nodeType":"2783","messageId":"2784","endLine":95,"endColumn":63,"suggestions":"3278"},{"ruleId":"2781","severity":1,"message":"2782","line":149,"column":67,"nodeType":"2783","messageId":"2784","endLine":149,"endColumn":70,"suggestions":"3279"},{"ruleId":"2786","severity":1,"message":"2787","line":239,"column":11,"nodeType":"2788","messageId":"2789","endLine":239,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":256,"column":9,"nodeType":"2788","messageId":"2789","endLine":256,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":264,"column":7,"nodeType":"2788","messageId":"2789","endLine":264,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":316,"column":68,"nodeType":"2783","messageId":"2784","endLine":316,"endColumn":71,"suggestions":"3280"},{"ruleId":"2786","severity":1,"message":"2787","line":318,"column":7,"nodeType":"2788","messageId":"2789","endLine":318,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":333,"column":7,"nodeType":"2788","messageId":"2789","endLine":333,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":340,"column":79,"nodeType":"2783","messageId":"2784","endLine":340,"endColumn":82,"suggestions":"3281"},{"ruleId":"3282","severity":2,"message":"3283","line":385,"column":9,"nodeType":"3284","messageId":"2789","endLine":385,"endColumn":70},{"ruleId":"2786","severity":1,"message":"2787","line":391,"column":15,"nodeType":"2788","messageId":"2789","endLine":391,"endColumn":28},{"ruleId":"2781","severity":1,"message":"2782","line":406,"column":10,"nodeType":"2783","messageId":"2784","endLine":406,"endColumn":13,"suggestions":"3285"},{"ruleId":"2781","severity":1,"message":"2782","line":588,"column":84,"nodeType":"2783","messageId":"2784","endLine":588,"endColumn":87,"suggestions":"3286"},{"ruleId":"2781","severity":1,"message":"2782","line":605,"column":10,"nodeType":"2783","messageId":"2784","endLine":605,"endColumn":13,"suggestions":"3287"},{"ruleId":"2781","severity":1,"message":"2782","line":608,"column":46,"nodeType":"2783","messageId":"2784","endLine":608,"endColumn":49,"suggestions":"3288"},{"ruleId":"2786","severity":1,"message":"2787","line":112,"column":7,"nodeType":"2788","messageId":"2789","endLine":112,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":146,"column":7,"nodeType":"2788","messageId":"2789","endLine":146,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3289","line":218,"column":45,"nodeType":"2793","messageId":"2794","endLine":218,"endColumn":58},{"ruleId":"2791","severity":2,"message":"3290","line":276,"column":10,"nodeType":"2793","messageId":"2794","endLine":276,"endColumn":25},{"ruleId":"2781","severity":1,"message":"2782","line":34,"column":32,"nodeType":"2783","messageId":"2784","endLine":34,"endColumn":35,"suggestions":"3291"},{"ruleId":"2786","severity":1,"message":"2787","line":171,"column":7,"nodeType":"2788","messageId":"2789","endLine":171,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":299,"column":5,"nodeType":"2788","messageId":"2789","endLine":299,"endColumn":18},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2781","severity":1,"message":"2782","line":18,"column":17,"nodeType":"2783","messageId":"2784","endLine":18,"endColumn":20,"suggestions":"3293"},{"ruleId":"2781","severity":1,"message":"2782","line":79,"column":44,"nodeType":"2783","messageId":"2784","endLine":79,"endColumn":47,"suggestions":"3294"},{"ruleId":"2781","severity":1,"message":"2782","line":129,"column":53,"nodeType":"2783","messageId":"2784","endLine":129,"endColumn":56,"suggestions":"3295"},{"ruleId":"2781","severity":1,"message":"2782","line":154,"column":45,"nodeType":"2783","messageId":"2784","endLine":154,"endColumn":48,"suggestions":"3296"},{"ruleId":"2781","severity":1,"message":"2782","line":170,"column":45,"nodeType":"2783","messageId":"2784","endLine":170,"endColumn":48,"suggestions":"3297"},{"ruleId":"2781","severity":1,"message":"2782","line":198,"column":51,"nodeType":"2783","messageId":"2784","endLine":198,"endColumn":54,"suggestions":"3298"},{"ruleId":"2781","severity":1,"message":"2782","line":213,"column":67,"nodeType":"2783","messageId":"2784","endLine":213,"endColumn":70,"suggestions":"3299"},{"ruleId":"2781","severity":1,"message":"2782","line":243,"column":61,"nodeType":"2783","messageId":"2784","endLine":243,"endColumn":64,"suggestions":"3300"},{"ruleId":"2781","severity":1,"message":"2782","line":285,"column":43,"nodeType":"2783","messageId":"2784","endLine":285,"endColumn":46,"suggestions":"3301"},{"ruleId":"2781","severity":1,"message":"2782","line":293,"column":41,"nodeType":"2783","messageId":"2784","endLine":293,"endColumn":44,"suggestions":"3302"},{"ruleId":"2781","severity":1,"message":"2782","line":301,"column":45,"nodeType":"2783","messageId":"2784","endLine":301,"endColumn":48,"suggestions":"3303"},{"ruleId":"2781","severity":1,"message":"2782","line":321,"column":53,"nodeType":"2783","messageId":"2784","endLine":321,"endColumn":56,"suggestions":"3304"},{"ruleId":"2781","severity":1,"message":"2782","line":336,"column":70,"nodeType":"2783","messageId":"2784","endLine":336,"endColumn":73,"suggestions":"3305"},{"ruleId":"2781","severity":1,"message":"2782","line":366,"column":51,"nodeType":"2783","messageId":"2784","endLine":366,"endColumn":54,"suggestions":"3306"},{"ruleId":"2781","severity":1,"message":"2782","line":396,"column":59,"nodeType":"2783","messageId":"2784","endLine":396,"endColumn":62,"suggestions":"3307"},{"ruleId":"2781","severity":1,"message":"2782","line":424,"column":44,"nodeType":"2783","messageId":"2784","endLine":424,"endColumn":47,"suggestions":"3308"},{"ruleId":"2781","severity":1,"message":"2782","line":485,"column":55,"nodeType":"2783","messageId":"2784","endLine":485,"endColumn":58,"suggestions":"3309"},{"ruleId":"2786","severity":1,"message":"2787","line":555,"column":7,"nodeType":"2788","messageId":"2789","endLine":555,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":562,"column":49,"nodeType":"2783","messageId":"2784","endLine":562,"endColumn":52,"suggestions":"3310"},{"ruleId":"2781","severity":1,"message":"2782","line":648,"column":47,"nodeType":"2783","messageId":"2784","endLine":648,"endColumn":50,"suggestions":"3311"},{"ruleId":"2791","severity":2,"message":"3312","line":4,"column":27,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":39},{"ruleId":"2786","severity":1,"message":"2787","line":69,"column":7,"nodeType":"2788","messageId":"2789","endLine":69,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":96,"column":7,"nodeType":"2788","messageId":"2789","endLine":96,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":121,"column":7,"nodeType":"2788","messageId":"2789","endLine":121,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":137,"column":7,"nodeType":"2788","messageId":"2789","endLine":137,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":171,"column":7,"nodeType":"2788","messageId":"2789","endLine":171,"endColumn":20},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":4,"column":11,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"2896","line":5,"column":0,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3313","line":6,"column":4,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2781","severity":1,"message":"2782","line":7,"column":37,"nodeType":"2783","messageId":"2784","endLine":7,"endColumn":40,"suggestions":"3314"},{"ruleId":"2781","severity":1,"message":"2782","line":19,"column":35,"nodeType":"2783","messageId":"2784","endLine":19,"endColumn":38,"suggestions":"3315"},{"ruleId":"2781","severity":1,"message":"2782","line":51,"column":49,"nodeType":"2783","messageId":"2784","endLine":51,"endColumn":52,"suggestions":"3316"},{"ruleId":null,"fatal":true,"severity":2,"message":"3317","line":8,"column":2,"nodeType":null},{"ruleId":"2791","severity":2,"message":"3318","line":15,"column":10,"nodeType":"2793","messageId":"2794","endLine":15,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":73,"column":20,"nodeType":"2783","messageId":"2784","endLine":73,"endColumn":23,"suggestions":"3319"},{"ruleId":"2786","severity":1,"message":"2787","line":110,"column":7,"nodeType":"2788","messageId":"2789","endLine":110,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":112,"column":7,"nodeType":"2788","messageId":"2789","endLine":112,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":136,"column":25,"nodeType":"2783","messageId":"2784","endLine":136,"endColumn":28,"suggestions":"3320"},{"ruleId":"2781","severity":1,"message":"2782","line":185,"column":73,"nodeType":"2783","messageId":"2784","endLine":185,"endColumn":76,"suggestions":"3321"},{"ruleId":"2781","severity":1,"message":"2782","line":186,"column":68,"nodeType":"2783","messageId":"2784","endLine":186,"endColumn":71,"suggestions":"3322"},{"ruleId":"2786","severity":1,"message":"2787","line":192,"column":7,"nodeType":"2788","messageId":"2789","endLine":192,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":332,"column":11,"nodeType":"2788","messageId":"2789","endLine":332,"endColumn":24},{"ruleId":"2781","severity":1,"message":"2782","line":444,"column":37,"nodeType":"2783","messageId":"2784","endLine":444,"endColumn":40,"suggestions":"3323"},{"ruleId":"2781","severity":1,"message":"2782","line":17,"column":27,"nodeType":"2783","messageId":"2784","endLine":17,"endColumn":30,"suggestions":"3324"},{"ruleId":"2781","severity":1,"message":"2782","line":52,"column":17,"nodeType":"2783","messageId":"2784","endLine":52,"endColumn":20,"suggestions":"3325"},{"ruleId":"2786","severity":1,"message":"2787","line":125,"column":7,"nodeType":"2788","messageId":"2789","endLine":125,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":247,"column":79,"nodeType":"2783","messageId":"2784","endLine":247,"endColumn":82,"suggestions":"3326"},{"ruleId":"2781","severity":1,"message":"2782","line":248,"column":39,"nodeType":"2783","messageId":"2784","endLine":248,"endColumn":42,"suggestions":"3327"},{"ruleId":"2781","severity":1,"message":"2782","line":255,"column":45,"nodeType":"2783","messageId":"2784","endLine":255,"endColumn":48,"suggestions":"3328"},{"ruleId":"2781","severity":1,"message":"2782","line":256,"column":25,"nodeType":"2783","messageId":"2784","endLine":256,"endColumn":28,"suggestions":"3329"},{"ruleId":"2781","severity":1,"message":"2782","line":259,"column":58,"nodeType":"2783","messageId":"2784","endLine":259,"endColumn":61,"suggestions":"3330"},{"ruleId":"2781","severity":1,"message":"2782","line":260,"column":25,"nodeType":"2783","messageId":"2784","endLine":260,"endColumn":28,"suggestions":"3331"},{"ruleId":"2781","severity":1,"message":"2782","line":264,"column":42,"nodeType":"2783","messageId":"2784","endLine":264,"endColumn":45,"suggestions":"3332"},{"ruleId":"2781","severity":1,"message":"2782","line":265,"column":25,"nodeType":"2783","messageId":"2784","endLine":265,"endColumn":28,"suggestions":"3333"},{"ruleId":"2781","severity":1,"message":"2782","line":268,"column":32,"nodeType":"2783","messageId":"2784","endLine":268,"endColumn":35,"suggestions":"3334"},{"ruleId":"2781","severity":1,"message":"2782","line":268,"column":58,"nodeType":"2783","messageId":"2784","endLine":268,"endColumn":61,"suggestions":"3335"},{"ruleId":"2781","severity":1,"message":"2782","line":269,"column":25,"nodeType":"2783","messageId":"2784","endLine":269,"endColumn":28,"suggestions":"3336"},{"ruleId":"2781","severity":1,"message":"2782","line":275,"column":60,"nodeType":"2783","messageId":"2784","endLine":275,"endColumn":63,"suggestions":"3337"},{"ruleId":"2781","severity":1,"message":"2782","line":276,"column":25,"nodeType":"2783","messageId":"2784","endLine":276,"endColumn":28,"suggestions":"3338"},{"ruleId":"2781","severity":1,"message":"2782","line":279,"column":81,"nodeType":"2783","messageId":"2784","endLine":279,"endColumn":84,"suggestions":"3339"},{"ruleId":"2781","severity":1,"message":"2782","line":280,"column":25,"nodeType":"2783","messageId":"2784","endLine":280,"endColumn":28,"suggestions":"3340"},{"ruleId":"2781","severity":1,"message":"2782","line":287,"column":37,"nodeType":"2783","messageId":"2784","endLine":287,"endColumn":40,"suggestions":"3341"},{"ruleId":"2781","severity":1,"message":"2782","line":287,"column":63,"nodeType":"2783","messageId":"2784","endLine":287,"endColumn":66,"suggestions":"3342"},{"ruleId":"2781","severity":1,"message":"2782","line":288,"column":25,"nodeType":"2783","messageId":"2784","endLine":288,"endColumn":28,"suggestions":"3343"},{"ruleId":"2781","severity":1,"message":"2782","line":294,"column":50,"nodeType":"2783","messageId":"2784","endLine":294,"endColumn":53,"suggestions":"3344"},{"ruleId":"2781","severity":1,"message":"2782","line":295,"column":25,"nodeType":"2783","messageId":"2784","endLine":295,"endColumn":28,"suggestions":"3345"},{"ruleId":"2781","severity":1,"message":"2782","line":299,"column":49,"nodeType":"2783","messageId":"2784","endLine":299,"endColumn":52,"suggestions":"3346"},{"ruleId":"2781","severity":1,"message":"2782","line":300,"column":25,"nodeType":"2783","messageId":"2784","endLine":300,"endColumn":28,"suggestions":"3347"},{"ruleId":"2781","severity":1,"message":"2782","line":303,"column":88,"nodeType":"2783","messageId":"2784","endLine":303,"endColumn":91,"suggestions":"3348"},{"ruleId":"2781","severity":1,"message":"2782","line":304,"column":25,"nodeType":"2783","messageId":"2784","endLine":304,"endColumn":28,"suggestions":"3349"},{"ruleId":"2781","severity":1,"message":"2782","line":311,"column":41,"nodeType":"2783","messageId":"2784","endLine":311,"endColumn":44,"suggestions":"3350"},{"ruleId":"2781","severity":1,"message":"2782","line":312,"column":25,"nodeType":"2783","messageId":"2784","endLine":312,"endColumn":28,"suggestions":"3351"},{"ruleId":"2781","severity":1,"message":"2782","line":315,"column":75,"nodeType":"2783","messageId":"2784","endLine":315,"endColumn":78,"suggestions":"3352"},{"ruleId":"2781","severity":1,"message":"2782","line":316,"column":25,"nodeType":"2783","messageId":"2784","endLine":316,"endColumn":28,"suggestions":"3353"},{"ruleId":"2781","severity":1,"message":"2782","line":322,"column":47,"nodeType":"2783","messageId":"2784","endLine":322,"endColumn":50,"suggestions":"3354"},{"ruleId":"2781","severity":1,"message":"2782","line":323,"column":25,"nodeType":"2783","messageId":"2784","endLine":323,"endColumn":28,"suggestions":"3355"},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2781","severity":1,"message":"2782","line":188,"column":37,"nodeType":"2783","messageId":"2784","endLine":188,"endColumn":40,"suggestions":"3356"},{"ruleId":"2781","severity":1,"message":"2782","line":189,"column":35,"nodeType":"2783","messageId":"2784","endLine":189,"endColumn":38,"suggestions":"3357"},{"ruleId":"2786","severity":1,"message":"2787","line":208,"column":11,"nodeType":"2788","messageId":"2789","endLine":208,"endColumn":23},{"ruleId":"2786","severity":1,"message":"2787","line":214,"column":7,"nodeType":"2788","messageId":"2789","endLine":214,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":229,"column":7,"nodeType":"2788","messageId":"2789","endLine":229,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":245,"column":7,"nodeType":"2788","messageId":"2789","endLine":245,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":349,"column":3,"nodeType":"2788","messageId":"2789","endLine":349,"endColumn":14},{"ruleId":"2786","severity":1,"message":"2787","line":377,"column":7,"nodeType":"2788","messageId":"2789","endLine":377,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":428,"column":5,"nodeType":"2788","messageId":"2789","endLine":428,"endColumn":17},{"ruleId":"2786","severity":1,"message":"2787","line":463,"column":9,"nodeType":"2788","messageId":"2789","endLine":463,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":531,"column":7,"nodeType":"2788","messageId":"2789","endLine":531,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":547,"column":3,"nodeType":"2788","messageId":"2789","endLine":547,"endColumn":16},{"ruleId":"2786","severity":1,"message":"2787","line":550,"column":10,"nodeType":"2788","messageId":"2789","endLine":550,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":551,"column":10,"nodeType":"2788","messageId":"2789","endLine":551,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":552,"column":10,"nodeType":"2788","messageId":"2789","endLine":552,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":553,"column":10,"nodeType":"2788","messageId":"2789","endLine":553,"endColumn":21},{"ruleId":"2786","severity":1,"message":"2787","line":554,"column":11,"nodeType":"2788","messageId":"2789","endLine":554,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":559,"column":5,"nodeType":"2788","messageId":"2789","endLine":559,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":566,"column":5,"nodeType":"2788","messageId":"2789","endLine":566,"endColumn":17},{"ruleId":"2786","severity":1,"message":"2787","line":569,"column":3,"nodeType":"2788","messageId":"2789","endLine":569,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":41,"column":7,"nodeType":"2788","messageId":"2789","endLine":41,"endColumn":19},{"ruleId":"2786","severity":1,"message":"2787","line":49,"column":7,"nodeType":"2788","messageId":"2789","endLine":49,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":54,"column":7,"nodeType":"2788","messageId":"2789","endLine":54,"endColumn":18},{"ruleId":"2781","severity":1,"message":"2782","line":86,"column":36,"nodeType":"2783","messageId":"2784","endLine":86,"endColumn":39,"suggestions":"3358"},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":3,"column":1,"nodeType":null},{"ruleId":"2791","severity":2,"message":"3359","line":13,"column":25,"nodeType":"2793","messageId":"2794","endLine":13,"endColumn":36},{"ruleId":null,"fatal":true,"severity":2,"message":"3360","line":1,"column":121,"nodeType":null},{"ruleId":"2791","severity":2,"message":"2820","line":12,"column":10,"nodeType":"2793","messageId":"2794","endLine":12,"endColumn":12},{"ruleId":"2791","severity":2,"message":"3361","line":26,"column":3,"nodeType":"2793","messageId":"2794","endLine":26,"endColumn":10},{"ruleId":"2791","severity":2,"message":"3362","line":27,"column":3,"nodeType":"2793","messageId":"2794","endLine":27,"endColumn":6},{"ruleId":"2791","severity":2,"message":"3363","line":441,"column":62,"nodeType":"2793","messageId":"2794","endLine":441,"endColumn":69},{"ruleId":"2791","severity":2,"message":"3364","line":9,"column":10,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":14},{"ruleId":"2791","severity":2,"message":"3365","line":9,"column":16,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":27},{"ruleId":"2791","severity":2,"message":"3366","line":9,"column":29,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":37},{"ruleId":"2791","severity":2,"message":"3367","line":9,"column":39,"nodeType":"2793","messageId":"2794","endLine":9,"endColumn":50},{"ruleId":"2791","severity":2,"message":"3368","line":30,"column":3,"nodeType":"2793","messageId":"2794","endLine":30,"endColumn":19},{"ruleId":"2791","severity":2,"message":"3369","line":31,"column":3,"nodeType":"2793","messageId":"2794","endLine":31,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3370","line":32,"column":3,"nodeType":"2793","messageId":"2794","endLine":32,"endColumn":25},{"ruleId":"2791","severity":2,"message":"3371","line":35,"column":3,"nodeType":"2793","messageId":"2794","endLine":35,"endColumn":18},{"ruleId":"2791","severity":2,"message":"3372","line":54,"column":3,"nodeType":"2793","messageId":"2794","endLine":54,"endColumn":7},{"ruleId":"2791","severity":2,"message":"2866","line":57,"column":3,"nodeType":"2793","messageId":"2794","endLine":57,"endColumn":11},{"ruleId":"2791","severity":2,"message":"3373","line":58,"column":3,"nodeType":"2793","messageId":"2794","endLine":58,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3162","line":59,"column":3,"nodeType":"2793","messageId":"2794","endLine":59,"endColumn":11},{"ruleId":"2791","severity":2,"message":"2923","line":62,"column":3,"nodeType":"2793","messageId":"2794","endLine":62,"endColumn":8},{"ruleId":"2791","severity":2,"message":"2887","line":63,"column":3,"nodeType":"2793","messageId":"2794","endLine":63,"endColumn":9},{"ruleId":"2791","severity":2,"message":"2888","line":69,"column":3,"nodeType":"2793","messageId":"2794","endLine":69,"endColumn":16},{"ruleId":"2786","severity":1,"message":"2787","line":178,"column":5,"nodeType":"2788","messageId":"2789","endLine":178,"endColumn":16},{"ruleId":"2791","severity":2,"message":"3374","line":393,"column":27,"nodeType":"2793","messageId":"2794","endLine":393,"endColumn":29},{"ruleId":"2791","severity":2,"message":"3374","line":394,"column":26,"nodeType":"2793","messageId":"2794","endLine":394,"endColumn":28},{"ruleId":"2791","severity":2,"message":"3375","line":394,"column":30,"nodeType":"2793","messageId":"2794","endLine":394,"endColumn":36},{"ruleId":"2786","severity":1,"message":"2787","line":395,"column":33,"nodeType":"2788","messageId":"2789","endLine":395,"endColumn":44},{"ruleId":"2786","severity":1,"message":"2787","line":501,"column":13,"nodeType":"2788","messageId":"2789","endLine":501,"endColumn":24},{"ruleId":"2791","severity":2,"message":"3376","line":21,"column":3,"nodeType":"2793","messageId":"2794","endLine":21,"endColumn":13},{"ruleId":"2791","severity":2,"message":"3377","line":22,"column":3,"nodeType":"2793","messageId":"2794","endLine":22,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":53,"column":63,"nodeType":"2783","messageId":"2784","endLine":53,"endColumn":66,"suggestions":"3378"},{"ruleId":"2786","severity":1,"message":"2787","line":65,"column":9,"nodeType":"2788","messageId":"2789","endLine":65,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":88,"column":44,"nodeType":"2783","messageId":"2784","endLine":88,"endColumn":47,"suggestions":"3379"},{"ruleId":"2791","severity":2,"message":"3380","line":8,"column":22,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":28},{"ruleId":"2781","severity":1,"message":"2782","line":116,"column":34,"nodeType":"2783","messageId":"2784","endLine":116,"endColumn":37,"suggestions":"3381"},{"ruleId":"2781","severity":1,"message":"2782","line":122,"column":15,"nodeType":"2783","messageId":"2784","endLine":122,"endColumn":18,"suggestions":"3382"},{"ruleId":"2781","severity":1,"message":"2782","line":267,"column":16,"nodeType":"2783","messageId":"2784","endLine":267,"endColumn":19,"suggestions":"3383"},{"ruleId":"2781","severity":1,"message":"2782","line":286,"column":28,"nodeType":"2783","messageId":"2784","endLine":286,"endColumn":31,"suggestions":"3384"},{"ruleId":"2781","severity":1,"message":"2782","line":297,"column":34,"nodeType":"2783","messageId":"2784","endLine":297,"endColumn":37,"suggestions":"3385"},{"ruleId":"2781","severity":1,"message":"2782","line":297,"column":60,"nodeType":"2783","messageId":"2784","endLine":297,"endColumn":63,"suggestions":"3386"},{"ruleId":"2781","severity":1,"message":"2782","line":302,"column":83,"nodeType":"2783","messageId":"2784","endLine":302,"endColumn":86,"suggestions":"3387"},{"ruleId":"2781","severity":1,"message":"2782","line":311,"column":35,"nodeType":"2783","messageId":"2784","endLine":311,"endColumn":38,"suggestions":"3388"},{"ruleId":"2781","severity":1,"message":"2782","line":311,"column":61,"nodeType":"2783","messageId":"2784","endLine":311,"endColumn":64,"suggestions":"3389"},{"ruleId":"2781","severity":1,"message":"2782","line":317,"column":39,"nodeType":"2783","messageId":"2784","endLine":317,"endColumn":42,"suggestions":"3390"},{"ruleId":"2781","severity":1,"message":"2782","line":317,"column":65,"nodeType":"2783","messageId":"2784","endLine":317,"endColumn":68,"suggestions":"3391"},{"ruleId":"2781","severity":1,"message":"2782","line":322,"column":36,"nodeType":"2783","messageId":"2784","endLine":322,"endColumn":39,"suggestions":"3392"},{"ruleId":"2781","severity":1,"message":"2782","line":322,"column":62,"nodeType":"2783","messageId":"2784","endLine":322,"endColumn":65,"suggestions":"3393"},{"ruleId":"2781","severity":1,"message":"2782","line":327,"column":38,"nodeType":"2783","messageId":"2784","endLine":327,"endColumn":41,"suggestions":"3394"},{"ruleId":"2781","severity":1,"message":"2782","line":327,"column":64,"nodeType":"2783","messageId":"2784","endLine":327,"endColumn":67,"suggestions":"3395"},{"ruleId":"2781","severity":1,"message":"2782","line":333,"column":32,"nodeType":"2783","messageId":"2784","endLine":333,"endColumn":35,"suggestions":"3396"},{"ruleId":"2781","severity":1,"message":"2782","line":333,"column":58,"nodeType":"2783","messageId":"2784","endLine":333,"endColumn":61,"suggestions":"3397"},{"ruleId":"2781","severity":1,"message":"2782","line":338,"column":56,"nodeType":"2783","messageId":"2784","endLine":338,"endColumn":59,"suggestions":"3398"},{"ruleId":"2781","severity":1,"message":"2782","line":344,"column":58,"nodeType":"2783","messageId":"2784","endLine":344,"endColumn":61,"suggestions":"3399"},{"ruleId":"2781","severity":1,"message":"2782","line":351,"column":31,"nodeType":"2783","messageId":"2784","endLine":351,"endColumn":34,"suggestions":"3400"},{"ruleId":"2781","severity":1,"message":"2782","line":351,"column":57,"nodeType":"2783","messageId":"2784","endLine":351,"endColumn":60,"suggestions":"3401"},{"ruleId":"2781","severity":1,"message":"2782","line":356,"column":56,"nodeType":"2783","messageId":"2784","endLine":356,"endColumn":59,"suggestions":"3402"},{"ruleId":"2781","severity":1,"message":"2782","line":363,"column":70,"nodeType":"2783","messageId":"2784","endLine":363,"endColumn":73,"suggestions":"3403"},{"ruleId":"2781","severity":1,"message":"2782","line":371,"column":49,"nodeType":"2783","messageId":"2784","endLine":371,"endColumn":52,"suggestions":"3404"},{"ruleId":"2781","severity":1,"message":"2782","line":376,"column":51,"nodeType":"2783","messageId":"2784","endLine":376,"endColumn":54,"suggestions":"3405"},{"ruleId":"2781","severity":1,"message":"2782","line":376,"column":77,"nodeType":"2783","messageId":"2784","endLine":376,"endColumn":80,"suggestions":"3406"},{"ruleId":"2781","severity":1,"message":"2782","line":382,"column":51,"nodeType":"2783","messageId":"2784","endLine":382,"endColumn":54,"suggestions":"3407"},{"ruleId":"2781","severity":1,"message":"2782","line":388,"column":68,"nodeType":"2783","messageId":"2784","endLine":388,"endColumn":71,"suggestions":"3408"},{"ruleId":"2781","severity":1,"message":"2782","line":394,"column":32,"nodeType":"2783","messageId":"2784","endLine":394,"endColumn":35,"suggestions":"3409"},{"ruleId":"2781","severity":1,"message":"2782","line":394,"column":58,"nodeType":"2783","messageId":"2784","endLine":394,"endColumn":61,"suggestions":"3410"},{"ruleId":"2781","severity":1,"message":"2782","line":408,"column":27,"nodeType":"2783","messageId":"2784","endLine":408,"endColumn":30,"suggestions":"3411"},{"ruleId":"2781","severity":1,"message":"2782","line":420,"column":27,"nodeType":"2783","messageId":"2784","endLine":420,"endColumn":30,"suggestions":"3412"},{"ruleId":"2781","severity":1,"message":"2782","line":441,"column":48,"nodeType":"2783","messageId":"2784","endLine":441,"endColumn":51,"suggestions":"3413"},{"ruleId":"2781","severity":1,"message":"2782","line":44,"column":27,"nodeType":"2783","messageId":"2784","endLine":44,"endColumn":30,"suggestions":"3414"},{"ruleId":"2781","severity":1,"message":"2782","line":60,"column":111,"nodeType":"2783","messageId":"2784","endLine":60,"endColumn":114,"suggestions":"3415"},{"ruleId":"2781","severity":1,"message":"2782","line":65,"column":30,"nodeType":"2783","messageId":"2784","endLine":65,"endColumn":33,"suggestions":"3416"},{"ruleId":"2781","severity":1,"message":"2782","line":65,"column":64,"nodeType":"2783","messageId":"2784","endLine":65,"endColumn":67,"suggestions":"3417"},{"ruleId":"2781","severity":1,"message":"2782","line":77,"column":45,"nodeType":"2783","messageId":"2784","endLine":77,"endColumn":48,"suggestions":"3418"},{"ruleId":"2781","severity":1,"message":"2782","line":82,"column":38,"nodeType":"2783","messageId":"2784","endLine":82,"endColumn":41,"suggestions":"3419"},{"ruleId":"2781","severity":1,"message":"2782","line":82,"column":64,"nodeType":"2783","messageId":"2784","endLine":82,"endColumn":67,"suggestions":"3420"},{"ruleId":"2781","severity":1,"message":"2782","line":88,"column":117,"nodeType":"2783","messageId":"2784","endLine":88,"endColumn":120,"suggestions":"3421"},{"ruleId":"2781","severity":1,"message":"2782","line":93,"column":32,"nodeType":"2783","messageId":"2784","endLine":93,"endColumn":35,"suggestions":"3422"},{"ruleId":"2781","severity":1,"message":"2782","line":93,"column":58,"nodeType":"2783","messageId":"2784","endLine":93,"endColumn":61,"suggestions":"3423"},{"ruleId":"2781","severity":1,"message":"2782","line":98,"column":48,"nodeType":"2783","messageId":"2784","endLine":98,"endColumn":51,"suggestions":"3424"},{"ruleId":"2781","severity":1,"message":"2782","line":98,"column":74,"nodeType":"2783","messageId":"2784","endLine":98,"endColumn":77,"suggestions":"3425"},{"ruleId":"2781","severity":1,"message":"2782","line":118,"column":27,"nodeType":"2783","messageId":"2784","endLine":118,"endColumn":30,"suggestions":"3426"},{"ruleId":"2781","severity":1,"message":"2782","line":123,"column":34,"nodeType":"2783","messageId":"2784","endLine":123,"endColumn":37,"suggestions":"3427"},{"ruleId":"2781","severity":1,"message":"2782","line":123,"column":60,"nodeType":"2783","messageId":"2784","endLine":123,"endColumn":63,"suggestions":"3428"},{"ruleId":"2781","severity":1,"message":"2782","line":128,"column":83,"nodeType":"2783","messageId":"2784","endLine":128,"endColumn":86,"suggestions":"3429"},{"ruleId":"2781","severity":1,"message":"2782","line":133,"column":78,"nodeType":"2783","messageId":"2784","endLine":133,"endColumn":81,"suggestions":"3430"},{"ruleId":"2781","severity":1,"message":"2782","line":139,"column":67,"nodeType":"2783","messageId":"2784","endLine":139,"endColumn":70,"suggestions":"3431"},{"ruleId":"2781","severity":1,"message":"2782","line":154,"column":27,"nodeType":"2783","messageId":"2784","endLine":154,"endColumn":30,"suggestions":"3432"},{"ruleId":"2781","severity":1,"message":"2782","line":159,"column":32,"nodeType":"2783","messageId":"2784","endLine":159,"endColumn":35,"suggestions":"3433"},{"ruleId":"2781","severity":1,"message":"2782","line":159,"column":58,"nodeType":"2783","messageId":"2784","endLine":159,"endColumn":61,"suggestions":"3434"},{"ruleId":"2781","severity":1,"message":"2782","line":164,"column":48,"nodeType":"2783","messageId":"2784","endLine":164,"endColumn":51,"suggestions":"3435"},{"ruleId":"2781","severity":1,"message":"2782","line":164,"column":74,"nodeType":"2783","messageId":"2784","endLine":164,"endColumn":77,"suggestions":"3436"},{"ruleId":"2781","severity":1,"message":"2782","line":174,"column":102,"nodeType":"2783","messageId":"2784","endLine":174,"endColumn":105,"suggestions":"3437"},{"ruleId":"2781","severity":1,"message":"2782","line":180,"column":47,"nodeType":"2783","messageId":"2784","endLine":180,"endColumn":50,"suggestions":"3438"},{"ruleId":"2781","severity":1,"message":"2782","line":185,"column":40,"nodeType":"2783","messageId":"2784","endLine":185,"endColumn":43,"suggestions":"3439"},{"ruleId":"2781","severity":1,"message":"2782","line":185,"column":66,"nodeType":"2783","messageId":"2784","endLine":185,"endColumn":69,"suggestions":"3440"},{"ruleId":"2781","severity":1,"message":"2782","line":190,"column":60,"nodeType":"2783","messageId":"2784","endLine":190,"endColumn":63,"suggestions":"3441"},{"ruleId":"2781","severity":1,"message":"2782","line":190,"column":86,"nodeType":"2783","messageId":"2784","endLine":190,"endColumn":89,"suggestions":"3442"},{"ruleId":"2781","severity":1,"message":"2782","line":196,"column":101,"nodeType":"2783","messageId":"2784","endLine":196,"endColumn":104,"suggestions":"3443"},{"ruleId":"2781","severity":1,"message":"2782","line":201,"column":42,"nodeType":"2783","messageId":"2784","endLine":201,"endColumn":45,"suggestions":"3444"},{"ruleId":"2781","severity":1,"message":"2782","line":201,"column":68,"nodeType":"2783","messageId":"2784","endLine":201,"endColumn":71,"suggestions":"3445"},{"ruleId":"2781","severity":1,"message":"2782","line":206,"column":91,"nodeType":"2783","messageId":"2784","endLine":206,"endColumn":94,"suggestions":"3446"},{"ruleId":"2781","severity":1,"message":"2782","line":212,"column":54,"nodeType":"2783","messageId":"2784","endLine":212,"endColumn":57,"suggestions":"3447"},{"ruleId":"2781","severity":1,"message":"2782","line":217,"column":52,"nodeType":"2783","messageId":"2784","endLine":217,"endColumn":55,"suggestions":"3448"},{"ruleId":"2781","severity":1,"message":"2782","line":233,"column":27,"nodeType":"2783","messageId":"2784","endLine":233,"endColumn":30,"suggestions":"3449"},{"ruleId":"2781","severity":1,"message":"2782","line":238,"column":34,"nodeType":"2783","messageId":"2784","endLine":238,"endColumn":37,"suggestions":"3450"},{"ruleId":"2781","severity":1,"message":"2782","line":238,"column":60,"nodeType":"2783","messageId":"2784","endLine":238,"endColumn":63,"suggestions":"3451"},{"ruleId":"2781","severity":1,"message":"2782","line":243,"column":51,"nodeType":"2783","messageId":"2784","endLine":243,"endColumn":54,"suggestions":"3452"},{"ruleId":"2781","severity":1,"message":"2782","line":243,"column":77,"nodeType":"2783","messageId":"2784","endLine":243,"endColumn":80,"suggestions":"3453"},{"ruleId":"2781","severity":1,"message":"2782","line":248,"column":83,"nodeType":"2783","messageId":"2784","endLine":248,"endColumn":86,"suggestions":"3454"},{"ruleId":"2781","severity":1,"message":"2782","line":260,"column":27,"nodeType":"2783","messageId":"2784","endLine":260,"endColumn":30,"suggestions":"3455"},{"ruleId":"2781","severity":1,"message":"2782","line":265,"column":32,"nodeType":"2783","messageId":"2784","endLine":265,"endColumn":35,"suggestions":"3456"},{"ruleId":"2781","severity":1,"message":"2782","line":265,"column":58,"nodeType":"2783","messageId":"2784","endLine":265,"endColumn":61,"suggestions":"3457"},{"ruleId":"2781","severity":1,"message":"2782","line":270,"column":48,"nodeType":"2783","messageId":"2784","endLine":270,"endColumn":51,"suggestions":"3458"},{"ruleId":"2781","severity":1,"message":"2782","line":270,"column":74,"nodeType":"2783","messageId":"2784","endLine":270,"endColumn":77,"suggestions":"3459"},{"ruleId":"2781","severity":1,"message":"2782","line":275,"column":81,"nodeType":"2783","messageId":"2784","endLine":275,"endColumn":84,"suggestions":"3460"},{"ruleId":"2781","severity":1,"message":"2782","line":281,"column":106,"nodeType":"2783","messageId":"2784","endLine":281,"endColumn":109,"suggestions":"3461"},{"ruleId":"2781","severity":1,"message":"2782","line":286,"column":40,"nodeType":"2783","messageId":"2784","endLine":286,"endColumn":43,"suggestions":"3462"},{"ruleId":"2781","severity":1,"message":"2782","line":286,"column":66,"nodeType":"2783","messageId":"2784","endLine":286,"endColumn":69,"suggestions":"3463"},{"ruleId":"2781","severity":1,"message":"2782","line":291,"column":60,"nodeType":"2783","messageId":"2784","endLine":291,"endColumn":63,"suggestions":"3464"},{"ruleId":"2781","severity":1,"message":"2782","line":291,"column":86,"nodeType":"2783","messageId":"2784","endLine":291,"endColumn":89,"suggestions":"3465"},{"ruleId":"2781","severity":1,"message":"2782","line":297,"column":50,"nodeType":"2783","messageId":"2784","endLine":297,"endColumn":53,"suggestions":"3466"},{"ruleId":"2781","severity":1,"message":"2782","line":302,"column":121,"nodeType":"2783","messageId":"2784","endLine":302,"endColumn":124,"suggestions":"3467"},{"ruleId":"2781","severity":1,"message":"2782","line":311,"column":45,"nodeType":"2783","messageId":"2784","endLine":311,"endColumn":48,"suggestions":"3468"},{"ruleId":"2781","severity":1,"message":"2782","line":316,"column":85,"nodeType":"2783","messageId":"2784","endLine":316,"endColumn":88,"suggestions":"3469"},{"ruleId":"2781","severity":1,"message":"2782","line":330,"column":27,"nodeType":"2783","messageId":"2784","endLine":330,"endColumn":30,"suggestions":"3470"},{"ruleId":"2781","severity":1,"message":"2782","line":335,"column":36,"nodeType":"2783","messageId":"2784","endLine":335,"endColumn":39,"suggestions":"3471"},{"ruleId":"2781","severity":1,"message":"2782","line":335,"column":62,"nodeType":"2783","messageId":"2784","endLine":335,"endColumn":65,"suggestions":"3472"},{"ruleId":"2781","severity":1,"message":"2782","line":341,"column":49,"nodeType":"2783","messageId":"2784","endLine":341,"endColumn":52,"suggestions":"3473"},{"ruleId":"2781","severity":1,"message":"2782","line":355,"column":27,"nodeType":"2783","messageId":"2784","endLine":355,"endColumn":30,"suggestions":"3474"},{"ruleId":"2781","severity":1,"message":"2782","line":376,"column":46,"nodeType":"2783","messageId":"2784","endLine":376,"endColumn":49,"suggestions":"3475"},{"ruleId":"2781","severity":1,"message":"2782","line":381,"column":36,"nodeType":"2783","messageId":"2784","endLine":381,"endColumn":39,"suggestions":"3476"},{"ruleId":"2781","severity":1,"message":"2782","line":381,"column":62,"nodeType":"2783","messageId":"2784","endLine":381,"endColumn":65,"suggestions":"3477"},{"ruleId":"2781","severity":1,"message":"2782","line":396,"column":27,"nodeType":"2783","messageId":"2784","endLine":396,"endColumn":30,"suggestions":"3478"},{"ruleId":"2781","severity":1,"message":"2782","line":401,"column":32,"nodeType":"2783","messageId":"2784","endLine":401,"endColumn":35,"suggestions":"3479"},{"ruleId":"2781","severity":1,"message":"2782","line":401,"column":58,"nodeType":"2783","messageId":"2784","endLine":401,"endColumn":61,"suggestions":"3480"},{"ruleId":"2781","severity":1,"message":"2782","line":406,"column":48,"nodeType":"2783","messageId":"2784","endLine":406,"endColumn":51,"suggestions":"3481"},{"ruleId":"2781","severity":1,"message":"2782","line":406,"column":74,"nodeType":"2783","messageId":"2784","endLine":406,"endColumn":77,"suggestions":"3482"},{"ruleId":"2781","severity":1,"message":"2782","line":417,"column":61,"nodeType":"2783","messageId":"2784","endLine":417,"endColumn":64,"suggestions":"3483"},{"ruleId":"2781","severity":1,"message":"2782","line":422,"column":49,"nodeType":"2783","messageId":"2784","endLine":422,"endColumn":52,"suggestions":"3484"},{"ruleId":"2781","severity":1,"message":"2782","line":422,"column":75,"nodeType":"2783","messageId":"2784","endLine":422,"endColumn":78,"suggestions":"3485"},{"ruleId":"2781","severity":1,"message":"2782","line":427,"column":68,"nodeType":"2783","messageId":"2784","endLine":427,"endColumn":71,"suggestions":"3486"},{"ruleId":"2781","severity":1,"message":"2782","line":427,"column":94,"nodeType":"2783","messageId":"2784","endLine":427,"endColumn":97,"suggestions":"3487"},{"ruleId":"2781","severity":1,"message":"2782","line":441,"column":69,"nodeType":"2783","messageId":"2784","endLine":441,"endColumn":72,"suggestions":"3488"},{"ruleId":"2781","severity":1,"message":"2782","line":451,"column":27,"nodeType":"2783","messageId":"2784","endLine":451,"endColumn":30,"suggestions":"3489"},{"ruleId":"2781","severity":1,"message":"2782","line":461,"column":27,"nodeType":"2783","messageId":"2784","endLine":461,"endColumn":30,"suggestions":"3490"},{"ruleId":"2781","severity":1,"message":"2782","line":470,"column":27,"nodeType":"2783","messageId":"2784","endLine":470,"endColumn":30,"suggestions":"3491"},{"ruleId":"2781","severity":1,"message":"2782","line":476,"column":55,"nodeType":"2783","messageId":"2784","endLine":476,"endColumn":58,"suggestions":"3492"},{"ruleId":"2781","severity":1,"message":"2782","line":476,"column":81,"nodeType":"2783","messageId":"2784","endLine":476,"endColumn":84,"suggestions":"3493"},{"ruleId":"2781","severity":1,"message":"2782","line":482,"column":45,"nodeType":"2783","messageId":"2784","endLine":482,"endColumn":48,"suggestions":"3494"},{"ruleId":"2781","severity":1,"message":"2782","line":531,"column":47,"nodeType":"2783","messageId":"2784","endLine":531,"endColumn":50,"suggestions":"3495"},{"ruleId":"2786","severity":1,"message":"2787","line":542,"column":9,"nodeType":"2788","messageId":"2789","endLine":542,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":559,"column":11,"nodeType":"2788","messageId":"2789","endLine":559,"endColumn":24},{"ruleId":"2786","severity":1,"message":"2787","line":564,"column":9,"nodeType":"2788","messageId":"2789","endLine":564,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":569,"column":9,"nodeType":"2788","messageId":"2789","endLine":569,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":572,"column":7,"nodeType":"2788","messageId":"2789","endLine":572,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":581,"column":9,"nodeType":"2788","messageId":"2789","endLine":581,"endColumn":20},{"ruleId":"2781","severity":1,"message":"2782","line":587,"column":28,"nodeType":"2783","messageId":"2784","endLine":587,"endColumn":31,"suggestions":"3496"},{"ruleId":"2781","severity":1,"message":"2782","line":593,"column":50,"nodeType":"2783","messageId":"2784","endLine":593,"endColumn":53,"suggestions":"3497"},{"ruleId":"2781","severity":1,"message":"2782","line":626,"column":39,"nodeType":"2783","messageId":"2784","endLine":626,"endColumn":42,"suggestions":"3498"},{"ruleId":"2781","severity":1,"message":"2782","line":4,"column":9,"nodeType":"2783","messageId":"2784","endLine":4,"endColumn":12,"suggestions":"3499"},{"ruleId":"2781","severity":1,"message":"2782","line":19,"column":17,"nodeType":"2783","messageId":"2784","endLine":19,"endColumn":20,"suggestions":"3500"},{"ruleId":"2791","severity":2,"message":"3501","line":82,"column":15,"nodeType":"2793","messageId":"2794","endLine":82,"endColumn":30},{"ruleId":"2786","severity":1,"message":"2787","line":88,"column":7,"nodeType":"2788","messageId":"2789","endLine":88,"endColumn":20},{"ruleId":"2791","severity":2,"message":"3502","line":4,"column":41,"nodeType":"2793","messageId":"2794","endLine":4,"endColumn":54},{"ruleId":"2791","severity":2,"message":"3502","line":1,"column":23,"nodeType":"2793","messageId":"2794","endLine":1,"endColumn":36},{"ruleId":"2781","severity":1,"message":"2782","line":4,"column":18,"nodeType":"2783","messageId":"2784","endLine":4,"endColumn":21,"suggestions":"3503"},{"ruleId":"2781","severity":1,"message":"2782","line":59,"column":21,"nodeType":"2783","messageId":"2784","endLine":59,"endColumn":24,"suggestions":"3504"},{"ruleId":"2781","severity":1,"message":"2782","line":165,"column":37,"nodeType":"2783","messageId":"2784","endLine":165,"endColumn":40,"suggestions":"3505"},{"ruleId":"2781","severity":1,"message":"2782","line":166,"column":43,"nodeType":"2783","messageId":"2784","endLine":166,"endColumn":46,"suggestions":"3506"},{"ruleId":"2781","severity":1,"message":"2782","line":167,"column":43,"nodeType":"2783","messageId":"2784","endLine":167,"endColumn":46,"suggestions":"3507"},{"ruleId":"2781","severity":1,"message":"2782","line":168,"column":44,"nodeType":"2783","messageId":"2784","endLine":168,"endColumn":47,"suggestions":"3508"},{"ruleId":"2781","severity":1,"message":"2782","line":169,"column":46,"nodeType":"2783","messageId":"2784","endLine":169,"endColumn":49,"suggestions":"3509"},{"ruleId":"2781","severity":1,"message":"2782","line":170,"column":42,"nodeType":"2783","messageId":"2784","endLine":170,"endColumn":45,"suggestions":"3510"},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":2,"column":7,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2791","severity":2,"message":"3511","line":8,"column":3,"nodeType":"2793","messageId":"2794","endLine":8,"endColumn":10},{"ruleId":"2781","severity":1,"message":"2782","line":43,"column":10,"nodeType":"2783","messageId":"2784","endLine":43,"endColumn":13,"suggestions":"3512"},{"ruleId":"2786","severity":1,"message":"2787","line":106,"column":7,"nodeType":"2788","messageId":"2789","endLine":106,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":129,"column":9,"nodeType":"2788","messageId":"2789","endLine":129,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":154,"column":9,"nodeType":"2788","messageId":"2789","endLine":154,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":181,"column":9,"nodeType":"2788","messageId":"2789","endLine":181,"endColumn":22},{"ruleId":"2786","severity":1,"message":"2787","line":207,"column":9,"nodeType":"2788","messageId":"2789","endLine":207,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":215,"column":33,"nodeType":"2783","messageId":"2784","endLine":215,"endColumn":36,"suggestions":"3513"},{"ruleId":"2786","severity":1,"message":"2787","line":231,"column":9,"nodeType":"2788","messageId":"2789","endLine":231,"endColumn":22},{"ruleId":"2781","severity":1,"message":"2782","line":244,"column":13,"nodeType":"2783","messageId":"2784","endLine":244,"endColumn":16,"suggestions":"3514"},{"ruleId":"2786","severity":1,"message":"2787","line":250,"column":7,"nodeType":"2788","messageId":"2789","endLine":250,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":277,"column":9,"nodeType":"2788","messageId":"2789","endLine":277,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":279,"column":9,"nodeType":"2788","messageId":"2789","endLine":279,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":284,"column":9,"nodeType":"2788","messageId":"2789","endLine":284,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":286,"column":9,"nodeType":"2788","messageId":"2789","endLine":286,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":291,"column":9,"nodeType":"2788","messageId":"2789","endLine":291,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":293,"column":9,"nodeType":"2788","messageId":"2789","endLine":293,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":298,"column":9,"nodeType":"2788","messageId":"2789","endLine":298,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":300,"column":9,"nodeType":"2788","messageId":"2789","endLine":300,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":305,"column":9,"nodeType":"2788","messageId":"2789","endLine":305,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":307,"column":9,"nodeType":"2788","messageId":"2789","endLine":307,"endColumn":20},{"ruleId":"2786","severity":1,"message":"2787","line":319,"column":7,"nodeType":"2788","messageId":"2789","endLine":319,"endColumn":18},{"ruleId":"2786","severity":1,"message":"2787","line":337,"column":5,"nodeType":"2788","messageId":"2789","endLine":337,"endColumn":16},{"ruleId":"2781","severity":1,"message":"2782","line":344,"column":14,"nodeType":"2783","messageId":"2784","endLine":344,"endColumn":17,"suggestions":"3515"},{"ruleId":"2781","severity":1,"message":"2782","line":347,"column":20,"nodeType":"2783","messageId":"2784","endLine":347,"endColumn":23,"suggestions":"3516"},{"ruleId":"2781","severity":1,"message":"2782","line":399,"column":36,"nodeType":"2783","messageId":"2784","endLine":399,"endColumn":39,"suggestions":"3517"},{"ruleId":"2781","severity":1,"message":"2782","line":417,"column":43,"nodeType":"2783","messageId":"2784","endLine":417,"endColumn":46,"suggestions":"3518"},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2781","severity":1,"message":"2782","line":49,"column":34,"nodeType":"2783","messageId":"2784","endLine":49,"endColumn":37,"suggestions":"3519"},{"ruleId":"2781","severity":1,"message":"2782","line":51,"column":23,"nodeType":"2783","messageId":"2784","endLine":51,"endColumn":26,"suggestions":"3520"},{"ruleId":"2781","severity":1,"message":"2782","line":56,"column":34,"nodeType":"2783","messageId":"2784","endLine":56,"endColumn":37,"suggestions":"3521"},{"ruleId":"2781","severity":1,"message":"2782","line":58,"column":23,"nodeType":"2783","messageId":"2784","endLine":58,"endColumn":26,"suggestions":"3522"},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":null,"fatal":true,"severity":2,"message":"3292","line":1,"column":1,"nodeType":null},{"ruleId":"2781","severity":1,"message":"2782","line":247,"column":65,"nodeType":"2783","messageId":"2784","endLine":247,"endColumn":68,"suggestions":"3523"},{"ruleId":"2781","severity":1,"message":"2782","line":24,"column":55,"nodeType":"2783","messageId":"2784","endLine":24,"endColumn":58,"suggestions":"3524"},{"ruleId":"2781","severity":1,"message":"2782","line":20,"column":55,"nodeType":"2783","messageId":"2784","endLine":20,"endColumn":58,"suggestions":"3525"},{"ruleId":"2781","severity":1,"message":"2782","line":33,"column":66,"nodeType":"2783","messageId":"2784","endLine":33,"endColumn":69,"suggestions":"3526"},{"ruleId":"2781","severity":1,"message":"2782","line":6,"column":22,"nodeType":"2783","messageId":"2784","endLine":6,"endColumn":25,"suggestions":"3527"},{"ruleId":"2781","severity":1,"message":"2782","line":10,"column":71,"nodeType":"2783","messageId":"2784","endLine":10,"endColumn":74,"suggestions":"3528"},{"ruleId":"2781","severity":1,"message":"2782","line":20,"column":56,"nodeType":"2783","messageId":"2784","endLine":20,"endColumn":59,"suggestions":"3529"},{"ruleId":"2781","severity":1,"message":"2782","line":22,"column":41,"nodeType":"2783","messageId":"2784","endLine":22,"endColumn":44,"suggestions":"3530"},{"ruleId":"2786","severity":1,"message":"2787","line":15,"column":5,"nodeType":"2788","messageId":"2789","endLine":15,"endColumn":18,"suppressions":"3531"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["3532","3533"],"no-console","Unexpected console statement.","MemberExpression","unexpected",["3534","3535"],"@typescript-eslint/no-unused-vars","'provider' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar",["3536","3537"],["3538","3539"],["3540","3541"],["3542","3543"],["3544","3545"],["3546","3547"],["3548","3549"],["3550","3551"],["3552","3553"],["3554","3555"],["3556","3557"],["3558","3559"],"'isInView' is assigned a value but never used.","'showAddCard' is assigned a value but never used.",["3560","3561"],["3562","3563"],"'focusedElement' is assigned a value but never used.","'router' is assigned a value but never used.","'Send' is defined but never used.",["3564","3565"],["3566","3567"],"'Label' is defined but never used.",["3568","3569"],["3570","3571"],["3572","3573"],"'cn' is defined but never used.","'Mail' is defined but never used.","'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'DialogDescription' is defined but never used.","'DialogHeader' is defined but never used.","'DialogTitle' is defined but never used.","'DialogTrigger' is defined but never used.","'userEmail' is defined but never used. Allowed unused args must match /^_/u.","'mfaEnabled' is assigned a value but never used.",["3574","3575"],"'Badge' is defined but never used.","'Separator' is defined but never used.","'onValidateParentLink' is defined but never used. Allowed unused args must match /^_/u.",["3576","3577"],["3578","3579"],"'Eye' is defined but never used.","'EyeOff' is defined but never used.","'Heart' is defined but never used.","'Zap' is defined but never used.","'profilePreferencesSchema' is defined but never used.","'ProfilePreferencesData' is defined but never used.","'userRole' is assigned a value but never used.","'ROLE_PERMISSIONS' is defined but never used.","'requiredPermissions' is assigned a value but never used.","'showLabels' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\(.","Literal","unnecessaryEscape",["3580","3581"],"Unnecessary escape character: \\).",["3582","3583"],["3584","3585"],["3586","3587"],["3588","3589"],["3590","3591"],["3592","3593"],["3594","3595"],["3596","3597"],["3598","3599"],"'IconButton' is defined but never used.","'errorData' is assigned a value but never used.","'useEffect' is defined but never used.","'AnimatePresence' is defined but never used.","'Users' is defined but never used.","'Calendar' is defined but never used.","'Filter' is defined but never used.","'ChevronDown' is defined but never used.","'Transaction' is defined but never used.","'NutritionInsight' is defined but never used.","'index' is defined but never used. Allowed unused args must match /^_/u.","'PieChart' is defined but never used.","'Pie' is defined but never used.","'Cell' is defined but never used.","'Student' is defined but never used.","'NutritionalInfo' is defined but never used.","'CardDescription' is defined but never used.","'BarChart' is defined but never used.","'Bar' is defined but never used.","'LineChart' is defined but never used.","'Line' is defined but never used.","'ComposedChart' is defined but never used.","'RadialBarChart' is defined but never used.","'RadialBar' is defined but never used.","'ScatterChart' is defined but never used.","'Scatter' is defined but never used.","'MapPin' is defined but never used.","'AlertTriangle' is defined but never used.","'ThermometerSun' is defined but never used.","'Smartphone' is defined but never used.","'Scan' is defined but never used.","'UserCheck' is defined but never used.","'Package' is defined but never used.","'Truck' is defined but never used.",["3600","3601"],"Parsing error: Declaration or statement expected.","Parsing error: Expected corresponding JSX closing tag for 'Tabs'.","'Avatar' is defined but never used.","'AvatarFallback' is defined but never used.","'AvatarImage' is defined but never used.","'Checkbox' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableHead' is defined but never used.","'TableHeader' is defined but never used.","'TableRow' is defined but never used.","'Area' is defined but never used.","'AreaChart' is defined but never used.","'ChefHat' is defined but never used.","'Coffee' is defined but never used.","'Fish' is defined but never used.","'Plus' is defined but never used.","'Minus' is defined but never used.","'Search' is defined but never used.","'COLORS' is assigned a value but never used.","'kitchenData' is defined but never used. Allowed unused args must match /^_/u.","'selectedStation' is assigned a value but never used.","'setSelectedStation' is assigned a value but never used.","'formatTime' is assigned a value but never used.",["3602","3603"],["3604","3605"],"'Clock' is defined but never used.","'Star' is defined but never used.","'Award' is defined but never used.","'parentData' is defined but never used. Allowed unused args must match /^_/u.",["3606","3607"],"'Skeleton' is defined but never used.","'Utensils' is defined but never used.","'AlertCircle' is defined but never used.","'Gift' is defined but never used.","'TrendingDown' is defined but never used.","'currentTime' is assigned a value but never used.","'isLoading' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'setSelectedMeal' is assigned a value but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.",["3608","3609"],["3610","3611"],["3612","3613"],"'children' is assigned a value but never used.","'onEditChild' is defined but never used. Allowed unused args must match /^_/u.","'onDeleteChild' is defined but never used. Allowed unused args must match /^_/u.",["3614","3615"],"'notifications' is assigned a value but never used.","'onMarkAsRead' is defined but never used. Allowed unused args must match /^_/u.",["3616","3617"],"'nutritionData' is assigned a value but never used.",["3618","3619"],"'orders' is assigned a value but never used.","'onViewOrder' is defined but never used. Allowed unused args must match /^_/u.",["3620","3621"],"'currentOrder' is assigned a value but never used.",["3622","3623"],"'paymentMethods' is assigned a value but never used.","'onRemovePaymentMethod' is defined but never used. Allowed unused args must match /^_/u.",["3624","3625"],"'subscription' is assigned a value but never used.","'selectedChild' is assigned a value but never used.","'setSelectedChild' is assigned a value but never used.","'setUnreadNotifications' is assigned a value but never used.","'child' is assigned a value but never used.","no-unused-labels","'totalSpent:' is defined but never used.","unused",{"range":"3626","text":"3627"},"'averagePerDay:' is defined but never used.",{"range":"3628","text":"3627"},"'trends:' is defined but never used.",{"range":"3629","text":"3627"},"no-empty","Empty block statement.","BlockStatement",["3630"],"'nutritionCompliance:' is defined but never used.",{"range":"3631","text":"3627"},"'wasteReduction:' is defined but never used.",{"range":"3632","text":"3627"},"'XCircle' is defined but never used.","'BarChart3' is defined but never used.","'Lock' is defined but never used.","'hasiviApi' is defined but never used.","'Button' is defined but never used.","'PolarAngleAxis' is defined but never used.",["3633","3634"],["3635","3636"],"'Loader2' is defined but never used.","'User' is defined but never used.","'Camera' is defined but never used.","'isManualMode' is assigned a value but never used.","'getSignalColor' is assigned a value but never used.","'motion' is defined but never used.","'Trash2' is defined but never used.","'RefreshCw' is defined but never used.","'Target' is defined but never used.","'Activity' is defined but never used.","'itemsLoading' is assigned a value but never used.","'suppliersLoading' is assigned a value but never used.","'poLoading' is assigned a value but never used.","'metricsLoading' is assigned a value but never used.",["3637","3638"],["3639","3640"],["3641","3642"],["3643","3644"],["3645","3646"],["3647","3648"],["3649","3650"],["3651","3652"],["3653","3654"],["3655","3656"],["3657","3658"],["3659","3660"],["3661","3662"],["3663","3664"],"'Bell' is defined but never used.","'setOrderFilters' is assigned a value but never used.","'setStaffFilters' is assigned a value but never used.","'setInventoryFilters' is assigned a value but never used.","'staffLoading' is assigned a value but never used.","'inventoryLoading' is assigned a value but never used.","'lowStockAlerts' is assigned a value but never used.","'alertsLoading' is assigned a value but never used.",["3665","3666"],["3667","3668"],"'handleOrderStatusUpdate' is assigned a value but never used.","'handleOrderAssignment' is assigned a value but never used.","'MoreHorizontal' is defined but never used.","'Flag' is defined but never used.","'completedItems' is assigned a value but never used.","'totalItems' is assigned a value but never used.","'mutating' is assigned a value but never used.",["3669","3670"],["3671","3672"],["3673","3674"],"'CheckCircle' is defined but never used.","'AnimatedList' is defined but never used.","'TextGenerateEffect' is defined but never used.","'CardHeader' is defined but never used.","'CardTitle' is defined but never used.","'ArrowRight' is defined but never used.","'TrendingUp' is defined but never used.","'ApiResponse' is defined but never used.","'Accordion' is defined but never used.","'AccordionContent' is defined but never used.","'AccordionItem' is defined but never used.","'AccordionTrigger' is defined but never used.","'Globe' is defined but never used.","'Phone' is defined but never used.","'BentoGrid' is defined but never used.","'BentoGridItem' is defined but never used.","'Marquee' is defined but never used.","'BackgroundBeams' is defined but never used.",["3675","3676"],"'bangaloreSchools' is assigned a value but never used.","'platformFeatures' is assigned a value but never used.","'isMenuOpen' is assigned a value but never used.","'setIsMenuOpen' is assigned a value but never used.","'onMenuClick' is defined but never used. Allowed unused args must match /^_/u.","'Shield' is defined but never used.","'label' is assigned a value but never used.","'fullPath' is defined but never used. Allowed unused args must match /^_/u.","'items' is defined but never used. Allowed unused args must match /^_/u.","'useMemo' is defined but never used.","prefer-const","'wordsArray' is never reassigned. Use 'const' instead.","useConst",{"range":"3677","text":"3678"},"'MenuCategory' is defined but never used.","'Info' is defined but never used.","'student' is defined but never used. Allowed unused args must match /^_/u.","'onViewDetails' is defined but never used. Allowed unused args must match /^_/u.","'OrderSummary' is defined but never used.","'removed' is assigned a value but never used.","'error' is defined but never used. Allowed unused args must match /^_/u.","'quantity' is defined but never used. Allowed unused args must match /^_/u.","'MealItem' is defined but never used.","'StudentInfo' is defined but never used.","'onUpdateQuantity' is defined but never used. Allowed unused args must match /^_/u.","'onRemoveFromCart' is defined but never used. Allowed unused args must match /^_/u.","'SortAsc' is defined but never used.","'Alert' is defined but never used.","'AlertDescription' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownMenuContent' is defined but never used.","'DropdownMenuItem' is defined but never used.","'DropdownMenuLabel' is defined but never used.","'DropdownMenuSeparator' is defined but never used.","'DropdownMenuTrigger' is defined but never used.","'MealOrderingContext' is defined but never used.","'canOrderMeal' is defined but never used.","'getAvailableDeliverySlots' is defined but never used.","'getMealCategoryInfo' is defined but never used.",["3679","3680"],"'schoolConfig' is defined but never used. Allowed unused args must match /^_/u.","'deliverySlots' is assigned a value but never used.","'setPendingOrders' is assigned a value but never used.",["3681","3682"],"'categories' is defined but never used. Allowed unused args must match /^_/u.","'open' is defined but never used. Allowed unused args must match /^_/u.","'ShoppingCart' is defined but never used.","'OrderHistoryItem' is defined but never used.","'RFIDPickupInfo' is defined but never used.",["3683","3684"],["3685","3686"],["3687","3688"],"'onOrderStatusUpdate' is defined but never used. Allowed unused args must match /^_/u.","'onNotificationClick' is defined but never used. Allowed unused args must match /^_/u.","'mockStatusUpdates' is assigned a value but never used.",["3689","3690"],"'formatTime' is defined but never used.",["3691","3692"],"'within' is defined but never used.","'Command' is defined but never used.",["3693","3694"],["3695","3696"],["3697","3698"],["3699","3700"],["3701","3702"],["3703","3704"],"'selectedMeal' is assigned a value but never used.",["3705","3706"],["3707","3708"],"'isRfidVerified' is assigned a value but never used.",["3709","3710"],["3711","3712"],"'action' is defined but never used. Allowed unused args must match /^_/u.","'rfidCode' is defined but never used. Allowed unused args must match /^_/u.","'completeOrder' is assigned a value but never used.","'quantityDisplay' is assigned a value but never used.","'currentHeight' is assigned a value but never used.",["3713","3714"],"'Signal' is defined but never used.",["3715","3716"],"'isTablet' is assigned a value but never used.","'isDesktop' is assigned a value but never used.","'safeArea' is assigned a value but never used.",["3717","3718"],"'setNotificationCount' is assigned a value but never used.","'SheetClose' is defined but never used.","'Wallet' is defined but never used.","'History' is defined but never used.","'ReactNode' is defined but never used.","'Sun' is defined but never used.","'Moon' is defined but never used.","'VolumeX' is defined but never used.","'Vibrate' is defined but never used.","@typescript-eslint/ban-ts-comment","Use \"@ts-expect-error\" instead of \"@ts-ignore\", as \"@ts-ignore\" will do nothing if the following line is error-free.","Line","tsIgnoreInsteadOfExpectError",["3719"],["3720"],["3721"],["3722"],["3723"],["3724"],["3725"],"'setDataUsage' is assigned a value but never used.",["3726"],"'useRef' is defined but never used.","'Settings' is defined but never used.","'Check' is defined but never used.",["3727","3728"],["3729","3730"],"'QrCode' is defined but never used.",["3731"],"'Upload' is defined but never used.","'Download' is defined but never used.","'Cloud' is defined but never used.",["3732","3733"],["3734","3735"],["3736","3737"],["3738","3739"],["3740","3741"],["3742","3743"],"'Monitor' is defined but never used.","'CloudOff' is defined but never used.",["3744","3745"],["3746"],["3747"],["3748","3749"],["3750"],["3751"],"'connectionType' is assigned a value but never used.","'Battery' is defined but never used.",["3752","3753"],"'PullToRefresh' is defined but never used.","'ShareButton' is defined but never used.","'MessageCircle' is defined but never used.","'CardContent' is defined but never used.",["3754","3755"],["3756","3757"],["3758","3759"],["3760","3761"],["3762","3763"],["3764","3765"],"'e' is defined but never used. Allowed unused args must match /^_/u.","'velocity' is defined but never used. Allowed unused args must match /^_/u.","'isDragging' is assigned a value but never used.","'setIsDragging' is assigned a value but never used.","'center' is defined but never used. Allowed unused args must match /^_/u.","'pinchState' is assigned a value but never used.",["3766","3767"],"'isFocused' is assigned a value but never used.","'scrollToItem' is assigned a value but never used.","'dragControls' is assigned a value but never used.","'Volume2' is defined but never used.",["3768","3769"],["3770","3771"],["3772","3773"],["3774","3775"],["3776","3777"],["3778","3779"],"'formatCurrency' is defined but never used.","'WifiOff' is defined but never used.","'Progress' is defined but never used.","'activeTransactions' is assigned a value but never used.","'setActiveTransactions' is assigned a value but never used.",["3780","3781"],["3782","3783"],["3784","3785"],["3786","3787"],["3788","3789"],["3790","3791"],["3792","3793"],["3794","3795"],["3796","3797"],["3798","3799"],["3800","3801"],["3802","3803"],["3804","3805"],"Parsing error: Expected corresponding JSX closing tag for 'TabsContent'.","'Edit2' is defined but never used.",["3806","3807"],["3808","3809"],"'viewMode' is assigned a value but never used.","'setViewMode' is assigned a value but never used.","'mutationLoading' is assigned a value but never used.","'data' is defined but never used. Allowed unused args must match /^_/u.",["3810","3811"],"'ChevronRight' is defined but never used.","'Square' is defined but never used.",["3812","3813"],["3814","3815"],"'taskId' is defined but never used. Allowed unused args must match /^_/u.",["3816","3817"],["3818","3819"],"'CommandDialog' is defined but never used.",["3820","3821"],["3822","3823"],["3824","3825"],["3826","3827"],"'DrawerPortal' is defined but never used.","'DrawerOverlay' is defined but never used.","'user' is assigned a value but never used.","'fireEvent' is defined but never used.","'errorInfo' is defined but never used. Allowed unused args must match /^_/u.","'initialListeners' is assigned a value but never used.",["3828","3829"],"'CommandSeparator' is defined but never used.","'InputOTPSeparator' is defined but never used.",["3830","3831"],["3832","3833"],"'X' is defined but never used.","'onVoiceSearch' is defined but never used. Allowed unused args must match /^_/u.","'showVoiceSearch' is assigned a value but never used.","'buttonId' is assigned a value but never used.","'props' is defined but never used. Allowed unused args must match /^_/u.",["3834","3835"],"'getCurrentUser' is defined but never used.",["3836","3837"],["3838","3839"],["3840","3841"],["3842","3843"],["3844","3845"],["3846","3847"],["3848","3849"],["3850","3851"],["3852","3853"],["3854","3855"],"no-case-declarations","Unexpected lexical declaration in case block.","VariableDeclaration",["3856","3857"],["3858","3859"],["3860","3861"],["3862","3863"],"'email' is defined but never used. Allowed unused args must match /^_/u.","'getDashboardUrl' is defined but never used.",["3864","3865"],"Parsing error: Expression expected.",["3866","3867"],["3868","3869"],["3870","3871"],["3872","3873"],["3874","3875"],["3876","3877"],["3878","3879"],["3880","3881"],["3882","3883"],["3884","3885"],["3886","3887"],["3888","3889"],["3890","3891"],["3892","3893"],["3894","3895"],["3896","3897"],["3898","3899"],["3900","3901"],["3902","3903"],"'AuthResponse' is defined but never used.","Parsing error: Identifier expected. 'const' is a reserved word that cannot be used here.",["3904","3905"],["3906","3907"],["3908","3909"],"Parsing error: ',' expected.","'ReactElement' is defined but never used.",["3910","3911"],["3912","3913"],["3914","3915"],["3916","3917"],["3918","3919"],["3920","3921"],["3922","3923"],["3924","3925"],["3926","3927"],["3928","3929"],["3930","3931"],["3932","3933"],["3934","3935"],["3936","3937"],["3938","3939"],["3940","3941"],["3942","3943"],["3944","3945"],["3946","3947"],["3948","3949"],["3950","3951"],["3952","3953"],["3954","3955"],["3956","3957"],["3958","3959"],["3960","3961"],["3962","3963"],["3964","3965"],["3966","3967"],["3968","3969"],["3970","3971"],["3972","3973"],["3974","3975"],["3976","3977"],["3978","3979"],["3980","3981"],["3982","3983"],["3984","3985"],["3986","3987"],["3988","3989"],"'createTheme' is defined but never used.","Parsing error: Invalid character.","'Palette' is defined but never used.","'Box' is defined but never used.","'context' is defined but never used. Allowed unused args must match /^_/u.","'Tabs' is defined but never used.","'TabsContent' is defined but never used.","'TabsList' is defined but never used.","'TabsTrigger' is defined but never used.","'PWAInstallPrompt' is defined but never used.","'OfflineStatus' is defined but never used.","'NotificationPermission' is defined but never used.","'EmergencyBanner' is defined but never used.","'Wifi' is defined but never used.","'CreditCard' is defined but never used.","'id' is defined but never used. Allowed unused args must match /^_/u.","'reason' is defined but never used. Allowed unused args must match /^_/u.","'AuthLayout' is defined but never used.","'MinimalAuthLayout' is defined but never used.",["3990","3991"],["3992","3993"],"'signIn' is defined but never used.",["3994","3995"],["3996","3997"],["3998","3999"],["4000","4001"],["4002","4003"],["4004","4005"],["4006","4007"],["4008","4009"],["4010","4011"],["4012","4013"],["4014","4015"],["4016","4017"],["4018","4019"],["4020","4021"],["4022","4023"],["4024","4025"],["4026","4027"],["4028","4029"],["4030","4031"],["4032","4033"],["4034","4035"],["4036","4037"],["4038","4039"],["4040","4041"],["4042","4043"],["4044","4045"],["4046","4047"],["4048","4049"],["4050","4051"],["4052","4053"],["4054","4055"],["4056","4057"],["4058","4059"],["4060","4061"],["4062","4063"],["4064","4065"],["4066","4067"],["4068","4069"],["4070","4071"],["4072","4073"],["4074","4075"],["4076","4077"],["4078","4079"],["4080","4081"],["4082","4083"],["4084","4085"],["4086","4087"],["4088","4089"],["4090","4091"],["4092","4093"],["4094","4095"],["4096","4097"],["4098","4099"],["4100","4101"],["4102","4103"],["4104","4105"],["4106","4107"],["4108","4109"],["4110","4111"],["4112","4113"],["4114","4115"],["4116","4117"],["4118","4119"],["4120","4121"],["4122","4123"],["4124","4125"],["4126","4127"],["4128","4129"],["4130","4131"],["4132","4133"],["4134","4135"],["4136","4137"],["4138","4139"],["4140","4141"],["4142","4143"],["4144","4145"],["4146","4147"],["4148","4149"],["4150","4151"],["4152","4153"],["4154","4155"],["4156","4157"],["4158","4159"],["4160","4161"],["4162","4163"],["4164","4165"],["4166","4167"],["4168","4169"],["4170","4171"],["4172","4173"],["4174","4175"],["4176","4177"],["4178","4179"],["4180","4181"],["4182","4183"],["4184","4185"],["4186","4187"],["4188","4189"],["4190","4191"],["4192","4193"],["4194","4195"],["4196","4197"],["4198","4199"],["4200","4201"],["4202","4203"],["4204","4205"],["4206","4207"],["4208","4209"],["4210","4211"],["4212","4213"],["4214","4215"],["4216","4217"],["4218","4219"],["4220","4221"],["4222","4223"],["4224","4225"],["4226","4227"],["4228","4229"],["4230","4231"],["4232","4233"],"'rejectWithValue' is defined but never used. Allowed unused args must match /^_/u.","'PayloadAction' is defined but never used.",["4234","4235"],["4236","4237"],["4238","4239"],["4240","4241"],["4242","4243"],["4244","4245"],["4246","4247"],["4248","4249"],"'rfidApi' is defined but never used.",["4250","4251"],["4252","4253"],["4254","4255"],["4256","4257"],["4258","4259"],["4260","4261"],["4262","4263"],["4264","4265"],["4266","4267"],["4268","4269"],["4270","4271"],["4272","4273"],["4274","4275"],["4276","4277"],["4278","4279"],["4280","4281"],["4282","4283"],["4284","4285"],["4286","4287"],["4288"],{"messageId":"4289","fix":"4290","desc":"4291"},{"messageId":"4292","fix":"4293","desc":"4294"},{"messageId":"4289","fix":"4295","desc":"4291"},{"messageId":"4292","fix":"4296","desc":"4294"},{"messageId":"4289","fix":"4297","desc":"4291"},{"messageId":"4292","fix":"4298","desc":"4294"},{"messageId":"4289","fix":"4299","desc":"4291"},{"messageId":"4292","fix":"4300","desc":"4294"},{"messageId":"4289","fix":"4301","desc":"4291"},{"messageId":"4292","fix":"4302","desc":"4294"},{"messageId":"4289","fix":"4303","desc":"4291"},{"messageId":"4292","fix":"4304","desc":"4294"},{"messageId":"4289","fix":"4305","desc":"4291"},{"messageId":"4292","fix":"4306","desc":"4294"},{"messageId":"4289","fix":"4307","desc":"4291"},{"messageId":"4292","fix":"4308","desc":"4294"},{"messageId":"4289","fix":"4309","desc":"4291"},{"messageId":"4292","fix":"4310","desc":"4294"},{"messageId":"4289","fix":"4311","desc":"4291"},{"messageId":"4292","fix":"4312","desc":"4294"},{"messageId":"4289","fix":"4313","desc":"4291"},{"messageId":"4292","fix":"4314","desc":"4294"},{"messageId":"4289","fix":"4315","desc":"4291"},{"messageId":"4292","fix":"4316","desc":"4294"},{"messageId":"4289","fix":"4317","desc":"4291"},{"messageId":"4292","fix":"4318","desc":"4294"},{"messageId":"4289","fix":"4319","desc":"4291"},{"messageId":"4292","fix":"4320","desc":"4294"},{"messageId":"4289","fix":"4321","desc":"4291"},{"messageId":"4292","fix":"4322","desc":"4294"},{"messageId":"4289","fix":"4323","desc":"4291"},{"messageId":"4292","fix":"4324","desc":"4294"},{"messageId":"4289","fix":"4325","desc":"4291"},{"messageId":"4292","fix":"4326","desc":"4294"},{"messageId":"4289","fix":"4327","desc":"4291"},{"messageId":"4292","fix":"4328","desc":"4294"},{"messageId":"4289","fix":"4329","desc":"4291"},{"messageId":"4292","fix":"4330","desc":"4294"},{"messageId":"4289","fix":"4331","desc":"4291"},{"messageId":"4292","fix":"4332","desc":"4294"},{"messageId":"4289","fix":"4333","desc":"4291"},{"messageId":"4292","fix":"4334","desc":"4294"},{"messageId":"4289","fix":"4335","desc":"4291"},{"messageId":"4292","fix":"4336","desc":"4294"},{"messageId":"4289","fix":"4337","desc":"4291"},{"messageId":"4292","fix":"4338","desc":"4294"},{"messageId":"4289","fix":"4339","desc":"4291"},{"messageId":"4292","fix":"4340","desc":"4294"},{"messageId":"4341","fix":"4342","desc":"4343"},{"messageId":"4344","fix":"4345","desc":"4346"},{"messageId":"4341","fix":"4347","desc":"4343"},{"messageId":"4344","fix":"4348","desc":"4346"},{"messageId":"4341","fix":"4349","desc":"4343"},{"messageId":"4344","fix":"4350","desc":"4346"},{"messageId":"4341","fix":"4351","desc":"4343"},{"messageId":"4344","fix":"4352","desc":"4346"},{"messageId":"4341","fix":"4353","desc":"4343"},{"messageId":"4344","fix":"4354","desc":"4346"},{"messageId":"4341","fix":"4355","desc":"4343"},{"messageId":"4344","fix":"4356","desc":"4346"},{"messageId":"4341","fix":"4357","desc":"4343"},{"messageId":"4344","fix":"4358","desc":"4346"},{"messageId":"4341","fix":"4359","desc":"4343"},{"messageId":"4344","fix":"4360","desc":"4346"},{"messageId":"4341","fix":"4361","desc":"4343"},{"messageId":"4344","fix":"4362","desc":"4346"},{"messageId":"4341","fix":"4363","desc":"4343"},{"messageId":"4344","fix":"4364","desc":"4346"},{"messageId":"4289","fix":"4365","desc":"4291"},{"messageId":"4292","fix":"4366","desc":"4294"},{"messageId":"4289","fix":"4367","desc":"4291"},{"messageId":"4292","fix":"4368","desc":"4294"},{"messageId":"4289","fix":"4369","desc":"4291"},{"messageId":"4292","fix":"4370","desc":"4294"},{"messageId":"4289","fix":"4371","desc":"4291"},{"messageId":"4292","fix":"4372","desc":"4294"},{"messageId":"4289","fix":"4373","desc":"4291"},{"messageId":"4292","fix":"4374","desc":"4294"},{"messageId":"4289","fix":"4375","desc":"4291"},{"messageId":"4292","fix":"4376","desc":"4294"},{"messageId":"4289","fix":"4377","desc":"4291"},{"messageId":"4292","fix":"4378","desc":"4294"},{"messageId":"4289","fix":"4379","desc":"4291"},{"messageId":"4292","fix":"4380","desc":"4294"},{"messageId":"4289","fix":"4381","desc":"4291"},{"messageId":"4292","fix":"4382","desc":"4294"},{"messageId":"4289","fix":"4383","desc":"4291"},{"messageId":"4292","fix":"4384","desc":"4294"},{"messageId":"4289","fix":"4385","desc":"4291"},{"messageId":"4292","fix":"4386","desc":"4294"},{"messageId":"4289","fix":"4387","desc":"4291"},{"messageId":"4292","fix":"4388","desc":"4294"},{"messageId":"4289","fix":"4389","desc":"4291"},{"messageId":"4292","fix":"4390","desc":"4294"},[63,75],"",[85,100],[110,118],{"messageId":"4391","data":"4392","fix":"4393","desc":"4394"},[127,148],[158,174],{"messageId":"4289","fix":"4395","desc":"4291"},{"messageId":"4292","fix":"4396","desc":"4294"},{"messageId":"4289","fix":"4397","desc":"4291"},{"messageId":"4292","fix":"4398","desc":"4294"},{"messageId":"4289","fix":"4399","desc":"4291"},{"messageId":"4292","fix":"4400","desc":"4294"},{"messageId":"4289","fix":"4401","desc":"4291"},{"messageId":"4292","fix":"4402","desc":"4294"},{"messageId":"4289","fix":"4403","desc":"4291"},{"messageId":"4292","fix":"4404","desc":"4294"},{"messageId":"4289","fix":"4405","desc":"4291"},{"messageId":"4292","fix":"4406","desc":"4294"},{"messageId":"4289","fix":"4407","desc":"4291"},{"messageId":"4292","fix":"4408","desc":"4294"},{"messageId":"4289","fix":"4409","desc":"4291"},{"messageId":"4292","fix":"4410","desc":"4294"},{"messageId":"4289","fix":"4411","desc":"4291"},{"messageId":"4292","fix":"4412","desc":"4294"},{"messageId":"4289","fix":"4413","desc":"4291"},{"messageId":"4292","fix":"4414","desc":"4294"},{"messageId":"4289","fix":"4415","desc":"4291"},{"messageId":"4292","fix":"4416","desc":"4294"},{"messageId":"4289","fix":"4417","desc":"4291"},{"messageId":"4292","fix":"4418","desc":"4294"},{"messageId":"4289","fix":"4419","desc":"4291"},{"messageId":"4292","fix":"4420","desc":"4294"},{"messageId":"4289","fix":"4421","desc":"4291"},{"messageId":"4292","fix":"4422","desc":"4294"},{"messageId":"4289","fix":"4423","desc":"4291"},{"messageId":"4292","fix":"4424","desc":"4294"},{"messageId":"4289","fix":"4425","desc":"4291"},{"messageId":"4292","fix":"4426","desc":"4294"},{"messageId":"4289","fix":"4427","desc":"4291"},{"messageId":"4292","fix":"4428","desc":"4294"},{"messageId":"4289","fix":"4429","desc":"4291"},{"messageId":"4292","fix":"4430","desc":"4294"},{"messageId":"4289","fix":"4431","desc":"4291"},{"messageId":"4292","fix":"4432","desc":"4294"},{"messageId":"4289","fix":"4433","desc":"4291"},{"messageId":"4292","fix":"4434","desc":"4294"},{"messageId":"4289","fix":"4435","desc":"4291"},{"messageId":"4292","fix":"4436","desc":"4294"},{"messageId":"4289","fix":"4437","desc":"4291"},{"messageId":"4292","fix":"4438","desc":"4294"},[376,410],"const wordsArray = words.split(\" \");",{"messageId":"4289","fix":"4439","desc":"4291"},{"messageId":"4292","fix":"4440","desc":"4294"},{"messageId":"4289","fix":"4441","desc":"4291"},{"messageId":"4292","fix":"4442","desc":"4294"},{"messageId":"4289","fix":"4443","desc":"4291"},{"messageId":"4292","fix":"4444","desc":"4294"},{"messageId":"4289","fix":"4445","desc":"4291"},{"messageId":"4292","fix":"4446","desc":"4294"},{"messageId":"4289","fix":"4447","desc":"4291"},{"messageId":"4292","fix":"4448","desc":"4294"},{"messageId":"4289","fix":"4449","desc":"4291"},{"messageId":"4292","fix":"4450","desc":"4294"},{"messageId":"4289","fix":"4451","desc":"4291"},{"messageId":"4292","fix":"4452","desc":"4294"},{"messageId":"4289","fix":"4453","desc":"4291"},{"messageId":"4292","fix":"4454","desc":"4294"},{"messageId":"4289","fix":"4455","desc":"4291"},{"messageId":"4292","fix":"4456","desc":"4294"},{"messageId":"4289","fix":"4457","desc":"4291"},{"messageId":"4292","fix":"4458","desc":"4294"},{"messageId":"4289","fix":"4459","desc":"4291"},{"messageId":"4292","fix":"4460","desc":"4294"},{"messageId":"4289","fix":"4461","desc":"4291"},{"messageId":"4292","fix":"4462","desc":"4294"},{"messageId":"4289","fix":"4463","desc":"4291"},{"messageId":"4292","fix":"4464","desc":"4294"},{"messageId":"4289","fix":"4465","desc":"4291"},{"messageId":"4292","fix":"4466","desc":"4294"},{"messageId":"4289","fix":"4467","desc":"4291"},{"messageId":"4292","fix":"4468","desc":"4294"},{"messageId":"4289","fix":"4469","desc":"4291"},{"messageId":"4292","fix":"4470","desc":"4294"},{"messageId":"4289","fix":"4471","desc":"4291"},{"messageId":"4292","fix":"4472","desc":"4294"},{"messageId":"4289","fix":"4473","desc":"4291"},{"messageId":"4292","fix":"4474","desc":"4294"},{"messageId":"4289","fix":"4475","desc":"4291"},{"messageId":"4292","fix":"4476","desc":"4294"},{"messageId":"4289","fix":"4477","desc":"4291"},{"messageId":"4292","fix":"4478","desc":"4294"},{"messageId":"4479","fix":"4480","desc":"4481"},{"messageId":"4479","fix":"4482","desc":"4481"},{"messageId":"4479","fix":"4483","desc":"4481"},{"messageId":"4479","fix":"4484","desc":"4481"},{"messageId":"4479","fix":"4485","desc":"4481"},{"messageId":"4479","fix":"4486","desc":"4481"},{"messageId":"4479","fix":"4487","desc":"4481"},{"messageId":"4479","fix":"4488","desc":"4481"},{"messageId":"4289","fix":"4489","desc":"4291"},{"messageId":"4292","fix":"4490","desc":"4294"},{"messageId":"4289","fix":"4491","desc":"4291"},{"messageId":"4292","fix":"4492","desc":"4294"},{"messageId":"4479","fix":"4493","desc":"4481"},{"messageId":"4289","fix":"4494","desc":"4291"},{"messageId":"4292","fix":"4495","desc":"4294"},{"messageId":"4289","fix":"4496","desc":"4291"},{"messageId":"4292","fix":"4497","desc":"4294"},{"messageId":"4289","fix":"4498","desc":"4291"},{"messageId":"4292","fix":"4499","desc":"4294"},{"messageId":"4289","fix":"4500","desc":"4291"},{"messageId":"4292","fix":"4501","desc":"4294"},{"messageId":"4289","fix":"4502","desc":"4291"},{"messageId":"4292","fix":"4503","desc":"4294"},{"messageId":"4289","fix":"4504","desc":"4291"},{"messageId":"4292","fix":"4505","desc":"4294"},{"messageId":"4289","fix":"4506","desc":"4291"},{"messageId":"4292","fix":"4507","desc":"4294"},{"messageId":"4479","fix":"4508","desc":"4481"},{"messageId":"4479","fix":"4509","desc":"4481"},{"messageId":"4289","fix":"4510","desc":"4291"},{"messageId":"4292","fix":"4511","desc":"4294"},{"messageId":"4479","fix":"4512","desc":"4481"},{"messageId":"4479","fix":"4513","desc":"4481"},{"messageId":"4289","fix":"4514","desc":"4291"},{"messageId":"4292","fix":"4515","desc":"4294"},{"messageId":"4289","fix":"4516","desc":"4291"},{"messageId":"4292","fix":"4517","desc":"4294"},{"messageId":"4289","fix":"4518","desc":"4291"},{"messageId":"4292","fix":"4519","desc":"4294"},{"messageId":"4289","fix":"4520","desc":"4291"},{"messageId":"4292","fix":"4521","desc":"4294"},{"messageId":"4289","fix":"4522","desc":"4291"},{"messageId":"4292","fix":"4523","desc":"4294"},{"messageId":"4289","fix":"4524","desc":"4291"},{"messageId":"4292","fix":"4525","desc":"4294"},{"messageId":"4289","fix":"4526","desc":"4291"},{"messageId":"4292","fix":"4527","desc":"4294"},{"messageId":"4289","fix":"4528","desc":"4291"},{"messageId":"4292","fix":"4529","desc":"4294"},{"messageId":"4289","fix":"4530","desc":"4291"},{"messageId":"4292","fix":"4531","desc":"4294"},{"messageId":"4289","fix":"4532","desc":"4291"},{"messageId":"4292","fix":"4533","desc":"4294"},{"messageId":"4289","fix":"4534","desc":"4291"},{"messageId":"4292","fix":"4535","desc":"4294"},{"messageId":"4289","fix":"4536","desc":"4291"},{"messageId":"4292","fix":"4537","desc":"4294"},{"messageId":"4289","fix":"4538","desc":"4291"},{"messageId":"4292","fix":"4539","desc":"4294"},{"messageId":"4289","fix":"4540","desc":"4291"},{"messageId":"4292","fix":"4541","desc":"4294"},{"messageId":"4289","fix":"4542","desc":"4291"},{"messageId":"4292","fix":"4543","desc":"4294"},{"messageId":"4289","fix":"4544","desc":"4291"},{"messageId":"4292","fix":"4545","desc":"4294"},{"messageId":"4289","fix":"4546","desc":"4291"},{"messageId":"4292","fix":"4547","desc":"4294"},{"messageId":"4289","fix":"4548","desc":"4291"},{"messageId":"4292","fix":"4549","desc":"4294"},{"messageId":"4289","fix":"4550","desc":"4291"},{"messageId":"4292","fix":"4551","desc":"4294"},{"messageId":"4289","fix":"4552","desc":"4291"},{"messageId":"4292","fix":"4553","desc":"4294"},{"messageId":"4289","fix":"4554","desc":"4291"},{"messageId":"4292","fix":"4555","desc":"4294"},{"messageId":"4289","fix":"4556","desc":"4291"},{"messageId":"4292","fix":"4557","desc":"4294"},{"messageId":"4289","fix":"4558","desc":"4291"},{"messageId":"4292","fix":"4559","desc":"4294"},{"messageId":"4289","fix":"4560","desc":"4291"},{"messageId":"4292","fix":"4561","desc":"4294"},{"messageId":"4289","fix":"4562","desc":"4291"},{"messageId":"4292","fix":"4563","desc":"4294"},{"messageId":"4289","fix":"4564","desc":"4291"},{"messageId":"4292","fix":"4565","desc":"4294"},{"messageId":"4289","fix":"4566","desc":"4291"},{"messageId":"4292","fix":"4567","desc":"4294"},{"messageId":"4289","fix":"4568","desc":"4291"},{"messageId":"4292","fix":"4569","desc":"4294"},{"messageId":"4289","fix":"4570","desc":"4291"},{"messageId":"4292","fix":"4571","desc":"4294"},{"messageId":"4289","fix":"4572","desc":"4291"},{"messageId":"4292","fix":"4573","desc":"4294"},{"messageId":"4289","fix":"4574","desc":"4291"},{"messageId":"4292","fix":"4575","desc":"4294"},{"messageId":"4289","fix":"4576","desc":"4291"},{"messageId":"4292","fix":"4577","desc":"4294"},{"messageId":"4289","fix":"4578","desc":"4291"},{"messageId":"4292","fix":"4579","desc":"4294"},{"messageId":"4289","fix":"4580","desc":"4291"},{"messageId":"4292","fix":"4581","desc":"4294"},{"messageId":"4289","fix":"4582","desc":"4291"},{"messageId":"4292","fix":"4583","desc":"4294"},{"messageId":"4289","fix":"4584","desc":"4291"},{"messageId":"4292","fix":"4585","desc":"4294"},{"messageId":"4289","fix":"4586","desc":"4291"},{"messageId":"4292","fix":"4587","desc":"4294"},{"messageId":"4289","fix":"4588","desc":"4291"},{"messageId":"4292","fix":"4589","desc":"4294"},{"messageId":"4289","fix":"4590","desc":"4291"},{"messageId":"4292","fix":"4591","desc":"4294"},{"messageId":"4289","fix":"4592","desc":"4291"},{"messageId":"4292","fix":"4593","desc":"4294"},{"messageId":"4289","fix":"4594","desc":"4291"},{"messageId":"4292","fix":"4595","desc":"4294"},{"messageId":"4289","fix":"4596","desc":"4291"},{"messageId":"4292","fix":"4597","desc":"4294"},{"messageId":"4289","fix":"4598","desc":"4291"},{"messageId":"4292","fix":"4599","desc":"4294"},{"messageId":"4289","fix":"4600","desc":"4291"},{"messageId":"4292","fix":"4601","desc":"4294"},{"messageId":"4289","fix":"4602","desc":"4291"},{"messageId":"4292","fix":"4603","desc":"4294"},{"messageId":"4289","fix":"4604","desc":"4291"},{"messageId":"4292","fix":"4605","desc":"4294"},{"messageId":"4289","fix":"4606","desc":"4291"},{"messageId":"4292","fix":"4607","desc":"4294"},{"messageId":"4289","fix":"4608","desc":"4291"},{"messageId":"4292","fix":"4609","desc":"4294"},{"messageId":"4289","fix":"4610","desc":"4291"},{"messageId":"4292","fix":"4611","desc":"4294"},{"messageId":"4289","fix":"4612","desc":"4291"},{"messageId":"4292","fix":"4613","desc":"4294"},{"messageId":"4289","fix":"4614","desc":"4291"},{"messageId":"4292","fix":"4615","desc":"4294"},{"messageId":"4289","fix":"4616","desc":"4291"},{"messageId":"4292","fix":"4617","desc":"4294"},{"messageId":"4289","fix":"4618","desc":"4291"},{"messageId":"4292","fix":"4619","desc":"4294"},{"messageId":"4289","fix":"4620","desc":"4291"},{"messageId":"4292","fix":"4621","desc":"4294"},{"messageId":"4289","fix":"4622","desc":"4291"},{"messageId":"4292","fix":"4623","desc":"4294"},{"messageId":"4289","fix":"4624","desc":"4291"},{"messageId":"4292","fix":"4625","desc":"4294"},{"messageId":"4289","fix":"4626","desc":"4291"},{"messageId":"4292","fix":"4627","desc":"4294"},{"messageId":"4289","fix":"4628","desc":"4291"},{"messageId":"4292","fix":"4629","desc":"4294"},{"messageId":"4289","fix":"4630","desc":"4291"},{"messageId":"4292","fix":"4631","desc":"4294"},{"messageId":"4289","fix":"4632","desc":"4291"},{"messageId":"4292","fix":"4633","desc":"4294"},{"messageId":"4289","fix":"4634","desc":"4291"},{"messageId":"4292","fix":"4635","desc":"4294"},{"messageId":"4289","fix":"4636","desc":"4291"},{"messageId":"4292","fix":"4637","desc":"4294"},{"messageId":"4289","fix":"4638","desc":"4291"},{"messageId":"4292","fix":"4639","desc":"4294"},{"messageId":"4289","fix":"4640","desc":"4291"},{"messageId":"4292","fix":"4641","desc":"4294"},{"messageId":"4289","fix":"4642","desc":"4291"},{"messageId":"4292","fix":"4643","desc":"4294"},{"messageId":"4289","fix":"4644","desc":"4291"},{"messageId":"4292","fix":"4645","desc":"4294"},{"messageId":"4289","fix":"4646","desc":"4291"},{"messageId":"4292","fix":"4647","desc":"4294"},{"messageId":"4289","fix":"4648","desc":"4291"},{"messageId":"4292","fix":"4649","desc":"4294"},{"messageId":"4289","fix":"4650","desc":"4291"},{"messageId":"4292","fix":"4651","desc":"4294"},{"messageId":"4289","fix":"4652","desc":"4291"},{"messageId":"4292","fix":"4653","desc":"4294"},{"messageId":"4289","fix":"4654","desc":"4291"},{"messageId":"4292","fix":"4655","desc":"4294"},{"messageId":"4289","fix":"4656","desc":"4291"},{"messageId":"4292","fix":"4657","desc":"4294"},{"messageId":"4289","fix":"4658","desc":"4291"},{"messageId":"4292","fix":"4659","desc":"4294"},{"messageId":"4289","fix":"4660","desc":"4291"},{"messageId":"4292","fix":"4661","desc":"4294"},{"messageId":"4289","fix":"4662","desc":"4291"},{"messageId":"4292","fix":"4663","desc":"4294"},{"messageId":"4289","fix":"4664","desc":"4291"},{"messageId":"4292","fix":"4665","desc":"4294"},{"messageId":"4289","fix":"4666","desc":"4291"},{"messageId":"4292","fix":"4667","desc":"4294"},{"messageId":"4289","fix":"4668","desc":"4291"},{"messageId":"4292","fix":"4669","desc":"4294"},{"messageId":"4289","fix":"4670","desc":"4291"},{"messageId":"4292","fix":"4671","desc":"4294"},{"messageId":"4289","fix":"4672","desc":"4291"},{"messageId":"4292","fix":"4673","desc":"4294"},{"messageId":"4289","fix":"4674","desc":"4291"},{"messageId":"4292","fix":"4675","desc":"4294"},{"messageId":"4289","fix":"4676","desc":"4291"},{"messageId":"4292","fix":"4677","desc":"4294"},{"messageId":"4289","fix":"4678","desc":"4291"},{"messageId":"4292","fix":"4679","desc":"4294"},{"messageId":"4289","fix":"4680","desc":"4291"},{"messageId":"4292","fix":"4681","desc":"4294"},{"messageId":"4289","fix":"4682","desc":"4291"},{"messageId":"4292","fix":"4683","desc":"4294"},{"messageId":"4289","fix":"4684","desc":"4291"},{"messageId":"4292","fix":"4685","desc":"4294"},{"messageId":"4289","fix":"4686","desc":"4291"},{"messageId":"4292","fix":"4687","desc":"4294"},{"messageId":"4289","fix":"4688","desc":"4291"},{"messageId":"4292","fix":"4689","desc":"4294"},{"messageId":"4289","fix":"4690","desc":"4291"},{"messageId":"4292","fix":"4691","desc":"4294"},{"messageId":"4289","fix":"4692","desc":"4291"},{"messageId":"4292","fix":"4693","desc":"4294"},{"messageId":"4289","fix":"4694","desc":"4291"},{"messageId":"4292","fix":"4695","desc":"4294"},{"messageId":"4289","fix":"4696","desc":"4291"},{"messageId":"4292","fix":"4697","desc":"4294"},{"messageId":"4289","fix":"4698","desc":"4291"},{"messageId":"4292","fix":"4699","desc":"4294"},{"messageId":"4289","fix":"4700","desc":"4291"},{"messageId":"4292","fix":"4701","desc":"4294"},{"messageId":"4289","fix":"4702","desc":"4291"},{"messageId":"4292","fix":"4703","desc":"4294"},{"messageId":"4289","fix":"4704","desc":"4291"},{"messageId":"4292","fix":"4705","desc":"4294"},{"messageId":"4289","fix":"4706","desc":"4291"},{"messageId":"4292","fix":"4707","desc":"4294"},{"messageId":"4289","fix":"4708","desc":"4291"},{"messageId":"4292","fix":"4709","desc":"4294"},{"messageId":"4289","fix":"4710","desc":"4291"},{"messageId":"4292","fix":"4711","desc":"4294"},{"messageId":"4289","fix":"4712","desc":"4291"},{"messageId":"4292","fix":"4713","desc":"4294"},{"messageId":"4289","fix":"4714","desc":"4291"},{"messageId":"4292","fix":"4715","desc":"4294"},{"messageId":"4289","fix":"4716","desc":"4291"},{"messageId":"4292","fix":"4717","desc":"4294"},{"messageId":"4289","fix":"4718","desc":"4291"},{"messageId":"4292","fix":"4719","desc":"4294"},{"messageId":"4289","fix":"4720","desc":"4291"},{"messageId":"4292","fix":"4721","desc":"4294"},{"messageId":"4289","fix":"4722","desc":"4291"},{"messageId":"4292","fix":"4723","desc":"4294"},{"messageId":"4289","fix":"4724","desc":"4291"},{"messageId":"4292","fix":"4725","desc":"4294"},{"messageId":"4289","fix":"4726","desc":"4291"},{"messageId":"4292","fix":"4727","desc":"4294"},{"messageId":"4289","fix":"4728","desc":"4291"},{"messageId":"4292","fix":"4729","desc":"4294"},{"messageId":"4289","fix":"4730","desc":"4291"},{"messageId":"4292","fix":"4731","desc":"4294"},{"messageId":"4289","fix":"4732","desc":"4291"},{"messageId":"4292","fix":"4733","desc":"4294"},{"messageId":"4289","fix":"4734","desc":"4291"},{"messageId":"4292","fix":"4735","desc":"4294"},{"messageId":"4289","fix":"4736","desc":"4291"},{"messageId":"4292","fix":"4737","desc":"4294"},{"messageId":"4289","fix":"4738","desc":"4291"},{"messageId":"4292","fix":"4739","desc":"4294"},{"messageId":"4289","fix":"4740","desc":"4291"},{"messageId":"4292","fix":"4741","desc":"4294"},{"messageId":"4289","fix":"4742","desc":"4291"},{"messageId":"4292","fix":"4743","desc":"4294"},{"messageId":"4289","fix":"4744","desc":"4291"},{"messageId":"4292","fix":"4745","desc":"4294"},{"messageId":"4289","fix":"4746","desc":"4291"},{"messageId":"4292","fix":"4747","desc":"4294"},{"messageId":"4289","fix":"4748","desc":"4291"},{"messageId":"4292","fix":"4749","desc":"4294"},{"messageId":"4289","fix":"4750","desc":"4291"},{"messageId":"4292","fix":"4751","desc":"4294"},{"messageId":"4289","fix":"4752","desc":"4291"},{"messageId":"4292","fix":"4753","desc":"4294"},{"messageId":"4289","fix":"4754","desc":"4291"},{"messageId":"4292","fix":"4755","desc":"4294"},{"messageId":"4289","fix":"4756","desc":"4291"},{"messageId":"4292","fix":"4757","desc":"4294"},{"messageId":"4289","fix":"4758","desc":"4291"},{"messageId":"4292","fix":"4759","desc":"4294"},{"messageId":"4289","fix":"4760","desc":"4291"},{"messageId":"4292","fix":"4761","desc":"4294"},{"messageId":"4289","fix":"4762","desc":"4291"},{"messageId":"4292","fix":"4763","desc":"4294"},{"messageId":"4289","fix":"4764","desc":"4291"},{"messageId":"4292","fix":"4765","desc":"4294"},{"messageId":"4289","fix":"4766","desc":"4291"},{"messageId":"4292","fix":"4767","desc":"4294"},{"messageId":"4289","fix":"4768","desc":"4291"},{"messageId":"4292","fix":"4769","desc":"4294"},{"messageId":"4289","fix":"4770","desc":"4291"},{"messageId":"4292","fix":"4771","desc":"4294"},{"messageId":"4289","fix":"4772","desc":"4291"},{"messageId":"4292","fix":"4773","desc":"4294"},{"messageId":"4289","fix":"4774","desc":"4291"},{"messageId":"4292","fix":"4775","desc":"4294"},{"messageId":"4289","fix":"4776","desc":"4291"},{"messageId":"4292","fix":"4777","desc":"4294"},{"messageId":"4289","fix":"4778","desc":"4291"},{"messageId":"4292","fix":"4779","desc":"4294"},{"messageId":"4289","fix":"4780","desc":"4291"},{"messageId":"4292","fix":"4781","desc":"4294"},{"messageId":"4289","fix":"4782","desc":"4291"},{"messageId":"4292","fix":"4783","desc":"4294"},{"messageId":"4289","fix":"4784","desc":"4291"},{"messageId":"4292","fix":"4785","desc":"4294"},{"messageId":"4289","fix":"4786","desc":"4291"},{"messageId":"4292","fix":"4787","desc":"4294"},{"messageId":"4289","fix":"4788","desc":"4291"},{"messageId":"4292","fix":"4789","desc":"4294"},{"messageId":"4289","fix":"4790","desc":"4291"},{"messageId":"4292","fix":"4791","desc":"4294"},{"messageId":"4289","fix":"4792","desc":"4291"},{"messageId":"4292","fix":"4793","desc":"4294"},{"messageId":"4289","fix":"4794","desc":"4291"},{"messageId":"4292","fix":"4795","desc":"4294"},{"messageId":"4289","fix":"4796","desc":"4291"},{"messageId":"4292","fix":"4797","desc":"4294"},{"messageId":"4289","fix":"4798","desc":"4291"},{"messageId":"4292","fix":"4799","desc":"4294"},{"messageId":"4289","fix":"4800","desc":"4291"},{"messageId":"4292","fix":"4801","desc":"4294"},{"messageId":"4289","fix":"4802","desc":"4291"},{"messageId":"4292","fix":"4803","desc":"4294"},{"messageId":"4289","fix":"4804","desc":"4291"},{"messageId":"4292","fix":"4805","desc":"4294"},{"messageId":"4289","fix":"4806","desc":"4291"},{"messageId":"4292","fix":"4807","desc":"4294"},{"messageId":"4289","fix":"4808","desc":"4291"},{"messageId":"4292","fix":"4809","desc":"4294"},{"messageId":"4289","fix":"4810","desc":"4291"},{"messageId":"4292","fix":"4811","desc":"4294"},{"messageId":"4289","fix":"4812","desc":"4291"},{"messageId":"4292","fix":"4813","desc":"4294"},{"messageId":"4289","fix":"4814","desc":"4291"},{"messageId":"4292","fix":"4815","desc":"4294"},{"messageId":"4289","fix":"4816","desc":"4291"},{"messageId":"4292","fix":"4817","desc":"4294"},{"messageId":"4289","fix":"4818","desc":"4291"},{"messageId":"4292","fix":"4819","desc":"4294"},{"messageId":"4289","fix":"4820","desc":"4291"},{"messageId":"4292","fix":"4821","desc":"4294"},{"messageId":"4289","fix":"4822","desc":"4291"},{"messageId":"4292","fix":"4823","desc":"4294"},{"messageId":"4289","fix":"4824","desc":"4291"},{"messageId":"4292","fix":"4825","desc":"4294"},{"messageId":"4289","fix":"4826","desc":"4291"},{"messageId":"4292","fix":"4827","desc":"4294"},{"messageId":"4289","fix":"4828","desc":"4291"},{"messageId":"4292","fix":"4829","desc":"4294"},{"messageId":"4289","fix":"4830","desc":"4291"},{"messageId":"4292","fix":"4831","desc":"4294"},{"messageId":"4289","fix":"4832","desc":"4291"},{"messageId":"4292","fix":"4833","desc":"4294"},{"messageId":"4289","fix":"4834","desc":"4291"},{"messageId":"4292","fix":"4835","desc":"4294"},{"messageId":"4289","fix":"4836","desc":"4291"},{"messageId":"4292","fix":"4837","desc":"4294"},{"messageId":"4289","fix":"4838","desc":"4291"},{"messageId":"4292","fix":"4839","desc":"4294"},{"messageId":"4289","fix":"4840","desc":"4291"},{"messageId":"4292","fix":"4841","desc":"4294"},{"messageId":"4289","fix":"4842","desc":"4291"},{"messageId":"4292","fix":"4843","desc":"4294"},{"messageId":"4289","fix":"4844","desc":"4291"},{"messageId":"4292","fix":"4845","desc":"4294"},{"messageId":"4289","fix":"4846","desc":"4291"},{"messageId":"4292","fix":"4847","desc":"4294"},{"messageId":"4289","fix":"4848","desc":"4291"},{"messageId":"4292","fix":"4849","desc":"4294"},{"messageId":"4289","fix":"4850","desc":"4291"},{"messageId":"4292","fix":"4851","desc":"4294"},{"messageId":"4289","fix":"4852","desc":"4291"},{"messageId":"4292","fix":"4853","desc":"4294"},{"messageId":"4289","fix":"4854","desc":"4291"},{"messageId":"4292","fix":"4855","desc":"4294"},{"messageId":"4289","fix":"4856","desc":"4291"},{"messageId":"4292","fix":"4857","desc":"4294"},{"messageId":"4289","fix":"4858","desc":"4291"},{"messageId":"4292","fix":"4859","desc":"4294"},{"messageId":"4289","fix":"4860","desc":"4291"},{"messageId":"4292","fix":"4861","desc":"4294"},{"messageId":"4289","fix":"4862","desc":"4291"},{"messageId":"4292","fix":"4863","desc":"4294"},{"messageId":"4289","fix":"4864","desc":"4291"},{"messageId":"4292","fix":"4865","desc":"4294"},{"messageId":"4289","fix":"4866","desc":"4291"},{"messageId":"4292","fix":"4867","desc":"4294"},{"messageId":"4289","fix":"4868","desc":"4291"},{"messageId":"4292","fix":"4869","desc":"4294"},{"messageId":"4289","fix":"4870","desc":"4291"},{"messageId":"4292","fix":"4871","desc":"4294"},{"messageId":"4289","fix":"4872","desc":"4291"},{"messageId":"4292","fix":"4873","desc":"4294"},{"messageId":"4289","fix":"4874","desc":"4291"},{"messageId":"4292","fix":"4875","desc":"4294"},{"messageId":"4289","fix":"4876","desc":"4291"},{"messageId":"4292","fix":"4877","desc":"4294"},{"messageId":"4289","fix":"4878","desc":"4291"},{"messageId":"4292","fix":"4879","desc":"4294"},{"messageId":"4289","fix":"4880","desc":"4291"},{"messageId":"4292","fix":"4881","desc":"4294"},{"messageId":"4289","fix":"4882","desc":"4291"},{"messageId":"4292","fix":"4883","desc":"4294"},{"messageId":"4289","fix":"4884","desc":"4291"},{"messageId":"4292","fix":"4885","desc":"4294"},{"messageId":"4289","fix":"4886","desc":"4291"},{"messageId":"4292","fix":"4887","desc":"4294"},{"messageId":"4289","fix":"4888","desc":"4291"},{"messageId":"4292","fix":"4889","desc":"4294"},{"messageId":"4289","fix":"4890","desc":"4291"},{"messageId":"4292","fix":"4891","desc":"4294"},{"messageId":"4289","fix":"4892","desc":"4291"},{"messageId":"4292","fix":"4893","desc":"4294"},{"messageId":"4289","fix":"4894","desc":"4291"},{"messageId":"4292","fix":"4895","desc":"4294"},{"messageId":"4289","fix":"4896","desc":"4291"},{"messageId":"4292","fix":"4897","desc":"4294"},{"messageId":"4289","fix":"4898","desc":"4291"},{"messageId":"4292","fix":"4899","desc":"4294"},{"messageId":"4289","fix":"4900","desc":"4291"},{"messageId":"4292","fix":"4901","desc":"4294"},{"messageId":"4289","fix":"4902","desc":"4291"},{"messageId":"4292","fix":"4903","desc":"4294"},{"messageId":"4289","fix":"4904","desc":"4291"},{"messageId":"4292","fix":"4905","desc":"4294"},{"messageId":"4289","fix":"4906","desc":"4291"},{"messageId":"4292","fix":"4907","desc":"4294"},{"messageId":"4289","fix":"4908","desc":"4291"},{"messageId":"4292","fix":"4909","desc":"4294"},{"messageId":"4289","fix":"4910","desc":"4291"},{"messageId":"4292","fix":"4911","desc":"4294"},{"messageId":"4289","fix":"4912","desc":"4291"},{"messageId":"4292","fix":"4913","desc":"4294"},{"messageId":"4289","fix":"4914","desc":"4291"},{"messageId":"4292","fix":"4915","desc":"4294"},{"messageId":"4289","fix":"4916","desc":"4291"},{"messageId":"4292","fix":"4917","desc":"4294"},{"messageId":"4289","fix":"4918","desc":"4291"},{"messageId":"4292","fix":"4919","desc":"4294"},{"messageId":"4289","fix":"4920","desc":"4291"},{"messageId":"4292","fix":"4921","desc":"4294"},{"messageId":"4289","fix":"4922","desc":"4291"},{"messageId":"4292","fix":"4923","desc":"4294"},{"messageId":"4289","fix":"4924","desc":"4291"},{"messageId":"4292","fix":"4925","desc":"4294"},{"messageId":"4289","fix":"4926","desc":"4291"},{"messageId":"4292","fix":"4927","desc":"4294"},{"messageId":"4289","fix":"4928","desc":"4291"},{"messageId":"4292","fix":"4929","desc":"4294"},{"messageId":"4289","fix":"4930","desc":"4291"},{"messageId":"4292","fix":"4931","desc":"4294"},{"messageId":"4289","fix":"4932","desc":"4291"},{"messageId":"4292","fix":"4933","desc":"4294"},{"messageId":"4289","fix":"4934","desc":"4291"},{"messageId":"4292","fix":"4935","desc":"4294"},{"messageId":"4289","fix":"4936","desc":"4291"},{"messageId":"4292","fix":"4937","desc":"4294"},{"messageId":"4289","fix":"4938","desc":"4291"},{"messageId":"4292","fix":"4939","desc":"4294"},{"messageId":"4289","fix":"4940","desc":"4291"},{"messageId":"4292","fix":"4941","desc":"4294"},{"messageId":"4289","fix":"4942","desc":"4291"},{"messageId":"4292","fix":"4943","desc":"4294"},{"messageId":"4289","fix":"4944","desc":"4291"},{"messageId":"4292","fix":"4945","desc":"4294"},{"messageId":"4289","fix":"4946","desc":"4291"},{"messageId":"4292","fix":"4947","desc":"4294"},{"messageId":"4289","fix":"4948","desc":"4291"},{"messageId":"4292","fix":"4949","desc":"4294"},{"messageId":"4289","fix":"4950","desc":"4291"},{"messageId":"4292","fix":"4951","desc":"4294"},{"messageId":"4289","fix":"4952","desc":"4291"},{"messageId":"4292","fix":"4953","desc":"4294"},{"messageId":"4289","fix":"4954","desc":"4291"},{"messageId":"4292","fix":"4955","desc":"4294"},{"messageId":"4289","fix":"4956","desc":"4291"},{"messageId":"4292","fix":"4957","desc":"4294"},{"messageId":"4289","fix":"4958","desc":"4291"},{"messageId":"4292","fix":"4959","desc":"4294"},{"messageId":"4289","fix":"4960","desc":"4291"},{"messageId":"4292","fix":"4961","desc":"4294"},{"messageId":"4289","fix":"4962","desc":"4291"},{"messageId":"4292","fix":"4963","desc":"4294"},{"messageId":"4289","fix":"4964","desc":"4291"},{"messageId":"4292","fix":"4965","desc":"4294"},{"messageId":"4289","fix":"4966","desc":"4291"},{"messageId":"4292","fix":"4967","desc":"4294"},{"messageId":"4289","fix":"4968","desc":"4291"},{"messageId":"4292","fix":"4969","desc":"4294"},{"messageId":"4289","fix":"4970","desc":"4291"},{"messageId":"4292","fix":"4971","desc":"4294"},{"messageId":"4289","fix":"4972","desc":"4291"},{"messageId":"4292","fix":"4973","desc":"4294"},{"messageId":"4289","fix":"4974","desc":"4291"},{"messageId":"4292","fix":"4975","desc":"4294"},{"messageId":"4289","fix":"4976","desc":"4291"},{"messageId":"4292","fix":"4977","desc":"4294"},{"messageId":"4289","fix":"4978","desc":"4291"},{"messageId":"4292","fix":"4979","desc":"4294"},{"messageId":"4289","fix":"4980","desc":"4291"},{"messageId":"4292","fix":"4981","desc":"4294"},{"messageId":"4289","fix":"4982","desc":"4291"},{"messageId":"4292","fix":"4983","desc":"4294"},{"messageId":"4289","fix":"4984","desc":"4291"},{"messageId":"4292","fix":"4985","desc":"4294"},{"messageId":"4289","fix":"4986","desc":"4291"},{"messageId":"4292","fix":"4987","desc":"4294"},{"messageId":"4289","fix":"4988","desc":"4291"},{"messageId":"4292","fix":"4989","desc":"4294"},{"messageId":"4289","fix":"4990","desc":"4291"},{"messageId":"4292","fix":"4991","desc":"4294"},{"messageId":"4289","fix":"4992","desc":"4291"},{"messageId":"4292","fix":"4993","desc":"4294"},{"messageId":"4289","fix":"4994","desc":"4291"},{"messageId":"4292","fix":"4995","desc":"4294"},{"messageId":"4289","fix":"4996","desc":"4291"},{"messageId":"4292","fix":"4997","desc":"4294"},{"messageId":"4289","fix":"4998","desc":"4291"},{"messageId":"4292","fix":"4999","desc":"4294"},{"messageId":"4289","fix":"5000","desc":"4291"},{"messageId":"4292","fix":"5001","desc":"4294"},{"messageId":"4289","fix":"5002","desc":"4291"},{"messageId":"4292","fix":"5003","desc":"4294"},{"messageId":"4289","fix":"5004","desc":"4291"},{"messageId":"4292","fix":"5005","desc":"4294"},{"messageId":"4289","fix":"5006","desc":"4291"},{"messageId":"4292","fix":"5007","desc":"4294"},{"messageId":"4289","fix":"5008","desc":"4291"},{"messageId":"4292","fix":"5009","desc":"4294"},{"messageId":"4289","fix":"5010","desc":"4291"},{"messageId":"4292","fix":"5011","desc":"4294"},{"messageId":"4289","fix":"5012","desc":"4291"},{"messageId":"4292","fix":"5013","desc":"4294"},{"messageId":"4289","fix":"5014","desc":"4291"},{"messageId":"4292","fix":"5015","desc":"4294"},{"messageId":"4289","fix":"5016","desc":"4291"},{"messageId":"4292","fix":"5017","desc":"4294"},{"messageId":"4289","fix":"5018","desc":"4291"},{"messageId":"4292","fix":"5019","desc":"4294"},{"messageId":"4289","fix":"5020","desc":"4291"},{"messageId":"4292","fix":"5021","desc":"4294"},{"messageId":"4289","fix":"5022","desc":"4291"},{"messageId":"4292","fix":"5023","desc":"4294"},{"messageId":"4289","fix":"5024","desc":"4291"},{"messageId":"4292","fix":"5025","desc":"4294"},{"messageId":"4289","fix":"5026","desc":"4291"},{"messageId":"4292","fix":"5027","desc":"4294"},{"messageId":"4289","fix":"5028","desc":"4291"},{"messageId":"4292","fix":"5029","desc":"4294"},{"messageId":"4289","fix":"5030","desc":"4291"},{"messageId":"4292","fix":"5031","desc":"4294"},{"messageId":"4289","fix":"5032","desc":"4291"},{"messageId":"4292","fix":"5033","desc":"4294"},{"messageId":"4289","fix":"5034","desc":"4291"},{"messageId":"4292","fix":"5035","desc":"4294"},{"messageId":"4289","fix":"5036","desc":"4291"},{"messageId":"4292","fix":"5037","desc":"4294"},{"messageId":"4289","fix":"5038","desc":"4291"},{"messageId":"4292","fix":"5039","desc":"4294"},{"messageId":"4289","fix":"5040","desc":"4291"},{"messageId":"4292","fix":"5041","desc":"4294"},{"messageId":"4289","fix":"5042","desc":"4291"},{"messageId":"4292","fix":"5043","desc":"4294"},{"messageId":"4289","fix":"5044","desc":"4291"},{"messageId":"4292","fix":"5045","desc":"4294"},{"messageId":"4289","fix":"5046","desc":"4291"},{"messageId":"4292","fix":"5047","desc":"4294"},{"messageId":"4289","fix":"5048","desc":"4291"},{"messageId":"4292","fix":"5049","desc":"4294"},{"kind":"5050","justification":"3627"},"suggestUnknown",{"range":"5051","text":"5052"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"5053","text":"5054"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"5055","text":"5052"},{"range":"5056","text":"5054"},{"range":"5057","text":"5052"},{"range":"5058","text":"5054"},{"range":"5059","text":"5052"},{"range":"5060","text":"5054"},{"range":"5061","text":"5052"},{"range":"5062","text":"5054"},{"range":"5063","text":"5052"},{"range":"5064","text":"5054"},{"range":"5065","text":"5052"},{"range":"5066","text":"5054"},{"range":"5067","text":"5052"},{"range":"5068","text":"5054"},{"range":"5069","text":"5052"},{"range":"5070","text":"5054"},{"range":"5071","text":"5052"},{"range":"5072","text":"5054"},{"range":"5073","text":"5052"},{"range":"5074","text":"5054"},{"range":"5075","text":"5052"},{"range":"5076","text":"5054"},{"range":"5077","text":"5052"},{"range":"5078","text":"5054"},{"range":"5079","text":"5052"},{"range":"5080","text":"5054"},{"range":"5081","text":"5052"},{"range":"5082","text":"5054"},{"range":"5083","text":"5052"},{"range":"5084","text":"5054"},{"range":"5085","text":"5052"},{"range":"5086","text":"5054"},{"range":"5087","text":"5052"},{"range":"5088","text":"5054"},{"range":"5089","text":"5052"},{"range":"5090","text":"5054"},{"range":"5091","text":"5052"},{"range":"5092","text":"5054"},{"range":"5093","text":"5052"},{"range":"5094","text":"5054"},{"range":"5095","text":"5052"},{"range":"5096","text":"5054"},{"range":"5097","text":"5052"},{"range":"5098","text":"5054"},{"range":"5099","text":"5052"},{"range":"5100","text":"5054"},"removeEscape",{"range":"5101","text":"3627"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"5102","text":"5103"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"5104","text":"3627"},{"range":"5105","text":"5103"},{"range":"5106","text":"3627"},{"range":"5107","text":"5103"},{"range":"5108","text":"3627"},{"range":"5109","text":"5103"},{"range":"5110","text":"3627"},{"range":"5111","text":"5103"},{"range":"5112","text":"3627"},{"range":"5113","text":"5103"},{"range":"5114","text":"3627"},{"range":"5115","text":"5103"},{"range":"5116","text":"3627"},{"range":"5117","text":"5103"},{"range":"5118","text":"3627"},{"range":"5119","text":"5103"},{"range":"5120","text":"3627"},{"range":"5121","text":"5103"},{"range":"5122","text":"5052"},{"range":"5123","text":"5054"},{"range":"5124","text":"5052"},{"range":"5125","text":"5054"},{"range":"5126","text":"5052"},{"range":"5127","text":"5054"},{"range":"5128","text":"5052"},{"range":"5129","text":"5054"},{"range":"5130","text":"5052"},{"range":"5131","text":"5054"},{"range":"5132","text":"5052"},{"range":"5133","text":"5054"},{"range":"5134","text":"5052"},{"range":"5135","text":"5054"},{"range":"5136","text":"5052"},{"range":"5137","text":"5054"},{"range":"5138","text":"5052"},{"range":"5139","text":"5054"},{"range":"5140","text":"5052"},{"range":"5141","text":"5054"},{"range":"5142","text":"5052"},{"range":"5143","text":"5054"},{"range":"5144","text":"5052"},{"range":"5145","text":"5054"},{"range":"5146","text":"5052"},{"range":"5147","text":"5054"},"suggestComment",{"type":"5148"},{"range":"5149","text":"5150"},"Add comment inside empty block statement.",{"range":"5151","text":"5052"},{"range":"5152","text":"5054"},{"range":"5153","text":"5052"},{"range":"5154","text":"5054"},{"range":"5155","text":"5052"},{"range":"5156","text":"5054"},{"range":"5157","text":"5052"},{"range":"5158","text":"5054"},{"range":"5159","text":"5052"},{"range":"5160","text":"5054"},{"range":"5161","text":"5052"},{"range":"5162","text":"5054"},{"range":"5163","text":"5052"},{"range":"5164","text":"5054"},{"range":"5165","text":"5052"},{"range":"5166","text":"5054"},{"range":"5167","text":"5052"},{"range":"5168","text":"5054"},{"range":"5169","text":"5052"},{"range":"5170","text":"5054"},{"range":"5171","text":"5052"},{"range":"5172","text":"5054"},{"range":"5173","text":"5052"},{"range":"5174","text":"5054"},{"range":"5175","text":"5052"},{"range":"5176","text":"5054"},{"range":"5177","text":"5052"},{"range":"5178","text":"5054"},{"range":"5179","text":"5052"},{"range":"5180","text":"5054"},{"range":"5181","text":"5052"},{"range":"5182","text":"5054"},{"range":"5183","text":"5052"},{"range":"5184","text":"5054"},{"range":"5185","text":"5052"},{"range":"5186","text":"5054"},{"range":"5187","text":"5052"},{"range":"5188","text":"5054"},{"range":"5189","text":"5052"},{"range":"5190","text":"5054"},{"range":"5191","text":"5052"},{"range":"5192","text":"5054"},{"range":"5193","text":"5052"},{"range":"5194","text":"5054"},{"range":"5195","text":"5052"},{"range":"5196","text":"5054"},{"range":"5197","text":"5052"},{"range":"5198","text":"5054"},{"range":"5199","text":"5052"},{"range":"5200","text":"5054"},{"range":"5201","text":"5052"},{"range":"5202","text":"5054"},{"range":"5203","text":"5052"},{"range":"5204","text":"5054"},{"range":"5205","text":"5052"},{"range":"5206","text":"5054"},{"range":"5207","text":"5052"},{"range":"5208","text":"5054"},{"range":"5209","text":"5052"},{"range":"5210","text":"5054"},{"range":"5211","text":"5052"},{"range":"5212","text":"5054"},{"range":"5213","text":"5052"},{"range":"5214","text":"5054"},{"range":"5215","text":"5052"},{"range":"5216","text":"5054"},{"range":"5217","text":"5052"},{"range":"5218","text":"5054"},{"range":"5219","text":"5052"},{"range":"5220","text":"5054"},{"range":"5221","text":"5052"},{"range":"5222","text":"5054"},{"range":"5223","text":"5052"},{"range":"5224","text":"5054"},{"range":"5225","text":"5052"},{"range":"5226","text":"5054"},{"range":"5227","text":"5052"},{"range":"5228","text":"5054"},{"range":"5229","text":"5052"},{"range":"5230","text":"5054"},{"range":"5231","text":"5052"},{"range":"5232","text":"5054"},{"range":"5233","text":"5052"},{"range":"5234","text":"5054"},"replaceTsIgnoreWithTsExpectError",{"range":"5235","text":"5236"},"Replace \"@ts-ignore\" with \"@ts-expect-error\".",{"range":"5237","text":"5236"},{"range":"5238","text":"5236"},{"range":"5239","text":"5236"},{"range":"5240","text":"5236"},{"range":"5241","text":"5236"},{"range":"5242","text":"5236"},{"range":"5243","text":"5236"},{"range":"5244","text":"5052"},{"range":"5245","text":"5054"},{"range":"5246","text":"5052"},{"range":"5247","text":"5054"},{"range":"5248","text":"5249"},{"range":"5250","text":"5052"},{"range":"5251","text":"5054"},{"range":"5252","text":"5052"},{"range":"5253","text":"5054"},{"range":"5254","text":"5052"},{"range":"5255","text":"5054"},{"range":"5256","text":"5052"},{"range":"5257","text":"5054"},{"range":"5258","text":"5052"},{"range":"5259","text":"5054"},{"range":"5260","text":"5052"},{"range":"5261","text":"5054"},{"range":"5262","text":"5052"},{"range":"5263","text":"5054"},{"range":"5264","text":"5265"},{"range":"5266","text":"5236"},{"range":"5267","text":"5052"},{"range":"5268","text":"5054"},{"range":"5269","text":"5270"},{"range":"5271","text":"5236"},{"range":"5272","text":"5052"},{"range":"5273","text":"5054"},{"range":"5274","text":"5052"},{"range":"5275","text":"5054"},{"range":"5276","text":"5052"},{"range":"5277","text":"5054"},{"range":"5278","text":"5052"},{"range":"5279","text":"5054"},{"range":"5280","text":"5052"},{"range":"5281","text":"5054"},{"range":"5282","text":"5052"},{"range":"5283","text":"5054"},{"range":"5284","text":"5052"},{"range":"5285","text":"5054"},{"range":"5286","text":"5052"},{"range":"5287","text":"5054"},{"range":"5288","text":"5052"},{"range":"5289","text":"5054"},{"range":"5290","text":"5052"},{"range":"5291","text":"5054"},{"range":"5292","text":"5052"},{"range":"5293","text":"5054"},{"range":"5294","text":"5052"},{"range":"5295","text":"5054"},{"range":"5296","text":"5052"},{"range":"5297","text":"5054"},{"range":"5298","text":"5052"},{"range":"5299","text":"5054"},{"range":"5300","text":"5052"},{"range":"5301","text":"5054"},{"range":"5302","text":"5052"},{"range":"5303","text":"5054"},{"range":"5304","text":"5052"},{"range":"5305","text":"5054"},{"range":"5306","text":"5052"},{"range":"5307","text":"5054"},{"range":"5308","text":"5052"},{"range":"5309","text":"5054"},{"range":"5310","text":"5052"},{"range":"5311","text":"5054"},{"range":"5312","text":"5052"},{"range":"5313","text":"5054"},{"range":"5314","text":"5052"},{"range":"5315","text":"5054"},{"range":"5316","text":"5052"},{"range":"5317","text":"5054"},{"range":"5318","text":"5052"},{"range":"5319","text":"5054"},{"range":"5320","text":"5052"},{"range":"5321","text":"5054"},{"range":"5322","text":"5052"},{"range":"5323","text":"5054"},{"range":"5324","text":"5052"},{"range":"5325","text":"5054"},{"range":"5326","text":"5052"},{"range":"5327","text":"5054"},{"range":"5328","text":"5052"},{"range":"5329","text":"5054"},{"range":"5330","text":"5052"},{"range":"5331","text":"5054"},{"range":"5332","text":"5052"},{"range":"5333","text":"5054"},{"range":"5334","text":"5052"},{"range":"5335","text":"5054"},{"range":"5336","text":"5052"},{"range":"5337","text":"5054"},{"range":"5338","text":"5052"},{"range":"5339","text":"5054"},{"range":"5340","text":"5052"},{"range":"5341","text":"5054"},{"range":"5342","text":"5052"},{"range":"5343","text":"5054"},{"range":"5344","text":"5052"},{"range":"5345","text":"5054"},{"range":"5346","text":"5052"},{"range":"5347","text":"5054"},{"range":"5348","text":"5052"},{"range":"5349","text":"5054"},{"range":"5350","text":"5052"},{"range":"5351","text":"5054"},{"range":"5352","text":"5052"},{"range":"5353","text":"5054"},{"range":"5354","text":"5052"},{"range":"5355","text":"5054"},{"range":"5356","text":"5052"},{"range":"5357","text":"5054"},{"range":"5358","text":"5052"},{"range":"5359","text":"5054"},{"range":"5360","text":"5052"},{"range":"5361","text":"5054"},{"range":"5362","text":"5052"},{"range":"5363","text":"5054"},{"range":"5364","text":"5052"},{"range":"5365","text":"5054"},{"range":"5366","text":"5052"},{"range":"5367","text":"5054"},{"range":"5368","text":"5052"},{"range":"5369","text":"5054"},{"range":"5370","text":"5052"},{"range":"5371","text":"5054"},{"range":"5372","text":"5052"},{"range":"5373","text":"5054"},{"range":"5374","text":"5052"},{"range":"5375","text":"5054"},{"range":"5376","text":"5052"},{"range":"5377","text":"5054"},{"range":"5378","text":"5052"},{"range":"5379","text":"5054"},{"range":"5380","text":"5052"},{"range":"5381","text":"5054"},{"range":"5382","text":"5052"},{"range":"5383","text":"5054"},{"range":"5384","text":"5052"},{"range":"5385","text":"5054"},{"range":"5386","text":"5052"},{"range":"5387","text":"5054"},{"range":"5388","text":"5052"},{"range":"5389","text":"5054"},{"range":"5390","text":"5052"},{"range":"5391","text":"5054"},{"range":"5392","text":"5052"},{"range":"5393","text":"5054"},{"range":"5394","text":"5052"},{"range":"5395","text":"5054"},{"range":"5396","text":"5052"},{"range":"5397","text":"5054"},{"range":"5398","text":"5052"},{"range":"5399","text":"5054"},{"range":"5400","text":"5052"},{"range":"5401","text":"5054"},{"range":"5402","text":"5052"},{"range":"5403","text":"5054"},{"range":"5404","text":"5052"},{"range":"5405","text":"5054"},{"range":"5406","text":"5052"},{"range":"5407","text":"5054"},{"range":"5408","text":"5052"},{"range":"5409","text":"5054"},{"range":"5410","text":"5052"},{"range":"5411","text":"5054"},{"range":"5412","text":"5052"},{"range":"5413","text":"5054"},{"range":"5414","text":"5052"},{"range":"5415","text":"5054"},{"range":"5416","text":"5052"},{"range":"5417","text":"5054"},{"range":"5418","text":"5052"},{"range":"5419","text":"5054"},{"range":"5420","text":"5052"},{"range":"5421","text":"5054"},{"range":"5422","text":"5052"},{"range":"5423","text":"5054"},{"range":"5424","text":"5052"},{"range":"5425","text":"5054"},{"range":"5426","text":"5052"},{"range":"5427","text":"5054"},{"range":"5428","text":"5052"},{"range":"5429","text":"5054"},{"range":"5430","text":"5052"},{"range":"5431","text":"5054"},{"range":"5432","text":"5052"},{"range":"5433","text":"5054"},{"range":"5434","text":"5052"},{"range":"5435","text":"5054"},{"range":"5436","text":"5052"},{"range":"5437","text":"5054"},{"range":"5438","text":"5052"},{"range":"5439","text":"5054"},{"range":"5440","text":"5052"},{"range":"5441","text":"5054"},{"range":"5442","text":"5052"},{"range":"5443","text":"5054"},{"range":"5444","text":"5052"},{"range":"5445","text":"5054"},{"range":"5446","text":"5052"},{"range":"5447","text":"5054"},{"range":"5448","text":"5052"},{"range":"5449","text":"5054"},{"range":"5450","text":"5052"},{"range":"5451","text":"5054"},{"range":"5452","text":"5052"},{"range":"5453","text":"5054"},{"range":"5454","text":"5052"},{"range":"5455","text":"5054"},{"range":"5456","text":"5052"},{"range":"5457","text":"5054"},{"range":"5458","text":"5052"},{"range":"5459","text":"5054"},{"range":"5460","text":"5052"},{"range":"5461","text":"5054"},{"range":"5462","text":"5052"},{"range":"5463","text":"5054"},{"range":"5464","text":"5052"},{"range":"5465","text":"5054"},{"range":"5466","text":"5052"},{"range":"5467","text":"5054"},{"range":"5468","text":"5052"},{"range":"5469","text":"5054"},{"range":"5470","text":"5052"},{"range":"5471","text":"5054"},{"range":"5472","text":"5052"},{"range":"5473","text":"5054"},{"range":"5474","text":"5052"},{"range":"5475","text":"5054"},{"range":"5476","text":"5052"},{"range":"5477","text":"5054"},{"range":"5478","text":"5052"},{"range":"5479","text":"5054"},{"range":"5480","text":"5052"},{"range":"5481","text":"5054"},{"range":"5482","text":"5052"},{"range":"5483","text":"5054"},{"range":"5484","text":"5052"},{"range":"5485","text":"5054"},{"range":"5486","text":"5052"},{"range":"5487","text":"5054"},{"range":"5488","text":"5052"},{"range":"5489","text":"5054"},{"range":"5490","text":"5052"},{"range":"5491","text":"5054"},{"range":"5492","text":"5052"},{"range":"5493","text":"5054"},{"range":"5494","text":"5052"},{"range":"5495","text":"5054"},{"range":"5496","text":"5052"},{"range":"5497","text":"5054"},{"range":"5498","text":"5052"},{"range":"5499","text":"5054"},{"range":"5500","text":"5052"},{"range":"5501","text":"5054"},{"range":"5502","text":"5052"},{"range":"5503","text":"5054"},{"range":"5504","text":"5052"},{"range":"5505","text":"5054"},{"range":"5506","text":"5052"},{"range":"5507","text":"5054"},{"range":"5508","text":"5052"},{"range":"5509","text":"5054"},{"range":"5510","text":"5052"},{"range":"5511","text":"5054"},{"range":"5512","text":"5052"},{"range":"5513","text":"5054"},{"range":"5514","text":"5052"},{"range":"5515","text":"5054"},{"range":"5516","text":"5052"},{"range":"5517","text":"5054"},{"range":"5518","text":"5052"},{"range":"5519","text":"5054"},{"range":"5520","text":"5052"},{"range":"5521","text":"5054"},{"range":"5522","text":"5052"},{"range":"5523","text":"5054"},{"range":"5524","text":"5052"},{"range":"5525","text":"5054"},{"range":"5526","text":"5052"},{"range":"5527","text":"5054"},{"range":"5528","text":"5052"},{"range":"5529","text":"5054"},{"range":"5530","text":"5052"},{"range":"5531","text":"5054"},{"range":"5532","text":"5052"},{"range":"5533","text":"5054"},{"range":"5534","text":"5052"},{"range":"5535","text":"5054"},{"range":"5536","text":"5052"},{"range":"5537","text":"5054"},{"range":"5538","text":"5052"},{"range":"5539","text":"5054"},{"range":"5540","text":"5052"},{"range":"5541","text":"5054"},{"range":"5542","text":"5052"},{"range":"5543","text":"5054"},{"range":"5544","text":"5052"},{"range":"5545","text":"5054"},{"range":"5546","text":"5052"},{"range":"5547","text":"5054"},{"range":"5548","text":"5052"},{"range":"5549","text":"5054"},{"range":"5550","text":"5052"},{"range":"5551","text":"5054"},{"range":"5552","text":"5052"},{"range":"5553","text":"5054"},{"range":"5554","text":"5052"},{"range":"5555","text":"5054"},{"range":"5556","text":"5052"},{"range":"5557","text":"5054"},{"range":"5558","text":"5052"},{"range":"5559","text":"5054"},{"range":"5560","text":"5052"},{"range":"5561","text":"5054"},{"range":"5562","text":"5052"},{"range":"5563","text":"5054"},{"range":"5564","text":"5052"},{"range":"5565","text":"5054"},{"range":"5566","text":"5052"},{"range":"5567","text":"5054"},{"range":"5568","text":"5052"},{"range":"5569","text":"5054"},{"range":"5570","text":"5052"},{"range":"5571","text":"5054"},{"range":"5572","text":"5052"},{"range":"5573","text":"5054"},{"range":"5574","text":"5052"},{"range":"5575","text":"5054"},{"range":"5576","text":"5052"},{"range":"5577","text":"5054"},{"range":"5578","text":"5052"},{"range":"5579","text":"5054"},{"range":"5580","text":"5052"},{"range":"5581","text":"5054"},{"range":"5582","text":"5052"},{"range":"5583","text":"5054"},{"range":"5584","text":"5052"},{"range":"5585","text":"5054"},{"range":"5586","text":"5052"},{"range":"5587","text":"5054"},{"range":"5588","text":"5052"},{"range":"5589","text":"5054"},{"range":"5590","text":"5052"},{"range":"5591","text":"5054"},{"range":"5592","text":"5052"},{"range":"5593","text":"5054"},{"range":"5594","text":"5052"},{"range":"5595","text":"5054"},{"range":"5596","text":"5052"},{"range":"5597","text":"5054"},{"range":"5598","text":"5052"},{"range":"5599","text":"5054"},{"range":"5600","text":"5052"},{"range":"5601","text":"5054"},{"range":"5602","text":"5052"},{"range":"5603","text":"5054"},{"range":"5604","text":"5052"},{"range":"5605","text":"5054"},{"range":"5606","text":"5052"},{"range":"5607","text":"5054"},{"range":"5608","text":"5052"},{"range":"5609","text":"5054"},{"range":"5610","text":"5052"},{"range":"5611","text":"5054"},{"range":"5612","text":"5052"},{"range":"5613","text":"5054"},{"range":"5614","text":"5052"},{"range":"5615","text":"5054"},{"range":"5616","text":"5052"},{"range":"5617","text":"5054"},{"range":"5618","text":"5052"},{"range":"5619","text":"5054"},{"range":"5620","text":"5052"},{"range":"5621","text":"5054"},{"range":"5622","text":"5052"},{"range":"5623","text":"5054"},{"range":"5624","text":"5052"},{"range":"5625","text":"5054"},{"range":"5626","text":"5052"},{"range":"5627","text":"5054"},{"range":"5628","text":"5052"},{"range":"5629","text":"5054"},{"range":"5630","text":"5052"},{"range":"5631","text":"5054"},{"range":"5632","text":"5052"},{"range":"5633","text":"5054"},{"range":"5634","text":"5052"},{"range":"5635","text":"5054"},{"range":"5636","text":"5052"},{"range":"5637","text":"5054"},{"range":"5638","text":"5052"},{"range":"5639","text":"5054"},{"range":"5640","text":"5052"},{"range":"5641","text":"5054"},{"range":"5642","text":"5052"},{"range":"5643","text":"5054"},{"range":"5644","text":"5052"},{"range":"5645","text":"5054"},{"range":"5646","text":"5052"},{"range":"5647","text":"5054"},{"range":"5648","text":"5052"},{"range":"5649","text":"5054"},{"range":"5650","text":"5052"},{"range":"5651","text":"5054"},{"range":"5652","text":"5052"},{"range":"5653","text":"5054"},{"range":"5654","text":"5052"},{"range":"5655","text":"5054"},{"range":"5656","text":"5052"},{"range":"5657","text":"5054"},{"range":"5658","text":"5052"},{"range":"5659","text":"5054"},{"range":"5660","text":"5052"},{"range":"5661","text":"5054"},{"range":"5662","text":"5052"},{"range":"5663","text":"5054"},{"range":"5664","text":"5052"},{"range":"5665","text":"5054"},{"range":"5666","text":"5052"},{"range":"5667","text":"5054"},{"range":"5668","text":"5052"},{"range":"5669","text":"5054"},{"range":"5670","text":"5052"},{"range":"5671","text":"5054"},{"range":"5672","text":"5052"},{"range":"5673","text":"5054"},{"range":"5674","text":"5052"},{"range":"5675","text":"5054"},{"range":"5676","text":"5052"},{"range":"5677","text":"5054"},{"range":"5678","text":"5052"},{"range":"5679","text":"5054"},{"range":"5680","text":"5052"},{"range":"5681","text":"5054"},{"range":"5682","text":"5052"},{"range":"5683","text":"5054"},{"range":"5684","text":"5052"},{"range":"5685","text":"5054"},{"range":"5686","text":"5052"},{"range":"5687","text":"5054"},{"range":"5688","text":"5052"},{"range":"5689","text":"5054"},{"range":"5690","text":"5052"},{"range":"5691","text":"5054"},{"range":"5692","text":"5052"},{"range":"5693","text":"5054"},{"range":"5694","text":"5052"},{"range":"5695","text":"5054"},{"range":"5696","text":"5052"},{"range":"5697","text":"5054"},{"range":"5698","text":"5052"},{"range":"5699","text":"5054"},{"range":"5700","text":"5052"},{"range":"5701","text":"5054"},{"range":"5702","text":"5052"},{"range":"5703","text":"5054"},{"range":"5704","text":"5052"},{"range":"5705","text":"5054"},{"range":"5706","text":"5052"},{"range":"5707","text":"5054"},{"range":"5708","text":"5052"},{"range":"5709","text":"5054"},{"range":"5710","text":"5052"},{"range":"5711","text":"5054"},{"range":"5712","text":"5052"},{"range":"5713","text":"5054"},{"range":"5714","text":"5052"},{"range":"5715","text":"5054"},{"range":"5716","text":"5052"},{"range":"5717","text":"5054"},{"range":"5718","text":"5052"},{"range":"5719","text":"5054"},{"range":"5720","text":"5052"},{"range":"5721","text":"5054"},{"range":"5722","text":"5052"},{"range":"5723","text":"5054"},{"range":"5724","text":"5052"},{"range":"5725","text":"5054"},{"range":"5726","text":"5052"},{"range":"5727","text":"5054"},{"range":"5728","text":"5052"},{"range":"5729","text":"5054"},{"range":"5730","text":"5052"},{"range":"5731","text":"5054"},{"range":"5732","text":"5052"},{"range":"5733","text":"5054"},{"range":"5734","text":"5052"},{"range":"5735","text":"5054"},{"range":"5736","text":"5052"},{"range":"5737","text":"5054"},{"range":"5738","text":"5052"},{"range":"5739","text":"5054"},{"range":"5740","text":"5052"},{"range":"5741","text":"5054"},{"range":"5742","text":"5052"},{"range":"5743","text":"5054"},{"range":"5744","text":"5052"},{"range":"5745","text":"5054"},{"range":"5746","text":"5052"},{"range":"5747","text":"5054"},{"range":"5748","text":"5052"},{"range":"5749","text":"5054"},{"range":"5750","text":"5052"},{"range":"5751","text":"5054"},{"range":"5752","text":"5052"},{"range":"5753","text":"5054"},{"range":"5754","text":"5052"},{"range":"5755","text":"5054"},{"range":"5756","text":"5052"},{"range":"5757","text":"5054"},{"range":"5758","text":"5052"},{"range":"5759","text":"5054"},{"range":"5760","text":"5052"},{"range":"5761","text":"5054"},{"range":"5762","text":"5052"},{"range":"5763","text":"5054"},{"range":"5764","text":"5052"},{"range":"5765","text":"5054"},{"range":"5766","text":"5052"},{"range":"5767","text":"5054"},{"range":"5768","text":"5052"},{"range":"5769","text":"5054"},{"range":"5770","text":"5052"},{"range":"5771","text":"5054"},{"range":"5772","text":"5052"},{"range":"5773","text":"5054"},{"range":"5774","text":"5052"},{"range":"5775","text":"5054"},{"range":"5776","text":"5052"},{"range":"5777","text":"5054"},{"range":"5778","text":"5052"},{"range":"5779","text":"5054"},{"range":"5780","text":"5052"},{"range":"5781","text":"5054"},{"range":"5782","text":"5052"},{"range":"5783","text":"5054"},{"range":"5784","text":"5052"},{"range":"5785","text":"5054"},{"range":"5786","text":"5052"},{"range":"5787","text":"5054"},{"range":"5788","text":"5052"},{"range":"5789","text":"5054"},{"range":"5790","text":"5052"},{"range":"5791","text":"5054"},{"range":"5792","text":"5052"},{"range":"5793","text":"5054"},{"range":"5794","text":"5052"},{"range":"5795","text":"5054"},{"range":"5796","text":"5052"},{"range":"5797","text":"5054"},{"range":"5798","text":"5052"},{"range":"5799","text":"5054"},{"range":"5800","text":"5052"},{"range":"5801","text":"5054"},{"range":"5802","text":"5052"},{"range":"5803","text":"5054"},{"range":"5804","text":"5052"},{"range":"5805","text":"5054"},{"range":"5806","text":"5052"},{"range":"5807","text":"5054"},"directive",[969,972],"unknown",[969,972],"never",[941,944],[941,944],[1162,1165],[1162,1165],[5688,5691],[5688,5691],[3935,3938],[3935,3938],[496,499],[496,499],[4463,4466],[4463,4466],[5277,5280],[5277,5280],[5755,5758],[5755,5758],[6270,6273],[6270,6273],[6787,6790],[6787,6790],[14522,14525],[14522,14525],[6455,6458],[6455,6458],[9139,9142],[9139,9142],[14003,14006],[14003,14006],[17120,17123],[17120,17123],[1767,1770],[1767,1770],[2931,2934],[2931,2934],[7894,7897],[7894,7897],[3138,3141],[3138,3141],[6982,6985],[6982,6985],[6401,6404],[6401,6404],[2933,2936],[2933,2936],[4356,4359],[4356,4359],[2746,2747],[2746,2746],"\\",[2748,2749],[2748,2748],[3528,3529],[3528,3528],[3530,3531],[3530,3530],[4041,4042],[4041,4041],[4043,4044],[4043,4043],[6446,6447],[6446,6446],[6448,6449],[6448,6448],[6737,6738],[6737,6737],[6739,6740],[6739,6739],[3311,3314],[3311,3314],[9536,9539],[9536,9539],[12856,12859],[12856,12859],[8895,8898],[8895,8898],[1236,1239],[1236,1239],[12227,12230],[12227,12230],[114,117],[114,117],[125,128],[125,128],[125,128],[125,128],[106,109],[106,109],[114,117],[114,117],[118,121],[118,121],[132,135],[132,135],"block",[119,119]," /* empty */ ",[2975,2978],[2975,2978],[3786,3789],[3786,3789],[16511,16514],[16511,16514],[16559,16562],[16559,16562],[16612,16615],[16612,16615],[16776,16779],[16776,16779],[16857,16860],[16857,16860],[16969,16972],[16969,16972],[17095,17098],[17095,17098],[17208,17211],[17208,17211],[24412,24415],[24412,24415],[24538,24541],[24538,24541],[25040,25043],[25040,25043],[25116,25119],[25116,25119],[25614,25617],[25614,25617],[25694,25697],[25694,25697],[15257,15260],[15257,15260],[15472,15475],[15472,15475],[13481,13484],[13481,13484],[13530,13533],[13530,13533],[13878,13881],[13878,13881],[1319,1322],[1319,1322],[1796,1799],[1796,1799],[2842,2845],[2842,2845],[4033,4036],[4033,4036],[5619,5622],[5619,5622],[5922,5925],[5922,5925],[12540,12543],[12540,12543],[1109,1112],[1109,1112],[3050,3053],[3050,3053],[3211,3214],[3211,3214],[3255,3258],[3255,3258],[4888,4891],[4888,4891],[4944,4947],[4944,4947],[4964,4967],[4964,4967],[14514,14517],[14514,14517],[14568,14571],[14568,14571],[14686,14689],[14686,14689],[14766,14769],[14766,14769],[7016,7019],[7016,7019],[2042,2045],[2042,2045],[3905,3908],[3905,3908],[1098,1111],"// @ts-expect-error",[1152,1165],[1415,1428],[1717,1730],[1778,1791],[2569,2582],[2634,2647],[4206,4219],[1061,1064],[1061,1064],[24159,24162],[24159,24162],[9466,9519],"// @ts-expect-error - advanced constraints may not be typed",[672,675],[672,675],[947,950],[947,950],[4685,4688],[4685,4688],[5325,5328],[5325,5328],[8387,8390],[8387,8390],[13920,13923],[13920,13923],[790,793],[790,793],[2714,2773],"// @ts-expect-error - connection is not in TypeScript definitions",[3205,3218],[6640,6643],[6640,6643],[8591,8648],"// @ts-expect-error - battery API not in TypeScript definitions",[8700,8713],[8080,8083],[8080,8083],[1786,1789],[1786,1789],[2936,2939],[2936,2939],[5990,5993],[5990,5993],[6017,6020],[6017,6020],[6058,6061],[6058,6061],[6096,6099],[6096,6099],[14544,14547],[14544,14547],[934,937],[934,937],[1262,1265],[1262,1265],[4727,4730],[4727,4730],[5278,5281],[5278,5281],[5916,5919],[5916,5919],[12126,12129],[12126,12129],[351,354],[351,354],[432,435],[432,435],[752,755],[752,755],[912,915],[912,915],[992,995],[992,995],[1084,1087],[1084,1087],[1175,1178],[1175,1178],[1260,1263],[1260,1263],[1401,1404],[1401,1404],[1574,1577],[1574,1577],[1659,1662],[1659,1662],[1750,1753],[1750,1753],[1891,1894],[1891,1894],[4389,4392],[4389,4392],[9535,9538],[9535,9538],[14662,14665],[14662,14665],[7900,7903],[7900,7903],[14659,14662],[14659,14662],[21278,21281],[21278,21281],[21978,21981],[21978,21981],[3678,3681],[3678,3681],[3773,3776],[3773,3776],[14224,14227],[14224,14227],[14852,14855],[14852,14855],[4098,4101],[4098,4101],[1282,1285],[1282,1285],[1157,1160],[1157,1160],[1130,1133],[1130,1133],[3417,3420],[3417,3420],[3845,3848],[3845,3848],[4892,4895],[4892,4895],[5289,5292],[5289,5292],[925,928],[925,928],[2357,2360],[2357,2360],[2430,2433],[2430,2433],[4210,4213],[4210,4213],[8922,8925],[8922,8925],[9560,9563],[9560,9563],[11580,11583],[11580,11583],[16037,16040],[16037,16040],[16537,16540],[16537,16540],[16598,16601],[16598,16601],[937,940],[937,940],[450,453],[450,453],[2087,2090],[2087,2090],[3462,3465],[3462,3465],[3966,3969],[3966,3969],[4339,4342],[4339,4342],[5015,5018],[5015,5018],[5412,5415],[5412,5415],[6251,6254],[6251,6254],[7243,7246],[7243,7246],[7431,7434],[7431,7434],[7595,7598],[7595,7598],[8089,8092],[8089,8092],[8487,8490],[8487,8490],[9291,9294],[9291,9294],[10088,10091],[10088,10091],[10646,10649],[10646,10649],[12195,12198],[12195,12198],[14082,14085],[14082,14085],[16093,16096],[16093,16096],[198,201],[198,201],[566,569],[566,569],[1664,1667],[1664,1667],[1790,1793],[1790,1793],[3662,3665],[3662,3665],[5224,5227],[5224,5227],[5328,5331],[5328,5331],[14267,14270],[14267,14270],[399,402],[399,402],[982,985],[982,985],[6224,6227],[6224,6227],[6272,6275],[6272,6275],[6449,6452],[6449,6452],[6483,6486],[6483,6486],[6568,6571],[6568,6571],[6600,6603],[6600,6603],[6721,6724],[6721,6724],[6755,6758],[6755,6758],[6810,6813],[6810,6813],[6836,6839],[6836,6839],[6868,6871],[6868,6871],[7019,7022],[7019,7022],[7051,7054],[7051,7054],[7164,7167],[7164,7167],[7196,7199],[7196,7199],[7367,7370],[7367,7370],[7393,7396],[7393,7396],[7425,7428],[7425,7428],[7578,7581],[7578,7581],[7612,7615],[7612,7615],[7729,7732],[7729,7732],[7763,7766],[7763,7766],[7882,7885],[7882,7885],[7914,7917],[7914,7917],[8088,8091],[8088,8091],[8122,8125],[8122,8125],[8225,8228],[8225,8228],[8257,8260],[8257,8260],[8415,8418],[8415,8418],[8447,8450],[8447,8450],[5837,5840],[5837,5840],[5888,5891],[5888,5891],[2631,2634],[2631,2634],[1456,1459],[1456,1459],[2431,2434],[2431,2434],[3638,3641],[3638,3641],[3742,3745],[3742,3745],[7589,7592],[7589,7592],[8070,8073],[8070,8073],[8477,8480],[8477,8480],[8503,8506],[8503,8506],[8718,8721],[8718,8721],[8960,8963],[8960,8963],[8986,8989],[8986,8989],[9182,9185],[9182,9185],[9208,9211],[9208,9211],[9382,9385],[9382,9385],[9408,9411],[9408,9411],[9580,9583],[9580,9583],[9606,9609],[9606,9609],[9792,9795],[9792,9795],[9818,9821],[9818,9821],[10004,10007],[10004,10007],[10227,10230],[10227,10230],[10443,10446],[10443,10446],[10469,10472],[10469,10472],[10652,10655],[10652,10655],[10874,10877],[10874,10877],[11105,11108],[11105,11108],[11280,11283],[11280,11283],[11306,11309],[11306,11309],[11535,11538],[11535,11538],[11747,11750],[11747,11750],[11954,11957],[11954,11957],[11980,11983],[11980,11983],[12357,12360],[12357,12360],[12727,12730],[12727,12730],[13355,13358],[13355,13358],[1212,1215],[1212,1215],[1571,1574],[1571,1574],[1716,1719],[1716,1719],[1750,1753],[1750,1753],[2119,2122],[2119,2122],[2259,2262],[2259,2262],[2285,2288],[2285,2288],[2551,2554],[2551,2554],[2691,2694],[2691,2694],[2717,2720],[2717,2720],[2870,2873],[2870,2873],[2896,2899],[2896,2899],[3410,3413],[3410,3413],[3561,3564],[3561,3564],[3587,3590],[3587,3590],[3785,3788],[3785,3788],[3998,4001],[3998,4001],[4222,4225],[4222,4225],[4586,4589],[4586,4589],[4736,4739],[4736,4739],[4762,4765],[4762,4765],[4925,4928],[4925,4928],[4951,4954],[4951,4954],[5354,5357],[5354,5357],[5558,5561],[5558,5561],[5708,5711],[5708,5711],[5734,5737],[5734,5737],[5917,5920],[5917,5920],[5943,5946],[5943,5946],[6201,6204],[6201,6204],[6371,6374],[6371,6374],[6397,6400],[6397,6400],[6614,6617],[6614,6617],[6837,6840],[6837,6840],[6995,6998],[6995,6998],[7370,7373],[7370,7373],[7520,7523],[7520,7523],[7546,7549],[7546,7549],[7711,7714],[7711,7714],[7737,7740],[7737,7740],[7944,7947],[7944,7947],[8258,8261],[8258,8261],[8404,8407],[8404,8407],[8430,8433],[8430,8433],[8589,8592],[8589,8592],[8615,8618],[8615,8618],[8816,8819],[8816,8819],[9068,9071],[9068,9071],[9226,9229],[9226,9229],[9252,9255],[9252,9255],[9431,9434],[9431,9434],[9457,9460],[9457,9460],[9658,9661],[9658,9661],[9881,9884],[9881,9884],[10109,10112],[10109,10112],[10297,10300],[10297,10300],[10675,10678],[10675,10678],[10831,10834],[10831,10834],[10857,10860],[10857,10860],[11035,11038],[11035,11038],[11363,11366],[11363,11366],[12124,12127],[12124,12127],[12271,12274],[12271,12274],[12297,12300],[12297,12300],[12643,12646],[12643,12646],[12783,12786],[12783,12786],[12809,12812],[12809,12812],[12962,12965],[12962,12965],[12988,12991],[12988,12991],[13346,13349],[13346,13349],[13507,13510],[13507,13510],[13533,13536],[13533,13536],[13722,13725],[13722,13725],[13748,13751],[13748,13751],[14224,14227],[14224,14227],[14518,14521],[14518,14521],[14794,14797],[14794,14797],[15045,15048],[15045,15048],[15244,15247],[15244,15247],[15270,15273],[15270,15273],[15458,15461],[15458,15461],[17018,17021],[17018,17021],[18488,18491],[18488,18491],[18657,18660],[18657,18660],[19375,19378],[19375,19378],[91,94],[91,94],[536,539],[536,539],[118,121],[118,121],[1566,1569],[1566,1569],[4641,4644],[4641,4644],[4712,4715],[4712,4715],[4789,4792],[4789,4792],[4867,4870],[4867,4870],[4944,4947],[4944,4947],[5018,5021],[5018,5021],[831,834],[831,834],[5357,5360],[5357,5360],[6114,6117],[6114,6117],[9212,9215],[9212,9215],[9276,9279],[9276,9279],[10780,10783],[10780,10783],[11312,11315],[11312,11315],[1318,1321],[1318,1321],[1423,1426],[1423,1426],[1575,1578],[1575,1578],[1674,1677],[1674,1677],[7986,7989],[7986,7989],[1167,1170],[1167,1170],[789,792],[789,792],[903,906],[903,906],[181,184],[181,184],[274,277],[274,277],[657,660],[657,660],[760,763],[760,763]]