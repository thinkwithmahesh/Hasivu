# HASIVU Platform - Multi-stage Production Dockerfile
# Optimized Node.js container with security and performance best practices
# Generated by SuperClaude Wave 1: Infrastructure Foundation

# =====================================================
# ARGUMENTS AND BASE CONFIGURATION
# =====================================================

ARG NODE_VERSION=18.19.0
ARG ALPINE_VERSION=3.19

# =====================================================
# BASE IMAGE
# =====================================================

FROM node:${NODE_VERSION}-alpine${ALPINE_VERSION} AS base

# Install security updates and essential packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    tzdata \
    ca-certificates \
    curl \
    && rm -rf /var/cache/apk/*

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Set timezone
ENV TZ=Asia/Kolkata

# =====================================================
# DEPENDENCIES STAGE
# =====================================================

FROM base AS dependencies

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install dependencies with optimizations
RUN npm ci --only=production --legacy-peer-deps --silent && \
    npm cache clean --force

# =====================================================
# BUILD STAGE
# =====================================================

FROM base AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies (including devDependencies)
RUN npm ci --legacy-peer-deps --silent

# Copy source code
COPY . .

# Build the application
RUN npm run build && \
    npm prune --production

# =====================================================
# PRODUCTION STAGE
# =====================================================

FROM base AS production

# Set production environment
ENV NODE_ENV=production
ENV PORT=3000
ENV HOST=0.0.0.0

# Security enhancements
ENV NODE_OPTIONS="--max-old-space-size=1024"
ENV UV_THREADPOOL_SIZE=4

WORKDIR /app

# Copy built application and production dependencies
COPY --from=dependencies --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

# Copy additional necessary files
COPY --chown=nextjs:nodejs scripts/ ./scripts/
COPY --chown=nextjs:nodejs public/ ./public/

# Create necessary directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R nextjs:nodejs /app

# Health check
COPY --chown=nextjs:nodejs scripts/healthcheck.js ./healthcheck.js
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node healthcheck.js || exit 1

# Security: Remove package managers and unnecessary files
RUN apk del --no-cache \
    curl \
    && rm -rf /var/cache/apk/* \
    && rm -rf /tmp/* \
    && rm -rf /root/.npm

# Switch to non-root user
USER nextjs

# Expose application port
EXPOSE 3000

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]

# =====================================================
# DEVELOPMENT STAGE (for local development)
# =====================================================

FROM base AS development

# Install development tools
RUN apk add --no-cache \
    git \
    openssh-client \
    bash \
    vim

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY yarn.lock* ./

# Install all dependencies
RUN npm ci --legacy-peer-deps

# Copy source code
COPY . .

# Create development user directories
RUN mkdir -p /app/logs /app/tmp && \
    chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000
EXPOSE 9229

# Development command with hot reload
CMD ["npm", "run", "dev"]

# =====================================================
# TESTING STAGE
# =====================================================

FROM builder AS testing

# Install testing dependencies
RUN npm ci --legacy-peer-deps

# Copy test files
COPY __tests__/ ./__tests__/
COPY jest.config.js ./
COPY .eslintrc.js ./

# Run tests
RUN npm run test
RUN npm run lint
RUN npm run test:coverage

# =====================================================
# METADATA AND LABELS
# =====================================================

LABEL maintainer="HASIVU Platform Team <platform@hasivu.com>"
LABEL version="1.0.0"
LABEL description="HASIVU School Food Service Platform API"
LABEL project="hasivu-platform"
LABEL component="backend-api"

# Build information labels
LABEL build.date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
LABEL build.version="1.0.0"
LABEL build.stage="production"

# Security labels
LABEL security.scan="required"
LABEL security.non-root="true"
LABEL security.updates="auto"

# Compliance labels
LABEL compliance.gdpr="true"
LABEL compliance.hipaa="false"
LABEL compliance.sox="false"