service: hasivu-platform-api

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION, 'ap-south-1'}
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  
  environment:
    NODE_ENV: ${env:NODE_ENV, 'development'}
    DATABASE_URL: ${env:DATABASE_URL}
    REDIS_URL: ${env:REDIS_URL}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    AWS_REGION: ${env:AWS_REGION, 'ap-south-1'}
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - cognito-idp:*
        - secretsmanager:GetSecretValue
        - secretsmanager:DescribeSecret
        - s3:GetObject
        - s3:PutObject
        - s3:DeleteObject
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "*"
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

  httpApi:
    cors:
      allowedOrigins:
        - https://admin.hasivu.com
        - https://app.hasivu.com
        - ${env:FRONTEND_URL, 'http://localhost:3000'}
      allowedMethods: 
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
    
    authorizers:
      cognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        audienceUrls:
          - ${env:COGNITO_CLIENT_ID}
        issuerUrl: https://cognito-idp.${env:AWS_REGION, 'ap-south-1'}.amazonaws.com/${env:COGNITO_USER_POOL_ID}

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-prune-plugin

custom:
  prune:
    automatic: true
    number: 3
  
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    
package:
  exclude:
    - node_modules/**
    - src/**/*.test.ts
    - src/**/*.spec.ts
    - coverage/**
    - .git/**
    - docs/**
    - migration/**

functions:
  # Authentication Functions
  register:
    handler: src/functions/auth/register.registerHandler
    events:
      - httpApi:
          path: /auth/register
          method: post
    environment:
      FUNCTION_NAME: register
      
  login:
    handler: src/functions/auth/login.loginHandler
    events:
      - httpApi:
          path: /auth/login
          method: post
    environment:
      FUNCTION_NAME: login
      
  refreshToken:
    handler: src/functions/auth/refresh.refreshTokenHandler
    events:
      - httpApi:
          path: /auth/refresh
          method: post
    environment:
      FUNCTION_NAME: refresh-token
      
  getUserProfile:
    handler: src/functions/auth/profile.getUserProfileHandler
    events:
      - httpApi:
          path: /auth/me
          method: get
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: get-user-profile
      
  logout:
    handler: src/functions/auth/logout.logoutHandler
    events:
      - httpApi:
          path: /auth/logout
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: logout
      
  updateProfile:
    handler: src/functions/auth/update-profile.updateProfileHandler
    events:
      - httpApi:
          path: /auth/profile
          method: patch
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: update-profile
      
  changePassword:
    handler: src/functions/auth/change-password.changePasswordHandler
    events:
      - httpApi:
          path: /auth/change-password
          method: patch
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: change-password

  # Health Check Functions
  healthBasic:
    handler: src/functions/health/basic.healthBasicHandler
    events:
      - httpApi:
          path: /health
          method: get
    environment:
      FUNCTION_NAME: health-basic
      
  healthDetailed:
    handler: src/functions/health/detailed.healthDetailedHandler
    events:
      - httpApi:
          path: /health/detailed
          method: get
    environment:
      FUNCTION_NAME: health-detailed
      
  healthReady:
    handler: src/functions/health/ready.healthReadyHandler
    events:
      - httpApi:
          path: /health/ready
          method: get
    environment:
      FUNCTION_NAME: health-ready
      
  healthLive:
    handler: src/functions/health/live.healthLiveHandler
    events:
      - httpApi:
          path: /health/live
          method: get
    environment:
      FUNCTION_NAME: health-live

  # RFID Functions
  createRfidCard:
    handler: src/functions/rfid/create-card.createRfidCardHandler
    events:
      - httpApi:
          path: /rfid/cards
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: create-rfid-card
      
  verifyRfidCard:
    handler: src/functions/rfid/verify-card.verifyRfidCardHandler
    events:
      - httpApi:
          path: /rfid/verify
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: verify-rfid-card
      
  getRfidCard:
    handler: src/functions/rfid/get-card.getRfidCardHandler
    events:
      - httpApi:
          path: /rfid/cards/{cardNumber}
          method: get
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: get-rfid-card

  # Payment Functions
  createPaymentOrder:
    handler: src/functions/payment/create-order.createPaymentOrderHandler
    events:
      - httpApi:
          path: /payment/orders
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: create-payment-order
      
  verifyPayment:
    handler: src/functions/payment/verify.verifyPaymentHandler
    events:
      - httpApi:
          path: /payment/verify
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: verify-payment
      
  paymentWebhook:
    handler: src/functions/payment/webhook.paymentWebhookHandler
    events:
      - httpApi:
          path: /payment/webhook
          method: post
    environment:
      FUNCTION_NAME: payment-webhook

  # Notification Functions
  sendNotification:
    handler: src/functions/notification/send.sendNotificationHandler
    events:
      - httpApi:
          path: /notification/send
          method: post
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: send-notification
      
  getNotifications:
    handler: src/functions/notification/get-notifications.getNotificationsHandler
    events:
      - httpApi:
          path: /notification
          method: get
          authorizer: cognitoAuthorizer
    environment:
      FUNCTION_NAME: get-notifications
      
  whatsappWebhook:
    handler: src/functions/notification/whatsapp-webhook.whatsappWebhookHandler
    events:
      - httpApi:
          path: /notification/webhooks/whatsapp
          method: post
    environment:
      FUNCTION_NAME: whatsapp-webhook

resources:
  Resources:
    # Cognito User Pool
    HasivuUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: true
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: given_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: school_id
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: role
            AttributeDataType: String
            Required: false
            Mutable: true
            
    HasivuUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref HasivuUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        AccessTokenValidity: 1
        IdTokenValidity: 1
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
          RefreshToken: days
          
    # CloudWatch Log Groups
    AuthLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-auth
        RetentionInDays: 14
        
    HealthLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/lambda/${self:service}-${self:provider.stage}-health
        RetentionInDays: 14
        
    # Parameter Store for Configuration
    CognitoUserPoolIdParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:service}/${self:provider.stage}/cognito/user-pool-id
        Type: String
        Value: !Ref HasivuUserPool
        
    CognitoClientIdParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /${self:service}/${self:provider.stage}/cognito/client-id
        Type: String
        Value: !Ref HasivuUserPoolClient

  Outputs:
    ApiGatewayUrl:
      Description: API Gateway URL
      Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com"
      
    CognitoUserPoolId:
      Description: Cognito User Pool ID
      Value: !Ref HasivuUserPool
      
    CognitoClientId:
      Description: Cognito User Pool Client ID
      Value: !Ref HasivuUserPoolClient