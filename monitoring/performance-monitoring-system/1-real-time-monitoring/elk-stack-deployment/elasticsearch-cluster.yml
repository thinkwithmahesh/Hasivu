# HASIVU ELK Stack - Elasticsearch Cluster Configuration
# Centralized Logging and Analysis for Multi-School Platform
# High-availability cluster with tenant isolation

apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: hasivu-monitoring
data:
  elasticsearch.yml: |
    cluster.name: "hasivu-production-logs"
    node.name: "${HOSTNAME}"

    # Discovery and clustering
    discovery.seed_hosts:
      - elasticsearch-master-0.elasticsearch-master
      - elasticsearch-master-1.elasticsearch-master
      - elasticsearch-master-2.elasticsearch-master

    cluster.initial_master_nodes:
      - elasticsearch-master-0
      - elasticsearch-master-1
      - elasticsearch-master-2

    # Network settings
    network.host: 0.0.0.0
    http.port: 9200
    transport.port: 9300

    # Memory and performance settings
    bootstrap.memory_lock: true
    indices.memory.index_buffer_size: 20%
    indices.memory.min_index_buffer_size: 96mb

    # Security settings
    xpack.security.enabled: true
    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.verification_mode: certificate
    xpack.security.transport.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca.crt
    xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/certs/elasticsearch.crt
    xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/certs/elasticsearch.key

    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.certificate_authorities: /usr/share/elasticsearch/config/certs/ca.crt
    xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/certs/elasticsearch.crt
    xpack.security.http.ssl.key: /usr/share/elasticsearch/config/certs/elasticsearch.key

    # Multi-tenant index templates
    xpack.security.authc.realms.native.native1:
      order: 0

    # Performance optimizations
    thread_pool:
      write:
        size: 8
        queue_size: 1000
      search:
        size: 13
        queue_size: 1000

    # Index lifecycle management
    xpack.ilm.enabled: true

    # Machine learning features for anomaly detection
    xpack.ml.enabled: true

    # Watcher for alerting
    xpack.watcher.enabled: true

---
# Master nodes for cluster coordination
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-master
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: master
spec:
  serviceName: elasticsearch-master
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
      role: master
  template:
    metadata:
      labels:
        app: elasticsearch
        role: master
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - elasticsearch
              topologyKey: kubernetes.io/hostname
      initContainers:
        - name: configure-sysctl
          image: busybox:1.35
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
          securityContext:
            privileged: true
        - name: setup-certificates
          image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
          command:
            - sh
            - -c
            - |
              bin/elasticsearch-certutil ca --silent --pem -out /tmp/certs/ca.zip
              unzip /tmp/certs/ca.zip -d /tmp/certs
              bin/elasticsearch-certutil cert --silent --pem -out /tmp/certs/certs.zip --ca-cert /tmp/certs/ca/ca.crt --ca-key /tmp/certs/ca/ca.key --dns elasticsearch-master,elasticsearch-data,elasticsearch-client,localhost --ip 127.0.0.1
              unzip /tmp/certs/certs.zip -d /tmp/certs
              cp /tmp/certs/ca/ca.crt /usr/share/elasticsearch/config/certs/
              cp /tmp/certs/instance/* /usr/share/elasticsearch/config/certs/
              chown -R 1000:1000 /usr/share/elasticsearch/config/certs
          volumeMounts:
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
          env:
            - name: node.roles
              value: 'master'
            - name: ES_JAVA_OPTS
              value: '-Xms2g -Xmx2g'
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password
          resources:
            requests:
              memory: '4Gi'
              cpu: '1000m'
            limits:
              memory: '4Gi'
              cpu: '2000m'
          volumeMounts:
            - name: elasticsearch-config
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
            - name: data
              mountPath: /usr/share/elasticsearch/data
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health?local=true
              port: 9200
            initialDelaySeconds: 90
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health?wait_for_status=green&timeout=1s
              port: 9200
            initialDelaySeconds: 60
            periodSeconds: 5
      volumes:
        - name: elasticsearch-config
          configMap:
            name: elasticsearch-config
        - name: certs
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ['ReadWriteOnce']
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 100Gi

---
# Data nodes for storing and searching logs
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch-data
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: data
spec:
  serviceName: elasticsearch-data
  replicas: 6
  selector:
    matchLabels:
      app: elasticsearch
      role: data
  template:
    metadata:
      labels:
        app: elasticsearch
        role: data
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - elasticsearch
                topologyKey: kubernetes.io/hostname
      initContainers:
        - name: configure-sysctl
          image: busybox:1.35
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
          env:
            - name: node.roles
              value: 'data,ingest'
            - name: ES_JAVA_OPTS
              value: '-Xms8g -Xmx8g'
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password
          resources:
            requests:
              memory: '16Gi'
              cpu: '2000m'
            limits:
              memory: '16Gi'
              cpu: '4000m'
          volumeMounts:
            - name: elasticsearch-config
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
            - name: data
              mountPath: /usr/share/elasticsearch/data
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health?local=true
              port: 9200
            initialDelaySeconds: 90
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health?wait_for_status=yellow&timeout=1s
              port: 9200
            initialDelaySeconds: 60
            periodSeconds: 5
      volumes:
        - name: elasticsearch-config
          configMap:
            name: elasticsearch-config
        - name: certs
          secret:
            secretName: elasticsearch-certs
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ['ReadWriteOnce']
        storageClassName: fast-ssd
        resources:
          requests:
            storage: 500Gi

---
# Coordinating nodes for client requests
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-client
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: client
spec:
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
      role: client
  template:
    metadata:
      labels:
        app: elasticsearch
        role: client
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - elasticsearch
                    - key: role
                      operator: In
                      values:
                        - client
                topologyKey: kubernetes.io/hostname
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
          ports:
            - containerPort: 9200
              name: http
            - containerPort: 9300
              name: transport
          env:
            - name: node.roles
              value: ''
            - name: ES_JAVA_OPTS
              value: '-Xms4g -Xmx4g'
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password
          resources:
            requests:
              memory: '8Gi'
              cpu: '1000m'
            limits:
              memory: '8Gi'
              cpu: '2000m'
          volumeMounts:
            - name: elasticsearch-config
              mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
              subPath: elasticsearch.yml
            - name: certs
              mountPath: /usr/share/elasticsearch/config/certs
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health?local=true
              port: 9200
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              scheme: HTTPS
              path: /_cluster/health
              port: 9200
            initialDelaySeconds: 30
            periodSeconds: 5
      volumes:
        - name: elasticsearch-config
          configMap:
            name: elasticsearch-config
        - name: certs
          secret:
            secretName: elasticsearch-certs

---
# Services for Elasticsearch cluster
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-master
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: master
spec:
  clusterIP: None
  ports:
    - port: 9300
      name: transport
  selector:
    app: elasticsearch
    role: master

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-data
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: data
spec:
  clusterIP: None
  ports:
    - port: 9300
      name: transport
  selector:
    app: elasticsearch
    role: data

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-client
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
    role: client
spec:
  ports:
    - port: 9200
      name: http
      targetPort: 9200
    - port: 9300
      name: transport
      targetPort: 9300
  selector:
    app: elasticsearch
    role: client

---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: hasivu-monitoring
  labels:
    app: elasticsearch
spec:
  ports:
    - port: 9200
      name: http
      targetPort: 9200
  selector:
    app: elasticsearch
    role: client

---
# Index templates for multi-tenant logging
apiVersion: batch/v1
kind: Job
metadata:
  name: elasticsearch-setup
  namespace: hasivu-monitoring
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: setup
          image: curlimages/curl:8.1.0
          command:
            - /bin/sh
            - -c
            - |
              # Wait for Elasticsearch to be ready
              until curl -k -u elastic:${ELASTIC_PASSWORD} https://elasticsearch:9200/_cluster/health?wait_for_status=yellow&timeout=60s; do
                echo "Waiting for Elasticsearch..."
                sleep 10
              done

              # Create index template for HASIVU application logs
              curl -k -X PUT "https://elasticsearch:9200/_index_template/hasivu-application-logs" \
                -u elastic:${ELASTIC_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{
                  "index_patterns": ["hasivu-app-*"],
                  "priority": 100,
                  "template": {
                    "settings": {
                      "number_of_shards": 3,
                      "number_of_replicas": 1,
                      "index.lifecycle.name": "hasivu-log-policy",
                      "index.lifecycle.rollover_alias": "hasivu-app-logs"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": {"type": "date"},
                        "level": {"type": "keyword"},
                        "message": {"type": "text", "analyzer": "standard"},
                        "service": {"type": "keyword"},
                        "school_id": {"type": "keyword"},
                        "tenant_id": {"type": "keyword"},
                        "user_id": {"type": "keyword"},
                        "request_id": {"type": "keyword"},
                        "duration_ms": {"type": "integer"},
                        "response_code": {"type": "integer"},
                        "error": {
                          "properties": {
                            "type": {"type": "keyword"},
                            "message": {"type": "text"},
                            "stack": {"type": "text"}
                          }
                        },
                        "context": {"type": "object", "dynamic": true}
                      }
                    }
                  }
                }'

              # Create index template for HASIVU system logs
              curl -k -X PUT "https://elasticsearch:9200/_index_template/hasivu-system-logs" \
                -u elastic:${ELASTIC_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{
                  "index_patterns": ["hasivu-system-*"],
                  "priority": 100,
                  "template": {
                    "settings": {
                      "number_of_shards": 2,
                      "number_of_replicas": 1,
                      "index.lifecycle.name": "hasivu-system-log-policy"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": {"type": "date"},
                        "hostname": {"type": "keyword"},
                        "namespace": {"type": "keyword"},
                        "pod_name": {"type": "keyword"},
                        "container_name": {"type": "keyword"},
                        "log": {"type": "text"},
                        "stream": {"type": "keyword"},
                        "kubernetes": {"type": "object", "dynamic": true}
                      }
                    }
                  }
                }'

              # Create index template for HASIVU security logs
              curl -k -X PUT "https://elasticsearch:9200/_index_template/hasivu-security-logs" \
                -u elastic:${ELASTIC_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{
                  "index_patterns": ["hasivu-security-*"],
                  "priority": 100,
                  "template": {
                    "settings": {
                      "number_of_shards": 2,
                      "number_of_replicas": 2,
                      "index.lifecycle.name": "hasivu-security-log-policy"
                    },
                    "mappings": {
                      "properties": {
                        "@timestamp": {"type": "date"},
                        "event_type": {"type": "keyword"},
                        "severity": {"type": "keyword"},
                        "user_id": {"type": "keyword"},
                        "school_id": {"type": "keyword"},
                        "ip_address": {"type": "ip"},
                        "user_agent": {"type": "text"},
                        "action": {"type": "keyword"},
                        "resource": {"type": "keyword"},
                        "outcome": {"type": "keyword"},
                        "details": {"type": "object", "dynamic": true}
                      }
                    }
                  }
                }'

              # Create lifecycle policies
              curl -k -X PUT "https://elasticsearch:9200/_ilm/policy/hasivu-log-policy" \
                -u elastic:${ELASTIC_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{
                  "policy": {
                    "phases": {
                      "hot": {
                        "actions": {
                          "rollover": {
                            "max_size": "10GB",
                            "max_age": "1d"
                          }
                        }
                      },
                      "warm": {
                        "min_age": "7d",
                        "actions": {
                          "allocate": {
                            "number_of_replicas": 0
                          },
                          "forcemerge": {
                            "max_num_segments": 1
                          }
                        }
                      },
                      "cold": {
                        "min_age": "30d",
                        "actions": {
                          "allocate": {
                            "number_of_replicas": 0
                          }
                        }
                      },
                      "delete": {
                        "min_age": "90d"
                      }
                    }
                  }
                }'

              # Create security log policy (longer retention)
              curl -k -X PUT "https://elasticsearch:9200/_ilm/policy/hasivu-security-log-policy" \
                -u elastic:${ELASTIC_PASSWORD} \
                -H "Content-Type: application/json" \
                -d '{
                  "policy": {
                    "phases": {
                      "hot": {
                        "actions": {
                          "rollover": {
                            "max_size": "5GB",
                            "max_age": "1d"
                          }
                        }
                      },
                      "warm": {
                        "min_age": "30d",
                        "actions": {
                          "allocate": {
                            "number_of_replicas": 1
                          }
                        }
                      },
                      "cold": {
                        "min_age": "90d",
                        "actions": {
                          "allocate": {
                            "number_of_replicas": 0
                          }
                        }
                      },
                      "delete": {
                        "min_age": "365d"
                      }
                    }
                  }
                }'
          env:
            - name: ELASTIC_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: elasticsearch-credentials
                  key: elastic-password

---
# Secrets for Elasticsearch
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-credentials
  namespace: hasivu-monitoring
type: Opaque
data:
  elastic-password: SGFzaXZ1UHJvZDIwMjQhQA== # Base64 encoded password

---
# Network policy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: elasticsearch-network-policy
  namespace: hasivu-monitoring
spec:
  podSelector:
    matchLabels:
      app: elasticsearch
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: hasivu-monitoring
        - namespaceSelector:
            matchLabels:
              name: hasivu-production
      ports:
        - protocol: TCP
          port: 9200
        - protocol: TCP
          port: 9300
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: hasivu-monitoring
      ports:
        - protocol: TCP
          port: 9300
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
